"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/string.ts
var string_exports = {};
__export(string_exports, {
  abbreviate: () => abbreviate,
  capitalize: () => capitalize,
  isBytes: () => isBytes,
  isHex: () => isHex,
  isInteger: () => isInteger,
  split: () => split,
  toLowerCase: () => toLowerCase,
  toUpperCase: () => toUpperCase,
  truncateString: () => truncateString,
  uncapitalize: () => uncapitalize
});
module.exports = __toCommonJS(string_exports);
var toUpperCase = (str) => str.toUpperCase();
var toLowerCase = (str) => str.toLowerCase();
var isInteger = (string) => /^\d+$/.test(string);
var split = (str, delimiter) => str.split(delimiter);
var capitalize = (str) => `${str.charAt(0).toUpperCase()}${str.slice(1)}`;
var uncapitalize = (str) => `${str.charAt(0).toLowerCase()}${str.slice(1)}`;
var isHex = (str) => /^0x[\da-f]+$/i.test(str);
var isBytes = (str) => /^(0x)?[\da-f]*$/i.test(str) && str.length % 2 === 0;
var abbreviate = (text, showLength = 4, space = false) => {
  if (typeof text !== "string") return "";
  const leftPart = text.slice(0, showLength);
  const rightPart = text.slice(text.length - showLength);
  return [leftPart, rightPart].join(space ? ". . ." : "\u2026");
};
var truncateString = (string, numCharacters = 20, ellipsis = true) => {
  if (string.length < numCharacters) return string;
  let slicedString = string.slice(0, numCharacters);
  if (ellipsis) {
    slicedString += "...";
  }
  return slicedString;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  abbreviate,
  capitalize,
  isBytes,
  isHex,
  isInteger,
  split,
  toLowerCase,
  toUpperCase,
  truncateString,
  uncapitalize
});
