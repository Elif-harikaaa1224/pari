"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/chainflip.ts
var chainflip_exports = {};
__export(chainflip_exports, {
  addressTypes: () => addressTypes,
  assetConstants: () => assetConstants,
  assetContractId: () => assetContractId,
  assetSymbols: () => assetSymbols,
  baseChainflipAssets: () => baseChainflipAssets,
  chainConstants: () => chainConstants,
  chainContractId: () => chainContractId,
  chainflipAssetToPriceAssetMap: () => chainflipAssetToPriceAssetMap,
  chainflipAssets: () => chainflipAssets,
  chainflipChains: () => chainflipChains,
  chainflipEvmChains: () => chainflipEvmChains,
  chainflipNetworks: () => chainflipNetworks,
  getInternalAsset: () => getInternalAsset,
  getInternalAssets: () => getInternalAssets,
  internalAssetToRpcAsset: () => internalAssetToRpcAsset,
  isValidAssetAndChain: () => isValidAssetAndChain,
  priceAssets: () => priceAssets,
  readAssetValue: () => readAssetValue,
  rpcAssets: () => rpcAssets
});
module.exports = __toCommonJS(chainflip_exports);
var chainflipAssets = [
  // Ethereum
  "Usdc",
  "Usdt",
  "Flip",
  "Eth",
  // Polkadot
  "Dot",
  // Bitcoin
  "Btc",
  // Arbitrum
  "ArbUsdc",
  "ArbEth",
  // Solana
  "Sol",
  "SolUsdc",
  // Assethub
  "HubDot",
  "HubUsdt",
  "HubUsdc"
];
var assetSymbols = ["USDC", "USDT", "FLIP", "DOT", "ETH", "BTC", "SOL"];
var priceAssets = ["Btc", "Eth", "Sol", "Usdc", "Usdt", "Usd"];
var rpcAssets = assetSymbols;
var baseChainflipAssets = chainflipAssets.filter(
  (asset) => asset !== "Usdc"
);
var chainflipEvmChains = ["Ethereum", "Arbitrum"];
var chainflipChains = [
  ...chainflipEvmChains,
  "Bitcoin",
  "Polkadot",
  "Solana",
  "Assethub"
];
var chainflipNetworks = ["backspin", "sisyphos", "perseverance", "mainnet"];
var addressTypes = ["Eth", "Btc", "Dot", "Arb", "Sol", "Hub"];
function readAssetValue(map, asset) {
  const chainValues = map[assetConstants[asset].chain];
  return chainValues[assetConstants[asset].symbol];
}
var assetConstants = {
  Eth: {
    chain: "Ethereum",
    symbol: "ETH",
    rpcAsset: "ETH",
    decimals: 18
  },
  Flip: {
    chain: "Ethereum",
    symbol: "FLIP",
    rpcAsset: "FLIP",
    decimals: 18
  },
  Usdc: {
    chain: "Ethereum",
    symbol: "USDC",
    rpcAsset: "USDC",
    decimals: 6
  },
  Usdt: {
    chain: "Ethereum",
    symbol: "USDT",
    rpcAsset: "USDT",
    decimals: 6
  },
  Dot: {
    chain: "Polkadot",
    symbol: "DOT",
    rpcAsset: "DOT",
    decimals: 10
  },
  Btc: {
    chain: "Bitcoin",
    symbol: "BTC",
    rpcAsset: "BTC",
    decimals: 8
  },
  ArbUsdc: {
    chain: "Arbitrum",
    symbol: "USDC",
    rpcAsset: "USDC",
    decimals: 6
  },
  ArbEth: {
    chain: "Arbitrum",
    symbol: "ETH",
    rpcAsset: "ETH",
    decimals: 18
  },
  Sol: {
    chain: "Solana",
    symbol: "SOL",
    rpcAsset: "SOL",
    decimals: 9
  },
  SolUsdc: {
    chain: "Solana",
    symbol: "USDC",
    rpcAsset: "USDC",
    decimals: 6
  },
  HubDot: {
    chain: "Assethub",
    symbol: "DOT",
    rpcAsset: "DOT",
    decimals: 10
  },
  HubUsdc: {
    chain: "Assethub",
    symbol: "USDC",
    rpcAsset: "USDC",
    decimals: 6
  },
  HubUsdt: {
    chain: "Assethub",
    symbol: "USDT",
    rpcAsset: "USDT",
    decimals: 6
  }
};
var chainConstants = {
  Ethereum: {
    chainflipAssets: ["Eth", "Flip", "Usdc", "Usdt"],
    assets: ["ETH", "FLIP", "USDC", "USDT"],
    rpcAssets: ["ETH", "FLIP", "USDC", "USDT"],
    gasAsset: "Eth",
    addressType: "Eth",
    blockTimeSeconds: 12
  },
  Polkadot: {
    chainflipAssets: ["Dot"],
    assets: ["DOT"],
    rpcAssets: ["DOT"],
    gasAsset: "Dot",
    addressType: "Dot",
    blockTimeSeconds: 6
  },
  Bitcoin: {
    chainflipAssets: ["Btc"],
    assets: ["BTC"],
    rpcAssets: ["BTC"],
    gasAsset: "Btc",
    addressType: "Btc",
    blockTimeSeconds: 10 * 60
  },
  Arbitrum: {
    chainflipAssets: ["ArbUsdc", "ArbEth"],
    assets: ["USDC", "ETH"],
    rpcAssets: ["USDC", "ETH"],
    gasAsset: "ArbEth",
    addressType: "Arb",
    blockTimeSeconds: 0.26
  },
  Solana: {
    chainflipAssets: ["Sol", "SolUsdc"],
    assets: ["SOL", "USDC"],
    rpcAssets: ["SOL", "USDC"],
    gasAsset: "Sol",
    addressType: "Sol",
    blockTimeSeconds: 0.8
  },
  Assethub: {
    chainflipAssets: ["HubDot", "HubUsdt", "HubUsdc"],
    assets: ["DOT", "USDT", "USDC"],
    rpcAssets: ["DOT", "USDT", "USDC"],
    gasAsset: "HubDot",
    addressType: "Hub",
    blockTimeSeconds: 12
  }
};
var internalAssetToRpcAsset = {
  Eth: { chain: "Ethereum", asset: "ETH" },
  Flip: { chain: "Ethereum", asset: "FLIP" },
  Usdc: { chain: "Ethereum", asset: "USDC" },
  Usdt: { chain: "Ethereum", asset: "USDT" },
  Btc: { chain: "Bitcoin", asset: "BTC" },
  ArbUsdc: { chain: "Arbitrum", asset: "USDC" },
  ArbEth: { chain: "Arbitrum", asset: "ETH" },
  Sol: { chain: "Solana", asset: "SOL" },
  SolUsdc: { chain: "Solana", asset: "USDC" },
  HubDot: { chain: "Assethub", asset: "DOT" },
  HubUsdt: { chain: "Assethub", asset: "USDT" },
  HubUsdc: { chain: "Assethub", asset: "USDC" }
};
var chainContractId = {
  Ethereum: 1,
  Polkadot: 2,
  Bitcoin: 3,
  Arbitrum: 4,
  Solana: 5,
  Assethub: 6
};
var assetContractId = {
  Eth: 1,
  Flip: 2,
  Usdc: 3,
  Dot: 4,
  Usdt: 8,
  Btc: 5,
  ArbEth: 6,
  ArbUsdc: 7,
  Sol: 9,
  SolUsdc: 10,
  HubDot: 11,
  HubUsdt: 12,
  HubUsdc: 13
};
function getInternalAsset(asset, assert = true) {
  const map = {
    Ethereum: {
      USDC: "Usdc",
      FLIP: "Flip",
      ETH: "Eth",
      USDT: "Usdt"
    },
    Bitcoin: {
      BTC: "Btc"
    },
    Arbitrum: {
      USDC: "ArbUsdc",
      ETH: "ArbEth"
    },
    Solana: {
      SOL: "Sol",
      USDC: "SolUsdc"
    },
    Assethub: {
      USDC: "HubUsdc",
      USDT: "HubUsdt",
      DOT: "HubDot"
    }
  };
  const chain = map[asset.chain];
  const internalAsset = chain?.[asset.asset];
  if (internalAsset) return internalAsset;
  if (assert) throw new Error(`invalid asset and chain combination: ${JSON.stringify(asset)}`);
  return null;
}
function isValidAssetAndChain(assetAndChain) {
  const asset = getInternalAsset(assetAndChain, false);
  return asset !== null;
}
function getInternalAssets({
  srcAsset,
  srcChain,
  destAsset,
  destChain
}, assert = true) {
  return {
    srcAsset: getInternalAsset({ asset: srcAsset, chain: srcChain }, assert),
    destAsset: getInternalAsset({ asset: destAsset, chain: destChain }, assert)
  };
}
var chainflipAssetToPriceAssetMap = {
  Btc: "Btc",
  Sol: "Sol",
  Eth: "Eth",
  ArbEth: "Eth",
  Usdc: "Usdc",
  ArbUsdc: "Usdc",
  SolUsdc: "Usdc",
  HubUsdc: "Usdc",
  Usdt: "Usdt",
  HubUsdt: "Usdt",
  Dot: null,
  Flip: null,
  HubDot: null
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addressTypes,
  assetConstants,
  assetContractId,
  assetSymbols,
  baseChainflipAssets,
  chainConstants,
  chainContractId,
  chainflipAssetToPriceAssetMap,
  chainflipAssets,
  chainflipChains,
  chainflipEvmChains,
  chainflipNetworks,
  getInternalAsset,
  getInternalAssets,
  internalAssetToRpcAsset,
  isValidAssetAndChain,
  priceAssets,
  readAssetValue,
  rpcAssets
});
