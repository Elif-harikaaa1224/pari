import { DeferredPromise } from '@chainflip/utils/async';
import { RpcMethod, JsonRpcRequest, RpcResult, JsonRpcResponse, RpcRequest } from './common.js';
import '@chainflip/utils/chainflip';
import '@chainflip/utils/types';
import 'zod';
import './parsers.js';

type Response = {
    success: true;
    id: string;
    result: JsonRpcResponse;
} | {
    success: false;
    id: string;
    error: Error;
};
type RequestMap = Map<string, {
    deferred: DeferredPromise<RpcResult<RpcMethod>>;
    body: JsonRpcRequest<RpcMethod>;
    method: RpcMethod;
}>;
type ClientOpts = {
    archiveNodeUrl?: string;
};
declare abstract class Client {
    protected readonly url: string;
    private lastRequestId;
    private timer;
    private requestMap;
    private readonly archiveNodeUrl?;
    readonly eventTarget: EventTarget;
    constructor(url: string, opts?: ClientOpts);
    protected abstract send<const T extends RpcMethod>(data: JsonRpcRequest<T>[], clonedMap: RequestMap): Promise<void>;
    private getRequestId;
    private formatRequest;
    protected handleResponse(response: Response, clonedMap: RequestMap): void;
    protected handleErrorResponse(error: Error, clonedMap: RequestMap): void;
    private handleBatch;
    sendRequest<const T extends RpcMethod>(method: T, ...params: RpcRequest[T]): Promise<RpcResult<T>>;
    methods(): RpcMethod[];
}

export { type ClientOpts, type RequestMap, type Response, Client as default };
