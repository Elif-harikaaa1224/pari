import { HexString } from '@chainflip/utils/types';
import { Codec } from 'scale-ts';

declare const vaultCcmCfParametersCodec: <T>(refundAddressCodec: Codec<T>) => Codec<{
    tag: "V0";
    value: {
        ccmAdditionalData: Uint8Array<ArrayBufferLike>;
        vaultSwapParameters: {
            refundParams: {
                retryDurationBlocks: number;
                refundAddress: T;
                minPriceX128: bigint;
            };
            dcaParams: {
                numberOfChunks: number;
                chunkIntervalBlocks: number;
            } | undefined;
            boostFee: number;
            brokerFees: {
                account: Uint8Array<ArrayBufferLike>;
                commissionBps: number;
            };
            affiliateFees: {
                account: number;
                commissionBps: number;
            }[];
        };
    };
} | {
    tag: "V1";
    value: {
        ccmAdditionalData: Uint8Array<ArrayBufferLike>;
        vaultSwapParameters: {
            refundParams: {
                retryDurationBlocks: number;
                refundAddress: T;
                minPriceX128: bigint;
                refundCcmMetadata: {
                    channelMetadata: {
                        message: Uint8Array<ArrayBufferLike>;
                        gasBudget: bigint;
                        additionalData: Uint8Array<ArrayBufferLike>;
                    };
                } | undefined;
                maxOraclePriceSlippage: number | undefined;
            };
            dcaParams: {
                numberOfChunks: number;
                chunkIntervalBlocks: number;
            } | undefined;
            boostFee: number;
            brokerFees: {
                account: Uint8Array<ArrayBufferLike>;
                commissionBps: number;
            };
            affiliateFees: {
                account: number;
                commissionBps: number;
            }[];
        };
    };
}>;
declare const vaultCfParametersCodec: <T>(refundAddressCodec: Codec<T>) => Codec<{
    tag: "V0";
    value: {
        vaultSwapParameters: {
            refundParams: {
                retryDurationBlocks: number;
                refundAddress: T;
                minPriceX128: bigint;
            };
            dcaParams: {
                numberOfChunks: number;
                chunkIntervalBlocks: number;
            } | undefined;
            boostFee: number;
            brokerFees: {
                account: Uint8Array<ArrayBufferLike>;
                commissionBps: number;
            };
            affiliateFees: {
                account: number;
                commissionBps: number;
            }[];
        };
    };
} | {
    tag: "V1";
    value: {
        vaultSwapParameters: {
            refundParams: {
                retryDurationBlocks: number;
                refundAddress: T;
                minPriceX128: bigint;
                refundCcmMetadata: {
                    channelMetadata: {
                        message: Uint8Array<ArrayBufferLike>;
                        gasBudget: bigint;
                        additionalData: Uint8Array<ArrayBufferLike>;
                    };
                } | undefined;
                maxOraclePriceSlippage: number | undefined;
            };
            dcaParams: {
                numberOfChunks: number;
                chunkIntervalBlocks: number;
            } | undefined;
            boostFee: number;
            brokerFees: {
                account: Uint8Array<ArrayBufferLike>;
                commissionBps: number;
            };
            affiliateFees: {
                account: number;
                commissionBps: number;
            }[];
        };
    };
}>;
declare const solVersionedCcmAdditionalDataCodec: Codec<{
    tag: "V0";
    value: {
        cf_receiver: {
            pubkey: Uint8Array<ArrayBufferLike>;
            is_writable: boolean;
        };
        additional_accounts: {
            pubkey: Uint8Array<ArrayBufferLike>;
            is_writable: boolean;
        }[];
        fallback_address: Uint8Array<ArrayBufferLike>;
    };
} | {
    tag: "V1";
    value: {
        ccmAccounts: {
            cf_receiver: {
                pubkey: Uint8Array<ArrayBufferLike>;
                is_writable: boolean;
            };
            additional_accounts: {
                pubkey: Uint8Array<ArrayBufferLike>;
                is_writable: boolean;
            }[];
            fallback_address: Uint8Array<ArrayBufferLike>;
        };
        alts: Uint8Array<ArrayBufferLike>[];
    };
}>;
type SolanaCcmAdditionalData = {
    fallbackAddress: string;
    cfReceiver: {
        pubkey: string;
        isWritable: boolean;
    };
    additionalAccounts: {
        pubkey: string;
        isWritable: boolean;
    }[];
};
declare const decodeSolanaAdditionalData: (data: Uint8Array) => `0x${string}` | SolanaCcmAdditionalData;
type DecodedParams<Address, CcmAdditionalData> = {
    ccmAdditionalData: CcmAdditionalData | null;
    refundParams: {
        retryDurationBlocks: number;
        refundAddress: Address;
        minPriceX128: string;
        maxOraclePriceSlippage: number | null;
        refundCcmMetadata: {
            message: `0x${string}`;
            gasBudget: bigint;
            additionalData: CcmAdditionalData;
        } | null;
    };
    dcaParams: {
        numberOfChunks: number;
        chunkIntervalBlocks: number;
    } | null;
    boostFee: number;
    brokerFees: {
        account: string;
        commissionBps: number;
    };
    affiliateFees: {
        account: number;
        commissionBps: number;
    }[];
};
type Result<T, E> = {
    ok: true;
    value: T;
    reason?: undefined;
} | {
    ok: false;
    value?: undefined;
    reason: E;
};
declare function createVaultParamsDecoder<T, U>(refundAddressCodec: Codec<T>, encodeAddress: (value: T) => U): (data: Uint8Array) => Result<DecodedParams<U, HexString | null>, Error[]>;
declare function createVaultParamsDecoder<T, U, V>(refundAddressCodec: Codec<T>, encodeAddress: (value: T) => U, decodeAdditionalData: (data: Uint8Array) => V): (data: Uint8Array) => Result<DecodedParams<U, V | null>, Error[]>;

export { type SolanaCcmAdditionalData, createVaultParamsDecoder, decodeSolanaAdditionalData, solVersionedCcmAdditionalDataCodec, vaultCcmCfParametersCodec, vaultCfParametersCodec };
