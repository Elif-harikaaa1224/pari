declare const chainflipAssets: readonly ["Usdc", "Usdt", "Flip", "Eth", "Dot", "Btc", "ArbUsdc", "ArbEth", "Sol", "SolUsdc", "HubDot", "HubUsdt", "HubUsdc"];
type ChainflipAsset = (typeof chainflipAssets)[number];
declare const assetSymbols: readonly ["USDC", "USDT", "FLIP", "DOT", "ETH", "BTC", "SOL"];
declare const priceAssets: readonly ["Btc", "Eth", "Sol", "Usdc", "Usdt", "Usd"];
type PriceAsset = (typeof priceAssets)[number];
/** @deprecated use `assetSymbols` instead */
declare const rpcAssets: readonly ["USDC", "USDT", "FLIP", "DOT", "ETH", "BTC", "SOL"];
type AssetSymbol = (typeof assetSymbols)[number];
/** @deprecated use `AssetSymbol` instead */
type RpcAsset = AssetSymbol;
type BaseChainflipAsset = Exclude<ChainflipAsset, 'Usdc'>;
declare const baseChainflipAssets: BaseChainflipAsset[];
declare const chainflipEvmChains: readonly ["Ethereum", "Arbitrum"];
type ChainflipEvmChain = (typeof chainflipEvmChains)[number];
declare const chainflipChains: readonly ["Ethereum", "Arbitrum", "Bitcoin", "Polkadot", "Solana", "Assethub"];
type ChainflipChain = (typeof chainflipChains)[number];
declare const chainflipNetworks: readonly ["backspin", "sisyphos", "perseverance", "mainnet"];
type ChainflipNetwork = (typeof chainflipNetworks)[number];
declare const addressTypes: readonly ["Eth", "Btc", "Dot", "Arb", "Sol", "Hub"];
type AddressType = (typeof addressTypes)[number];
type AssetOfChain<C extends ChainflipChain> = (typeof chainConstants)[C]['assets'][number];
type ChainAssetMap<T> = {
    [C in ChainflipChain]: {
        [A in AssetOfChain<C>]: T;
    };
};
type BaseChainAssetMap<T> = {
    [C in ChainflipChain]: {
        [A in BaseChainflipAsset as Extract<(typeof assetConstants)[A], {
            chain: C;
        }>['symbol']]: T;
    };
};
type AssetAndChain = {
    [C in ChainflipChain]: {
        [A in keyof ChainAssetMap<unknown>[C]]: {
            chain: C;
            asset: A;
        };
    }[keyof ChainAssetMap<unknown>[C]];
}[ChainflipChain];
type BaseAssetAndChain = Exclude<AssetAndChain, {
    chain: 'Ethereum';
    asset: 'USDC';
}>;
type ChainMap<T> = {
    [C in ChainflipChain]: T;
};
type InternalAssetMap<T> = {
    [A in ChainflipAsset]: T;
};
type UncheckedAssetAndChain = {
    chain: ChainflipChain;
    asset: AssetSymbol;
};
declare function readAssetValue<T>(map: ChainAssetMap<T>, asset: ChainflipAsset | BaseChainflipAsset): T;
declare function readAssetValue<T>(map: BaseChainAssetMap<T>, asset: BaseChainflipAsset): T;
declare function readAssetValue<T>(map: ChainAssetMap<T> | BaseChainAssetMap<T>, asset: BaseChainflipAsset): T;
declare const assetConstants: {
    readonly Eth: {
        readonly chain: "Ethereum";
        readonly symbol: "ETH";
        readonly rpcAsset: "ETH";
        readonly decimals: 18;
    };
    readonly Flip: {
        readonly chain: "Ethereum";
        readonly symbol: "FLIP";
        readonly rpcAsset: "FLIP";
        readonly decimals: 18;
    };
    readonly Usdc: {
        readonly chain: "Ethereum";
        readonly symbol: "USDC";
        readonly rpcAsset: "USDC";
        readonly decimals: 6;
    };
    readonly Usdt: {
        readonly chain: "Ethereum";
        readonly symbol: "USDT";
        readonly rpcAsset: "USDT";
        readonly decimals: 6;
    };
    readonly Dot: {
        readonly chain: "Polkadot";
        readonly symbol: "DOT";
        readonly rpcAsset: "DOT";
        readonly decimals: 10;
    };
    readonly Btc: {
        readonly chain: "Bitcoin";
        readonly symbol: "BTC";
        readonly rpcAsset: "BTC";
        readonly decimals: 8;
    };
    readonly ArbUsdc: {
        readonly chain: "Arbitrum";
        readonly symbol: "USDC";
        readonly rpcAsset: "USDC";
        readonly decimals: 6;
    };
    readonly ArbEth: {
        readonly chain: "Arbitrum";
        readonly symbol: "ETH";
        readonly rpcAsset: "ETH";
        readonly decimals: 18;
    };
    readonly Sol: {
        readonly chain: "Solana";
        readonly symbol: "SOL";
        readonly rpcAsset: "SOL";
        readonly decimals: 9;
    };
    readonly SolUsdc: {
        readonly chain: "Solana";
        readonly symbol: "USDC";
        readonly rpcAsset: "USDC";
        readonly decimals: 6;
    };
    readonly HubDot: {
        readonly chain: "Assethub";
        readonly symbol: "DOT";
        readonly rpcAsset: "DOT";
        readonly decimals: 10;
    };
    readonly HubUsdc: {
        readonly chain: "Assethub";
        readonly symbol: "USDC";
        readonly rpcAsset: "USDC";
        readonly decimals: 6;
    };
    readonly HubUsdt: {
        readonly chain: "Assethub";
        readonly symbol: "USDT";
        readonly rpcAsset: "USDT";
        readonly decimals: 6;
    };
};
declare const chainConstants: {
    readonly Ethereum: {
        readonly chainflipAssets: ["Eth", "Flip", "Usdc", "Usdt"];
        readonly assets: ["ETH", "FLIP", "USDC", "USDT"];
        readonly rpcAssets: ["ETH", "FLIP", "USDC", "USDT"];
        readonly gasAsset: "Eth";
        readonly addressType: "Eth";
        readonly blockTimeSeconds: 12;
    };
    readonly Polkadot: {
        readonly chainflipAssets: ["Dot"];
        readonly assets: ["DOT"];
        readonly rpcAssets: ["DOT"];
        readonly gasAsset: "Dot";
        readonly addressType: "Dot";
        readonly blockTimeSeconds: 6;
    };
    readonly Bitcoin: {
        readonly chainflipAssets: ["Btc"];
        readonly assets: ["BTC"];
        readonly rpcAssets: ["BTC"];
        readonly gasAsset: "Btc";
        readonly addressType: "Btc";
        readonly blockTimeSeconds: number;
    };
    readonly Arbitrum: {
        readonly chainflipAssets: ["ArbUsdc", "ArbEth"];
        readonly assets: ["USDC", "ETH"];
        readonly rpcAssets: ["USDC", "ETH"];
        readonly gasAsset: "ArbEth";
        readonly addressType: "Arb";
        readonly blockTimeSeconds: 0.26;
    };
    readonly Solana: {
        readonly chainflipAssets: ["Sol", "SolUsdc"];
        readonly assets: ["SOL", "USDC"];
        readonly rpcAssets: ["SOL", "USDC"];
        readonly gasAsset: "Sol";
        readonly addressType: "Sol";
        readonly blockTimeSeconds: 0.8;
    };
    readonly Assethub: {
        readonly chainflipAssets: ["HubDot", "HubUsdt", "HubUsdc"];
        readonly assets: ["DOT", "USDT", "USDC"];
        readonly rpcAssets: ["DOT", "USDT", "USDC"];
        readonly gasAsset: "HubDot";
        readonly addressType: "Hub";
        readonly blockTimeSeconds: 12;
    };
};
declare const internalAssetToRpcAsset: InternalAssetMap<AssetAndChain>;
declare const chainContractId: ChainMap<number>;
declare const assetContractId: InternalAssetMap<number>;
declare function getInternalAsset(asset: BaseAssetAndChain): BaseChainflipAsset;
declare function getInternalAsset(asset: AssetAndChain): ChainflipAsset;
declare function getInternalAsset(asset: UncheckedAssetAndChain): ChainflipAsset;
declare function getInternalAsset(asset: UncheckedAssetAndChain, assert: true): ChainflipAsset;
declare function getInternalAsset(asset: UncheckedAssetAndChain, assert: boolean): ChainflipAsset | null;
declare function isValidAssetAndChain(assetAndChain: UncheckedAssetAndChain): assetAndChain is AssetAndChain;
declare function getInternalAssets(data: {
    srcAsset: AssetSymbol;
    srcChain: ChainflipChain;
    destAsset: AssetSymbol;
    destChain: ChainflipChain;
}): {
    srcAsset: ChainflipAsset;
    destAsset: ChainflipAsset;
};
declare function getInternalAssets(data: {
    srcAsset: AssetSymbol;
    srcChain: ChainflipChain;
    destAsset: AssetSymbol;
    destChain: ChainflipChain;
}, assert: true): {
    srcAsset: ChainflipAsset;
    destAsset: ChainflipAsset;
};
declare function getInternalAssets(data: {
    srcAsset: AssetSymbol;
    srcChain: ChainflipChain;
    destAsset: AssetSymbol;
    destChain: ChainflipChain;
}, assert: boolean): {
    srcAsset: ChainflipAsset | null;
    destAsset: ChainflipAsset | null;
};
declare const chainflipAssetToPriceAssetMap: Record<ChainflipAsset, Exclude<PriceAsset, 'Usd'> | null>;

export { type AddressType, type AssetAndChain, type AssetOfChain, type AssetSymbol, type BaseAssetAndChain, type BaseChainAssetMap, type BaseChainflipAsset, type ChainAssetMap, type ChainMap, type ChainflipAsset, type ChainflipChain, type ChainflipEvmChain, type ChainflipNetwork, type InternalAssetMap, type PriceAsset, type RpcAsset, type UncheckedAssetAndChain, addressTypes, assetConstants, assetContractId, assetSymbols, baseChainflipAssets, chainConstants, chainContractId, chainflipAssetToPriceAssetMap, chainflipAssets, chainflipChains, chainflipEvmChains, chainflipNetworks, getInternalAsset, getInternalAssets, internalAssetToRpcAsset, isValidAssetAndChain, priceAssets, readAssetValue, rpcAssets };
