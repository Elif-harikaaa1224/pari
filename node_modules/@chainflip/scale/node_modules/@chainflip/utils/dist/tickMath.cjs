"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tickMath.ts
var tickMath_exports = {};
__export(tickMath_exports, {
  FULL_TICK_RANGE: () => FULL_TICK_RANGE,
  MAX_TICK: () => MAX_TICK,
  MIN_TICK: () => MIN_TICK,
  priceX128ToPrice: () => priceX128ToPrice,
  rateToTick: () => rateToTick,
  sqrtPriceX96ToPrice: () => sqrtPriceX96ToPrice,
  tickToRate: () => tickToRate
});
module.exports = __toCommonJS(tickMath_exports);
var import_bignumber = __toESM(require("bignumber.js"), 1);

// src/chainflip.ts
var chainflipAssets = [
  // Ethereum
  "Usdc",
  "Usdt",
  "Flip",
  "Eth",
  // Polkadot
  "Dot",
  // Bitcoin
  "Btc",
  // Arbitrum
  "ArbUsdc",
  "ArbEth",
  // Solana
  "Sol",
  "SolUsdc",
  // Assethub
  "HubDot",
  "HubUsdt",
  "HubUsdc"
];
var baseChainflipAssets = chainflipAssets.filter(
  (asset) => asset !== "Usdc"
);
var chainflipEvmChains = ["Ethereum", "Arbitrum"];
var chainflipChains = [
  ...chainflipEvmChains,
  "Bitcoin",
  "Polkadot",
  "Solana",
  "Assethub"
];
var assetConstants = {
  Eth: {
    chain: "Ethereum",
    symbol: "ETH",
    rpcAsset: "ETH",
    decimals: 18
  },
  Flip: {
    chain: "Ethereum",
    symbol: "FLIP",
    rpcAsset: "FLIP",
    decimals: 18
  },
  Usdc: {
    chain: "Ethereum",
    symbol: "USDC",
    rpcAsset: "USDC",
    decimals: 6
  },
  Usdt: {
    chain: "Ethereum",
    symbol: "USDT",
    rpcAsset: "USDT",
    decimals: 6
  },
  Dot: {
    chain: "Polkadot",
    symbol: "DOT",
    rpcAsset: "DOT",
    decimals: 10
  },
  Btc: {
    chain: "Bitcoin",
    symbol: "BTC",
    rpcAsset: "BTC",
    decimals: 8
  },
  ArbUsdc: {
    chain: "Arbitrum",
    symbol: "USDC",
    rpcAsset: "USDC",
    decimals: 6
  },
  ArbEth: {
    chain: "Arbitrum",
    symbol: "ETH",
    rpcAsset: "ETH",
    decimals: 18
  },
  Sol: {
    chain: "Solana",
    symbol: "SOL",
    rpcAsset: "SOL",
    decimals: 9
  },
  SolUsdc: {
    chain: "Solana",
    symbol: "USDC",
    rpcAsset: "USDC",
    decimals: 6
  },
  HubDot: {
    chain: "Assethub",
    symbol: "DOT",
    rpcAsset: "DOT",
    decimals: 10
  },
  HubUsdc: {
    chain: "Assethub",
    symbol: "USDC",
    rpcAsset: "USDC",
    decimals: 6
  },
  HubUsdt: {
    chain: "Assethub",
    symbol: "USDT",
    rpcAsset: "USDT",
    decimals: 6
  }
};
var chainConstants = {
  Ethereum: {
    chainflipAssets: ["Eth", "Flip", "Usdc", "Usdt"],
    assets: ["ETH", "FLIP", "USDC", "USDT"],
    rpcAssets: ["ETH", "FLIP", "USDC", "USDT"],
    gasAsset: "Eth",
    addressType: "Eth",
    blockTimeSeconds: 12
  },
  Polkadot: {
    chainflipAssets: ["Dot"],
    assets: ["DOT"],
    rpcAssets: ["DOT"],
    gasAsset: "Dot",
    addressType: "Dot",
    blockTimeSeconds: 6
  },
  Bitcoin: {
    chainflipAssets: ["Btc"],
    assets: ["BTC"],
    rpcAssets: ["BTC"],
    gasAsset: "Btc",
    addressType: "Btc",
    blockTimeSeconds: 10 * 60
  },
  Arbitrum: {
    chainflipAssets: ["ArbUsdc", "ArbEth"],
    assets: ["USDC", "ETH"],
    rpcAssets: ["USDC", "ETH"],
    gasAsset: "ArbEth",
    addressType: "Arb",
    blockTimeSeconds: 0.26
  },
  Solana: {
    chainflipAssets: ["Sol", "SolUsdc"],
    assets: ["SOL", "USDC"],
    rpcAssets: ["SOL", "USDC"],
    gasAsset: "Sol",
    addressType: "Sol",
    blockTimeSeconds: 0.8
  },
  Assethub: {
    chainflipAssets: ["HubDot", "HubUsdt", "HubUsdc"],
    assets: ["DOT", "USDT", "USDC"],
    rpcAssets: ["DOT", "USDT", "USDC"],
    gasAsset: "HubDot",
    addressType: "Hub",
    blockTimeSeconds: 12
  }
};

// src/tickMath.ts
var MIN_TICK = -887272;
var MAX_TICK = -MIN_TICK;
var FULL_TICK_RANGE = { start: MIN_TICK, end: MAX_TICK };
var tickToRate = (tick, baseAsset) => {
  const baseRate = new import_bignumber.default(1.0001 ** tick);
  const rateDecimals = assetConstants.Usdc.decimals - assetConstants[baseAsset].decimals;
  return baseRate.shiftedBy(-rateDecimals).toNumber();
};
var rateToTick = (rate, baseAsset) => {
  const rateDecimals = assetConstants.Usdc.decimals - assetConstants[baseAsset].decimals;
  const rawRate = new import_bignumber.default(rate).shiftedBy(rateDecimals);
  let tick = Math.log(rawRate.toNumber()) / Math.log(1.0001);
  tick = Math.round(tick * 1e6) / 1e6;
  tick = Math.floor(tick);
  return Math.max(MIN_TICK, Math.min(tick, MAX_TICK));
};
var sqrtPriceX96ToPrice = (amount) => new import_bignumber.default(amount).div(new import_bignumber.default(2).pow(96)).pow(2);
var priceX128ToPrice = (amount) => new import_bignumber.default(amount).div(new import_bignumber.default(2).pow(128));
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FULL_TICK_RANGE,
  MAX_TICK,
  MIN_TICK,
  priceX128ToPrice,
  rateToTick,
  sqrtPriceX96ToPrice,
  tickToRate
});
