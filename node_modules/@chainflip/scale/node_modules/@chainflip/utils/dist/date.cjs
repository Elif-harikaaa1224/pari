"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/date.ts
var date_exports = {};
__export(date_exports, {
  addUtcDays: () => addUtcDays,
  differenceInTimeAgo: () => differenceInTimeAgo,
  differenceInUtcDays: () => differenceInUtcDays,
  eachUtcDayOfInterval: () => eachUtcDayOfInterval,
  formatTimestamp: () => formatTimestamp,
  formatTimestampShort: () => formatTimestampShort,
  fromUnixTime: () => fromUnixTime,
  intervalToDurationWords: () => intervalToDurationWords,
  subUtcDays: () => subUtcDays,
  toEndOfUtcDay: () => toEndOfUtcDay,
  toEndOfUtcDayString: () => toEndOfUtcDayString,
  toISODateString: () => toISODateString,
  toStartOfUtcDay: () => toStartOfUtcDay,
  toStartOfUtcDayString: () => toStartOfUtcDayString
});
module.exports = __toCommonJS(date_exports);
var import_utc = require("@date-fns/utc");
var import_date_fns = require("date-fns");

// src/guard.ts
var createIsGuard = (type) => (value) => typeof value === type;
var isString = createIsGuard("string");
var isNumber = createIsGuard("number");
var isBigInt = createIsGuard("bigint");
var isBoolean = createIsGuard("boolean");
var isSymbol = createIsGuard("symbol");
var isObject = createIsGuard("object");
var isUndefined = createIsGuard("undefined");
var isNullish = (value) => value == null;

// src/date.ts
var pluralize = (word, numb) => numb !== 1 ? `${word}s` : word;
var pad = (number) => String(number).padStart(2, "0");
var toISODateString = (date) => date.toISOString().slice(0, 10);
var fromUnixTime = (time) => {
  const date = new Date(Number(time) * 1e3);
  if (Number.isNaN(date.valueOf())) {
    throw new Error("date is invalid");
  }
  return date;
};
var formatTimestamp = (timestamp, locale = void 0, timeZone = void 0) => new Date(timestamp).toLocaleString(locale, {
  timeZone,
  weekday: "short",
  month: "short",
  day: "numeric",
  year: "numeric",
  timeZoneName: "short",
  hour: "numeric",
  minute: "numeric",
  second: "numeric"
});
var formatTimestampShort = (timestamp, locale = void 0, timeZone = void 0) => new Date(timestamp).toLocaleString(locale, {
  timeZone,
  month: "numeric",
  day: "numeric",
  year: "numeric",
  hour: "numeric",
  minute: "numeric",
  second: "numeric"
});
var differenceInTimeAgo = (time, ago = true, endTime = (/* @__PURE__ */ new Date()).toISOString()) => {
  const end = new Date(endTime);
  const timeNumber = Date.parse(time);
  const seconds = (0, import_date_fns.differenceInSeconds)(end, timeNumber);
  if (seconds < 60) return `${seconds} sec${ago ? " ago" : ""}`;
  const minutes = (0, import_date_fns.differenceInMinutes)(end, timeNumber);
  if (minutes < 60) return `${minutes} min${ago ? " ago" : ""}`;
  const hours = (0, import_date_fns.differenceInHours)(end, timeNumber);
  if (hours < 48) return `${hours} ${pluralize("hour", hours)}${ago ? " ago" : ""}`;
  const days = (0, import_date_fns.differenceInDays)(end, timeNumber);
  return `${days} days${ago ? " ago" : ""}`;
};
var intervalToDurationWords = (interval) => {
  if (isNullish(interval.start) || isNullish(interval.end)) return "??";
  if (interval.end === 0) return "??";
  const duration = (0, import_date_fns.intervalToDuration)(interval);
  if (duration.months) return ">1 month";
  if (duration.days) {
    return `${pad(duration.days)}${duration.days === 1 ? "day" : "days"} ${pad(
      duration.hours ?? 0
    )}h ${pad(duration.minutes ?? 0)}min ${pad(duration.seconds ?? 0)}s`;
  }
  if (duration.hours) {
    return `${pad(duration.hours)}h ${pad(duration.minutes ?? 0)}min ${pad(duration.seconds ?? 0)}s`;
  }
  if (duration.minutes) return `${pad(duration.minutes)}min ${pad(duration.seconds ?? 0)}s`;
  if (duration.seconds) return `${pad(duration.seconds)}s`;
  return "A few seconds";
};
var subUtcDays = (date, days) => (0, import_date_fns.subDays)(date, days, { in: import_utc.utc });
var addUtcDays = (date, days) => (0, import_date_fns.addDays)(date, days, { in: import_utc.utc });
var toStartOfUtcDay = (date) => (0, import_date_fns.startOfDay)(date, { in: import_utc.utc });
var toStartOfUtcDayString = (date) => toStartOfUtcDay(date).toISOString();
var toEndOfUtcDay = (date) => (0, import_date_fns.endOfDay)(date, { in: import_utc.utc });
var toEndOfUtcDayString = (date) => toEndOfUtcDay(date).toISOString();
var differenceInUtcDays = (interval) => (0, import_date_fns.differenceInDays)(interval.end, interval.start, { in: import_utc.utc });
var eachUtcDayOfInterval = (interval) => (0, import_date_fns.eachDayOfInterval)(interval, { in: import_utc.utc });
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addUtcDays,
  differenceInTimeAgo,
  differenceInUtcDays,
  eachUtcDayOfInterval,
  formatTimestamp,
  formatTimestampShort,
  fromUnixTime,
  intervalToDurationWords,
  subUtcDays,
  toEndOfUtcDay,
  toEndOfUtcDayString,
  toISODateString,
  toStartOfUtcDay,
  toStartOfUtcDayString
});
