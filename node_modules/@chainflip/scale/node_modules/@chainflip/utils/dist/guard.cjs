"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/guard.ts
var guard_exports = {};
__export(guard_exports, {
  isBigInt: () => isBigInt,
  isBoolean: () => isBoolean,
  isFullfilled: () => isFullfilled,
  isNotNullish: () => isNotNullish,
  isNullish: () => isNullish,
  isNumber: () => isNumber,
  isObject: () => isObject,
  isRejected: () => isRejected,
  isString: () => isString,
  isSymbol: () => isSymbol,
  isTruthy: () => isTruthy,
  isUndefined: () => isUndefined
});
module.exports = __toCommonJS(guard_exports);
var createIsGuard = (type) => (value) => typeof value === type;
var isString = createIsGuard("string");
var isNumber = createIsGuard("number");
var isBigInt = createIsGuard("bigint");
var isBoolean = createIsGuard("boolean");
var isSymbol = createIsGuard("symbol");
var isObject = createIsGuard("object");
var isUndefined = createIsGuard("undefined");
var isNotNullish = (value) => value != null;
var isNullish = (value) => value == null;
var isTruthy = (value) => Boolean(value);
var isFullfilled = (value) => value.status === "fulfilled";
var isRejected = (value) => value.status === "rejected";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  isBigInt,
  isBoolean,
  isFullfilled,
  isNotNullish,
  isNullish,
  isNumber,
  isObject,
  isRejected,
  isString,
  isSymbol,
  isTruthy,
  isUndefined
});
