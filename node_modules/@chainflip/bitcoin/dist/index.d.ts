import { ChainflipNetwork } from '@chainflip/utils/chainflip';
import { VaultSwapData } from '@chainflip/utils/types';

type BitcoinNetwork = 'mainnet' | 'testnet' | 'regtest';

type Bytelike = Uint8Array | number[] | `0x${string}`;
declare const networkHrp: {
    readonly mainnet: "bc";
    readonly testnet: "tb";
    readonly regtest: "bcrt";
};
type HRP = (typeof networkHrp)[keyof typeof networkHrp];
type Base58AddressType = 'P2SH' | 'P2PKH';
type DecodedBase58Address = {
    type: Base58AddressType;
    data: Uint8Array;
    version: number;
};
type DecodedSegwitAddress = {
    hrp: HRP;
    data: Uint8Array;
    type: SegwitAddressType;
    version: number;
};
type SegwitAddressType = 'P2WPKH' | 'P2WSH' | 'Taproot';
declare const encodeAddress: (data: Bytelike, kind: Base58AddressType | SegwitAddressType, cfOrBtcnetwork: BitcoinNetwork | ChainflipNetwork) => string;
declare const decodeAddress: (address: string, cfOrBtcNetwork: BitcoinNetwork | ChainflipNetwork) => DecodedBase58Address | DecodedSegwitAddress;
declare const isValidAddressForNetwork: (address: string, cfOrBtcNetwork: BitcoinNetwork | ChainflipNetwork) => boolean;

type BitcoinVaultSwapData = VaultSwapData<null> & {
    depositAddress: string;
};
declare const findVaultSwapData: (url: string, txId: string) => Promise<BitcoinVaultSwapData | null>;

export { type Base58AddressType, type BitcoinNetwork, type BitcoinVaultSwapData, type Bytelike, type DecodedBase58Address, type DecodedSegwitAddress, type HRP, type SegwitAddressType, decodeAddress, encodeAddress, findVaultSwapData, isValidAddressForNetwork };
