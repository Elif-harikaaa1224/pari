import { SolanaCcmAdditionalData } from '@chainflip/scale/codecs';
import { VaultSwapData, HexString } from '@chainflip/utils/types';
import { PublicKey } from '@solana/web3.js';

declare const isValidSolanaAddress: (address: string) => boolean;

type Transfer = {
    signature: string;
    amount: bigint;
    slot: number;
};
type SolanaNetwork = 'mainnet' | 'devnet';
/** Address of the SPL Token program */
declare const TOKEN_PROGRAM_ID: PublicKey;
/** Address of the SPL Associated Token Account program */
declare const ASSOCIATED_TOKEN_PROGRAM_ID: PublicKey;
type DepositInfo = {
    amount: bigint;
    maxSlot: number;
};
declare class TransactionMatchingError extends Error {
    cause: Error;
    deposits: DepositInfo[];
    transfers: Transfer[];
    constructor(message: string, cause: Error, deposits: DepositInfo[], transfers: Transfer[]);
}
declare const findTransactionSignatures: (rpcUrl: string, depositAddress: string, asset: "Sol" | "SolUsdc", deposits: DepositInfo[], network: SolanaNetwork, reportingErrorTolerance?: number) => Promise<string[][]>;
declare const findVaultSwapSignature: (solanaEndpoint: string, accountAddress: string, slot: number) => Promise<string>;
declare const findVaultSwapData: (rpcUrl: string, signature: string) => Promise<VaultSwapData<string, HexString | SolanaCcmAdditionalData | null> | null>;

export { ASSOCIATED_TOKEN_PROGRAM_ID, type DepositInfo, TOKEN_PROGRAM_ID, TransactionMatchingError, type Transfer, findTransactionSignatures, findVaultSwapData, findVaultSwapSignature, isValidSolanaAddress };
