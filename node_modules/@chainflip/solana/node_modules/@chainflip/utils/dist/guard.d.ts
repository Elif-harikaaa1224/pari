type TypeMap = {
    string: string;
    number: number;
    bigint: bigint;
    boolean: boolean;
    symbol: symbol;
    object: object;
    undefined: undefined;
};
declare const isString: (value: unknown) => value is TypeMap["string"];
declare const isNumber: (value: unknown) => value is TypeMap["number"];
declare const isBigInt: (value: unknown) => value is TypeMap["bigint"];
declare const isBoolean: (value: unknown) => value is TypeMap["boolean"];
declare const isSymbol: (value: unknown) => value is TypeMap["symbol"];
declare const isObject: (value: unknown) => value is TypeMap["object"];
declare const isUndefined: (value: unknown) => value is TypeMap["undefined"];
declare const isNotNullish: <T>(value: T) => value is NonNullable<T>;
declare const isNullish: (value: unknown) => value is null | undefined;
declare const isTruthy: <T>(value: T | null | undefined) => value is T;
declare const isFullfilled: <T>(value: PromiseSettledResult<T>) => value is PromiseFulfilledResult<T>;
declare const isRejected: <T>(value: PromiseSettledResult<T>) => value is PromiseRejectedResult;

export { type TypeMap, isBigInt, isBoolean, isFullfilled, isNotNullish, isNullish, isNumber, isObject, isRejected, isString, isSymbol, isTruthy, isUndefined };
