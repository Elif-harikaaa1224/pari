{"version":3,"sources":["../src/index.ts","../src/constants.ts","../src/errors.ts","../src/entities/chain.ts","../src/entities/fractions/fraction.ts","../src/utils.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/token.ts","../src/crosschain/chainUtils/tron.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/gasToken.ts","../src/entities/trade.ts","../src/entities/profiler.ts","../src/router.ts","../src/crosschain/symbiosis.ts","../src/crosschain/contracts/factories/AdaRouter__factory.ts","../src/crosschain/contracts/factories/AvaxRouter__factory.ts","../src/crosschain/contracts/factories/BranchedUnlocker__factory.ts","../src/crosschain/contracts/factories/Bridge__factory.ts","../src/crosschain/contracts/factories/BtcRefundUnlocker__factory.ts","../src/crosschain/contracts/factories/Depository__factory.ts","../src/crosschain/contracts/factories/DragonswapRouter__factory.ts","../src/crosschain/contracts/factories/ERC20__factory.ts","../src/crosschain/contracts/factories/Fabric__factory.ts","../src/crosschain/contracts/factories/FeeCollector__factory.ts","../src/crosschain/contracts/factories/HyperSwapRouter__factory.ts","../src/crosschain/contracts/factories/IzumiFactory__factory.ts","../src/crosschain/contracts/factories/IzumiPool__factory.ts","../src/crosschain/contracts/factories/IzumiQuoter__factory.ts","../src/crosschain/contracts/factories/IzumiSwap__factory.ts","../src/crosschain/contracts/factories/KavaRouter__factory.ts","../src/crosschain/contracts/factories/KimRouter__factory.ts","../src/crosschain/contracts/factories/MetaRouter__factory.ts","../src/crosschain/contracts/factories/Multicall__factory.ts","../src/crosschain/contracts/factories/MulticallRouter__factory.ts","../src/crosschain/contracts/factories/MulticallRouterV2__factory.ts","../src/crosschain/contracts/factories/OctoPoolFeeCollector__factory.ts","../src/crosschain/contracts/factories/OmniPool__factory.ts","../src/crosschain/contracts/factories/OmniPoolOracle__factory.ts","../src/crosschain/contracts/factories/OneInchOracle__factory.ts","../src/crosschain/contracts/factories/Pair__factory.ts","../src/crosschain/contracts/factories/PartnerFeeCollector__factory.ts","../src/crosschain/contracts/factories/Portal__factory.ts","../src/crosschain/contracts/factories/SwapUnlocker__factory.ts","../src/crosschain/contracts/factories/SymBtc__factory.ts","../src/crosschain/contracts/factories/Synthesis__factory.ts","../src/crosschain/contracts/factories/ThorRouter__factory.ts","../src/crosschain/contracts/factories/TonBridge__factory.ts","../src/crosschain/contracts/factories/UniLikeRouter__factory.ts","../src/crosschain/contracts/factories/UniV3Factory__factory.ts","../src/crosschain/contracts/factories/UniV3Quoter__factory.ts","../src/crosschain/contracts/factories/UniV3Router__factory.ts","../src/crosschain/contracts/factories/UniV3Router02__factory.ts","../src/crosschain/contracts/factories/Unwrapper__factory.ts","../src/crosschain/contracts/factories/Weth__factory.ts","../src/crosschain/contracts/factories/WithdrawUnlocker__factory.ts","../src/crosschain/contracts/factories/WTON__factory.ts","../src/crosschain/sdkError.ts","../src/crosschain/revert.ts","../src/crosschain/chainUtils/btc.ts","../src/crosschain/mempool.ts","../src/crosschain/chainUtils/ton.ts","../src/crosschain/chainUtils/evm.ts","../src/crosschain/constants.ts","../src/crosschain/types.ts","../src/crosschain/chainUtils/solana.ts","../src/crosschain/trade/symbiosisTrade.ts","../src/crosschain/multicall.ts","../src/crosschain/trade/oneInchTrade.ts","../src/crosschain/trade/openOceanTrade.ts","../src/crosschain/trade/izumiTrade.ts","../src/crosschain/trade/uniV2Trade.ts","../src/crosschain/trade/uniV3Trade.ts","../node_modules/@uniswap/v3-core/artifacts/contracts/interfaces/IUniswapV3Pool.sol/IUniswapV3Pool.json","../src/crosschain/trade/uniV3Trade/pool.ts","../src/crosschain/trade/uniV3Trade/getOutputQuote.ts","../src/crosschain/trade/uniV3Trade/toUniTypes.ts","../src/crosschain/trade/uniV3Trade/gasToken.ts","../src/crosschain/trade/aggregatorTrade.ts","../src/crosschain/trade/octoPoolTrade.ts","../src/crosschain/trade/wrapTrade.ts","../src/crosschain/trade/raydiumTrade.ts","../src/crosschain/trade/stonfiTrade.ts","../src/crosschain/trade/dedustTrade.ts","../src/crosschain/coingecko/constants.ts","../src/crosschain/coingecko/getTokenPriceUsd.ts","../src/crosschain/trade/jupiterTrade.ts","../src/crosschain/tronAbis/tronPortalAbi.ts","../src/crosschain/tronAbis/tronTRC20Abi.ts","../src/crosschain/tronAbis/tronMetaRouterAbi.ts","../src/crosschain/zapping.ts","../src/crosschain/omniLiquidity.ts","../src/crosschain/config/mainnet.ts","../src/crosschain/config/testnet.ts","../src/crosschain/config/dev.ts","../src/crosschain/config/cache/mainnet.json","../src/crosschain/config/cache/testnet.json","../src/crosschain/config/cache/dev.json","../src/crosschain/config/cache/cache.ts","../src/crosschain/waitForComplete/constants.ts","../src/crosschain/waitForComplete/utils.ts","../src/crosschain/waitForComplete/waitForTonDepositTxMined.ts","../src/crosschain/waitForComplete/tryToFindExtraStepsAndWait.ts","../src/crosschain/waitForComplete/getTxTonBridgeInfo.ts","../src/crosschain/waitForComplete/waitForComplete.ts","../src/crosschain/waitForComplete/waitForBtcDepositAccepted.ts","../src/crosschain/waitForComplete/waitForBtcCommitTxMined.ts","../src/crosschain/waitForComplete/waitForBtcEvmTxIssued.ts","../src/crosschain/waitForComplete/waitFromTonTxMined.ts","../src/crosschain/cache.ts","../src/crosschain/swapping/baseSwapping.ts","../src/crosschain/feeCall/getPartnerFeeCall.ts","../src/crosschain/feeCall/getVolumeFeeCall.ts","../src/crosschain/transit.ts","../src/crosschain/utils.ts","../src/crosschain/swapping/swapping.ts","../src/crosschain/swapping/swappingToTon.ts","../src/crosschain/swapping/swappingMiddleware.ts","../src/crosschain/swapping/zappingBtc.ts","../src/crosschain/swapping/zappingThor.ts","../src/crosschain/swapExactIn/bridge.ts","../src/crosschain/swapExactIn/utils.ts","../src/crosschain/swapExactIn/crosschainSwap/bestPoolSwapping.ts","../src/crosschain/swapExactIn/crosschainSwap/crosschainSwap.ts","../src/crosschain/swapExactIn/feeCollectorSwap.ts","../src/crosschain/swapExactIn/preparePayload.ts","../src/crosschain/swapExactIn/aggregatorsSwap.ts","../src/crosschain/swapExactIn/octoPoolSwap.ts","../src/crosschain/swapExactIn/dedustSwap.ts","../src/crosschain/swapExactIn/stonfiSwap.ts","../src/crosschain/swapExactIn/onChainSolanaSwap/onChainSolanaSwap.ts","../src/crosschain/swapExactIn/onchainSwap.ts","../src/crosschain/swapExactIn/unwrap.ts","../src/crosschain/swapExactIn/wrap.ts","../src/crosschain/swapExactIn/toTonSwap.ts","../src/crosschain/swapExactIn/swapChainFlip/zappingOnChainChainFlip.ts","../src/crosschain/swapExactIn/swapChainFlip/utils.ts","../src/crosschain/swapExactIn/swapChainFlip/zappingCrossChainChainFlip.ts","../src/crosschain/swapExactIn/swapChainFlip/solanaChainFlipSwap.ts","../src/crosschain/swapExactIn/swapChainFlip/btcChainFlipSwap.ts","../src/crosschain/swapExactIn/toBtc/zappingBtcOnChain.ts","../src/crosschain/swapExactIn/toBtc/burnSyntheticBtc.ts","../src/crosschain/swapExactIn/thorChainSwap.ts","../src/crosschain/swapExactIn/toBtcSwap.ts","../src/crosschain/swapExactIn/fromBtcSwap.ts","../src/crosschain/swapExactIn/toSolanaSwap.ts","../src/crosschain/swapExactIn/swapExactIn.ts","../src/crosschain/revertRequest.ts"],"sourcesContent":["import JSBI from 'jsbi'\nexport { JSBI }\n\nexport {\n    BigintIsh,\n    ChainId,\n    TradeType,\n    Rounding,\n    FACTORY_ADDRESS,\n    INIT_CODE_HASH,\n    MINIMUM_LIQUIDITY,\n    ZERO,\n    Icons,\n} from './constants'\n\nexport * from './errors'\nexport * from './entities'\nexport * from './router'\nexport * from './crosschain'\nexport * from './crosschain/swapExactIn'\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport type Icons = {\n    large?: string\n    small?: string\n}\n\nexport type TokenConstructor = {\n    name?: string\n    symbol?: string\n    address: string\n    decimals: number\n    chainId: ChainId\n    isNative?: boolean\n    chainFromId?: ChainId\n    icons?: Icons\n    userToken?: boolean\n    deprecated?: boolean\n    attributes?: {\n        solana?: string\n        ton?: string\n    }\n}\n\nexport type ChainConstructor = {\n    id: ChainId\n    name: string\n    explorer: string\n    disabled: boolean\n    icons: Icons\n    swappable?: boolean\n    evm?: boolean\n}\n\nexport enum ChainId {\n    ETH_MAINNET = 1,\n    ETH_RINKEBY = 4,\n    ETH_KOVAN = 42,\n    BSC_MAINNET = 56,\n    BSC_TESTNET = 97,\n    MATIC_MAINNET = 137,\n    MATIC_MUMBAI = 80001,\n    AVAX_MAINNET = 43114,\n    AVAX_TESTNET = 43113,\n    HECO_MAINNET = 128,\n    HECO_TESTNET = 256,\n    OKEX_MAINNET = 66,\n    OKEX_TESTNET = 65,\n    BOBA_MAINNET = 288,\n    SYMBIOSIS_TESTNET = 719095483,\n    SYMBIOSIS_MAINNET = 13863860,\n    BOBA_AVALANCHE = 43288,\n    BOBA_RINKEBY = 28,\n    MILKOMEDA_MAINNET = 2001,\n    MILKOMEDA_DEVNET = 200101,\n    BTC_MAINNET = 3652501241,\n    BTC_MUTINY = 2782866891,\n    BTC_TESTNET4 = 675223068,\n    AURORA_MAINNET = 1313161554,\n    AURORA_TESTNET = 1313161555,\n    TELOS_MAINNET = 40,\n    TELOS_TESTNET = 41,\n    SHARDEUM_TESTNET_2 = 8081,\n    KAVA_MAINNET = 2222,\n    SCROLL_SEPOLIA = 534351,\n    SEPOLIA_TESTNET = 11155111,\n    ZKSYNC_MAINNET = 324,\n    ARBITRUM_MAINNET = 42161,\n    ARBITRUM_NOVA = 42170,\n    OPTIMISM_MAINNET = 10,\n    ZETACHAIN_ATHENS_2 = 7001,\n    POLYGON_ZK = 1101,\n    TRON_MAINNET = 728126428,\n    TRON_TESTNET = 2494104990,\n    LINEA_TESTNET = 59140,\n    LINEA_MAINNET = 59144,\n    MANTLE_MAINNET = 5000,\n    MANTLE_TESTNET = 5001,\n    BASE_MAINNET = 8453,\n    SCROLL_MAINNET = 534352,\n    MANTA_MAINNET = 169,\n    METIS_MAINNET = 1088,\n    OKX_X1_TESTNET = 195,\n    BAHAMUT_MAINNET = 5165,\n    MODE_MAINNET = 34443,\n    RSK_MAINNET = 30,\n    BLAST_MAINNET = 81457,\n    MERLIN_MAINNET = 4200,\n    ZKLINK_MAINNET = 810180,\n    CORE_MAINNET = 1116,\n    TON_MAINNET = 85918, // correct is 85918\n    TON_TESTNET = 85919, // correct is 85918\n    TAIKO_MAINNET = 167000,\n    SEI_EVM_MAINNET = 1329,\n    ZETACHAIN_MAINNET = 7000,\n    CRONOS_MAINNET = 25,\n    FRAXTAL_MAINNET = 252,\n    GRAVITY_MAINNET = 1625,\n    BSQUARED_MAINNET = 223,\n    CRONOS_ZK_MAINNET = 388,\n    MORPH_MAINNET = 2818,\n    SOLANA_MAINNET = 5426,\n    GOAT_MAINNET = 2345,\n    SONIC_MAINNET = 146,\n    ABSTRACT_MAINNET = 2741,\n    GNOSIS_MAINNET = 100,\n    BERACHAIN_MAINNET = 80094,\n    UNICHAIN_MAINNET = 130,\n    SONEIUM_MAINNET = 1868,\n    OPBNB_MAINNET = 204,\n    HYPERLIQUID_MAINNET = 999,\n    KATANA_MAINNET = 747474,\n    APECHAIN_MAINNET = 33139,\n    PLASMA_MAINNET = 9745,\n}\n\nexport enum TradeType {\n    EXACT_INPUT,\n    EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n    ROUND_DOWN,\n    ROUND_HALF_UP,\n    ROUND_UP,\n}\nexport const FACTORY_ADDRESS = {\n    [ChainId.ETH_MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n    [ChainId.ETH_RINKEBY]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n    [ChainId.ETH_KOVAN]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n    [ChainId.BSC_MAINNET]: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n    [ChainId.BSC_TESTNET]: '0x6725F303b657a9451d8BA641348b6761A6CC7a17',\n    [ChainId.MATIC_MAINNET]: '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32',\n    [ChainId.MATIC_MUMBAI]: '0x8a628F00710993c1cebbaa02338d2264ee7056C6',\n    [ChainId.AVAX_MAINNET]: '0xefa94DE7a4656D787667C749f7E1223D71E9FD88',\n    [ChainId.AVAX_TESTNET]: '0xb278D63e2E2a4aeb5A398eB87a91FF909B72C8D5',\n    [ChainId.HECO_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.HECO_TESTNET]: '0xca33f6D096BDD7FcB28d708f631cD76E73Ecfc2d',\n    [ChainId.OKEX_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.OKEX_TESTNET]: '0xD68B1DCDe3bAeB3FF1483Ad33c3efC6B6e0A8E4C',\n    [ChainId.BOBA_MAINNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n    [ChainId.BOBA_AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n    [ChainId.SYMBIOSIS_TESTNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.SYMBIOSIS_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.BOBA_RINKEBY]: '0xab740666e226cb5b6b451eb943b0257a7cb3ce0a',\n    [ChainId.MILKOMEDA_MAINNET]: '0x2ef06A90b0E7Ae3ae508e83Ea6628a3987945460',\n    [ChainId.MILKOMEDA_DEVNET]: '0x428779a1a596c9cfdb68f5daef78b14901b95566',\n    [ChainId.BTC_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.BTC_MUTINY]: '0x0000000000000000000000000000000000000000',\n    [ChainId.BTC_TESTNET4]: '0x0000000000000000000000000000000000000000',\n    [ChainId.AURORA_MAINNET]: '0xc66F594268041dB60507F00703b152492fb176E7',\n    [ChainId.AURORA_TESTNET]: '0x60913758635b54e6C9685f92201A5704eEe74748',\n    [ChainId.TELOS_MAINNET]: '0xb630f53df13645bff0ef55eb44a8a490a7dd4514',\n    [ChainId.TELOS_TESTNET]: '0x6db1D2C691DcdF4DA36d3497F68a63C7282a4a44',\n    [ChainId.SHARDEUM_TESTNET_2]: '0x1DAcbaB28Decd115c8AA6F183877C71b942aE406',\n    [ChainId.KAVA_MAINNET]: '0xA138FAFc30f6Ec6980aAd22656F2F11C38B56a95',\n    [ChainId.SCROLL_SEPOLIA]: '0x0000000000000000000000000000000000000000',\n    [ChainId.ZKSYNC_MAINNET]: '0x40be1cba6c5b47cdf9da7f963b6f761f4c60627d',\n    [ChainId.ARBITRUM_MAINNET]: '0xd394e9cc20f43d2651293756f8d320668e850f1b', // arbSwap\n    [ChainId.ARBITRUM_NOVA]: '0xf6239423fcf1c19ed2791d9648a90836074242fd', // arbSwap\n    [ChainId.OPTIMISM_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.ZETACHAIN_ATHENS_2]: '0x9fd96203f7b22bCF72d9DCb40ff98302376cE09c',\n    [ChainId.POLYGON_ZK]: '0x0000000000000000000000000000000000000000',\n    [ChainId.TRON_MAINNET]: '0x689ABAEEED3F0BB3585773192E23224CAC25DD41', // sunswap.io - TKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY\n    [ChainId.TRON_TESTNET]: '0x1df14d5e036019f298d2a358bb234cf301e5e8e3', // sunswap.io - TChXfbQLafcoExbcXTtwNZMBKdeW2p1V5G\n    [ChainId.LINEA_TESTNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.LINEA_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.MANTLE_MAINNET]: '0xE5020961fA51ffd3662CDf307dEf18F9a87Cce7c', // fusionX\n    [ChainId.MANTLE_TESTNET]: '0x272465431A6b86E3B9E5b9bD33f5D103a3F59eDb', // fusionX\n    [ChainId.BASE_MAINNET]: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB', // baseSwap\n    [ChainId.SCROLL_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.MANTA_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.METIS_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.OKX_X1_TESTNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.BAHAMUT_MAINNET]: '0xd0C5d23290d63E06a0c4B87F14bD2F7aA551a895', // silkswap\n    [ChainId.MODE_MAINNET]: '0xc02155946dd8c89d3d3238a6c8a64d04e2cd4500', // kim exchange\n    [ChainId.RSK_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.BLAST_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.MERLIN_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.ZKLINK_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.SEPOLIA_TESTNET]: '0x7E0987E5b3a30e3f2828572Bb659A548460a3003',\n    [ChainId.CORE_MAINNET]: '0x3E723C7B6188E8Ef638DB9685Af45c7CB66f77B9',\n    [ChainId.TON_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.TON_TESTNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.TAIKO_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.SEI_EVM_MAINNET]: '0x71f6b49ae1558357bBb5A6074f1143c46cBcA03d',\n    [ChainId.ZETACHAIN_MAINNET]: '0x9fd96203f7b22bCF72d9DCb40ff98302376cE09c',\n    [ChainId.CRONOS_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.FRAXTAL_MAINNET]: '0xE30521fe7f3bEB6Ad556887b50739d6C7CA667E6',\n    [ChainId.GRAVITY_MAINNET]: '0x7d8c6B58BA2d40FC6E34C25f9A488067Fe0D2dB4',\n    [ChainId.BSQUARED_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.CRONOS_ZK_MAINNET]: '0x50704Ac00064be03CEEd817f41E0Aa61F52ef4DC', // H2 Finance\n    [ChainId.MORPH_MAINNET]: '0x8D2A8b8F7d200d75Bf5F9E84e01F9272f90EFB8b', // bulba swap\n    [ChainId.SOLANA_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.GOAT_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.SONIC_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.ABSTRACT_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.GNOSIS_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.BERACHAIN_MAINNET]: '0x5e705e184d233ff2a7cb1553793464a9d0c3028f',\n    [ChainId.UNICHAIN_MAINNET]: '0x1f98400000000000000000000000000000000002',\n    [ChainId.SONEIUM_MAINNET]: '0xC3d4fA777308412CbA0520c4034Ad3567de852dF',\n    [ChainId.OPBNB_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.HYPERLIQUID_MAINNET]: '0x724412C00059bf7d6ee7d4a1d0D5cd4de3ea1C48',\n    [ChainId.KATANA_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.APECHAIN_MAINNET]: '0x0000000000000000000000000000000000000000',\n    [ChainId.PLASMA_MAINNET]: '0x0000000000000000000000000000000000000000',\n}\n\nexport const INIT_CODE_HASH = {\n    [ChainId.ETH_MAINNET]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [ChainId.ETH_RINKEBY]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [ChainId.ETH_KOVAN]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [ChainId.BSC_MAINNET]: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n    [ChainId.BSC_TESTNET]: '0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66',\n    [ChainId.MATIC_MAINNET]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [ChainId.MATIC_MUMBAI]: '0x85f8ad645fe62917d6939782650649d3d7c4b5f25d81415a9fac4a9f341793ca',\n    [ChainId.AVAX_MAINNET]: '0x40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545',\n    [ChainId.AVAX_TESTNET]: '0x85f8ad645fe62917d6939782650649d3d7c4b5f25d81415a9fac4a9f341793ca',\n    [ChainId.HECO_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.HECO_TESTNET]: '0x85f8ad645fe62917d6939782650649d3d7c4b5f25d81415a9fac4a9f341793ca',\n    [ChainId.OKEX_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.OKEX_TESTNET]: '0x7f08f1b43a5b37be17b2d24d4f2c6b1311e19eedc53cc4528f0e72cdfb5d8d37',\n    [ChainId.BOBA_MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.BOBA_AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.SYMBIOSIS_TESTNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.SYMBIOSIS_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.BOBA_RINKEBY]: '0x1db9efb13a1398e31bb71895c392fa1217130f78dc65080174491adcec5da9b9',\n    [ChainId.MILKOMEDA_MAINNET]: '0x0103d86123641edae209ed992b2bf060ae2baab6a28f5b1eb7dad61335915104',\n    [ChainId.MILKOMEDA_DEVNET]: '0x0103d86123641edae209ed992b2bf060ae2baab6a28f5b1eb7dad61335915104',\n    [ChainId.BTC_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.BTC_MUTINY]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.BTC_TESTNET4]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.AURORA_MAINNET]: '0x754e1d90e536e4c1df81b7f030f47b4ca80c87120e145c294f098c83a6cb5ace',\n    [ChainId.AURORA_TESTNET]: '0x4a697f690d1f46e0f1a897a8662acae31ced3039b00c052392ed0bc179f9f28c',\n    [ChainId.TELOS_MAINNET]: '0x73d5f9d3e0db97ca102c315a9a45dfebef394eae36edcce8853bcb1ee049a6dd',\n    [ChainId.TELOS_TESTNET]: '0x4386561b28c0ca71b777ab3684458dd9f6c1b3b7fc609c5758f0f00a48625996',\n    [ChainId.SHARDEUM_TESTNET_2]: '0x3bde95ed3dcb15c415ca128950d4807b9e3698b981ff73007c9d3c220a5b2f6f',\n    [ChainId.KAVA_MAINNET]: '0x851a56ac1b3682251d8341ad09c09bf45fca37af4451453063637d745a94fe1f',\n    [ChainId.SCROLL_SEPOLIA]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.ZKSYNC_MAINNET]: '0x95d5c05820d58f1c8cc736b47fe10a29ddcd2cf73a0d842e8537b9fe510fc618',\n    [ChainId.ARBITRUM_MAINNET]: '0x8336ef61546f16041265cbd61fb71f00434b515a1f3dba059227802ec4a4be4f', // arbSwap\n    [ChainId.ARBITRUM_NOVA]: '0x70b19cf85a176c6b86e2d324be179104bdc8fafee13d548ae07d28b9f53cbc71', // arbSwap\n    [ChainId.OPTIMISM_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.ZETACHAIN_ATHENS_2]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [ChainId.POLYGON_ZK]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.LINEA_TESTNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.LINEA_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.MANTLE_MAINNET]: '0x58c684aeb03fe49c8a3080db88e425fae262c5ef5bf0e8acffc0526c6e3c03a0', // fusionX\n    [ChainId.MANTLE_TESTNET]: '0x58c684aeb03fe49c8a3080db88e425fae262c5ef5bf0e8acffc0526c6e3c03a0', // fusionX\n    [ChainId.BASE_MAINNET]: '0xb618a2730fae167f5f8ac7bd659dd8436d571872655bcb6fd11f2158c8a64a3b', // baseSwap\n    [ChainId.TRON_MAINNET]: '0x6d3f89421f83e4b62e628de8fc7ff2b014a79bf8fd8e8b0ea46e4a1d9409b67d', // sunswap.io\n    [ChainId.TRON_TESTNET]: '0x0e26acb4c8f8d3df2264904ab1e00efdc142a9f341741ca7e0a7ae5f9b0c0fa9', // sunswap.io\n    [ChainId.SCROLL_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.MANTA_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.METIS_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.OKX_X1_TESTNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.BAHAMUT_MAINNET]: '0x79cd523bc695c4f4a15256b1eddb22624ae455e51c452c3dac1737955440bfbe', // silkswap\n    [ChainId.MODE_MAINNET]: '0x7b58b1fadf495e5bef34e311418b22e4f729c080a333619b4318c23bc7fb4c0a', // kim exchange\n    [ChainId.RSK_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.BLAST_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.MERLIN_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.ZKLINK_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.SEPOLIA_TESTNET]: '0x4156ccc01dad273e6c65c4335c428a2ff4a4b0c95a9a228f6bfed45a069d3fe7',\n    [ChainId.CORE_MAINNET]: '0xee028118a054757b5daded92bc998b195fc653d33f3214aaabeec98d7599f6b8',\n    [ChainId.TON_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.TON_TESTNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.TAIKO_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.SEI_EVM_MAINNET]: '0x7240a7a71cc85d56ee2e5ca1c5236ce877abc9b49b4696adc94968ef43796fed',\n    [ChainId.ZETACHAIN_MAINNET]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [ChainId.CRONOS_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.FRAXTAL_MAINNET]: '0x676b4c9b92980c4e7823b43031b17d7299896d1cd7d147104ad8e21692123fa1',\n    [ChainId.GRAVITY_MAINNET]: '0xba70494e4abe6721f3f96552635a28b70921f79b39c6b06ab9cb14618a78df9f',\n    [ChainId.BSQUARED_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.CRONOS_ZK_MAINNET]: '0x010003b769eff14077b08cfa578449069839b9ccb7e566601190f93592d4a6bc', // H2 Finance\n    [ChainId.MORPH_MAINNET]: '0xe0d4c9aa46e27dc0f29e1fbc328dadb3455bbfc8dd936b2ea1abd5d028cc2813', // bulba swap\n    [ChainId.SOLANA_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.GOAT_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.SONIC_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.ABSTRACT_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.GNOSIS_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.BERACHAIN_MAINNET]: '0x190cc7bdd70507a793b76d7bc2bf03e1866989ca7881812e0e1947b23e099534',\n    [ChainId.UNICHAIN_MAINNET]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [ChainId.SONEIUM_MAINNET]: '0x986d5bc7d1ebad7b6aa48b90d79ba2498e5e223dad50971c48f147ab6395bdd2',\n    [ChainId.OPBNB_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.HYPERLIQUID_MAINNET]: '0xc83d9df19c8c8a0a1229bd3122cbb86fd8ff56f79cc6781c15999d39425466e9',\n    [ChainId.KATANA_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.APECHAIN_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    [ChainId.PLASMA_MAINNET]: '0x0000000000000000000000000000000000000000000000000000000000000000',\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n    uint8 = 'uint8',\n    uint256 = 'uint256',\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n    [SolidityType.uint8]: JSBI.BigInt('0xff'),\n    [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}\n\nexport const NATIVE_TOKEN_ADDRESS = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' as const\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n    public readonly isInsufficientReservesError = true\n\n    public constructor() {\n        super()\n        this.name = this.constructor.name\n        if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n    }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n    public readonly isInsufficientInputAmountError = true\n\n    public constructor() {\n        super()\n        this.name = this.constructor.name\n        if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n    }\n}\n","import { ChainConstructor, ChainId, Icons } from '../constants'\n\nexport class Chain {\n    public readonly id: ChainId\n    public readonly name: string\n    public readonly disabled: boolean\n    public readonly swappable: boolean\n    public readonly evm: boolean\n    public readonly explorer: string\n    public readonly icons: Icons\n\n    constructor(params: ChainConstructor) {\n        this.id = params.id\n        this.name = params.name\n        this.disabled = params.disabled\n        this.explorer = params.explorer\n        this.icons = params.icons\n        this.swappable = params?.swappable !== false\n        this.evm = params?.evm !== false\n    }\n}\n\nexport const chains: Chain[] = [\n    new Chain({\n        id: ChainId.TON_MAINNET,\n        name: 'TON',\n        disabled: false,\n        explorer: 'https://tonviewer.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n        },\n        evm: false,\n    }),\n    new Chain({\n        id: ChainId.TON_TESTNET,\n        name: 'TON',\n        disabled: false,\n        explorer: 'https://testnet.tonviewer.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n        },\n        evm: false,\n    }),\n    new Chain({\n        id: ChainId.BTC_MAINNET,\n        name: 'Bitcoin',\n        disabled: false,\n        explorer: 'https://mempool.space',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n        },\n        evm: false,\n    }),\n    new Chain({\n        id: ChainId.BTC_MUTINY,\n        name: 'Bitcoin Mutiny',\n        disabled: false,\n        explorer: 'https://mutinynet.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n        },\n        evm: false,\n    }),\n    new Chain({\n        id: ChainId.BTC_TESTNET4,\n        name: 'Bitcoin Testnet4',\n        disabled: false,\n        explorer: 'https://mempool.space/testnet4',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n        },\n        evm: false,\n    }),\n    new Chain({\n        id: ChainId.ETH_MAINNET,\n        name: 'Ethereum',\n        disabled: false,\n        explorer: 'https://etherscan.io',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.ETH_RINKEBY,\n        name: 'Rinkeby',\n        disabled: false,\n        explorer: 'https://rinkeby.etherscan.io',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.ETH_KOVAN,\n        name: 'Kovan',\n        disabled: false,\n        explorer: 'https://kovan.etherscan.io',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.BSC_MAINNET,\n        name: 'BNB',\n        disabled: false,\n        explorer: 'https://bscscan.com',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.BSC_TESTNET,\n        name: 'BNB',\n        disabled: false,\n        explorer: 'https://testnet.bscscan.com',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.MATIC_MAINNET,\n        name: 'Polygon',\n        disabled: false,\n        explorer: 'https://polygonscan.com',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.MATIC_MUMBAI,\n        name: 'Mumbai', // Polygon Testnet\n        disabled: false,\n        explorer: 'https://mumbai.polygonscan.com',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.AVAX_MAINNET,\n        name: 'Avalanche',\n        disabled: false,\n        explorer: 'https://snowtrace.io',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.AVAX_TESTNET,\n        name: 'Fuji',\n        disabled: false,\n        explorer: 'https://testnet.snowtrace.io',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.HECO_MAINNET,\n        name: 'HECO',\n        disabled: false,\n        explorer: 'https://hecoinfo.com',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.HECO_TESTNET,\n        name: 'HECO',\n        disabled: false,\n        explorer: 'https://testnet.hecoinfo.com',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.OKEX_MAINNET,\n        name: 'OEC',\n        disabled: false,\n        explorer: 'https://www.oklink.com/oec',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png',\n            large: 'https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.OKEX_TESTNET,\n        name: 'OEC',\n        disabled: false,\n        explorer: 'https://www.oklink.com/oec-test',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png',\n            large: 'https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.BOBA_MAINNET,\n        name: 'Boba Ethereum',\n        disabled: false,\n        explorer: 'https://eth.bobascan.com',\n        icons: {\n            small: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-ethereum/logo.png',\n            large: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-ethereum/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.BOBA_RINKEBY,\n        name: 'Boba Rinkeby',\n        disabled: false,\n        explorer: 'https://blockexplorer.rinkeby.boba.network',\n        icons: {\n            small: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-ethereum/logo.png',\n            large: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-ethereum/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.BOBA_AVALANCHE,\n        name: 'Boba Avalanche',\n        disabled: false,\n        explorer: 'https://blockexplorer.avax.boba.network',\n        icons: {\n            small: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-avalanche/logo.png',\n            large: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-avalanche/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.SYMBIOSIS_TESTNET,\n        name: 'Symbiosis Testnet',\n        disabled: false,\n        explorer: 'https://symbiosis-nitro-testnet.explorer.caldera.xyz',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.SYMBIOSIS_MAINNET,\n        name: 'Symbiosis',\n        disabled: false,\n        explorer: 'https://symbiosis.calderaexplorer.xyz',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.MILKOMEDA_MAINNET,\n        name: 'Milkomeda',\n        disabled: false,\n        explorer: 'https://explorer-mainnet-cardano-evm.c1.milkomeda.com',\n        icons: {\n            small: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png',\n            large: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.MILKOMEDA_DEVNET,\n        name: 'Milkomeda',\n        disabled: false,\n        explorer: 'https://explorer-devnet-cardano-evm.c1.milkomeda.com',\n        icons: {\n            small: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png',\n            large: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.AURORA_MAINNET,\n        name: 'Aurora',\n        disabled: false,\n        explorer: 'https://aurorascan.dev',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.AURORA_TESTNET,\n        name: 'Aurora',\n        disabled: false,\n        explorer: 'https://testnet.aurorascan.dev',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.TELOS_MAINNET,\n        name: 'Telos',\n        disabled: false,\n        explorer: 'https://teloscan.io',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.TELOS_TESTNET,\n        name: 'Telos',\n        disabled: false,\n        explorer: 'https://testnet.teloscan.io',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.SHARDEUM_TESTNET_2,\n        name: 'Shardeum Liberty 2.X',\n        disabled: false,\n        explorer: 'https://explorer-liberty20.shardeum.org',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/22353.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/22353.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.KAVA_MAINNET,\n        name: 'KAVA EVM',\n        disabled: false,\n        explorer: 'https://explorer.kava.io',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4846.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4846.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.SCROLL_SEPOLIA,\n        name: 'Scroll Sepolia',\n        disabled: false,\n        explorer: 'https://scroll-sepolia.l2scan.co',\n        icons: {\n            small: 'https://res.cloudinary.com/dzkjyvmsn/image/upload/v1680688496/scroll_p8h6bl.png',\n            large: 'https://res.cloudinary.com/dzkjyvmsn/image/upload/v1680688496/scroll_p8h6bl.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.ZKSYNC_MAINNET,\n        name: 'ZkSync Era',\n        disabled: false,\n        explorer: 'https://era.zksync.network',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/24091.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/24091.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.ARBITRUM_MAINNET,\n        name: 'Arbitrum One',\n        disabled: false,\n        explorer: 'https://arbiscan.io',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11841.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11841.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.ARBITRUM_NOVA,\n        name: 'Arbitrum Nova',\n        disabled: false,\n        explorer: 'https://nova.arbiscan.io',\n        icons: {\n            small: 'https://l2beat.com/icons/nova.png',\n            large: 'https://l2beat.com/icons/nova.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.OPTIMISM_MAINNET,\n        name: 'Optimism',\n        disabled: false,\n        explorer: 'https://optimistic.etherscan.io',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11840.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11840.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.ZETACHAIN_ATHENS_2,\n        name: 'ZetaChain',\n        disabled: false,\n        explorer: 'https://explorer.zetachain.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.POLYGON_ZK,\n        name: 'Polygon zkEVM',\n        disabled: false,\n        explorer: 'https://zkevm.polygonscan.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3890.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3890.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.TRON_MAINNET,\n        name: 'Tron',\n        disabled: false,\n        explorer: 'https://tronscan.org',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png',\n        },\n        evm: false,\n    }),\n    new Chain({\n        id: ChainId.TRON_TESTNET,\n        name: 'Tron Testnet',\n        disabled: false,\n        explorer: 'https://shasta.tronscan.org',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png',\n        },\n        evm: false,\n    }),\n    new Chain({\n        id: ChainId.LINEA_TESTNET,\n        name: 'Linea',\n        disabled: false,\n        explorer: 'https://goerli.lineascan.build',\n        icons: {\n            small: 'https://l2beat.com/icons/linea.png',\n            large: 'https://l2beat.com/icons/linea.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.LINEA_MAINNET,\n        name: 'Linea',\n        disabled: false,\n        explorer: 'https://lineascan.build',\n        icons: {\n            small: 'https://l2beat.com/icons/linea.png',\n            large: 'https://l2beat.com/icons/linea.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.MANTLE_MAINNET,\n        name: 'Mantle',\n        disabled: false,\n        explorer: 'https://explorer.mantle.xyz',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.MANTLE_TESTNET,\n        name: 'Mantle',\n        disabled: false,\n        explorer: 'https://explorer.testnet.mantle.xyz',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.BASE_MAINNET,\n        name: 'Base',\n        disabled: false,\n        explorer: 'https://basescan.org',\n        icons: {\n            small: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/base/logo.png',\n            large: 'https://raw.githubusercontent.com/allush/assets/main/images/blockchains/base/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.SCROLL_MAINNET,\n        name: 'Scroll',\n        disabled: false,\n        explorer: 'https://scrollscan.com',\n        icons: {\n            small: 'https://res.cloudinary.com/dzkjyvmsn/image/upload/v1680688496/scroll_p8h6bl.png',\n            large: 'https://res.cloudinary.com/dzkjyvmsn/image/upload/v1680688496/scroll_p8h6bl.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.MANTA_MAINNET,\n        name: 'Manta',\n        disabled: false,\n        explorer: 'https://pacific-explorer.manta.network',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/13631.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/128x128/13631.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.METIS_MAINNET,\n        name: 'Metis',\n        disabled: false,\n        explorer: 'https://explorer.metis.io',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9640.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/128x128/9640.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.OKX_X1_TESTNET,\n        name: 'OKX X1 Testnet',\n        disabled: false,\n        explorer: 'https://www.oklink.com/x1-test',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.BAHAMUT_MAINNET,\n        name: 'Bahamut',\n        disabled: false,\n        explorer: 'https://www.ftnscan.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/22615.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/22615.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.MODE_MAINNET,\n        name: 'Mode',\n        disabled: false,\n        explorer: 'https://explorer.mode.network',\n        icons: {\n            small: 'https://assets-global.website-files.com/64c906a6ed3c4d809558853b/64d0b081f0331ac3c64c5e4d_flav.png',\n            large: 'https://assets-global.website-files.com/64c906a6ed3c4d809558853b/64d0b081f0331ac3c64c5e4d_flav.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.RSK_MAINNET,\n        name: 'Rootstock',\n        disabled: false,\n        explorer: 'https://rootstock.blockscout.com',\n        icons: {\n            small: 'https://rootstock.blockscout.com/assets/favicon/favicon.ico',\n            large: 'https://rootstock.blockscout.com/assets/favicon/favicon.ico',\n        },\n    }),\n    new Chain({\n        id: ChainId.BLAST_MAINNET,\n        name: 'Blast',\n        disabled: false,\n        explorer: 'https://blastscan.io',\n        icons: {\n            small: 'https://assets.coingecko.com/coins/images/35494/standard/blast2.jpeg?1708919600',\n            large: 'https://assets.coingecko.com/coins/images/35494/standard/blast2.jpeg?1708919600',\n        },\n    }),\n    new Chain({\n        id: ChainId.MERLIN_MAINNET,\n        name: 'Merlin',\n        disabled: false,\n        explorer: 'https://scan.merlinchain.io',\n        icons: {\n            small: 'https://assets.coingecko.com/asset_platforms/images/188/small/merlin-chain.jpeg?1708522313',\n            large: 'https://assets.coingecko.com/asset_platforms/images/188/small/merlin-chain.jpeg?1708522313',\n        },\n    }),\n    new Chain({\n        id: ChainId.ZKLINK_MAINNET,\n        name: 'ZkLink',\n        disabled: false,\n        explorer: 'https://explorer.zklink.io',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/13039.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/13039.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.SEPOLIA_TESTNET,\n        name: 'Sepolia',\n        disabled: false,\n        explorer: 'https://sepolia.etherscan.io',\n        icons: {\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.CORE_MAINNET,\n        name: 'CORE',\n        disabled: false,\n        explorer: 'https://scan.coredao.org',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/23254.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/23254.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.TAIKO_MAINNET,\n        name: 'Taiko',\n        disabled: false,\n        explorer: 'https://taikoscan.io',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/31525.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/31525.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.SEI_EVM_MAINNET,\n        name: 'Sei v2',\n        disabled: false,\n        explorer: 'https://seitrace.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/23149.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/23149.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.ZETACHAIN_MAINNET,\n        name: 'ZetaChain',\n        disabled: false,\n        explorer: 'https://zetachain.blockscout.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.CRONOS_MAINNET,\n        name: 'Cronos',\n        disabled: false,\n        explorer: 'https://cronoscan.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3635.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3635.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.FRAXTAL_MAINNET,\n        name: 'Fraxtal',\n        disabled: false,\n        explorer: 'https://fraxscan.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.GRAVITY_MAINNET,\n        name: 'Gravity',\n        disabled: false,\n        explorer: 'https://explorer.gravity.xyz',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.BSQUARED_MAINNET,\n        name: 'B² Network',\n        disabled: false,\n        explorer: 'https://explorer.bsquared.network',\n        icons: {\n            small: 'https://coin-images.coingecko.com/asset_platforms/images/239/small/bsquared-network.jpeg?1713432732',\n            large: 'https://coin-images.coingecko.com/asset_platforms/images/239/small/bsquared-network.jpeg?1713432732',\n        },\n    }),\n    new Chain({\n        id: ChainId.CRONOS_ZK_MAINNET,\n        name: 'Cronos zkEVM',\n        disabled: false,\n        explorer: 'https://explorer.zkevm.cronos.org',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33873.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33873.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.MORPH_MAINNET,\n        name: 'Morph',\n        disabled: false,\n        explorer: 'https://explorer.morphl2.io',\n        icons: {\n            small: 'https://coin-images.coingecko.com/asset_platforms/images/22185/small/morph.jpg?1729659940',\n            large: 'https://coin-images.coingecko.com/asset_platforms/images/22185/small/morph.jpg?1729659940',\n        },\n    }),\n    new Chain({\n        id: ChainId.SOLANA_MAINNET,\n        name: 'Solana',\n        disabled: false,\n        explorer: 'https://explorer.solana.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/5426.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/5426.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.GOAT_MAINNET,\n        name: 'Goat',\n        disabled: false,\n        explorer: 'https://explorer.goat.network',\n        icons: {\n            small: 'https://cdn.prod.website-files.com/6669a2e2b7f624149423b9be/6669b090137434ab4c6d11a2_favicoin%20goat.png',\n            large: 'https://cdn.prod.website-files.com/6669a2e2b7f624149423b9be/6669b090137434ab4c6d11a2_favicoin%20goat.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.SONIC_MAINNET,\n        name: 'Sonic',\n        disabled: false,\n        explorer: 'https://sonicscan.org',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32684.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32684.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.ABSTRACT_MAINNET,\n        name: 'Abstract',\n        disabled: false,\n        explorer: 'https://abscan.org',\n        icons: {\n            small: 'https://s3.coinmarketcap.com/dexer/token/d51628b923d63af38ff8900885c6399b.jpg',\n            large: 'https://s3.coinmarketcap.com/dexer/token/d51628b923d63af38ff8900885c6399b.jpg',\n        },\n    }),\n    new Chain({\n        id: ChainId.GNOSIS_MAINNET,\n        name: 'Gnosis',\n        disabled: false,\n        explorer: 'https://gnosisscan.io',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1659.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1659.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.BERACHAIN_MAINNET,\n        name: 'Berachain',\n        disabled: false,\n        explorer: 'https://berascan.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/24647.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/24647.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.UNICHAIN_MAINNET,\n        name: 'Unichain',\n        disabled: false,\n        explorer: 'https://uniscan.xyz',\n        icons: {\n            small: 'https://coin-images.coingecko.com/asset_platforms/images/22206/thumb/unichain.png?1739323630',\n            large: 'https://coin-images.coingecko.com/asset_platforms/images/22206/thumb/unichain.png?1739323630',\n        },\n    }),\n    new Chain({\n        id: ChainId.SONEIUM_MAINNET,\n        name: 'Soneium',\n        disabled: false,\n        explorer: 'https://soneium.blockscout.com/',\n        icons: {\n            small: 'https://coin-images.coingecko.com/asset_platforms/images/22200/thumb/soneium-removebg-preview.png?1737099934',\n            large: 'https://coin-images.coingecko.com/asset_platforms/images/22200/thumb/soneium-removebg-preview.png?1737099934',\n        },\n    }),\n    new Chain({\n        id: ChainId.OPBNB_MAINNET,\n        name: 'opBNB',\n        disabled: false,\n        explorer: 'https://opbnb.bscscan.com',\n        icons: {\n            small: 'https://icons.llamao.fi/icons/chains/rsz_opbnb?w=48&h=48',\n            large: 'https://icons.llamao.fi/icons/chains/rsz_opbnb?w=48&h=48',\n        },\n    }),\n    new Chain({\n        id: ChainId.HYPERLIQUID_MAINNET,\n        name: 'HyperEVM',\n        disabled: false,\n        explorer: 'https://www.hyperscan.com',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32196.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32196.png',\n        },\n    }),\n    new Chain({\n        id: ChainId.KATANA_MAINNET,\n        name: 'Katana',\n        disabled: false,\n        explorer: 'https://explorer.katanarpc.com',\n        icons: {\n            small: 'https://katana.network/meta/favicon.ico',\n            large: 'https://katana.network/meta/favicon.ico',\n        },\n    }),\n    new Chain({\n        id: ChainId.APECHAIN_MAINNET,\n        name: 'ApeChain',\n        disabled: false,\n        explorer: 'https://apescan.io',\n        icons: {\n            small: 'https://coin-images.coingecko.com/asset_platforms/images/22184/small/apechain.jpg?1729564324',\n            large: 'https://coin-images.coingecko.com/asset_platforms/images/22184/small/apechain.jpg?1729564324',\n        },\n    }),\n    new Chain({\n        id: ChainId.PLASMA_MAINNET,\n        name: 'Plasma',\n        disabled: false,\n        explorer: 'https://plasmascan.to',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/36645.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/36645.png',\n        },\n    }),\n]\n\nexport const getChainById = (chainId: ChainId | undefined): Chain | undefined => {\n    if (!chainId) return undefined\n    return chains.find((chain) => chain.id === chainId)\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\n// Reexport from 'big.js'\nconst enum RoundingMode {\n    /**\n     * Rounds towards zero.\n     * I.e. truncate, no rounding.\n     */\n    RoundDown = 0,\n    /**\n     * Rounds towards nearest neighbour.\n     * If equidistant, rounds away from zero.\n     */\n    RoundHalfUp = 1,\n    /**\n     * Rounds towards nearest neighbour.\n     * If equidistant, rounds towards even neighbour.\n     */\n    RoundHalfEven = 2,\n    /**\n     * Rounds away from zero.\n     */\n    RoundUp = 3,\n}\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n    [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n    [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n    [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n    [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n    [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n    [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n    public readonly numerator: JSBI\n    public readonly denominator: JSBI\n\n    public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n        this.numerator = parseBigintIsh(numerator)\n        this.denominator = parseBigintIsh(denominator)\n    }\n\n    // performs floor division\n    public get quotient(): JSBI {\n        return JSBI.divide(this.numerator, this.denominator)\n    }\n\n    // remainder after floor division\n    public get remainder(): Fraction {\n        return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n    }\n\n    public invert(): Fraction {\n        return new Fraction(this.denominator, this.numerator)\n    }\n\n    public add(other: Fraction | BigintIsh): Fraction {\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n        if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n            return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n        }\n        return new Fraction(\n            JSBI.add(\n                JSBI.multiply(this.numerator, otherParsed.denominator),\n                JSBI.multiply(otherParsed.numerator, this.denominator)\n            ),\n            JSBI.multiply(this.denominator, otherParsed.denominator)\n        )\n    }\n\n    public subtract(other: Fraction | BigintIsh): Fraction {\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n        if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n            return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n        }\n        return new Fraction(\n            JSBI.subtract(\n                JSBI.multiply(this.numerator, otherParsed.denominator),\n                JSBI.multiply(otherParsed.numerator, this.denominator)\n            ),\n            JSBI.multiply(this.denominator, otherParsed.denominator)\n        )\n    }\n\n    public lessThan(other: Fraction | BigintIsh): boolean {\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n        return JSBI.lessThan(\n            JSBI.multiply(this.numerator, otherParsed.denominator),\n            JSBI.multiply(otherParsed.numerator, this.denominator)\n        )\n    }\n\n    public equalTo(other: Fraction | BigintIsh): boolean {\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n        return JSBI.equal(\n            JSBI.multiply(this.numerator, otherParsed.denominator),\n            JSBI.multiply(otherParsed.numerator, this.denominator)\n        )\n    }\n\n    public greaterThan(other: Fraction | BigintIsh): boolean {\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n        return JSBI.greaterThan(\n            JSBI.multiply(this.numerator, otherParsed.denominator),\n            JSBI.multiply(otherParsed.numerator, this.denominator)\n        )\n    }\n\n    public multiply(other: Fraction | BigintIsh): Fraction {\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n        return new Fraction(\n            JSBI.multiply(this.numerator, otherParsed.numerator),\n            JSBI.multiply(this.denominator, otherParsed.denominator)\n        )\n    }\n\n    public divide(other: Fraction | BigintIsh): Fraction {\n        const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n        return new Fraction(\n            JSBI.multiply(this.numerator, otherParsed.denominator),\n            JSBI.multiply(this.denominator, otherParsed.numerator)\n        )\n    }\n\n    public toSignificant(\n        significantDigits: number,\n        format: object = { groupSeparator: '' },\n        rounding: Rounding = Rounding.ROUND_HALF_UP\n    ): string {\n        invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n        invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n        Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n        const quotient = new Decimal(this.numerator.toString())\n            .div(this.denominator.toString())\n            .toSignificantDigits(significantDigits)\n        return quotient.toFormat(quotient.decimalPlaces(), format)\n    }\n\n    public toFixed(\n        decimalPlaces: number,\n        format: object = { groupSeparator: '' },\n        rounding: Rounding = Rounding.ROUND_HALF_UP\n    ): string {\n        invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n        invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n        Big.DP = decimalPlaces\n        Big.RM = toFixedRounding[rounding]\n        return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n    }\n\n    public toExact(decimalPlaces: number, format: object = { groupSeparator: '' }): string {\n        Big.DP = decimalPlaces\n        return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n    }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ONE, SOLIDITY_TYPE_MAXIMA, SolidityType, THREE, TWO, ZERO } from './constants'\nimport { Token, TokenAmount } from './entities'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n    invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n    invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n    if (address === '') {\n        return address\n    }\n\n    try {\n        return getAddress(address)\n    } catch (error) {\n        invariant(false, `${address} is not a valid address.`)\n    }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n    return bigintIsh instanceof JSBI\n        ? bigintIsh\n        : typeof bigintIsh === 'bigint'\n        ? JSBI.BigInt(bigintIsh.toString())\n        : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n    validateSolidityTypeInstance(y, SolidityType.uint256)\n    let z: JSBI = ZERO\n    let x: JSBI\n    if (JSBI.greaterThan(y, THREE)) {\n        z = y\n        x = JSBI.add(JSBI.divide(y, TWO), ONE)\n        while (JSBI.lessThan(x, z)) {\n            z = x\n            x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n        }\n    } else if (JSBI.notEqual(y, ZERO)) {\n        z = ONE\n    }\n    return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n    invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n    // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n    invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n    // short circuit first item add\n    if (items.length === 0) {\n        items.push(add)\n        return null\n    } else {\n        const isFull = items.length === maxSize\n        // short circuit if full and the additional item does not come before the last item\n        if (isFull && comparator(items[items.length - 1], add) <= 0) {\n            return add\n        }\n\n        let lo = 0,\n            hi = items.length\n\n        while (lo < hi) {\n            const mid = (lo + hi) >>> 1\n            if (comparator(items[mid], add) <= 0) {\n                lo = mid + 1\n            } else {\n                hi = mid\n            }\n        }\n        items.splice(lo, 0, add)\n        return isFull ? items.pop()! : null\n    }\n}\n\nexport const createFakeAmount = (tokenAmount: TokenAmount, token: Token) => {\n    const decimalsA = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(tokenAmount.token.decimals))\n    const decimalsB = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(token.decimals))\n    const fakeAmountRaw = JSBI.divide(JSBI.multiply(tokenAmount.raw, decimalsB), decimalsA)\n    return new TokenAmount(token, fakeAmountRaw)\n}\n\nexport const delay = (ms: number) => new Promise((res) => setTimeout(res, ms))\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n    public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\n        return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n    }\n\n    public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\n        return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n    }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, SolidityType, TEN } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Token } from '../../entities'\nimport { Fraction } from './fraction'\n\nexport class TokenAmount extends Fraction {\n    public readonly token: Token\n\n    public constructor(token: Token, amount: BigintIsh) {\n        const parsedAmount = parseBigintIsh(amount)\n        validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n        super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n        this.token = token\n    }\n\n    public get raw(): JSBI {\n        return this.numerator\n    }\n\n    public add(other: TokenAmount): TokenAmount {\n        invariant(this.token.equals(other.token), 'TOKEN')\n        return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n    }\n\n    public subtract(other: TokenAmount): TokenAmount {\n        invariant(this.token.equals(other.token), 'TOKEN')\n        return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n    }\n\n    public greaterThanOrEqual(amount: JSBI): boolean {\n        return JSBI.greaterThanOrEqual(this.raw, amount)\n    }\n\n    public toSignificant(significantDigits = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n        return super.toSignificant(significantDigits, format, rounding)\n    }\n\n    public toFixed(\n        decimalPlaces: number = this.token.decimals,\n        format?: object,\n        rounding: Rounding = Rounding.ROUND_DOWN\n    ): string {\n        invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n        return super.toFixed(decimalPlaces, format, rounding)\n    }\n\n    public toExact(decimalPlaces: number = this.token.decimals, format: object = { groupSeparator: '' }): string {\n        return super.toExact(decimalPlaces, format)\n    }\n\n    public toBigInt(): bigint {\n        return BigInt(this.raw.toString())\n    }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { ChainId, Icons, SolidityType, TokenConstructor } from '../constants'\nimport { isTronChainId, tronAddressToEvm } from '../crosschain/chainUtils/tron'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\nimport { Chain, getChainById } from './chain'\n\n/**\n * A token is any fungible financial instrument on Ethereum.\n *\n */\nexport class Token {\n    public readonly decimals: number\n    public readonly symbol?: string\n    public readonly name?: string\n    public readonly chainId: ChainId\n    public readonly address: string\n    public readonly icons?: Icons\n    public readonly chainFromId?: ChainId\n    public readonly isNative: boolean\n    public readonly userToken?: boolean\n    public readonly deprecated: boolean\n    public readonly attributes?: {\n        solana?: string\n        ton?: string\n    }\n\n    /**\n     * Constructs an instance of the base class `Token`.\n     * @param params TokenConstructor\n     */\n    constructor(params: TokenConstructor) {\n        validateSolidityTypeInstance(JSBI.BigInt(params.decimals), SolidityType.uint8)\n\n        this.decimals = params.decimals\n        this.symbol = params.symbol\n        this.name = params.name\n        this.chainId = params.chainId\n        this.isNative = !!params.isNative\n        this.icons = params.icons\n        this.chainFromId = params.chainFromId\n        this.userToken = params.userToken\n        this.deprecated = !!params.deprecated\n        this.attributes = params.attributes\n\n        if (isTronChainId(params.chainId)) {\n            this.address = tronAddressToEvm(params.address)\n            return\n        }\n\n        this.address = validateAndParseAddress(params.address)\n    }\n\n    /**\n     * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n     * @param other other token to compare\n     */\n    public equals(other: Token): boolean {\n        // short circuit on reference equality\n        if (this === other) {\n            return true\n        }\n        return this.chainId === other.chainId && this.address === other.address\n    }\n\n    /**\n     * Returns true if the address of this token sorts before the address of the other token\n     * @param other other token to compare\n     * @throws if the tokens have the same address\n     * @throws if the tokens are on different chains\n     */\n    public sortsBefore(other: Token): boolean {\n        invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n        invariant(this.address !== other.address, 'ADDRESSES')\n        return this.address.toLowerCase() < other.address.toLowerCase()\n    }\n    get isSynthetic() {\n        return !!this.chainFromId\n    }\n\n    get chain(): Chain | undefined {\n        return getChainById(this.chainId)\n    }\n\n    get chainFrom(): Chain | undefined {\n        return getChainById(this.chainFromId)\n    }\n\n    get tonAddress(): string {\n        if (!this.attributes?.ton) {\n            throw new Error(`${this.name} has no ton address`)\n        }\n        return this.attributes.ton\n    }\n\n    get solAddress(): string {\n        if (!this.attributes?.solana) {\n            throw new Error(`${this.name} has no solana address`)\n        }\n        return this.attributes.solana\n    }\n}\n/**\n * Compares two currencies for equality\n */\nexport function tokenEquals(tokenA: Token, tokenB: Token): boolean {\n    return tokenA.equals(tokenB)\n}\n\nexport const WETH = {\n    // >> FAKE\n    [ChainId.TON_MAINNET]: new Token({\n        chainId: ChainId.TON_MAINNET,\n        address: '',\n        decimals: 9,\n    }),\n    [ChainId.TON_TESTNET]: new Token({\n        chainId: ChainId.TON_TESTNET,\n        address: '',\n        decimals: 9,\n    }),\n    [ChainId.BTC_MAINNET]: new Token({\n        chainId: ChainId.BTC_MAINNET,\n        address: '',\n        decimals: 8,\n    }),\n    [ChainId.BTC_MUTINY]: new Token({\n        chainId: ChainId.BTC_MUTINY,\n        address: '',\n        decimals: 8,\n    }),\n    [ChainId.BTC_TESTNET4]: new Token({\n        chainId: ChainId.BTC_TESTNET4,\n        address: '',\n        decimals: 8,\n    }),\n    [ChainId.SOLANA_MAINNET]: new Token({\n        chainId: ChainId.SOLANA_MAINNET,\n        address: '',\n        decimals: 9,\n    }),\n    // << FAKE\n    [ChainId.TRON_MAINNET]: new Token({\n        chainId: ChainId.TRON_MAINNET,\n        address: '0x891CDB91D149F23B1A45D9C5CA78A88D0CB44C18',\n        decimals: 6,\n        symbol: 'WTRX',\n        isNative: false,\n        name: 'Wrapped TRX',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png',\n        },\n    }),\n    [ChainId.ETH_MAINNET]: new Token({\n        chainId: ChainId.ETH_MAINNET,\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n        },\n    }),\n    [ChainId.ETH_RINKEBY]: new Token({\n        chainId: ChainId.ETH_RINKEBY,\n        address: '0xc778417e063141139fce010982780140aa0cd5ab',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n        },\n    }),\n    [ChainId.ETH_KOVAN]: new Token({\n        chainId: ChainId.ETH_KOVAN,\n        address: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n        },\n    }),\n    [ChainId.BSC_MAINNET]: new Token({\n        chainId: ChainId.BSC_MAINNET,\n        address: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n        decimals: 18,\n        symbol: 'WBNB',\n        isNative: false,\n        name: 'Wrapped BNB',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n        },\n    }),\n    [ChainId.BSC_TESTNET]: new Token({\n        chainId: ChainId.BSC_TESTNET,\n        address: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\n        decimals: 18,\n        symbol: 'WBNB',\n        isNative: false,\n        name: 'Wrapped BNB',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n        },\n    }),\n    [ChainId.MATIC_MAINNET]: new Token({\n        chainId: ChainId.MATIC_MAINNET,\n        address: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n        decimals: 18,\n        symbol: 'WMATIC',\n        isNative: false,\n        name: 'Wrapped MATIC',\n        icons: {\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',\n        },\n    }),\n    [ChainId.MATIC_MUMBAI]: new Token({\n        chainId: ChainId.MATIC_MUMBAI,\n        address: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n        decimals: 18,\n        symbol: 'WMATIC',\n        isNative: false,\n        name: 'Wrapped MATIC',\n        icons: {\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png',\n        },\n    }),\n\n    [ChainId.AVAX_MAINNET]: new Token({\n        chainId: ChainId.AVAX_MAINNET,\n        address: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n        decimals: 18,\n        symbol: 'WAVAX',\n        isNative: false,\n        name: 'Wrapped AVAX',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png',\n        },\n    }),\n    [ChainId.AVAX_TESTNET]: new Token({\n        chainId: ChainId.AVAX_TESTNET,\n        address: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n        decimals: 18,\n        symbol: 'WAVAX',\n        isNative: false,\n        name: 'Wrapped AVAX',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png',\n        },\n    }),\n    [ChainId.HECO_MAINNET]: new Token({\n        chainId: ChainId.HECO_MAINNET,\n        address: '0x5545153ccfca01fbd7dd11c0b23ba694d9509a6f',\n        decimals: 18,\n        symbol: 'WHT',\n        isNative: false,\n        name: 'Wrapped HT',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png',\n        },\n    }),\n    [ChainId.HECO_TESTNET]: new Token({\n        chainId: ChainId.HECO_TESTNET,\n        address: '0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836',\n        decimals: 18,\n        symbol: 'WHT',\n        isNative: false,\n        name: 'Wrapped HT',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png',\n        },\n    }),\n    [ChainId.OKEX_MAINNET]: new Token({\n        chainId: ChainId.OKEX_MAINNET,\n        address: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n        decimals: 18,\n        symbol: 'WOKT',\n        isNative: false,\n        name: 'Wrapped OKT',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png',\n        },\n    }),\n    [ChainId.OKEX_TESTNET]: new Token({\n        chainId: ChainId.OKEX_TESTNET,\n        address: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n        decimals: 18,\n        symbol: 'WOKT',\n        isNative: false,\n        name: 'Wrapped OKT',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png',\n        },\n    }),\n    [ChainId.BOBA_MAINNET]: new Token({\n        chainId: ChainId.BOBA_MAINNET,\n        address: '0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n        },\n    }),\n    [ChainId.BOBA_AVALANCHE]: new Token({\n        chainId: ChainId.BOBA_AVALANCHE,\n        address: '0x26c319B7B2cF823365414d082698C8ac90cbBA63',\n        decimals: 18,\n        symbol: 'WBOBA',\n        isNative: false,\n        name: 'Wrapped BOBA',\n        icons: {\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14556.png',\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14556.png',\n        },\n    }),\n    [ChainId.SYMBIOSIS_TESTNET]: new Token({\n        chainId: ChainId.SYMBIOSIS_TESTNET,\n        address: '0x0000000000000000000000000000000000000000',\n        decimals: 18,\n        symbol: 'WTVT',\n        isNative: false,\n        name: 'Wrapped TVT',\n        icons: {\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n        },\n    }),\n    [ChainId.SYMBIOSIS_MAINNET]: new Token({\n        chainId: ChainId.SYMBIOSIS_MAINNET,\n        address: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n        decimals: 18,\n        symbol: 'WSIS',\n        isNative: false,\n        name: 'Wrapped SIS',\n        icons: {\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n        },\n    }),\n    [ChainId.BOBA_RINKEBY]: new Token({\n        chainId: ChainId.BOBA_RINKEBY,\n        address: '0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            large: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n            small: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png',\n        },\n    }),\n    [ChainId.MILKOMEDA_MAINNET]: new Token({\n        chainId: ChainId.MILKOMEDA_MAINNET,\n        address: '0xAE83571000aF4499798d1e3b0fA0070EB3A3E3F9',\n        decimals: 18,\n        symbol: 'WADA',\n        isNative: false,\n        name: 'Wrapped ADA',\n        icons: {\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png',\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png',\n        },\n    }),\n    [ChainId.MILKOMEDA_DEVNET]: new Token({\n        chainId: ChainId.MILKOMEDA_DEVNET,\n        // address: '0x65a51E52eCD17B641f8F0D1d56a6c9738951FDC9',\n        address: '0x01bbbb9c97fc43e3393e860fc8bbead47b6960db',\n        decimals: 18,\n        symbol: 'WTADA',\n        isNative: false,\n        name: 'Wrapped TADA',\n        icons: {\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png',\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png',\n        },\n    }),\n    [ChainId.AURORA_MAINNET]: new Token({\n        chainId: ChainId.AURORA_MAINNET,\n        address: '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png',\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png',\n        },\n    }),\n    [ChainId.AURORA_TESTNET]: new Token({\n        chainId: ChainId.AURORA_TESTNET,\n        address: '0x1b6A3d5B5DCdF7a37CFE35CeBC0C4bD28eA7e946',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png',\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png',\n        },\n    }),\n    [ChainId.TELOS_MAINNET]: new Token({\n        chainId: ChainId.TELOS_MAINNET,\n        address: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\n        decimals: 18,\n        symbol: 'WTLOS',\n        isNative: false,\n        name: 'Wrapped TLOS',\n        icons: {\n            large: 'https://raw.githubusercontent.com/telosnetwork/token-list/main/logos/wtlos.png',\n            small: 'https://raw.githubusercontent.com/telosnetwork/token-list/main/logos/wtlos.png',\n        },\n    }),\n    [ChainId.TELOS_TESTNET]: new Token({\n        chainId: ChainId.TELOS_TESTNET,\n        address: '0xaE85Bf723A9e74d6c663dd226996AC1b8d075AA9',\n        decimals: 18,\n        symbol: 'WTLOS',\n        isNative: false,\n        name: 'Wrapped TLOS',\n        icons: {\n            large: 'https://raw.githubusercontent.com/telosnetwork/token-list/main/logos/wtlos.png',\n            small: 'https://raw.githubusercontent.com/telosnetwork/token-list/main/logos/wtlos.png',\n        },\n    }),\n    [ChainId.SHARDEUM_TESTNET_2]: new Token({\n        chainId: ChainId.SHARDEUM_TESTNET_2,\n        address: '0xb6204c4b6b2545cF23F5EC0Bf8AEB8cB56E13C15',\n        decimals: 18,\n        symbol: 'WSHM',\n        isNative: false,\n        name: 'Wrapped SHM',\n        icons: {\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/22353.png',\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/22353.png',\n        },\n    }),\n    [ChainId.KAVA_MAINNET]: new Token({\n        chainId: ChainId.KAVA_MAINNET,\n        address: '0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b',\n        decimals: 18,\n        symbol: 'WKAVA',\n        isNative: false,\n        name: 'Wrapped KAVA',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4846.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4846.png',\n        },\n    }),\n    [ChainId.SCROLL_SEPOLIA]: new Token({\n        chainId: ChainId.SCROLL_SEPOLIA,\n        address: '0x5300000000000000000000000000000000000004',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.ZKSYNC_MAINNET]: new Token({\n        chainId: ChainId.ZKSYNC_MAINNET,\n        address: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.ARBITRUM_MAINNET]: new Token({\n        chainId: ChainId.ARBITRUM_MAINNET,\n        address: '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.ARBITRUM_NOVA]: new Token({\n        chainId: ChainId.ARBITRUM_NOVA,\n        address: '0x722e8bdd2ce80a4422e880164f2079488e115365',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.OPTIMISM_MAINNET]: new Token({\n        chainId: ChainId.OPTIMISM_MAINNET,\n        address: '0x4200000000000000000000000000000000000006',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.ZETACHAIN_ATHENS_2]: new Token({\n        chainId: ChainId.ZETACHAIN_ATHENS_2,\n        address: '0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf',\n        decimals: 18,\n        symbol: 'WZETA',\n        isNative: false,\n        name: 'Wrapped ZETA',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png',\n        },\n    }),\n    [ChainId.POLYGON_ZK]: new Token({\n        chainId: ChainId.POLYGON_ZK,\n        address: '0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.TRON_TESTNET]: new Token({\n        chainId: ChainId.TRON_TESTNET,\n        address: '0xf060b2655346cf3f825c3300177dff8a2acd89aa',\n        decimals: 6,\n        symbol: 'WTRX',\n        isNative: false,\n        name: 'Wrapped TRX',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png',\n        },\n    }),\n    [ChainId.LINEA_TESTNET]: new Token({\n        chainId: ChainId.LINEA_TESTNET,\n        address: '0x2C1b868d6596a18e32E61B901E4060C872647b6C',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.LINEA_MAINNET]: new Token({\n        chainId: ChainId.LINEA_MAINNET,\n        address: '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.MANTLE_MAINNET]: new Token({\n        chainId: ChainId.MANTLE_MAINNET,\n        address: '0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8',\n        decimals: 18,\n        symbol: 'WMNT',\n        isNative: false,\n        name: 'Wrapped MNT',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png',\n        },\n    }),\n    [ChainId.MANTLE_TESTNET]: new Token({\n        chainId: ChainId.MANTLE_TESTNET,\n        address: '0x8734110e5e1dcF439c7F549db740E546fea82d66',\n        decimals: 18,\n        symbol: 'WBIT',\n        isNative: false,\n        name: 'Wrapped BIT',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png',\n        },\n    }),\n    [ChainId.BASE_MAINNET]: new Token({\n        chainId: ChainId.BASE_MAINNET,\n        address: '0x4200000000000000000000000000000000000006',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.SCROLL_MAINNET]: new Token({\n        chainId: ChainId.SCROLL_MAINNET,\n        address: '0x5300000000000000000000000000000000000004',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.MANTA_MAINNET]: new Token({\n        chainId: ChainId.MANTA_MAINNET,\n        address: '0x0Dc808adcE2099A9F62AA87D9670745AbA741746',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.METIS_MAINNET]: new Token({\n        chainId: ChainId.METIS_MAINNET,\n        address: '0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481',\n        decimals: 18,\n        symbol: 'WMETIS',\n        isNative: false,\n        name: 'Wrapped METIS',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9640.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9640.png',\n        },\n    }),\n    [ChainId.OKX_X1_TESTNET]: new Token({\n        chainId: ChainId.OKX_X1_TESTNET,\n        address: '0x67A1f4A939b477A6b7c5BF94D97E45dE87E608eF',\n        decimals: 18,\n        symbol: 'WOKB',\n        isNative: false,\n        name: 'Wrapped OKB',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png',\n        },\n    }),\n    [ChainId.BAHAMUT_MAINNET]: new Token({\n        chainId: ChainId.BAHAMUT_MAINNET,\n        address: '0x4084aB20f8ffcA76C19AAF854Fb5fe9DE6217fBB',\n        decimals: 18,\n        symbol: 'WFTN',\n        isNative: false,\n        name: 'Wrapped FTN',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/22615.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/22615.png',\n        },\n    }),\n    [ChainId.MODE_MAINNET]: new Token({\n        chainId: ChainId.MODE_MAINNET,\n        address: '0x4200000000000000000000000000000000000006',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.RSK_MAINNET]: new Token({\n        chainId: ChainId.RSK_MAINNET,\n        address: '0x542fda317318ebf1d3deaf76e0b632741a7e677d',\n        decimals: 18,\n        symbol: 'WRBTC',\n        isNative: false,\n        name: 'Wrapped BTC',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3626.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3626.png',\n        },\n    }),\n    [ChainId.BLAST_MAINNET]: new Token({\n        chainId: ChainId.BLAST_MAINNET,\n        address: '0x4300000000000000000000000000000000000004',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.MERLIN_MAINNET]: new Token({\n        chainId: ChainId.MERLIN_MAINNET,\n        address: '0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA',\n        decimals: 18,\n        symbol: 'WBTC',\n        isNative: false,\n        name: 'Wrapped BTC',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n        },\n    }),\n    [ChainId.ZKLINK_MAINNET]: new Token({\n        chainId: ChainId.ZKLINK_MAINNET,\n        address: '0x8280a4e7D5B3B658ec4580d3Bc30f5e50454F169',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.SEPOLIA_TESTNET]: new Token({\n        chainId: ChainId.SEPOLIA_TESTNET,\n        address: '0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.CORE_MAINNET]: new Token({\n        chainId: ChainId.CORE_MAINNET,\n        address: '0x191E94fa59739e188dcE837F7f6978d84727AD01',\n        decimals: 18,\n        symbol: 'WCORE',\n        isNative: false,\n        name: 'Wrapped CORE',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/23254.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/23254.png',\n        },\n    }),\n    [ChainId.TAIKO_MAINNET]: new Token({\n        chainId: ChainId.TAIKO_MAINNET,\n        address: '0xA51894664A773981C6C112C43ce576f315d5b1B6',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.SEI_EVM_MAINNET]: new Token({\n        chainId: ChainId.SEI_EVM_MAINNET,\n        address: '0xE30feDd158A2e3b13e9badaeABaFc5516e95e8C7',\n        decimals: 18,\n        symbol: 'WSEI',\n        isNative: false,\n        name: 'Wrapped SEI',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/23149.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/23149.png',\n        },\n    }),\n    [ChainId.ZETACHAIN_MAINNET]: new Token({\n        chainId: ChainId.ZETACHAIN_MAINNET,\n        address: '0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf',\n        decimals: 18,\n        symbol: 'WZETA',\n        isNative: false,\n        name: 'Wrapped ZETA',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/29464.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/29464.png',\n        },\n    }),\n    [ChainId.CRONOS_MAINNET]: new Token({\n        chainId: ChainId.CRONOS_MAINNET,\n        address: '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23',\n        decimals: 18,\n        symbol: 'WCRO',\n        isNative: false,\n        name: 'Wrapped CRO',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14532.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/14532.png',\n        },\n    }),\n    [ChainId.FRAXTAL_MAINNET]: new Token({\n        chainId: ChainId.FRAXTAL_MAINNET,\n        address: '0xFc00000000000000000000000000000000000002',\n        decimals: 18,\n        symbol: 'WFRAX',\n        isNative: false,\n        name: 'Wrapped FRAX',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png',\n        },\n    }),\n    [ChainId.GRAVITY_MAINNET]: new Token({\n        chainId: ChainId.GRAVITY_MAINNET,\n        address: '0xBB859E225ac8Fb6BE1C7e38D87b767e95Fef0EbD',\n        decimals: 18,\n        symbol: 'wG',\n        isNative: false,\n        name: 'Wrapped G',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png',\n        },\n    }),\n    [ChainId.BSQUARED_MAINNET]: new Token({\n        chainId: ChainId.BSQUARED_MAINNET,\n        address: '0x4200000000000000000000000000000000000006',\n        decimals: 18,\n        symbol: 'WBTC',\n        isNative: false,\n        name: 'Wrapped BTC',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n        },\n    }),\n    [ChainId.CRONOS_ZK_MAINNET]: new Token({\n        chainId: ChainId.CRONOS_ZK_MAINNET,\n        address: '0xC1bF55EE54E16229d9b369a5502Bfe5fC9F20b6d',\n        decimals: 18,\n        symbol: 'wzkCRO',\n        isNative: false,\n        name: 'Wrapped zkCRO',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33873.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33873.png',\n        },\n    }),\n    [ChainId.MORPH_MAINNET]: new Token({\n        chainId: ChainId.MORPH_MAINNET,\n        address: '0x5300000000000000000000000000000000000011',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.GOAT_MAINNET]: new Token({\n        chainId: ChainId.GOAT_MAINNET,\n        address: '0xbC10000000000000000000000000000000000000',\n        decimals: 18,\n        symbol: 'WGBTC',\n        isNative: false,\n        name: 'Wrapped Goat BTC',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n        },\n    }),\n    [ChainId.SONIC_MAINNET]: new Token({\n        chainId: ChainId.SONIC_MAINNET,\n        address: '0x039e2fB66102314Ce7b64Ce5Ce3E5183bc94aD38',\n        decimals: 18,\n        symbol: 'WS',\n        isNative: false,\n        name: 'Wrapped Sonic',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32684.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32684.png',\n        },\n    }),\n    [ChainId.ABSTRACT_MAINNET]: new Token({\n        chainId: ChainId.ABSTRACT_MAINNET,\n        address: '0x3439153EB7AF838Ad19d56E1571FBD09333C2809',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.GNOSIS_MAINNET]: new Token({\n        chainId: ChainId.GNOSIS_MAINNET,\n        address: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n        decimals: 18,\n        symbol: 'WXDAI',\n        isNative: false,\n        name: 'Wrapped xDAI',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9021.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/9021.png',\n        },\n    }),\n    [ChainId.BERACHAIN_MAINNET]: new Token({\n        chainId: ChainId.BERACHAIN_MAINNET,\n        address: '0x6969696969696969696969696969696969696969',\n        decimals: 18,\n        symbol: 'WBERA',\n        isNative: false,\n        name: 'Wrapped BERA',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/35608.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/35608.png',\n        },\n    }),\n    [ChainId.UNICHAIN_MAINNET]: new Token({\n        chainId: ChainId.UNICHAIN_MAINNET,\n        address: '0x4200000000000000000000000000000000000006',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.SONEIUM_MAINNET]: new Token({\n        chainId: ChainId.SONEIUM_MAINNET,\n        address: '0x4200000000000000000000000000000000000006',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.OPBNB_MAINNET]: new Token({\n        chainId: ChainId.OPBNB_MAINNET,\n        address: '0x4200000000000000000000000000000000000006',\n        decimals: 18,\n        symbol: 'WBNB',\n        isNative: false,\n        name: 'Wrapped BNB',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n        },\n    }),\n    [ChainId.HYPERLIQUID_MAINNET]: new Token({\n        chainId: ChainId.HYPERLIQUID_MAINNET,\n        address: '0x5555555555555555555555555555555555555555',\n        decimals: 18,\n        symbol: 'WHYPE',\n        isNative: false,\n        name: 'Wrapped HYPE',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/35881.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/35881.png',\n        },\n    }),\n    [ChainId.KATANA_MAINNET]: new Token({\n        chainId: ChainId.KATANA_MAINNET,\n        address: '0xEE7D8BCFb72bC1880D0Cf19822eB0A2e6577aB62',\n        decimals: 18,\n        symbol: 'WETH',\n        isNative: false,\n        name: 'Wrapped ETH',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n        },\n    }),\n    [ChainId.APECHAIN_MAINNET]: new Token({\n        chainId: ChainId.APECHAIN_MAINNET,\n        address: '0x48b62137edfa95a428d35c09e44256a739f6b557',\n        decimals: 18,\n        symbol: 'WAPE',\n        isNative: false,\n        name: 'Wrapped APE',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png',\n        },\n    }),\n    [ChainId.PLASMA_MAINNET]: new Token({\n        chainId: ChainId.PLASMA_MAINNET,\n        address: '0x6100E367285b01F48D07953803A2d8dCA5D19873',\n        decimals: 18,\n        symbol: 'WXPL',\n        isNative: false,\n        name: 'Wrapped XPL',\n        icons: {\n            small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/36645.png',\n            large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/36645.png',\n        },\n    }),\n}\n","import { JsonFragment } from '@ethersproject/abi'\nimport { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexDataSlice } from '@ethersproject/bytes'\nimport { keccak256 as kekKeccak256 } from '@ethersproject/keccak256'\nimport BigNumber from 'bignumber.js'\nimport { utils } from 'ethers'\nimport TronWeb, { TransactionInfo } from 'tronweb'\nimport { ChainId } from '../../constants'\nimport { Chain, Token } from '../../entities'\n\nexport interface TronTransactionData {\n    chain_id: number\n    call_value: number | string\n    contract_address: string\n    fee_limit: number\n    function_selector: string\n    owner_address: string\n    raw_parameter: string\n}\n\ninterface Params {\n    chainId: ChainId\n    tronWeb: TronWeb\n    abi: ReadonlyArray<JsonFragment>\n    contractAddress: string\n    functionName: string\n    params: any[]\n    ownerAddress: string\n    value?: string | number | BigNumber\n}\n\nexport function getFunctionSelector(abi: any): string {\n    if (abi instanceof utils.FunctionFragment) {\n        // Convert to mutable JSON object\n        abi = JSON.parse(abi.format(utils.FormatTypes.json))\n    }\n\n    abi.stateMutability = abi.stateMutability ? abi.stateMutability.toLowerCase() : 'nonpayable'\n    abi.type = abi.type ? abi.type.toLowerCase() : ''\n    if (abi.type === 'fallback' || abi.type === 'receive') return '0x'\n    const iface = new utils.Interface([abi])\n    if (abi.type === 'event') {\n        return iface.getEvent(abi.name).format(utils.FormatTypes.sighash)\n    }\n    return iface.getFunction(abi.name).format(utils.FormatTypes.sighash)\n}\n\nexport function prepareTronTransaction({\n    chainId,\n    tronWeb,\n    abi,\n    contractAddress,\n    functionName,\n    params,\n    value,\n    ownerAddress,\n}: Params): TronTransactionData {\n    const functionFragment = abi.find((item) => item.type === 'function' && item.name === functionName)\n\n    if (!functionFragment) {\n        throw new Error('Method not found in ABI')\n    }\n\n    const functionSelector = getFunctionSelector(functionFragment)\n\n    const rawParameter = tronWeb.utils.abi.encodeParamsV2ByABI(functionFragment, params)\n    return {\n        chain_id: chainId,\n        call_value: value?.toString() ?? 0,\n        contract_address: TronWeb.address.fromHex(contractAddress),\n        fee_limit: 200000000, // 200 TRX\n        function_selector: functionSelector,\n        owner_address: TronWeb.address.fromHex(ownerAddress),\n        raw_parameter: rawParameter,\n    }\n}\n\nconst ADDRESS_PREFIX_REGEX = /^(41)/\n\nexport function tronAddressToEvm(address: string): string {\n    try {\n        return TronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x')\n    } catch (e) {\n        return address\n    }\n}\n\nexport function isTronChainId(chainId: ChainId): boolean {\n    return [ChainId.TRON_MAINNET, ChainId.TRON_TESTNET].includes(chainId)\n}\n\nexport function isTronChain(chain: Chain): boolean {\n    return isTronChainId(chain.id)\n}\n\nexport function isTronToken(token: Token): boolean {\n    return isTronChainId(token.chainId)\n}\n\nexport async function getTransactionInfoById(tronWeb: TronWeb, txId: string): Promise<TransactionInfo | null> {\n    const result = await tronWeb.fullNode.request('wallet/gettransactioninfobyid', { value: txId }, 'post')\n\n    if (result && Object.keys(result).length > 0) {\n        return result\n    }\n\n    return null\n}\n\n// Tron uses 0x41 as the prefix for contract addresses created by CREATE2, unlike EVM 0xff.\nexport function getTronCreate2Address(from: string, salt: BytesLike, initCodeHash: BytesLike): string {\n    return getAddress(hexDataSlice(kekKeccak256(concat(['0x41', getAddress(from), salt, initCodeHash])), 12))\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { tokenEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\n\nexport class Price extends Fraction {\n    public readonly baseToken: Token // input i.e. denominator\n    public readonly quoteToken: Token // output i.e. numerator\n    public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n    public static fromRoute(route: Route): Price {\n        const prices: Price[] = []\n        for (const [i, pair] of route.pairs.entries()) {\n            prices.push(\n                route.path[i].equals(pair.token0)\n                    ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n                    : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n            )\n        }\n        return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    }\n\n    // denominator and numerator _must_ be raw, i.e. in the native representation\n    public constructor(baseToken: Token, quoteToken: Token, denominator: BigintIsh, numerator: BigintIsh) {\n        super(numerator, denominator)\n\n        this.baseToken = baseToken\n        this.quoteToken = quoteToken\n        this.scalar = new Fraction(\n            JSBI.exponentiate(TEN, JSBI.BigInt(baseToken.decimals)),\n            JSBI.exponentiate(TEN, JSBI.BigInt(quoteToken.decimals))\n        )\n    }\n\n    public get raw(): Fraction {\n        return new Fraction(this.numerator, this.denominator)\n    }\n\n    public get adjusted(): Fraction {\n        return super.multiply(this.scalar)\n    }\n\n    public invert(): Price {\n        return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator)\n    }\n\n    public multiply(other: Price): Price {\n        invariant(tokenEquals(this.quoteToken, other.baseToken), 'TOKEN')\n        const fraction = super.multiply(other)\n        return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator)\n    }\n\n    // performs floor division on overflow\n    public quote(tokenAmount: TokenAmount): TokenAmount {\n        invariant(tokenEquals(tokenAmount.token, this.baseToken), 'TOKEN')\n        return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient)\n    }\n\n    public toSignificant(significantDigits = 6, format?: object, rounding?: Rounding): string {\n        return this.adjusted.toSignificant(significantDigits, format, rounding)\n    }\n\n    public toFixed(decimalPlaces = 4, format?: object, rounding?: Rounding): string {\n        return this.adjusted.toFixed(decimalPlaces, format, rounding)\n    }\n}\n","import { Price, TokenAmount } from './fractions'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { getCreate2Address as getEvmCreate2Address } from '@ethersproject/address'\n\nimport {\n    _1000,\n    _998,\n    BigintIsh,\n    ChainId,\n    FACTORY_ADDRESS,\n    FIVE,\n    INIT_CODE_HASH,\n    MINIMUM_LIQUIDITY,\n    ONE,\n    ZERO,\n} from '../constants'\nimport { parseBigintIsh, sqrt } from '../utils'\nimport { getTronCreate2Address, isTronChainId } from '../crosschain/chainUtils/tron'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\nimport { Token } from './token'\nimport { BytesLike } from '@ethersproject/bytes'\n\nexport let PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\n// TODO replace with onchain call to Factory.getPair method\nexport function getZkCreate2Address(from: string, salt: BytesLike, initCodeHash: BytesLike): string {\n    const MAP: Record<string, Record<string, string>> = {\n        '0x50704Ac00064be03CEEd817f41E0Aa61F52ef4DC': {\n            '0x10dac1b69a0ef99baf5786f77bf0aab84749fd564007f4fad53a9395afa06d6a':\n                '0x20eDB5049461c9a6F490671742824c9F9aD05eD8', // H2 (USDC,wzkCRO)\n            '0xdaa80bb10d1689abf76a659ce2e4b2c7e859fca2d05933a3d81c3636c0ef62f0':\n                '0x006022eb9de7869e84f021605Ae23bE6C7D2d952', // H2 (USDC,vUSD)\n            '0x91965e804433f989e92a043ea20a588fec7c4ca4ce64a380d6215f3992eadbb6':\n                '0xA61947027caDbe9505d2a40E73EB21CB957e2daD', // H2 (wzkCRO,vUSD)\n        },\n    }\n    try {\n        return MAP[from][salt as string]\n    } catch {\n        throw new Error(`Unknown zk pair with initCodeHash: ${initCodeHash}`)\n    }\n}\n\nexport class Pair {\n    public readonly liquidityToken: Token\n    private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n    public static getAddress(tokenA: Token, tokenB: Token): string {\n        const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n        const chainId = tokens[0].chainId\n\n        let types: string[] = ['address', 'address']\n        let params: (string | boolean)[] = [tokens[0].address, tokens[1].address]\n\n        if (chainId === ChainId.KAVA_MAINNET) {\n            types = [...types, 'bool']\n            params = [...params, false]\n        }\n\n        if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n            let getCreate2Address = getEvmCreate2Address\n\n            if (isTronChainId(chainId)) {\n                getCreate2Address = getTronCreate2Address\n            } else if (chainId === ChainId.CRONOS_ZK_MAINNET) {\n                getCreate2Address = getZkCreate2Address\n            }\n\n            PAIR_ADDRESS_CACHE = {\n                ...PAIR_ADDRESS_CACHE,\n                [tokens[0].address]: {\n                    ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n                    [tokens[1].address]: getCreate2Address(\n                        FACTORY_ADDRESS[chainId],\n                        keccak256(['bytes'], [pack(types, params)]),\n                        INIT_CODE_HASH[chainId]\n                    ),\n                },\n            }\n        }\n\n        return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n    }\n\n    public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n        const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        this.liquidityToken = new Token({\n            chainId: tokenAmounts[0].token.chainId,\n            address: Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n            decimals: 18,\n            symbol: 'UNI-V2',\n            name: 'Uniswap V2',\n        })\n        this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    }\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n     */\n    public get token0Price(): Price {\n        return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n    public get token1Price(): Price {\n        return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n    }\n\n    /**\n     * Return the price of the given token in terms of the other token in the pair.\n     * @param token token to return price of\n     */\n    public priceOf(token: Token): Price {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price : this.token1Price\n    }\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].token\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].token\n    }\n\n    public get reserve0(): TokenAmount {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): TokenAmount {\n        return this.tokenAmounts[1]\n    }\n\n    public reserveOf(token: Token): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.reserveOf(inputAmount.token)\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n        const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _998)\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n        const outputAmount = new TokenAmount(\n            inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.divide(numerator, denominator)\n        )\n        if (JSBI.equal(outputAmount.raw, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n        if (\n            JSBI.equal(this.reserve0.raw, ZERO) ||\n            JSBI.equal(this.reserve1.raw, ZERO) ||\n            JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n        ) {\n            throw new InsufficientReservesError()\n        }\n\n        const outputReserve = this.reserveOf(outputAmount.token)\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _998)\n        const inputAmount = new TokenAmount(\n            outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.add(JSBI.divide(numerator, denominator), ONE)\n        )\n        return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getLiquidityMinted(\n        totalSupply: TokenAmount,\n        tokenAmountA: TokenAmount,\n        tokenAmountB: TokenAmount\n    ): TokenAmount {\n        invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n        const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n        let liquidity: JSBI\n        if (JSBI.equal(totalSupply.raw, ZERO)) {\n            liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n        } else {\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n        }\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return new TokenAmount(this.liquidityToken, liquidity)\n    }\n\n    public getLiquidityValue(\n        token: Token,\n        totalSupply: TokenAmount,\n        liquidity: TokenAmount,\n        feeOn = false,\n        kLast?: BigintIsh\n    ): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n        invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n        invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n        let totalSupplyAdjusted: TokenAmount\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply\n        } else {\n            invariant(!!kLast, 'K_LAST')\n            const kLastParsed = parseBigintIsh(kLast)\n            if (!JSBI.equal(kLastParsed, ZERO)) {\n                const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n                const rootKLast = sqrt(kLastParsed)\n                if (JSBI.greaterThan(rootK, rootKLast)) {\n                    const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n                    const feeLiquidity = JSBI.divide(numerator, denominator)\n                    totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n                } else {\n                    totalSupplyAdjusted = totalSupply\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply\n            }\n        }\n\n        return new TokenAmount(\n            token,\n            JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n        )\n    }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId } from '../constants'\n\nimport { WETH, Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions'\n\nexport class Route {\n    public readonly pairs: Pair[]\n    public readonly path: Token[]\n    public readonly input: Token\n    public readonly output: Token\n    public readonly midPrice: Price\n\n    public constructor(pairs: Pair[], input: Token, output?: Token) {\n        invariant(pairs.length > 0, 'PAIRS')\n        invariant(\n            pairs.every((pair) => pair.chainId === pairs[0].chainId),\n            'CHAIN_IDS'\n        )\n        invariant(\n            pairs[0].involvesToken(input) || (input.isNative && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n            'INPUT'\n        )\n        invariant(\n            typeof output === 'undefined' ||\n                pairs[pairs.length - 1].involvesToken(output) ||\n                (output.isNative && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n            'OUTPUT'\n        )\n\n        const path: Token[] = [input.isNative ? WETH[pairs[0].chainId] : (input as Token)]\n        for (const [i, pair] of pairs.entries()) {\n            const currentInput = path[i]\n            invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n            const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n            path.push(output)\n        }\n\n        this.pairs = pairs\n        this.path = path\n        this.midPrice = Price.fromRoute(this)\n        this.input = input\n        this.output = output ?? path[path.length - 1]\n    }\n\n    public get chainId(): ChainId {\n        return this.pairs[0].chainId\n    }\n}\n","import { ChainId } from '../constants'\nimport { Token } from './token'\n\nconst GAS = (chainId: ChainId, symbol: string, iconId: number, decimals = 18) =>\n    new Token({\n        isNative: true,\n        name: symbol,\n        symbol,\n        address: '',\n        chainId,\n        decimals,\n        icons: {\n            small: `https://s2.coinmarketcap.com/static/img/coins/64x64/${iconId}.png`,\n            large: `https://s2.coinmarketcap.com/static/img/coins/64x64/${iconId}.png`,\n        },\n    })\n\nconst TOKEN_AS_GAS = (chainId: ChainId, address: string, symbol: string, iconId: number, decimals = 18) =>\n    new Token({\n        name: symbol,\n        symbol,\n        address,\n        chainId,\n        decimals,\n        icons: {\n            small: `https://s2.coinmarketcap.com/static/img/coins/64x64/${iconId}.png`,\n            large: `https://s2.coinmarketcap.com/static/img/coins/64x64/${iconId}.png`,\n        },\n    })\n\nexport const GAS_TOKEN: Record<ChainId, Token> = {\n    [ChainId.ETH_MAINNET]: GAS(ChainId.ETH_MAINNET, 'ETH', 1027),\n    [ChainId.ETH_RINKEBY]: GAS(ChainId.ETH_RINKEBY, 'ETH', 1027),\n    [ChainId.ETH_KOVAN]: GAS(ChainId.ETH_KOVAN, 'ETH', 1027),\n    [ChainId.BSC_MAINNET]: GAS(ChainId.BSC_MAINNET, 'BNB', 1839),\n    [ChainId.BSC_TESTNET]: GAS(ChainId.BSC_TESTNET, 'BNB', 1839),\n    [ChainId.MATIC_MAINNET]: GAS(ChainId.MATIC_MAINNET, 'POL', 28321),\n    [ChainId.MATIC_MUMBAI]: GAS(ChainId.MATIC_MUMBAI, 'MATIC', 3890),\n    [ChainId.AVAX_MAINNET]: GAS(ChainId.AVAX_MAINNET, 'AVAX', 5805),\n    [ChainId.AVAX_TESTNET]: GAS(ChainId.AVAX_TESTNET, 'AVAX', 5805),\n    [ChainId.HECO_MAINNET]: GAS(ChainId.HECO_MAINNET, 'HT', 2502),\n    [ChainId.HECO_TESTNET]: GAS(ChainId.HECO_TESTNET, 'HT', 2502),\n    [ChainId.OKEX_MAINNET]: GAS(ChainId.OKEX_MAINNET, 'OKT', 8267),\n    [ChainId.OKEX_TESTNET]: GAS(ChainId.OKEX_TESTNET, 'OKT', 8267),\n    [ChainId.BOBA_MAINNET]: GAS(ChainId.BOBA_MAINNET, 'ETH', 1027),\n    [ChainId.BOBA_RINKEBY]: GAS(ChainId.BOBA_RINKEBY, 'ETH', 1027),\n    [ChainId.SYMBIOSIS_TESTNET]: GAS(ChainId.SYMBIOSIS_TESTNET, 'TVT', 15084),\n    [ChainId.SYMBIOSIS_MAINNET]: GAS(ChainId.SYMBIOSIS_MAINNET, 'SIS', 15084),\n    [ChainId.BOBA_AVALANCHE]: GAS(ChainId.BOBA_AVALANCHE, 'BOBA', 14556),\n    [ChainId.MILKOMEDA_MAINNET]: GAS(ChainId.MILKOMEDA_MAINNET, 'MilkADA', 2010),\n    [ChainId.MILKOMEDA_DEVNET]: GAS(ChainId.MILKOMEDA_DEVNET, 'MilktADA', 2010),\n    [ChainId.BTC_MAINNET]: GAS(ChainId.BTC_MAINNET, 'BTC', 1, 8),\n    [ChainId.BTC_MUTINY]: GAS(ChainId.BTC_MUTINY, 'BTC', 1, 8),\n    [ChainId.BTC_TESTNET4]: GAS(ChainId.BTC_TESTNET4, 'BTC', 1, 8),\n    [ChainId.AURORA_MAINNET]: GAS(ChainId.AURORA_MAINNET, 'ETH', 1027),\n    [ChainId.AURORA_TESTNET]: GAS(ChainId.AURORA_TESTNET, 'ETH', 1027),\n    [ChainId.TELOS_MAINNET]: GAS(ChainId.TELOS_MAINNET, 'TLOS', 4660),\n    [ChainId.TELOS_TESTNET]: GAS(ChainId.TELOS_TESTNET, 'TLOS', 4660),\n    [ChainId.SHARDEUM_TESTNET_2]: GAS(ChainId.SHARDEUM_TESTNET_2, 'SHM', 22353),\n    [ChainId.KAVA_MAINNET]: GAS(ChainId.KAVA_MAINNET, 'KAVA', 4846),\n    [ChainId.SCROLL_SEPOLIA]: GAS(ChainId.SCROLL_SEPOLIA, 'ETH', 1027),\n    [ChainId.ZKSYNC_MAINNET]: GAS(ChainId.ZKSYNC_MAINNET, 'ETH', 1027),\n    [ChainId.ARBITRUM_MAINNET]: GAS(ChainId.ARBITRUM_MAINNET, 'ETH', 1027),\n    [ChainId.ARBITRUM_NOVA]: GAS(ChainId.ARBITRUM_NOVA, 'ETH', 1027),\n    [ChainId.OPTIMISM_MAINNET]: GAS(ChainId.OPTIMISM_MAINNET, 'ETH', 1027),\n    [ChainId.ZETACHAIN_ATHENS_2]: GAS(ChainId.ZETACHAIN_ATHENS_2, 'ZETA', 21259),\n    [ChainId.POLYGON_ZK]: GAS(ChainId.POLYGON_ZK, 'ETH', 1027),\n    [ChainId.LINEA_MAINNET]: GAS(ChainId.LINEA_MAINNET, 'ETH', 1027),\n    [ChainId.LINEA_TESTNET]: GAS(ChainId.LINEA_TESTNET, 'ETH', 1027),\n    [ChainId.MANTLE_MAINNET]: GAS(ChainId.MANTLE_MAINNET, 'MNT', 27075),\n    [ChainId.MANTLE_TESTNET]: GAS(ChainId.MANTLE_TESTNET, 'MNT', 27075),\n    [ChainId.BASE_MAINNET]: GAS(ChainId.BASE_MAINNET, 'ETH', 1027),\n    [ChainId.TRON_TESTNET]: GAS(ChainId.TRON_TESTNET, 'TRX', 1958, 6),\n    [ChainId.TRON_MAINNET]: GAS(ChainId.TRON_MAINNET, 'TRX', 1958, 6),\n    [ChainId.SCROLL_MAINNET]: GAS(ChainId.SCROLL_MAINNET, 'ETH', 1027),\n    [ChainId.MANTA_MAINNET]: GAS(ChainId.MANTA_MAINNET, 'ETH', 1027),\n    [ChainId.METIS_MAINNET]: TOKEN_AS_GAS(\n        ChainId.METIS_MAINNET,\n        '0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000',\n        'METIS',\n        9640\n    ),\n    [ChainId.OKX_X1_TESTNET]: GAS(ChainId.OKX_X1_TESTNET, 'OKB', 3897),\n    [ChainId.BAHAMUT_MAINNET]: GAS(ChainId.BAHAMUT_MAINNET, 'FTN', 22615),\n    [ChainId.MODE_MAINNET]: GAS(ChainId.MODE_MAINNET, 'ETH', 1027),\n    [ChainId.RSK_MAINNET]: GAS(ChainId.RSK_MAINNET, 'RBTC', 3626),\n    [ChainId.BLAST_MAINNET]: GAS(ChainId.BLAST_MAINNET, 'ETH', 1027),\n    [ChainId.MERLIN_MAINNET]: GAS(ChainId.MERLIN_MAINNET, 'BTC', 1),\n    [ChainId.ZKLINK_MAINNET]: GAS(ChainId.ZKLINK_MAINNET, 'ETH', 1027),\n    [ChainId.SEPOLIA_TESTNET]: GAS(ChainId.SEPOLIA_TESTNET, 'ETH', 1027),\n    [ChainId.CORE_MAINNET]: GAS(ChainId.CORE_MAINNET, 'CORE', 23254),\n    [ChainId.TON_MAINNET]: GAS(ChainId.TON_MAINNET, 'TON', 11419, 9),\n    [ChainId.TON_TESTNET]: GAS(ChainId.TON_TESTNET, 'TON', 11419, 9),\n    [ChainId.TAIKO_MAINNET]: GAS(ChainId.TAIKO_MAINNET, 'ETH', 1027),\n    [ChainId.SEI_EVM_MAINNET]: GAS(ChainId.SEI_EVM_MAINNET, 'SEI', 23149),\n    [ChainId.ZETACHAIN_MAINNET]: GAS(ChainId.ZETACHAIN_MAINNET, 'ZETA', 21259),\n    [ChainId.CRONOS_MAINNET]: GAS(ChainId.CRONOS_MAINNET, 'CRO', 3635),\n    [ChainId.FRAXTAL_MAINNET]: GAS(ChainId.FRAXTAL_MAINNET, 'FRAX', 6952),\n    [ChainId.GRAVITY_MAINNET]: GAS(ChainId.GRAVITY_MAINNET, 'G', 32120),\n    [ChainId.BSQUARED_MAINNET]: GAS(ChainId.BSQUARED_MAINNET, 'BTC', 1),\n    [ChainId.CRONOS_ZK_MAINNET]: GAS(ChainId.CRONOS_ZK_MAINNET, 'zkCRO', 33873),\n    [ChainId.MORPH_MAINNET]: GAS(ChainId.MORPH_MAINNET, 'ETH', 1027),\n    [ChainId.SOLANA_MAINNET]: GAS(ChainId.SOLANA_MAINNET, 'SOL', 5426, 9),\n    [ChainId.GOAT_MAINNET]: GAS(ChainId.GOAT_MAINNET, 'BTC', 1),\n    [ChainId.SONIC_MAINNET]: GAS(ChainId.SONIC_MAINNET, 'S', 32684),\n    [ChainId.ABSTRACT_MAINNET]: GAS(ChainId.ABSTRACT_MAINNET, 'ETH', 1027),\n    [ChainId.GNOSIS_MAINNET]: GAS(ChainId.GNOSIS_MAINNET, 'xDAI', 8635),\n    [ChainId.BERACHAIN_MAINNET]: GAS(ChainId.BERACHAIN_MAINNET, 'BERA', 24647),\n    [ChainId.UNICHAIN_MAINNET]: GAS(ChainId.UNICHAIN_MAINNET, 'ETH', 1027),\n    [ChainId.SONEIUM_MAINNET]: GAS(ChainId.SONEIUM_MAINNET, 'ETH', 1027),\n    [ChainId.OPBNB_MAINNET]: GAS(ChainId.OPBNB_MAINNET, 'BNB', 1839),\n    [ChainId.HYPERLIQUID_MAINNET]: GAS(ChainId.HYPERLIQUID_MAINNET, 'HYPE', 32196),\n    [ChainId.KATANA_MAINNET]: GAS(ChainId.KATANA_MAINNET, 'ETH', 1027),\n    [ChainId.APECHAIN_MAINNET]: GAS(ChainId.APECHAIN_MAINNET, 'APE', 18876),\n    [ChainId.PLASMA_MAINNET]: GAS(ChainId.PLASMA_MAINNET, 'XPL', 36645),\n}\n","import invariant from 'tiny-invariant'\n\nimport { ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\n\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { tokenEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n    const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n    // calculate slippage := (exactQuote - outputAmount) / exactQuote\n    const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n    return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n    readonly inputAmount: TokenAmount\n    readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n    // must have same input and output token for comparison\n    invariant(tokenEquals(a.inputAmount.token, b.inputAmount.token), 'INPUT_CURRENCY')\n    invariant(tokenEquals(a.outputAmount.token, b.outputAmount.token), 'OUTPUT_CURRENCY')\n    if (a.outputAmount.equalTo(b.outputAmount)) {\n        if (a.inputAmount.equalTo(b.inputAmount)) {\n            return 0\n        }\n        // trade A requires less input than trade B, so A should come first\n        if (a.inputAmount.lessThan(b.inputAmount)) {\n            return -1\n        } else {\n            return 1\n        }\n    } else {\n        // tradeA has less output than trade B, so should come second\n        if (a.outputAmount.lessThan(b.outputAmount)) {\n            return 1\n        } else {\n            return -1\n        }\n    }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n    const ioComp = inputOutputComparator(a, b)\n    if (ioComp !== 0) {\n        return ioComp\n    }\n\n    // consider lowest slippage next, since these are less likely to fail\n    if (a.priceImpact.lessThan(b.priceImpact)) {\n        return -1\n    } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n        return 1\n    }\n\n    // finally consider the number of hops since each hop costs gas\n    return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n    // how many results to return\n    maxNumResults?: number\n    // the maximum number of hops a trade should contain\n    maxHops?: number\n}\n\n/**\n * Given a token amount and a chain ID, returns the equivalent representation as the token amount.\n */\nexport function wrappedAmount(tokenAmount: TokenAmount): TokenAmount {\n    return tokenAmount.token.isNative ? new TokenAmount(WETH[tokenAmount.token.chainId], tokenAmount.raw) : tokenAmount\n}\n\nexport function wrappedToken(token: Token): Token {\n    return token.isNative ? WETH[token.chainId] : token\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n    /**\n     * The route of the trade, i.e. which pairs the trade goes through.\n     */\n    public readonly route: Route\n    /**\n     * The type of the trade, either exact in or exact out.\n     */\n    public readonly tradeType: TradeType\n    /**\n     * The input amount for the trade assuming no slippage.\n     */\n    public readonly inputAmount: TokenAmount\n    /**\n     * The output amount for the trade assuming no slippage.\n     */\n    public readonly outputAmount: TokenAmount\n    /**\n     * The price expressed in terms of output amount/input amount.\n     */\n    public readonly executionPrice: Price\n    /**\n     * The mid price after the trade executes assuming no slippage.\n     */\n    public readonly nextMidPrice: Price\n    /**\n     * The percent difference between the mid price before the trade and the trade execution price.\n     */\n    public readonly priceImpact: Percent\n\n    /**\n     * Constructs an exact in trade with the given amount in and route\n     * @param route route of the exact in trade\n     * @param amountIn the amount being passed in\n     */\n    public static exactIn(route: Route, amountIn: TokenAmount): Trade {\n        return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n    }\n\n    /**\n     * Constructs an exact out trade with the given amount out and route\n     * @param route route of the exact out trade\n     * @param amountOut the amount returned by the trade\n     */\n    public static exactOut(route: Route, amountOut: TokenAmount): Trade {\n        return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n    }\n\n    public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n        const amounts: TokenAmount[] = new Array(route.path.length)\n        const nextPairs: Pair[] = new Array(route.pairs.length)\n        if (tradeType === TradeType.EXACT_INPUT) {\n            invariant(tokenEquals(amount.token, route.input), 'INPUT')\n            amounts[0] = wrappedAmount(amount)\n            for (let i = 0; i < route.path.length - 1; i++) {\n                const pair = route.pairs[i]\n                const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n                amounts[i + 1] = outputAmount\n                nextPairs[i] = nextPair\n            }\n        } else {\n            invariant(tokenEquals(amount.token, route.output), 'OUTPUT')\n            amounts[amounts.length - 1] = wrappedAmount(amount)\n            for (let i = route.path.length - 1; i > 0; i--) {\n                const pair = route.pairs[i - 1]\n                const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n                amounts[i - 1] = inputAmount\n                nextPairs[i - 1] = nextPair\n            }\n        }\n\n        this.route = route\n        this.tradeType = tradeType\n        this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : new TokenAmount(route.input, amounts[0].raw)\n        this.outputAmount =\n            tradeType === TradeType.EXACT_OUTPUT\n                ? amount\n                : new TokenAmount(route.output, amounts[amounts.length - 1].raw)\n        this.executionPrice = new Price(\n            this.inputAmount.token,\n            this.outputAmount.token,\n            this.inputAmount.raw,\n            this.outputAmount.raw\n        )\n        this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n        this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    }\n\n    /**\n     * Get the minimum amount that must be received from this trade for the given slippage tolerance\n     * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n     */\n    public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n        invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n        if (this.tradeType === TradeType.EXACT_OUTPUT) {\n            return this.outputAmount\n        } else {\n            const slippageAdjustedAmountOut = new Fraction(ONE)\n                .add(slippageTolerance)\n                .invert()\n                .multiply(this.outputAmount.raw).quotient\n            return new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        }\n    }\n\n    /**\n     * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n     * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n     */\n    public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n        invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n        if (this.tradeType === TradeType.EXACT_INPUT) {\n            return this.inputAmount\n        } else {\n            const slippageAdjustedAmountIn = new Fraction(ONE)\n                .add(slippageTolerance)\n                .multiply(this.inputAmount.raw).quotient\n            return new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        }\n    }\n\n    /**\n     * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n     * amount to an output token, making at most `maxHops` hops.\n     * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n     * the amount in among multiple routes.\n     * @param pairs the pairs to consider in finding the best trade\n     * @param tokenAmountIn exact amount of input token to spend\n     * @param tokenOut the desired token out\n     * @param maxNumResults maximum number of results to return\n     * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n     * @param currentPairs used in recursion; the current list of pairs\n     * @param originalAmountIn used in recursion; the original value of the tokenAmountIn parameter\n     * @param bestTrades used in recursion; the current list of best trades\n     */\n    public static bestTradeExactIn(\n        pairs: Pair[],\n        tokenAmountIn: TokenAmount,\n        tokenOut: Token,\n        { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n        // used in recursion.\n        currentPairs: Pair[] = [],\n        originalAmountIn: TokenAmount = tokenAmountIn,\n        bestTrades: Trade[] = []\n    ): Trade[] {\n        invariant(pairs.length > 0, 'PAIRS')\n        invariant(maxHops > 0, 'MAX_HOPS')\n        invariant(originalAmountIn === tokenAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n        const amountIn = wrappedAmount(tokenAmountIn)\n        for (let i = 0; i < pairs.length; i++) {\n            const pair = pairs[i]\n            // pair irrelevant\n            if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n            if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n            let amountOut: TokenAmount\n            try {\n                ;[amountOut] = pair.getOutputAmount(amountIn)\n            } catch (error: any) {\n                // input too low\n                if (error.isInsufficientInputAmountError) {\n                    continue\n                }\n                throw error\n            }\n            // we have arrived at the output token, so this is the final trade of one of the paths\n            if (amountOut.token.equals(wrappedToken(tokenOut))) {\n                sortedInsert(\n                    bestTrades,\n                    new Trade(\n                        new Route([...currentPairs, pair], originalAmountIn.token, tokenOut),\n                        originalAmountIn,\n                        TradeType.EXACT_INPUT\n                    ),\n                    maxNumResults,\n                    tradeComparator\n                )\n            } else if (maxHops > 1 && pairs.length > 1) {\n                const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n                // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n                Trade.bestTradeExactIn(\n                    pairsExcludingThisPair,\n                    amountOut,\n                    tokenOut,\n                    {\n                        maxNumResults,\n                        maxHops: maxHops - 1,\n                    },\n                    [...currentPairs, pair],\n                    originalAmountIn,\n                    bestTrades\n                )\n            }\n        }\n\n        return bestTrades\n    }\n\n    /**\n     * similar to the above method but instead targets a fixed output amount\n     * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n     * to an output token amount, making at most `maxHops` hops\n     * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n     * the amount in among multiple routes.\n     * @param pairs the pairs to consider in finding the best trade\n     * @param tokenIn the token to spend\n     * @param tokenAmountOut the exact amount of token out\n     * @param maxNumResults maximum number of results to return\n     * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n     * @param currentPairs used in recursion; the current list of pairs\n     * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n     * @param bestTrades used in recursion; the current list of best trades\n     */\n    public static bestTradeExactOut(\n        pairs: Pair[],\n        tokenIn: Token,\n        tokenAmountOut: TokenAmount,\n        { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n        // used in recursion.\n        currentPairs: Pair[] = [],\n        originalAmountOut: TokenAmount = tokenAmountOut,\n        bestTrades: Trade[] = []\n    ): Trade[] {\n        invariant(pairs.length > 0, 'PAIRS')\n        invariant(maxHops > 0, 'MAX_HOPS')\n        invariant(originalAmountOut === tokenAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n        const amountOut = wrappedAmount(tokenAmountOut)\n        for (let i = 0; i < pairs.length; i++) {\n            const pair = pairs[i]\n            // pair irrelevant\n            if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n            if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n            let amountIn: TokenAmount\n            try {\n                ;[amountIn] = pair.getInputAmount(amountOut)\n            } catch (error: any) {\n                // not enough liquidity in this pair\n                if (error.isInsufficientReservesError) {\n                    continue\n                }\n                throw error\n            }\n            // we have arrived at the input token, so this is the first trade of one of the paths\n            if (amountIn.token.equals(wrappedToken(tokenIn))) {\n                sortedInsert(\n                    bestTrades,\n                    new Trade(\n                        new Route([pair, ...currentPairs], tokenIn, originalAmountOut.token),\n                        originalAmountOut,\n                        TradeType.EXACT_OUTPUT\n                    ),\n                    maxNumResults,\n                    tradeComparator\n                )\n            } else if (maxHops > 1 && pairs.length > 1) {\n                const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n                // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n                Trade.bestTradeExactOut(\n                    pairsExcludingThisPair,\n                    tokenIn,\n                    amountIn,\n                    {\n                        maxNumResults,\n                        maxHops: maxHops - 1,\n                    },\n                    [pair, ...currentPairs],\n                    originalAmountOut,\n                    bestTrades\n                )\n            }\n        }\n\n        return bestTrades\n    }\n}\n","export interface ProfilerItem {\n    name: string\n    start: number\n    stop: number\n    duration?: number\n}\n\nexport class Profiler {\n    private start: number\n    private stop: number\n    private list: ProfilerItem[]\n\n    constructor() {\n        const now = Date.now()\n        this.start = now\n        this.stop = now\n        this.list = []\n    }\n\n    public tick(name: string) {\n        const now = Date.now()\n        this.list.push({\n            name,\n            start: this.stop,\n            stop: now,\n        })\n        this.stop = now\n    }\n\n    public toString(): ProfilerItem[] {\n        const list = this.list.map((i) => {\n            return { ...i, duration: i.stop - i.start }\n        })\n\n        list.push({\n            name: 'TOTAL',\n            start: this.start,\n            stop: this.stop,\n            duration: this.stop - this.start,\n        })\n        return list.filter((i) => i.duration > 1)\n    }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, TradeType } from './constants'\nimport { validateAndParseAddress } from './utils'\nimport { Percent, TokenAmount, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n    /**\n     * How much the execution price is allowed to move unfavorably from the trade execution price.\n     */\n    allowedSlippage: Percent\n    /**\n     * How long the swap is valid until it expires, in seconds.\n     * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n     * are generated.\n     */\n    ttl: number\n    /**\n     * The account that should receive the output of the swap.\n     */\n    recipient: string\n\n    /**\n     * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n     */\n    feeOnTransfer?: boolean\n}\n\ntype Route = {\n    from: string\n    to: string\n    stable: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n    /**\n     * The method to call on the Uniswap V2 Router.\n     */\n    methodName: string\n    /**\n     * The arguments to pass to the method, all hex encoded.\n     */\n    args: (string | string[] | Route[])[]\n    /**\n     * The amount of wei to send in hex.\n     */\n    value: string\n\n    /**\n     * The offset of amount.\n     */\n    offset: number\n\n    minReceivedOffset: number\n}\n\nfunction toHex(tokenAmount: TokenAmount) {\n    return `0x${tokenAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n    /**\n     * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n     * @param trade to produce call parameters for\n     * @param options options for the call parameters\n     */\n    public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n        // the router does not support both ether in and out\n        invariant(!(trade.inputAmount.token.isNative && trade.outputAmount.token.isNative), 'ETHER_IN_OUT')\n        invariant(options.ttl > 0, 'TTL')\n\n        const to: string = validateAndParseAddress(options.recipient)\n        const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n        const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n\n        let path\n\n        if (trade.inputAmount.token.chainId === ChainId.KAVA_MAINNET) {\n            const routes: Route[] = []\n            for (let i = 0; i < trade.route.path.length - 1; i++) {\n                routes.push({\n                    from: trade.route.path[i].address,\n                    to: trade.route.path[i + 1].address,\n                    stable: false,\n                })\n            }\n            path = routes\n        } else {\n            path = trade.route.path.map((token) => token.address)\n        }\n\n        const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n        const hasReferrer = [ChainId.MODE_MAINNET, ChainId.HYPERLIQUID_MAINNET].includes(\n            trade.outputAmount.token.chainId\n        )\n\n        let methodName: string\n        let args: (string | string[] | Route[])[]\n        let value: string\n        let offset: number\n        let minReceivedOffset: number\n        switch (trade.tradeType) {\n            case TradeType.EXACT_INPUT:\n                if (trade.inputAmount.token.isNative) {\n                    methodName = 'swapExactETHForTokens'\n                    // (uint amountOutMin, address[] call  data path, address to, uint deadline)\n                    args = [amountOut, path, to, deadline]\n                    if (useFeeOnTransfer) {\n                        methodName = 'swapExactETHForTokensSupportingFeeOnTransferTokens'\n                        if (hasReferrer) {\n                            args = [amountOut, path, to, to, deadline]\n                        }\n                    }\n                    value = amountIn\n                    offset = 0\n                    minReceivedOffset = 36\n                } else if (trade.outputAmount.token.isNative) {\n                    methodName = 'swapExactTokensForETH'\n                    // (uint amountIn, uint amountOutMin, address[] call data path, address to, uint deadline)\n                    args = [amountIn, amountOut, path, to, deadline]\n                    if (useFeeOnTransfer) {\n                        methodName = 'swapExactTokensForETHSupportingFeeOnTransferTokens'\n                        if (hasReferrer) {\n                            args = [amountIn, amountOut, path, to, to, deadline]\n                        }\n                    }\n                    value = ZERO_HEX\n                    offset = 36\n                    minReceivedOffset = 68\n                } else {\n                    methodName = 'swapExactTokensForTokens'\n                    // (uint amountIn, uint amountOutMin, address[] call data path, address to, uint deadline)\n                    args = [amountIn, amountOut, path, to, deadline]\n                    if (useFeeOnTransfer) {\n                        methodName = 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n                        if (hasReferrer) {\n                            args = [amountIn, amountOut, path, to, to, deadline]\n                        }\n                    }\n                    value = ZERO_HEX\n                    offset = 36\n                    minReceivedOffset = 68\n                }\n                break\n            case TradeType.EXACT_OUTPUT:\n                invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n                if (trade.inputAmount.token.isNative) {\n                    methodName = 'swapETHForExactTokens'\n                    // (uint amountOut, address[] call data path, address to, uint deadline)\n                    args = [amountOut, path, to, deadline]\n                    value = amountIn\n                    offset = 0\n                    minReceivedOffset = 0\n                } else if (trade.outputAmount.token.isNative) {\n                    methodName = 'swapTokensForExactETH'\n                    // (uint amountOut, uint amountInMax, address[] call data path, address to, uint deadline)\n                    args = [amountOut, amountIn, path, to, deadline]\n                    value = ZERO_HEX\n                    offset = 68\n                    minReceivedOffset = 0\n                } else {\n                    methodName = 'swapTokensForExactTokens'\n                    // (uint amountOut, uint amountInMax, address[] call data path, address to, uint deadline)\n                    args = [amountOut, amountIn, path, to, deadline]\n                    value = ZERO_HEX\n                    offset = 68\n                    minReceivedOffset = 0\n                }\n                break\n        }\n        return {\n            methodName,\n            args,\n            value,\n            offset,\n            minReceivedOffset,\n        }\n    }\n}\n","import { Log, Provider, StaticJsonRpcProvider } from '@ethersproject/providers'\nimport { Signer, utils, BigNumber } from 'ethers'\nimport isomorphicFetch from 'isomorphic-unfetch'\nimport JSBI from 'jsbi'\nimport TronWeb, { TransactionInfo } from 'tronweb'\nimport type { Counter, Histogram } from 'prom-client'\nimport { ChainId } from '../constants'\nimport { Chain, chains, Token, TokenAmount, wrappedToken } from '../entities'\nimport {\n    BranchedUnlocker,\n    BranchedUnlocker__factory,\n    Bridge,\n    Bridge__factory,\n    BtcRefundUnlocker,\n    BtcRefundUnlocker__factory,\n    Depository,\n    Depository__factory,\n    Fabric,\n    Fabric__factory,\n    MetaRouter,\n    MetaRouter__factory,\n    MulticallRouter,\n    MulticallRouter__factory,\n    OmniPool,\n    OmniPool__factory,\n    OmniPoolOracle,\n    OmniPoolOracle__factory,\n    Portal,\n    Portal__factory,\n    SwapUnlocker,\n    SwapUnlocker__factory,\n    Synthesis,\n    Synthesis__factory,\n    TonBridge,\n    TonBridge__factory,\n    WithdrawUnlocker,\n    WithdrawUnlocker__factory,\n} from './contracts'\nimport {\n    AdvisorError,\n    aggregatorErrorToText,\n    AmountLessThanFeeError,\n    AmountTooHighError,\n    AmountTooLowError,\n    NoTransitTokenError,\n    SdkError,\n} from './sdkError'\nimport { RevertPending } from './revert'\nimport { getTransactionInfoById, isTronChainId } from './chainUtils/tron'\nimport {\n    BtcConfig,\n    ChainConfig,\n    Config,\n    CounterParams,\n    FeeConfig,\n    MetricParams,\n    OmniPoolConfig,\n    OneInchConfig,\n    OpenOceanConfig,\n    OverrideConfig,\n    PriceImpactMetricParams,\n    SwapExactInParams,\n    SwapExactInResult,\n    VolumeFeeCollector,\n} from './types'\nimport { Zapping } from './zapping'\nimport { config as mainnet } from './config/mainnet'\nimport { config as testnet } from './config/testnet'\nimport { config as dev } from './config/dev'\nimport { ConfigCache } from './config/cache/cache'\nimport { Id, OmniPoolInfo, TokenInfo } from './config/cache/builder'\nimport { PendingRequest } from './revertRequest'\nimport { delay } from '../utils'\nimport {\n    waitForBtcCommitTxMined,\n    waitForBtcDepositAccepted,\n    waitForBtcEvmTxIssued,\n    waitForComplete,\n    waitFromTonTxMined,\n} from './waitForComplete'\nimport { Cache } from './cache'\nimport { SwappingMiddleware } from './swapping'\nimport { parseUnits } from '@ethersproject/units'\nimport { swapExactIn } from './swapExactIn'\nimport { WaitForCompleteParams } from './waitForComplete/waitForComplete'\nimport { TonClient4 } from '@ton/ton'\nimport { getHttpV4Endpoint } from '@orbs-network/ton-access'\nimport { isTonChainId, getUnwrapDustLimit } from './chainUtils'\n\nexport type ConfigName = 'dev' | 'testnet' | 'mainnet'\n\nexport type DiscountTier = {\n    amount: string\n    discount: number\n}\n\nexport type DepositoryContracts = {\n    depository: Depository\n    branchedUnlocker: BranchedUnlocker\n    swapUnlocker: SwapUnlocker\n    withdrawUnlocker: WithdrawUnlocker\n    btcRefundUnlocker?: BtcRefundUnlocker\n}\n\nconst defaultFetch: typeof fetch = (url, init) => {\n    return isomorphicFetch(url as string, init)\n}\n\nconst VOLUME_FEE_COLLECTORS: VolumeFeeCollector[] = [\n    // BNB chain\n    {\n        chainId: ChainId.BSC_MAINNET,\n        address: '0x3743c756b64ECd0770f1d4f47696A73d2A46dcbe',\n        feeRate: '2000000000000000', // 0.2%\n        eligibleChains: [ChainId.BTC_MAINNET],\n    },\n]\n\nexport class Symbiosis {\n    public providers: Map<ChainId, Provider>\n\n    public readonly cache: Cache\n    public readonly config: Config\n    public readonly configName: ConfigName\n    private readonly configCache: ConfigCache\n    public clientId: string\n\n    private signature: string | undefined\n    public sdkDurationMetric?: Histogram<string>\n    public priceImpactSwapMetric?: Histogram<string>\n    public counter?: Counter<string>\n\n    public feesConfig?: FeeConfig[]\n\n    public readonly oneInchConfig: OneInchConfig\n    public readonly volumeFeeCollectors: VolumeFeeCollector[]\n    public readonly openOceanConfig: OpenOceanConfig\n\n    public readonly fetch: typeof fetch\n\n    public setMetrics({\n        symbiosisSdkDuration,\n        priceImpactSwap,\n    }: {\n        symbiosisSdkDuration: Histogram<string>\n        priceImpactSwap: Histogram<string>\n    }) {\n        this.sdkDurationMetric = symbiosisSdkDuration\n        this.priceImpactSwapMetric = priceImpactSwap\n    }\n\n    public setErrorCounter(counter: Counter<string>) {\n        this.counter = counter\n    }\n\n    public setSignature(signature: string | undefined) {\n        this.signature = signature\n    }\n\n    public setFeesConfig(feesConfig: FeeConfig[]) {\n        this.feesConfig = feesConfig\n    }\n\n    public setClientId(clientId: string) {\n        this.clientId = utils.formatBytes32String(clientId)\n    }\n\n    public getBtcConfig(btc: Token): BtcConfig {\n        const config = this.config.btcConfigs.find((i) => i.btc.equals(btc))\n        if (!config) {\n            throw new SdkError('BTC config not found')\n        }\n        return config\n    }\n\n    public async getDiscountTiers(): Promise<DiscountTier[]> {\n        const response = await this.fetch(`${this.config.advisor.url}/v1/swap/discount/tiers`)\n\n        if (!response.ok) {\n            const text = await response.text()\n            const json = JSON.parse(text)\n            throw new SdkError(json.message ?? text)\n        }\n\n        return await response.json()\n    }\n\n    public async getDiscountChains(): Promise<ChainId[]> {\n        const response = await this.fetch(`${this.config.advisor.url}/v1/swap/discount/chains`)\n\n        if (!response.ok) {\n            const text = await response.text()\n            const json = JSON.parse(text)\n            throw new SdkError(json.message ?? text)\n        }\n\n        return await response.json()\n    }\n\n    public async getDiscount(signature: string): Promise<number> {\n        const response = await this.fetch(`${this.config.advisor.url}/v1/swap/discount`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                signature,\n            }),\n        })\n\n        if (!response.ok) {\n            const text = await response.text()\n            const json = JSON.parse(text)\n            throw new SdkError(json.message ?? text)\n        }\n\n        const json = await response.json()\n\n        return json['percent'] as number\n    }\n\n    public async checkDustLimit(amount: TokenAmount) {\n        const btcConfig = this.config.btcConfigs.filter((i) => i.symBtc.chainId !== amount.token.chainId)[0]\n        if (!btcConfig) {\n            throw new SdkError(`BTC config for chain ${amount.token.chainId} not found`)\n        }\n        const dustLimit = await getUnwrapDustLimit(btcConfig.forwarderUrl, this.cache)\n        if (BigNumber.from(amount.raw.toString()).lt(dustLimit)) {\n            throw new AmountLessThanFeeError(`amountOut must be greater than dust limit: ${dustLimit} satoshi`)\n        }\n    }\n\n    public constructor(configName: ConfigName, clientId: string, overrideConfig?: OverrideConfig) {\n        this.configName = configName\n        if (overrideConfig?.config) {\n            this.config = overrideConfig.config\n        } else {\n            if (configName === 'mainnet') {\n                this.config = structuredClone(mainnet)\n            } else if (configName === 'testnet') {\n                this.config = structuredClone(testnet)\n            } else if (configName === 'dev') {\n                this.config = structuredClone(dev)\n            } else {\n                throw new SdkError('Unknown config name')\n            }\n\n            if (overrideConfig?.chains) {\n                const { chains } = overrideConfig\n                this.config.chains = this.config.chains.map((chainConfig) => {\n                    const found = chains.find((i) => i.id === chainConfig.id)\n                    if (found) {\n                        chainConfig.rpc = found.rpc\n                        chainConfig.headers = found.headers\n                    }\n                    return chainConfig\n                })\n            }\n            if (overrideConfig?.limits) {\n                this.config.limits = overrideConfig.limits\n            }\n            if (overrideConfig?.advisor) {\n                this.config.advisor = overrideConfig.advisor\n            }\n            if (overrideConfig?.btcConfigs) {\n                this.config.btcConfigs = overrideConfig.btcConfigs\n            }\n        }\n        this.oneInchConfig = {\n            apiUrl: 'https://api.1inch.dev/swap/v5.2/',\n            apiKeys: [], // <PUT_YOUR_API_KEY_HERE>\n        }\n        if (overrideConfig?.oneInchConfig) {\n            this.oneInchConfig = overrideConfig.oneInchConfig\n        }\n        this.openOceanConfig = {\n            apiUrl: 'https://open-api.openocean.finance/v4',\n            apiKeys: [], // <PUT_YOUR_API_KEY_HERE>\n        }\n        if (overrideConfig?.openOceanConfig) {\n            this.openOceanConfig = overrideConfig.openOceanConfig\n        }\n\n        this.volumeFeeCollectors = VOLUME_FEE_COLLECTORS\n        if (overrideConfig?.volumeFeeCollectors) {\n            this.volumeFeeCollectors = overrideConfig.volumeFeeCollectors\n        }\n\n        this.fetch = overrideConfig?.fetch ?? defaultFetch\n\n        this.cache = overrideConfig?.cache || new Cache()\n        this.configCache = new ConfigCache(overrideConfig?.configCache || configName)\n        this.clientId = utils.formatBytes32String(clientId)\n\n        this.providers = new Map(\n            this.config.chains.map((chain) => {\n                const rpc = isTronChainId(chain.id) ? `${chain.rpc}/jsonrpc` : chain.rpc\n                const connection: utils.ConnectionInfo = { url: rpc }\n\n                if (chain?.headers) {\n                    connection.headers = chain.headers\n                }\n\n                return [chain.id, new StaticJsonRpcProvider(connection, chain.id)]\n            })\n        )\n    }\n\n    public createMetricTimer() {\n        if (!this.sdkDurationMetric) {\n            return\n        }\n\n        const endTimer = this.sdkDurationMetric.startTimer()\n\n        return ({ tokenIn, tokenOut, operation, kind }: MetricParams) =>\n            endTimer({\n                operation,\n                kind,\n                chain_id_from: tokenIn?.chainId ?? '',\n                chain_id_to: tokenOut?.chainId ?? '',\n            })\n    }\n\n    public trackAggregatorError({ provider, reason, chain_id }: CounterParams) {\n        if (!this.counter) {\n            return\n        }\n\n        const partner_id = utils.parseBytes32String(this.clientId)\n\n        const cleanReason = aggregatorErrorToText(reason)\n        this.counter.inc({ provider, reason: cleanReason, chain_id, partner_id })\n    }\n\n    public trackPriceImpactSwap({ name_from, name_to, token_amount, price_impact }: PriceImpactMetricParams) {\n        if (!this.priceImpactSwapMetric) {\n            return\n        }\n        const amountBucket = [\n            0.001, 0.01, 0.1, 0.5, 1, 5, 10, 50, 100, 1000, 3000, 5000, 10_000, 20_000, 50_000, 100_000, 200_000,\n            500_000, 1_000_000,\n        ]\n\n        const findNearestAmountIndex = (amount: number): number => {\n            if (amount <= amountBucket[0]) {\n                return 0\n            }\n            if (amount >= amountBucket[amountBucket.length - 1]) {\n                return amountBucket.length - 1\n            }\n\n            let nearestIndex = 0\n            let minDifference = Math.abs(amount - amountBucket[0])\n\n            for (let i = 1; i < amountBucket.length; i++) {\n                const difference = Math.abs(amount - amountBucket[i])\n                if (difference < minDifference) {\n                    minDifference = difference\n                    nearestIndex = i\n                }\n            }\n\n            return nearestIndex\n        }\n\n        if (price_impact >= 0.5) {\n            const amountIndex = findNearestAmountIndex(token_amount)\n            const amount_usd_bucket = amountBucket[amountIndex]\n\n            this.priceImpactSwapMetric.observe({ name_from, name_to, amount_usd: amount_usd_bucket }, price_impact)\n        }\n    }\n\n    public getVolumeFeeCollector(chainId: ChainId, involvedChainIds: ChainId[]): VolumeFeeCollector | undefined {\n        const feeCollectors = this.volumeFeeCollectors.filter((i) => i.chainId === chainId)\n        if (feeCollectors.length === 0) {\n            return\n        }\n\n        const zeroFeeCollector = feeCollectors\n            .filter((i) => i.feeRate === '0')\n            .find((i) => {\n                return involvedChainIds.every((j) => i.eligibleChains.includes(j))\n            })\n        if (zeroFeeCollector) {\n            return\n        }\n\n        const chainEligibleFeeCollector = feeCollectors\n            .filter((i) => i.feeRate !== '0')\n            .find((i) => {\n                return i.eligibleChains.filter((j) => involvedChainIds.includes(j)).length > 0\n            })\n        if (chainEligibleFeeCollector) {\n            return chainEligibleFeeCollector\n        }\n        // get default volume fee collector\n        return feeCollectors.find((i) => i.default)\n    }\n\n    public async getTonClient(): Promise<TonClient4> {\n        return this.cache.get(\n            ['tonClient'],\n            async () => {\n                let endpoint = this.config.chains.find((chain) => isTonChainId(chain.id))?.rpc\n                if (!endpoint || endpoint.length === 0) {\n                    endpoint = await getHttpV4Endpoint({\n                        network: this.configName === 'mainnet' ? 'mainnet' : 'testnet',\n                    })\n                }\n\n                return new TonClient4({\n                    endpoint,\n                })\n            },\n            600 // 10 minutes\n        )\n    }\n\n    public chains(): Chain[] {\n        const ids = this.config.chains.map((i) => i.id)\n        return chains.filter((chain) => ids.includes(chain.id))\n    }\n\n    public swapExactIn(params: Omit<SwapExactInParams, 'symbiosis'>): Promise<SwapExactInResult> {\n        return swapExactIn({ symbiosis: this, ...params })\n    }\n\n    public newSwapping(omniPoolConfig: OmniPoolConfig) {\n        return new SwappingMiddleware(this, omniPoolConfig)\n    }\n\n    public newRevertPending(request: PendingRequest) {\n        return new RevertPending(this, request)\n    }\n\n    public newZapping(omniPoolConfig: OmniPoolConfig) {\n        return new Zapping(this, omniPoolConfig)\n    }\n\n    public getProvider(chainId: ChainId, rpc?: string): Provider {\n        if (rpc) {\n            const url = isTronChainId(chainId) ? `${rpc}/jsonrpc` : rpc\n\n            return new StaticJsonRpcProvider(url, chainId)\n        }\n\n        const provider = this.providers.get(chainId)\n        if (!provider) {\n            throw new SdkError(`No provider for given chainId: ${chainId}`)\n        }\n        return provider\n    }\n\n    public tonBridge(chainId: ChainId, address: string, signer?: Signer): TonBridge {\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return TonBridge__factory.connect(address, signerOrProvider)\n    }\n\n    public portal(chainId: ChainId, signer?: Signer): Portal {\n        const address = this.chainConfig(chainId).portal\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return Portal__factory.connect(address, signerOrProvider)\n    }\n\n    public synthesis(chainId: ChainId, signer?: Signer): Synthesis {\n        const address = this.chainConfig(chainId).synthesis\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return Synthesis__factory.connect(address, signerOrProvider)\n    }\n\n    public bridge(chainId: ChainId, signer?: Signer): Bridge {\n        const address = this.chainConfig(chainId).bridge\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return Bridge__factory.connect(address, signerOrProvider)\n    }\n\n    public fabric(chainId: ChainId, signer?: Signer): Fabric {\n        const address = this.chainConfig(chainId).fabric\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return Fabric__factory.connect(address, signerOrProvider)\n    }\n\n    public multicallRouter(chainId: ChainId, signer?: Signer): MulticallRouter {\n        const address = this.chainConfig(chainId).multicallRouter\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return MulticallRouter__factory.connect(address, signerOrProvider)\n    }\n\n    public metaRouter(chainId: ChainId, signer?: Signer): MetaRouter {\n        const address = this.chainConfig(chainId).metaRouter\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return MetaRouter__factory.connect(address, signerOrProvider)\n    }\n\n    public depository(chainId: ChainId, signer?: Signer): DepositoryContracts | null {\n        const depository = this.chainConfig(chainId).depository\n        if (!depository) {\n            return null\n        }\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return {\n            depository: Depository__factory.connect(depository.depository, signerOrProvider),\n            swapUnlocker: SwapUnlocker__factory.connect(depository.swapUnlocker, signerOrProvider),\n            withdrawUnlocker: WithdrawUnlocker__factory.connect(depository.withdrawUnlocker, signerOrProvider),\n            btcRefundUnlocker: depository.btcRefundUnlocker\n                ? BtcRefundUnlocker__factory.connect(depository.btcRefundUnlocker, signerOrProvider)\n                : undefined,\n            branchedUnlocker: BranchedUnlocker__factory.connect(depository.branchedUnlocker, signerOrProvider),\n        }\n    }\n\n    public omniPool(config: OmniPoolConfig, signer?: Signer): OmniPool {\n        const { address, chainId } = config\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return OmniPool__factory.connect(address, signerOrProvider)\n    }\n\n    public omniPoolOracle(config: OmniPoolConfig, signer?: Signer): OmniPoolOracle {\n        const { oracle, chainId } = config\n        const signerOrProvider = signer || this.getProvider(chainId)\n\n        return OmniPoolOracle__factory.connect(oracle, signerOrProvider)\n    }\n\n    public getRepresentation(token: Token, chainId: ChainId): Token | undefined {\n        return this.configCache.getRepresentation(token, chainId)\n    }\n\n    public getOmniPoolTokenIndex(omniPoolConfig: OmniPoolConfig, token: Token): number {\n        return this.configCache.getOmniPoolTokenIndex(omniPoolConfig, token)\n    }\n\n    public async getBridgeFee({\n        calldata,\n        receiveSide,\n        chainIdFrom,\n        chainIdTo,\n    }: {\n        calldata: string\n        receiveSide: string\n        chainIdFrom: ChainId\n        chainIdTo: ChainId\n    }): Promise<{ price: JSBI; save: JSBI }> {\n        const params = {\n            chain_id_from: chainIdFrom,\n            chain_id_to: chainIdTo,\n            receive_side: receiveSide,\n            call_data: calldata,\n            client_id: utils.parseBytes32String(this.clientId),\n            signature: this.signature,\n        }\n\n        const response = await this.fetch(`${this.config.advisor.url}/v1/swap/price`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(params),\n        })\n\n        if (!response.ok) {\n            const text = await response.text()\n            const json = JSON.parse(text)\n            throw new AdvisorError(json.message ?? text)\n        }\n\n        const { price, save } = await response.json()\n\n        return {\n            price: JSBI.BigInt(price),\n            save: JSBI.BigInt(save),\n        }\n    }\n\n    public filterBlockOffset(chainId: ChainId): number {\n        return this.chainConfig(chainId).filterBlockOffset\n    }\n\n    public async getFromBlockWithOffset(chainId: ChainId): Promise<number> {\n        const provider = this.getProvider(chainId)\n\n        const blockNumber = await provider.getBlockNumber()\n\n        const offset = this.filterBlockOffset(chainId)\n\n        return Math.max(0, blockNumber - offset)\n    }\n\n    public dexFee(chainId: ChainId): number {\n        return this.chainConfig(chainId).dexFee\n    }\n\n    public chainConfig(chainId: ChainId): ChainConfig {\n        const config = this.config.chains.find((item) => {\n            return item.id === chainId\n        })\n        if (!config) {\n            throw new SdkError(`Could not config by given chainId: ${chainId}`)\n        }\n        return config\n    }\n\n    // === stables ===\n\n    public tokens(): Token[] {\n        return this.configCache.tokens()\n    }\n\n    public findToken(address: string, chainId: ChainId, chainFromId?: ChainId): Token | undefined {\n        return this.tokens().find((token) => {\n            const condition = token.address.toLowerCase() === address.toLowerCase() && token.chainId === chainId\n\n            if (chainFromId === undefined) return condition\n\n            return condition && token.chainFromId === chainFromId\n        })\n    }\n\n    public transitTokens(chainId: ChainId, omniPoolConfig: OmniPoolConfig): Token[] {\n        const pool = this.configCache.getOmniPoolByConfig(omniPoolConfig)\n        if (!pool) {\n            throw new SdkError(`Cannot find omniPool for chainId ${omniPoolConfig.chainId}`)\n        }\n\n        const tokens = this.configCache.tokens().filter((token) => {\n            return token.chainId === chainId && !token.deprecated && !token.isSynthetic\n        })\n\n        return tokens.filter((token) => {\n            const tokenPool = this.getOmniPoolByToken(token)\n            return pool.id === tokenPool?.id\n        })\n    }\n\n    public transitToken(chainId: ChainId, omniPoolConfig: OmniPoolConfig): Token {\n        const pool = this.configCache.getOmniPoolByConfig(omniPoolConfig)\n        if (!pool) {\n            throw new SdkError(`Cannot find omniPool ${pool}`)\n        }\n        const tokens = this.configCache.tokens().filter((token) => {\n            return token.chainId === chainId && !token.deprecated && !token.isSynthetic\n        })\n        if (tokens.length === 0) {\n            throw new SdkError(`Cannot find token for chain ${chainId}`)\n        }\n\n        // if token is from manager chain (token's chainIs equals to pool chainId)\n        if (chainId === pool.chainId) {\n            return tokens[0]\n        }\n\n        // find the FIRST suitable token from the tokens list\n        // e.g. the first token has priority\n        const transitToken = tokens.find((token) => {\n            return this.getOmniPoolByToken(token)?.id === pool.id\n        })\n\n        if (!transitToken) {\n            throw new NoTransitTokenError(`Cannot find transitToken for chain ${chainId}. Pool: ${pool.id}`)\n        }\n        return transitToken\n    }\n\n    public getTransitCombinations({\n        poolConfig,\n        tokenIn,\n        tokenOut,\n        disableSrcChainRouting,\n        disableDstChainRouting,\n    }: {\n        poolConfig: OmniPoolConfig\n        tokenIn: Token\n        tokenOut: Token\n        disableSrcChainRouting?: boolean\n        disableDstChainRouting?: boolean\n    }) {\n        const transitTokensIn = this.transitTokens(tokenIn.chainId, poolConfig)\n        const transitTokensOut = this.transitTokens(tokenOut.chainId, poolConfig)\n\n        const combinations: { transitTokenIn: Token; transitTokenOut: Token }[] = []\n\n        transitTokensIn.forEach((transitTokenIn) => {\n            transitTokensOut.forEach((transitTokenOut) => {\n                if (transitTokenIn.equals(transitTokenOut)) {\n                    return\n                }\n                if (disableSrcChainRouting) {\n                    if (!transitTokenIn.equals(wrappedToken(tokenIn))) {\n                        return\n                    }\n                }\n                if (disableDstChainRouting) {\n                    if (!transitTokenOut.equals(wrappedToken(tokenOut))) {\n                        return\n                    }\n                }\n                combinations.push({ transitTokenIn, transitTokenOut })\n            })\n        })\n\n        return combinations\n    }\n\n    public getOmniPoolByConfig(config: OmniPoolConfig): OmniPoolInfo | undefined {\n        return this.configCache.getOmniPoolByConfig(config)\n    }\n\n    public getOmniPoolByToken(token: Token): OmniPoolInfo | undefined {\n        return this.configCache.getOmniPoolByToken(token)\n    }\n\n    public getOmniPoolTokens(omniPoolConfig: OmniPoolConfig): Token[] {\n        return this.configCache.getOmniPoolTokens(omniPoolConfig)\n    }\n\n    public getTokenInfoById(tokenId: Id): TokenInfo {\n        return this.configCache.getTokenInfoById(tokenId)\n    }\n\n    public tronWeb(chainId: ChainId): TronWeb {\n        if (!isTronChainId(chainId)) {\n            throw new SdkError(`Chain ${chainId} is not Tron chain`)\n        }\n\n        const config = this.chainConfig(chainId)\n        if (!config) {\n            throw new SdkError(`Could not find Tron config for chain ${chainId}`)\n        }\n\n        return new TronWeb({ fullHost: config.rpc, eventNode: config.rpc, solidityNode: config.rpc })\n    }\n\n    public async waitForComplete({\n        chainId,\n        txId,\n        txTon,\n    }: Omit<WaitForCompleteParams, 'symbiosis'>): Promise<string | undefined> {\n        return waitForComplete({ symbiosis: this, chainId, txId, txTon })\n    }\n\n    public async waitForBtcDepositAccepted(depositAddress: string) {\n        return Promise.any(\n            this.config.btcConfigs.map((btcConfig) => {\n                return waitForBtcDepositAccepted(btcConfig, depositAddress)\n            })\n        )\n    }\n\n    public async waitForBtcCommitTxMined(btcConfig: BtcConfig, commitTx: string) {\n        return waitForBtcCommitTxMined({ btcConfig, commitTx })\n    }\n\n    public async waitForBtcEvmTxIssued(btcConfig: BtcConfig, revealTx: string) {\n        return waitForBtcEvmTxIssued(this, revealTx, btcConfig)\n    }\n\n    public async waitFromTonTxMined(address: string, contractAddress: string) {\n        return waitFromTonTxMined({ symbiosis: this, address, contractAddress })\n    }\n\n    public async findTransitTokenSent(chainId: ChainId, transactionHash: string): Promise<TokenAmount | undefined> {\n        const metarouter = this.metaRouter(chainId)\n        const providerTo = this.getProvider(chainId)\n\n        const receipt = await providerTo.getTransactionReceipt(transactionHash)\n\n        if (!receipt) {\n            return undefined\n        }\n\n        const eventId = utils.id('TransitTokenSent(address,uint256,address)')\n        const log = receipt.logs.find((log: Log) => {\n            if (log.topics.length === 0) {\n                return false\n            }\n            return log.topics[0] === eventId\n        })\n\n        if (!log) {\n            return undefined\n        }\n\n        const parsedLog = metarouter.interface.parseLog(log)\n\n        const token = this.tokens().find((token: Token) => {\n            return token.chainId === chainId && token.address.toLowerCase() === parsedLog.args.token.toLowerCase()\n        })\n\n        if (!token) {\n            return undefined\n        }\n\n        return new TokenAmount(token, parsedLog.args.amount.toString())\n    }\n\n    async tronWaitForMined(chainId: ChainId, txId: string): Promise<TransactionInfo> {\n        let info: TransactionInfo | undefined\n\n        const tronWeb = this.tronWeb(chainId)\n\n        const TRIES = 10\n        for (let i = 0; i < TRIES; i++) {\n            const response = await getTransactionInfoById(tronWeb, txId)\n            if (response) {\n                info = response\n                break\n            }\n\n            await delay(1000)\n        }\n\n        if (!info) {\n            throw new SdkError('Transaction not found')\n        }\n\n        return info\n    }\n\n    getRevertableAddress(chainId: ChainId): string {\n        const address = this.config.revertableAddress[chainId]\n\n        if (address) {\n            return address\n        }\n\n        return this.config.revertableAddress.default\n    }\n\n    validateLimits(amount: TokenAmount): void {\n        const { token } = amount\n        const limit = this.config.limits.find((limit) => {\n            return limit.address.toLowerCase() === token.address.toLowerCase() && limit.chainId === token.chainId\n        })\n        if (!limit) {\n            return\n        }\n        const maxAmountRaw = parseUnits(limit.max, token.decimals).toString()\n        if (maxAmountRaw !== '0') {\n            const maxLimitTokenAmount = new TokenAmount(token, maxAmountRaw)\n            if (amount.greaterThan(maxLimitTokenAmount)) {\n                throw new AmountTooHighError(\n                    `Max: ${maxLimitTokenAmount.toSignificant()} ${maxLimitTokenAmount.token.symbol}`\n                )\n            }\n        }\n        const minAmountRaw = parseUnits(limit.min, token.decimals).toString()\n        if (minAmountRaw !== '0') {\n            const minLimitTokenAmount = new TokenAmount(token, minAmountRaw)\n            if (amount.lessThan(minLimitTokenAmount)) {\n                throw new AmountTooLowError(\n                    `Min: ${minLimitTokenAmount.toSignificant()} ${minLimitTokenAmount.token.symbol}`\n                )\n            }\n        }\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { AdaRouter, AdaRouterInterface } from '../AdaRouter'\n\nconst _abi = [\n    {\n        type: 'constructor',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                type: 'address',\n                name: '_factory',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: '_WADA',\n                internalType: 'address',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'address',\n                name: '',\n                internalType: 'address',\n            },\n        ],\n        name: 'WADA',\n        inputs: [],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountB',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'addLiquidity',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADesired',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountBDesired',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountBMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'payable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountToken',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'addLiquidityADA',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenDesired',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'address',\n                name: '',\n                internalType: 'address',\n            },\n        ],\n        name: 'factory',\n        inputs: [],\n    },\n    {\n        type: 'function',\n        stateMutability: 'pure',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'getAmountIn',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountOut',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'reserveIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'reserveOut',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'pure',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountOut',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'getAmountOut',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'reserveIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'reserveOut',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'getAmountsIn',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountOut',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'getAmountsOut',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'pure',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountB',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'quote',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'reserveA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'reserveB',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountB',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidity',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountBMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountToken',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADA',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityADA',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountADA',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityADASupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountToken',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADA',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityADAWithPermit',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n            {\n                type: 'bool',\n                name: 'approveMax',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint8',\n                name: 'v',\n                internalType: 'uint8',\n            },\n            {\n                type: 'bytes32',\n                name: 'r',\n                internalType: 'bytes32',\n            },\n            {\n                type: 'bytes32',\n                name: 's',\n                internalType: 'bytes32',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountADA',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityADAWithPermitSupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n            {\n                type: 'bool',\n                name: 'approveMax',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint8',\n                name: 'v',\n                internalType: 'uint8',\n            },\n            {\n                type: 'bytes32',\n                name: 'r',\n                internalType: 'bytes32',\n            },\n            {\n                type: 'bytes32',\n                name: 's',\n                internalType: 'bytes32',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountB',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityWithPermit',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountBMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n            {\n                type: 'bool',\n                name: 'approveMax',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint8',\n                name: 'v',\n                internalType: 'uint8',\n            },\n            {\n                type: 'bytes32',\n                name: 'r',\n                internalType: 'bytes32',\n            },\n            {\n                type: 'bytes32',\n                name: 's',\n                internalType: 'bytes32',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'payable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapADAForExactTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountOut',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'payable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapExactADAForTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'payable',\n        outputs: [],\n        name: 'swapExactADAForTokensSupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapExactTokensForADA',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [],\n        name: 'swapExactTokensForADASupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapExactTokensForTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [],\n        name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapTokensForExactADA',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountOut',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountInMax',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapTokensForExactTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountOut',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountInMax',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address[]',\n                name: 'path',\n                internalType: 'address[]',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'receive',\n        stateMutability: 'payable',\n    },\n]\n\nexport class AdaRouter__factory {\n    static readonly abi = _abi\n    static createInterface(): AdaRouterInterface {\n        return new utils.Interface(_abi) as AdaRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): AdaRouter {\n        return new Contract(address, _abi, signerOrProvider) as AdaRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { AvaxRouter, AvaxRouterInterface } from '../AvaxRouter'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_WAVAX',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'WAVAX',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountADesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAVAXMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidityAVAX',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAVAX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'getAmountIn',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'getAmountOut',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n        ],\n        name: 'getAmountsIn',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n        ],\n        name: 'getAmountsOut',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveB',\n                type: 'uint256',\n            },\n        ],\n        name: 'quote',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAVAXMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityAVAX',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAVAX',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAVAXMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityAVAXSupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountAVAX',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAVAXMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityAVAXWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAVAX',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAVAXMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountAVAX',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapAVAXForExactTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactAVAXForTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactAVAXForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForAVAX',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForAVAXSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountInMax',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapTokensForExactAVAX',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountInMax',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapTokensForExactTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n]\n\nexport class AvaxRouter__factory {\n    static readonly abi = _abi\n    static createInterface(): AvaxRouterInterface {\n        return new utils.Interface(_abi) as AvaxRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): AvaxRouter {\n        return new Contract(address, _abi, signerOrProvider) as AvaxRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { BranchedUnlocker, BranchedUnlockerInterface } from '../BranchedUnlocker'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: 'condition',\n                type: 'bytes',\n            },\n        ],\n        name: 'decodeCondition',\n        outputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'contract IDepositUnlocker',\n                                name: 'unlocker',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bytes',\n                                name: 'condition',\n                                type: 'bytes',\n                            },\n                        ],\n                        internalType: 'struct DepositoryTypes.Unlocker[]',\n                        name: 'unlockers',\n                        type: 'tuple[]',\n                    },\n                ],\n                internalType: 'struct BranchedUnlocker.Condition',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'contract IDepositUnlocker',\n                                name: 'unlocker',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bytes',\n                                name: 'condition',\n                                type: 'bytes',\n                            },\n                        ],\n                        internalType: 'struct DepositoryTypes.Unlocker[]',\n                        name: 'unlockers',\n                        type: 'tuple[]',\n                    },\n                ],\n                internalType: 'struct BranchedUnlocker.Condition',\n                name: 'c',\n                type: 'tuple',\n            },\n        ],\n        name: 'encodeCondition',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'index',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'solution',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct BranchedUnlocker.Solution',\n                name: 's',\n                type: 'tuple',\n            },\n        ],\n        name: 'encodeSolution',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: 'metarouter',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'nonce',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Deposit',\n                name: 'deposit',\n                type: 'tuple',\n            },\n            {\n                internalType: 'bytes',\n                name: 'condition',\n                type: 'bytes',\n            },\n            {\n                internalType: 'bytes',\n                name: 'solution',\n                type: 'bytes',\n            },\n        ],\n        name: 'unlock',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234601957604051610dcf61001f8239610dcf90f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806322c0bff814610052578063760bd1181461004d57806385a600c7146100485763b11e07ce03610092576103c7565b61036c565b6102ff565b61014e565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff81165b0361009257565b600080fd5b905035906100a482610073565b565b908160609103126100925790565b909182601f830112156100925781359167ffffffffffffffff831161009257602001926001830284011161009257565b919060c083820312610092576100fa8184610097565b9261010882602083016100a6565b92608082013567ffffffffffffffff811161009257836101299184016100b4565b92909360a082013567ffffffffffffffff81116100925761014a92016100b4565b9091565b346100925761016d6101613660046100e4565b949390939291926107b7565b60405180805b0390f35b9060208282031261009257813567ffffffffffffffff81116100925761014a92016100b4565b6100576100706100709273ffffffffffffffffffffffffffffffffffffffff1690565b6100709061019d565b610070906101c0565b6101db906101c9565b9052565b60005b8381106101f25750506000910152565b81810151838201526020016101e2565b61022361022c60209361023693610217815190565b80835293849260200190565b958691016101df565b601f01601f191690565b0190565b6100709160206040820192610257600082015160008501906101d2565b0151906020818403910152610202565b906100709161023a565b9061028761027d835190565b8083529160200190565b90816102996020830284019460200190565b926000915b8383106102ad57505050505090565b909192939460206102d06102c983856001950387528951610267565b9760200190565b930193019193929061029e565b516020808352610070920190610271565b6020808252610070929101906102dd565b346100925761017361031b610315366004610177565b90610a2f565b604051918291826102ee565b908160209103126100925790565b9060208282031261009257813567ffffffffffffffff8111610092576100709201610327565b602080825261007092910190610202565b3461009257610173610387610382366004610335565b610bd7565b6040519182918261035b565b908160409103126100925790565b9060208282031261009257813567ffffffffffffffff8111610092576100709201610393565b34610092576101736103876103dd3660046103a1565b610c2e565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761041a57604052565b6103e2565b906100a461042c60405190565b92836103f8565b67ffffffffffffffff811161041a57602090601f01601f19160190565b9061046261045d83610433565b61041f565b918252565b6104716023610450565b7f4272616e63686564556e6c6f636b65722e756e6c6f636b286d657461726f757460208201527f6572290000000000000000000000000000000000000000000000000000000000604082015290565b610070610467565b6104d26029610450565b7f4272616e63686564556e6c6f636b65722e756e6c6f636b28756e6c6f636b657260208201527f732e6c656e677468290000000000000000000000000000000000000000000000604082015290565b6100706104c8565b8061008b565b905035906100a482610529565b90826000939282370152565b9092919261055861045d82610433565b9381855281830111610092576100a491602085019061053c565b9080601f830112156100925781602061007093359101610548565b919091604081840312610092576105a4604061041f565b926105af818361052f565b8452602082013567ffffffffffffffff8111610092576105cf9201610572565b6020830152565b9060208282031261009257813567ffffffffffffffff811161009257610070920161058d565b610606601e610450565b7f4272616e63686564556e6c6f636b65722e756e6c6f636b28696e646578290000602082015290565b6100706105fc565b1561063e57565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4272616e63686564556e6c6f636b65723a20696e76616c6964206c6f636b206960448201527f6e646578000000000000000000000000000000000000000000000000000000006064820152608490fd5b634e487b7160e01b600052603260045260246000fd5b906106e1825190565b8110156106f2576020809102010190565b6106c2565b600091031261009257565b50610070906020810190610097565b5061007090602081019061052f565b9060406107616100a49361074161073a6000830183610702565b85906101d2565b6107586107516020830183610711565b6020860152565b82810190610711565b910152565b929061079d91610790610070969461078660c088019460008901906101d2565b6020870190610720565b8482036080860152610202565b9160a0818403910152610202565b6040513d6000823e3d90fd5b9360006107e5610808939795610852956107e06107d38a6101c9565b6107db6104c0565b610c84565b610a2f565b01936108006107f386515190565b6107fb610521565b610d00565b8101906105d6565b91829061084c9061082261081a845190565b6107fb61062f565b61084661082d845190565b61084061083c61007085515190565b9190565b10610637565b51915190565b906106d8565b5160208061087c610877845173ffffffffffffffffffffffffffffffffffffffff1690565b6101c9565b92015192015193813b1561009257600080946108cd61089a60405190565b978896879586947f22c0bff800000000000000000000000000000000000000000000000000000000865260048601610766565b03925af180156108f6576108de5750565b6100a49060006108ee81836103f8565b8101906106f7565b6107ab565b610070602061041f565b61090d6108fb565b9060608252565b610070610905565b67ffffffffffffffff811161041a5760208091020190565b9190916040818403126100925761094b604061041f565b926105af8183610097565b92919061096561045d8261091c565b93818552602080860192028101918383116100925781905b83821061098b575050505050565b813567ffffffffffffffff8111610092576020916109ac8784938701610934565b81520191019061097d565b9080601f830112156100925781602061007093359101610956565b919091602081840312610092576109e9602061041f565b92813567ffffffffffffffff811161009257610a0592016109b7565b8252565b9060208282031261009257813567ffffffffffffffff81116100925761007092016109d2565b61007091610a3b610914565b50810190610a09565b9035601e19368390030181121561009257016020813591019167ffffffffffffffff821161009257602082023603831361009257565b9035601e19368390030181121561009257016020813591019167ffffffffffffffff82116100925736829003831361009257565b919061022c81610ac5816102369560209181520190565b809561053c565b610070916040810191610af790610aed610ae68280610702565b84906101d2565b6020810190610a7a565b916020818503910152610aae565b9061007091610acc565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc13683900301811215610092570190565b818352916020019081610b586020830284019490565b92836000925b848410610b6e5750505050505090565b9091929394956020610b9a610b938385600195038852610b8e8b88610b0f565b610b05565b9860200190565b940194019294939190610b5e565b610070916020810191610bbb9080610a44565b828403909252610b42565b602080825261007092910190610ba8565b610070610be360405190565b8092610bf3602083019182610bc6565b908103825203826103f8565b610070916040810191610af790610aed610c198280610711565b8452565b602080825261007092910190610bff565b610070610c3a60405190565b8092610bf3602083019182610c1d565b92916020610c676100a49360408701908782036000890152610202565b94019073ffffffffffffffffffffffffffffffffffffffff169052565b90610cd96100a492610cca610c9860405190565b9384926004602085017f319af33300000000000000000000000000000000000000000000000000000000815201610c4a565b602082018103825203826103f8565b610d46565b92916020610cfb6100a49360408701908782036000890152610202565b940152565b90610cd96100a492610cca610d1460405190565b9384926004602085017fb60e72cc00000000000000000000000000000000000000000000000000000000815201610cde565b6100a4906001610d89565b60008091610d676a636f6e736f6c652e6c6f6790565b602082519201905afa50565b634e487b7160e01b600052605160045260246000fd5b600103610d73576100a490610d5156fea26469706673582212203e02bdb89b19af3985597dc789722aba465c74d7612678e9e4cc247c6763de1a64736f6c634300081c0033'\n\ntype BranchedUnlockerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: BranchedUnlockerConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class BranchedUnlocker__factory extends ContractFactory {\n    constructor(...args: BranchedUnlockerConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'BranchedUnlocker'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BranchedUnlocker> {\n        return super.deploy(overrides || {}) as Promise<BranchedUnlocker>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): BranchedUnlocker {\n        return super.attach(address) as BranchedUnlocker\n    }\n    connect(signer: Signer): BranchedUnlocker__factory {\n        return super.connect(signer) as BranchedUnlocker__factory\n    }\n    static readonly contractName: 'BranchedUnlocker'\n    public readonly contractName: 'BranchedUnlocker'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): BranchedUnlockerInterface {\n        return new utils.Interface(_abi) as BranchedUnlockerInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): BranchedUnlocker {\n        return new Contract(address, _abi, signerOrProvider) as BranchedUnlocker\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { Bridge, BridgeInterface } from '../Bridge'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'oldMPC',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newMPC',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'effectiveTime',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'chainId',\n                type: 'uint256',\n            },\n        ],\n        name: 'LogChangeMPC',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'bridge',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes',\n                name: 'callData',\n                type: 'bytes',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'receiveSide',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'oppositeBridge',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'chainId',\n                type: 'uint256',\n            },\n        ],\n        name: 'OracleRequest',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'admin',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'permission',\n                type: 'bool',\n            },\n        ],\n        name: 'SetAdminPermission',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'transmitter',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'status',\n                type: 'bool',\n            },\n        ],\n        name: 'SetTransmitterStatus',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newMPC',\n                type: 'address',\n            },\n        ],\n        name: 'changeMPC',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newMPC',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: 'signature',\n                type: 'bytes',\n            },\n        ],\n        name: 'changeMPCSigned',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'currentChainId',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_mpc',\n                type: 'address',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'isAdmin',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'isTransmitter',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'mpc',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'newMPC',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'newMPCEffectiveTime',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'oldMPC',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: '_callData',\n                type: 'bytes',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n        ],\n        name: 'receiveRequestV2',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: '_callData',\n                type: 'bytes',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: 'signature',\n                type: 'bytes',\n            },\n        ],\n        name: 'receiveRequestV2Signed',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_user',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: '_permission',\n                type: 'bool',\n            },\n        ],\n        name: 'setAdminPermission',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_transmitter',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: '_status',\n                type: 'bool',\n            },\n        ],\n        name: 'setTransmitterStatus',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: '_callData',\n                type: 'bytes',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainId',\n                type: 'uint256',\n            },\n        ],\n        name: 'transmitRequestV2',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'withdrawFee',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234801561001057600080fd5b50611946806100206000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80636fac3007116100cd578063c00f8a3d11610081578063f2fde38b11610066578063f2fde38b146102bf578063f75c2664146102d2578063f7f1baf0146102da57600080fd5b8063c00f8a3d14610299578063c4d66de8146102ac57600080fd5b806375f3974b116100b257806375f3974b1461026257806384d61c97146102755780638da5cb5b1461028857600080fd5b80636fac300714610237578063715018a61461025a57600080fd5b8063405fb4f7116101245780635b7b018c116101095780635b7b018c1461020b5780636cbadbfa1461021e5780636cebc9c21461022457600080fd5b8063405fb4f7146101c9578063474a245a146101e057600080fd5b80631095b6d71461015657806319117d931461017e57806324d7806c1461019357806338899935146101b6575b600080fd5b61016961016436600461144e565b6102ed565b60405190151581526020015b60405180910390f35b61019161018c36600461148a565b61038d565b005b6101696101a1366004611433565b60656020526000908152604090205460ff1681565b6101696101c43660046114c1565b610447565b6101d260685481565b604051908152602001610175565b6066546101f3906001600160a01b031681565b6040516001600160a01b039091168152602001610175565b610169610219366004611433565b610516565b466101d2565b6101916102323660046115bc565b6105d1565b610169610245366004611433565b60696020526000908152604090205460ff1681565b610191610675565b61019161027036600461148a565b6106db565b610191610283366004611622565b61078d565b6033546001600160a01b03166101f3565b6067546101f3906001600160a01b031681565b6101916102ba366004611433565b610822565b6101916102cd366004611433565b610959565b6101f3610a3b565b6101916102e836600461156e565b610a66565b6000336103026033546001600160a01b031690565b6001600160a01b0316148061032657503360009081526065602052604090205460ff165b6103775760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c79206f776e6572206f722061646d696e2063616e2063616c6c0000000060448201526064015b60405180910390fd5b610382848484610ad8565b5060015b9392505050565b6033546001600160a01b031633146103e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161036e565b6001600160a01b038216600081815260696020908152604091829020805460ff191685151590811790915591519182527feeec8b4e2d317fc608f301f859237a6081b9813f150a3fcfb02fd54276c8be4091015b60405180910390a25050565b6040517f6368616e67654d5043000000000000000000000000000000000000000000000060208201526bffffffffffffffffffffffff19606084901b166029820152600090603d0160405160208183030381529060405280519060200120826104b86104b1610a3b565b8383610c40565b6105045760405162461bcd60e51b815260206004820152601b60248201527f42726964676556323a20696e76616c6964207369676e61747572650000000000604482015260640161036e565b61050d85610dea565b95945050505050565b600033610521610a3b565b6001600160a01b0316148061054f5750336105446033546001600160a01b031690565b6001600160a01b0316145b6105c05760405162461bcd60e51b8152602060048201526024808201527f42726964676556323a206f6e6c79206f776e6572206f72204d50432063616e2060448201527f63616c6c00000000000000000000000000000000000000000000000000000000606482015260840161036e565b6105c982610dea565b90505b919050565b3360009081526069602052604090205460ff166106305760405162461bcd60e51b815260206004820152601b60248201527f42726964676556323a206e6f742061207472616e736d69747465720000000000604482015260640161036e565b7f532dbb6d061eee97ab4370060f60ede10b3dc361cc1214c07ae5e34dd86e6aaf30858585856040516106679594939291906117ac565b60405180910390a150505050565b6033546001600160a01b031633146106cf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161036e565b6106d96000610ecf565b565b6033546001600160a01b031633146107355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161036e565b6001600160a01b038216600081815260656020908152604091829020805460ff191685151590811790915591519182527f0e7bea53cb2b3130dd1aac8d56b61cc8da7ebab0432e2d1622513523d848f2e7910161043b565b828260601b6040516020016107a392919061174c565b60405160208183030381529060405280519060200120816107c56104b1610a3b565b6108115760405162461bcd60e51b815260206004820152601b60248201527f42726964676556323a20696e76616c6964207369676e61747572650000000000604482015260640161036e565b61081b8585610f2e565b5050505050565b600054610100900460ff1661083d5760005460ff1615610841565b303b155b6108b35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161036e565b600054610100900460ff161580156108f257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6108fa61105b565b6066805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905542606855801561095557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6033546001600160a01b031633146109b35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161036e565b6001600160a01b038116610a2f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161036e565b610a3881610ecf565b50565b60006068544210610a5657506066546001600160a01b031690565b506067546001600160a01b031690565b610a6e610a3b565b6001600160a01b0316336001600160a01b031614610ace5760405162461bcd60e51b815260206004820152601360248201527f42726964676556323a20666f7262696464656e00000000000000000000000000604482015260640161036e565b6109558282610f2e565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691610b629190611730565b6000604051808303816000865af19150503d8060008114610b9f576040519150601f19603f3d011682016040523d82523d6000602084013e610ba4565b606091505b5091509150818015610bce575080511580610bce575080806020019051810190610bce919061150f565b61081b5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161036e565b6000806000610c4f85856110e8565b90925090506000816004811115610c6857610c686118a4565b148015610c865750856001600160a01b0316826001600160a01b0316145b15610c9657600192505050610386565b600080876001600160a01b0316631626ba7e60e01b8888604051602401610cbe9291906117eb565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610d299190611730565b600060405180830381855afa9150503d8060008114610d64576040519150601f19603f3d011682016040523d82523d6000602084013e610d69565b606091505b5091509150818015610d7c575080516020145b8015610dde575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090610dba908301602090810190840161152c565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b98975050505050505050565b60006001600160a01b038216610e425760405162461bcd60e51b815260206004820152601660248201527f42726964676556323a2061646472657373283078302900000000000000000000604482015260640161036e565b610e4a610a3b565b606780546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff19918216811790925560668054938616939091168317905542606881905591907fcda32bc39904597666dfa9f9c845714756e1ffffad55b52e0d344673a2198121610eb64690565b60405190815260200160405180910390a4506001919050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526069602052604090205460ff16610f965760405162461bcd60e51b815260206004820152601f60248201527f42726964676556323a20756e74727573746564207472616e736d697474657200604482015260640161036e565b600080826001600160a01b031684604051610fb19190611730565b6000604051808303816000865af19150503d8060008114610fee576040519150601f19603f3d011682016040523d82523d6000602084013e610ff3565b606091505b5091509150816110555761103c816040518060400160405280601581526020017f42726964676556323a2063616c6c206661696c65640000000000000000000000815250611158565b60405162461bcd60e51b815260040161036e919061180c565b50505050565b600054610100900460ff166110d85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161036e565b6110e061118e565b6106d961120b565b60008082516041141561111f5760208301516040840151606085015160001a61111387828585611291565b94509450505050611151565b825160401415611149576020830151604084015161113e86838361137e565b935093505050611151565b506000905060025b9250929050565b606060448351101561116b575080611188565b600483019250828060200190518101906111859190611696565b90505b92915050565b600054610100900460ff166106d95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161036e565b600054610100900460ff166112885760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161036e565b6106d933610ecf565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112c85750600090506003611375565b8460ff16601b141580156112e057508460ff16601c14155b156112f15750600090506004611375565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611345573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661136e57600060019250925050611375565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b016113b887828885611291565b935093505050935093915050565b80356001600160a01b03811681146105cc57600080fd5b600082601f8301126113ee57600080fd5b81356114016113fc82611850565b61181f565b81815284602083860101111561141657600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561144557600080fd5b611185826113c6565b60008060006060848603121561146357600080fd5b61146c846113c6565b925061147a602085016113c6565b9150604084013590509250925092565b6000806040838503121561149d57600080fd5b6114a6836113c6565b915060208301356114b681611902565b809150509250929050565b600080604083850312156114d457600080fd5b6114dd836113c6565b9150602083013567ffffffffffffffff8111156114f957600080fd5b611505858286016113dd565b9150509250929050565b60006020828403121561152157600080fd5b815161038681611902565b60006020828403121561153e57600080fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461038657600080fd5b6000806040838503121561158157600080fd5b823567ffffffffffffffff81111561159857600080fd5b6115a4858286016113dd565b9250506115b3602084016113c6565b90509250929050565b600080600080608085870312156115d257600080fd5b843567ffffffffffffffff8111156115e957600080fd5b6115f5878288016113dd565b945050611604602086016113c6565b9250611612604086016113c6565b9396929550929360600135925050565b60008060006060848603121561163757600080fd5b833567ffffffffffffffff8082111561164f57600080fd5b61165b878388016113dd565b9450611669602087016113c6565b9350604086013591508082111561167f57600080fd5b5061168c868287016113dd565b9150509250925092565b6000602082840312156116a857600080fd5b815167ffffffffffffffff8111156116bf57600080fd5b8201601f810184136116d057600080fd5b80516116de6113fc82611850565b8181528560208385010111156116f357600080fd5b61050d826020830160208601611878565b6000815180845261171c816020860160208601611878565b601f01601f19169290920160200192915050565b60008251611742818460208701611878565b9190910192915050565b7f7265636569766552657175657374563200000000000000000000000000000000815260008351611784816010850160208801611878565b80830190506bffffffffffffffffffffffff1984166010820152602481019150509392505050565b60006001600160a01b03808816835260a060208401526117cf60a0840188611704565b9581166040840152939093166060820152608001525092915050565b8281526040602082015260006118046040830184611704565b949350505050565b6020815260006111856020830184611704565b604051601f8201601f1916810167ffffffffffffffff81118282101715611848576118486118d3565b604052919050565b600067ffffffffffffffff82111561186a5761186a6118d3565b50601f01601f191660200190565b60005b8381101561189357818101518382015260200161187b565b838111156110555750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8015158114610a3857600080fdfea2646970667358221220dbd6b181d0bd39bfc41cfefeef8d6b7abcf65e1e275f744004f4654746c4620f64736f6c63430008070033'\n\ntype BridgeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: BridgeConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1\n\nexport class Bridge__factory extends ContractFactory {\n    constructor(...args: BridgeConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'Bridge'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Bridge> {\n        return super.deploy(overrides || {}) as Promise<Bridge>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): Bridge {\n        return super.attach(address) as Bridge\n    }\n    connect(signer: Signer): Bridge__factory {\n        return super.connect(signer) as Bridge__factory\n    }\n    static readonly contractName: 'Bridge'\n    public readonly contractName: 'Bridge'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): BridgeInterface {\n        return new utils.Interface(_abi) as BridgeInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): Bridge {\n        return new Contract(address, _abi, signerOrProvider) as Bridge\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { BtcRefundUnlocker, BtcRefundUnlockerInterface } from '../BtcRefundUnlocker'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract ISynthesis',\n                name: '_synthesis',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: 'condition',\n                type: 'bytes',\n            },\n        ],\n        name: 'decodeCondition',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'refundAddress',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct BtcRefundUnlocker.Condition',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'refundAddress',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct BtcRefundUnlocker.Condition',\n                name: 'c',\n                type: 'tuple',\n            },\n        ],\n        name: 'encodeCondition',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'clientID',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct BtcRefundUnlocker.Solution',\n                name: 's',\n                type: 'tuple',\n            },\n        ],\n        name: 'encodeSolution',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'synthesis',\n        outputs: [\n            {\n                internalType: 'contract ISynthesis',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: 'metarouter',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'nonce',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Deposit',\n                name: 'deposit',\n                type: 'tuple',\n            },\n            {\n                internalType: 'bytes',\n                name: 'condition',\n                type: 'bytes',\n            },\n            {\n                internalType: 'bytes',\n                name: 'solution',\n                type: 'bytes',\n            },\n        ],\n        name: 'unlock',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x60806040523461002a576100196100146100c2565b610136565b604051610b666101428239610b6690f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006657604052565b61002f565b9061007f61007860405190565b9283610045565b565b6001600160a01b031690565b90565b6001600160a01b0381160361002a57565b9050519061007f82610090565b9060208282031261002a5761008d916100a1565b61008d610ca8803803806100d58161006b565b9283398101906100ae565b61008d90610081906001600160a01b031682565b61008d906100e0565b61008d906100f4565b9061011661008d610132926100fd565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b61007f90600061010656fe6080604052600436101561001257600080fd5b60003560e01c806322c0bff8146100625780632af896fb1461005d578063760bd118146100585780638f4d03b4146100535763c9cd04dc0361008857610367565b61030c565b6102b1565b6101e7565b610144565b6001600160a01b031690565b90565b6001600160a01b0381165b0361008857565b600080fd5b9050359061009a82610076565b565b908160609103126100885790565b909182601f830112156100885781359167ffffffffffffffff831161008857602001926001830284011161008857565b919060c083820312610088576100f0818461008d565b926100fe826020830161009c565b92608082013567ffffffffffffffff8111610088578361011f9184016100aa565b92909360a082013567ffffffffffffffff81116100885761014092016100aa565b9091565b34610088576101636101573660046100da565b949390939291926105fa565b60405180805b0390f35b600091031261008857565b610073916008021c6001600160a01b031690565b906100739154610178565b61007360008061018c565b610067610073610073926001600160a01b031690565b610073906101a2565b610073906101b8565b6101d3906101c1565b9052565b60208101929161009a91906101ca565b34610088576101f736600461016d565b610169610202610197565b604051918291826101d7565b9060208282031261008857813567ffffffffffffffff81116100885761014092016100aa565b60005b8381106102475750506000910152565b8181015183820152602001610237565b61027861028160209361028b9361026c815190565b80835293849260200190565b95869101610234565b601f01601f191690565b0190565b516020808352610073920190610257565b60208082526100739291019061028f565b34610088576101696102cd6102c736600461020e565b90610865565b604051918291826102a0565b908160409103126100885790565b9060408282031261008857610073916102d9565b602080825261007392910190610257565b34610088576101696103276103223660046102e7565b6108c5565b604051918291826102fb565b908160209103126100885790565b9060208282031261008857813567ffffffffffffffff8111610088576100739201610333565b346100885761016961032761037d366004610341565b61098c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176103d357604052565b610382565b9061009a6103e560405190565b92836103b1565b80610081565b9050359061009a826103ec565b91906040838203126100885761042e90602061041b60406103d8565b9461042683826103f2565b8652016103f2565b6020830152565b9060408282031261008857610073916103ff565b67ffffffffffffffff81116103d357602090601f01601f19160190565b9061047861047383610449565b6103d8565b918252565b6104876036610466565b7f427463526566756e64556e6c6f636b65722e756e6c6f636b2873796e7468657360208201527f69732c20737461626c654272696467696e674665652900000000000000000000604082015290565b61007361047d565b35610073816103ec565b3561007381610076565b61050b6105056100739263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b9061056861057a9161009a9698979561055b60809661055460a08801946000890152565b6020870152565b8482036040860152610257565b6001600160a01b039097166060830152565b0152565b6100736100736100739290565b6101d39061057e565b61009a946105d9829897956105c96080966105c26105e697600060a089019801906001600160a01b03169052565b60208c0152565b6001600160a01b031660408a0152565b8782036060890152610257565b94019061058b565b6040513d6000823e3d90fd5b9492610607919492610865565b91810161061391610435565b926106266000546001600160a01b031690565b61062f906101c1565b84929061063a845190565b6106426104d6565b9161064c926109dc565b60000193845161065b90610a36565b60200191610667835190565b61067090610a7b565b51926020810193610680856104de565b9551919361068d856104e8565b610696906101c1565b9051906106a663a0d955706104f2565b936106b060405190565b98899560208701908152600401946106c795610530565b6020820181038252036106da90856103b1565b6106e3906101c1565b906106ed906104e8565b6106f6906101c1565b91610700906104de565b906107136000546001600160a01b031690565b61071c906101c1565b91813b1561008857600080946107688261073560405190565b988997889687957f3add6d5a00000000000000000000000000000000000000000000000000000000875260048701610594565b03925af18015610791576107795750565b61009a90600061078981836103b1565b81019061016d565b6105ee565b61007360206103d8565b6107a8610796565b9060608252565b6100736107a0565b90826000939282370152565b909291926107d361047382610449565b93818552818301116100885761009a9160208501906107b7565b9080601f8301121561008857816020610073933591016107c3565b9190916020818403126100885761081f60206103d8565b92813567ffffffffffffffff81116100885761083b92016107ed565b8252565b9060208282031261008857813567ffffffffffffffff8111610088576100739201610808565b610073916108716107af565b5081019061083f565b506100739060208101906103f2565b9060206108b061009a936108a76108a3600083018361087a565b8552565b8281019061087a565b910152565b60408101929161009a9190610889565b6100736108d160405190565b80926108e16020830191826108b5565b908103825203826103b1565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368390030181121561008857016020813591019167ffffffffffffffff82116100885736829003831361008857565b9190610281816109568161028b9560209181520190565b80956107b7565b61007391602081019161097090806108ed565b82840390925261093f565b60208082526100739291019061095d565b61007361099860405190565b80926108e160208301918261097b565b60409061057a6109ca61009a9597969460608401908482036000860152610257565b6001600160a01b039097166020830152565b610a3190610a2261009a946109f060405190565b9485936004602086017f0d26b925000000000000000000000000000000000000000000000000000000008152016109a8565b602082018103825203826103b1565b610ac4565b610a22610a3161009a92610a4960405190565b9283916004602084017f0be77f56000000000000000000000000000000000000000000000000000000008152016102fb565b610a22610a3161009a92610a8e60405190565b9283916004602084017f27b7cf850000000000000000000000000000000000000000000000000000000081520190815260200190565b61009a906001610b20565b60008091610ae56a636f6e736f6c652e6c6f6790565b602082519201905afa50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600103610af15761009a90610acf56fea2646970667358221220befa6c80989dda29037019f8925cb4e457703ccce30d3e69ef927312f4f9503964736f6c634300081c0033'\n\ntype BtcRefundUnlockerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: BtcRefundUnlockerConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class BtcRefundUnlocker__factory extends ContractFactory {\n    constructor(...args: BtcRefundUnlockerConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'BtcRefundUnlocker'\n    }\n\n    deploy(\n        _synthesis: string,\n        overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<BtcRefundUnlocker> {\n        return super.deploy(_synthesis, overrides || {}) as Promise<BtcRefundUnlocker>\n    }\n    getDeployTransaction(\n        _synthesis: string,\n        overrides?: Overrides & { from?: string | Promise<string> }\n    ): TransactionRequest {\n        return super.getDeployTransaction(_synthesis, overrides || {})\n    }\n    attach(address: string): BtcRefundUnlocker {\n        return super.attach(address) as BtcRefundUnlocker\n    }\n    connect(signer: Signer): BtcRefundUnlocker__factory {\n        return super.connect(signer) as BtcRefundUnlocker__factory\n    }\n    static readonly contractName: 'BtcRefundUnlocker'\n    public readonly contractName: 'BtcRefundUnlocker'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): BtcRefundUnlockerInterface {\n        return new utils.Interface(_abi) as BtcRefundUnlockerInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): BtcRefundUnlocker {\n        return new Contract(address, _abi, signerOrProvider) as BtcRefundUnlocker\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { Depository, DepositoryInterface } from '../Depository'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'target',\n                type: 'address',\n            },\n        ],\n        name: 'AddressEmptyCode',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'implementation',\n                type: 'address',\n            },\n        ],\n        name: 'ERC1967InvalidImplementation',\n        type: 'error',\n    },\n    {\n        inputs: [],\n        name: 'ERC1967NonPayable',\n        type: 'error',\n    },\n    {\n        inputs: [],\n        name: 'FailedCall',\n        type: 'error',\n    },\n    {\n        inputs: [],\n        name: 'InvalidInitialization',\n        type: 'error',\n    },\n    {\n        inputs: [],\n        name: 'NotInitializing',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnableInvalidOwner',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'OwnableUnauthorizedAccount',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'SafeERC20FailedOperation',\n        type: 'error',\n    },\n    {\n        inputs: [],\n        name: 'UUPSUnauthorizedCallContext',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: 'slot',\n                type: 'bytes32',\n            },\n        ],\n        name: 'UUPSUnsupportedProxiableUUID',\n        type: 'error',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'DepositID',\n                name: 'depositID',\n                type: 'bytes32',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'nonce',\n                        type: 'uint256',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct DepositoryTypes.Deposit',\n                name: 'deposit',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IDepositUnlocker',\n                        name: 'unlocker',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'condition',\n                        type: 'bytes',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct DepositoryTypes.Unlocker',\n                name: 'unlocker',\n                type: 'tuple',\n            },\n        ],\n        name: 'DepositLocked',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'DepositID',\n                name: 'depositID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'DepositUnlocked',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint64',\n                name: 'version',\n                type: 'uint64',\n            },\n        ],\n        name: 'Initialized',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'implementation',\n                type: 'address',\n            },\n        ],\n        name: 'Upgraded',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'UPGRADE_INTERFACE_VERSION',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'nonce',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Deposit',\n                name: 'd',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IDepositUnlocker',\n                        name: 'unlocker',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'condition',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Unlocker',\n                name: 'u',\n                type: 'tuple',\n            },\n        ],\n        name: 'depositID',\n        outputs: [\n            {\n                internalType: 'DepositID',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'DepositID',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'deposits',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: '_metaRouter',\n                type: 'address',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'nonce',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Deposit',\n                name: 'deposit',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IDepositUnlocker',\n                        name: 'unlocker',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'condition',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Unlocker',\n                name: 'unlocker',\n                type: 'tuple',\n            },\n        ],\n        name: 'lock',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'metaRouter',\n        outputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'proxiableUUID',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'nonce',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Deposit',\n                name: 'deposit',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IDepositUnlocker',\n                        name: 'unlocker',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'condition',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Unlocker',\n                name: 'unlocker',\n                type: 'tuple',\n            },\n            {\n                internalType: 'bytes',\n                name: 'solution',\n                type: 'bytes',\n            },\n        ],\n        name: 'unlock',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newImplementation',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'upgradeToAndCall',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x60a060405234602f57600e6034565b6040516118ed6100808239608051818181610eb501526110b301526118ed90f35b600080fd5b603a603c565b565b603a603a6073565b6056906059906001600160a01b031682565b90565b6001600160a01b031690565b6056906044565b6056906065565b607a30606c565b60805256fe6080604052600436101561001257600080fd5b60003560e01c80633d4dff7b146100d25780634f1ef286146100cd57806352d1902d146100c8578063595a5cd7146100c3578063715018a6146100be5780638da5cb5b146100b9578063ad3cb1cc146100b4578063b523051e146100af578063c4d66de8146100aa578063d2563133146100a5578063dbec15bb146100a05763f2fde38b036100e05761062a565b610603565b61057e565b610566565b610536565b6104d9565b6103df565b6103c7565b6103ab565b6102db565b6102b7565b610147565b805b036100e057565b600080fd5b905035906100f2826100d7565b565b906020828203126100e057610108916100e5565b90565b610108916008021c5b60ff1690565b90610108915461010b565b600061013e610108928290600052602052604060002090565b61011a565b9052565b346100e05761017461016261015d3660046100f4565b610125565b60405191829182901515815260200190565b0390f35b6001600160a01b031690565b6001600160a01b0381166100d9565b905035906100f282610184565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176101f157604052565b6101a0565b906100f261020360405190565b92836101cf565b67ffffffffffffffff81116101f157602090601f01601f19160190565b0190565b90826000939282370152565b9092919261024c6102478261020a565b6101f6565b93818552818301116100e0576100f291602085019061022b565b9080601f830112156100e05781602061010893359101610237565b9190916040818403126100e0576102988382610193565b92602082013567ffffffffffffffff81116100e0576101089201610266565b6102cb6102c5366004610281565b90610662565b604051005b60009103126100e057565b346100e0576102eb3660046102d0565b6101746102f66106bc565b6040519182918290815260200190565b908160609103126100e05790565b908160409103126100e05790565b909182601f830112156100e05781359167ffffffffffffffff83116100e05760200192600183028401116100e057565b9160a0838303126100e0576103678284610306565b92606081013567ffffffffffffffff81116100e05783610388918301610314565b92608082013567ffffffffffffffff81116100e0576103a79201610322565b9091565b346100e0576102cb6103be366004610352565b92919091610844565b346100e0576103d73660046102d0565b6102cb610998565b346100e0576103ef3660046102d0565b6101746103fa6109a0565b604051918291826001600160a01b03909116815260200190565b906104216102478361020a565b918252565b6104306005610414565b7f352e302e30000000000000000000000000000000000000000000000000000000602082015290565b610108610426565b610108610459565b610108610461565b60005b8381106104845750506000910152565b8181015183820152602001610474565b6104b56104be602093610227936104a9815190565b80835293849260200190565b95869101610471565b601f01601f191690565b602080825261010892910190610494565b346100e0576104e93660046102d0565b6101746104f4610469565b604051918291826104c8565b9190916080818403126100e0576105178382610306565b92606082013567ffffffffffffffff81116100e0576101089201610314565b346100e0576101746102f661054c366004610500565b906109d5565b906020828203126100e05761010891610193565b346100e0576102cb610579366004610552565b610c42565b346100e0576102cb610591366004610500565b90610d75565b610108916008021c6001600160a01b031690565b906101089154610597565b610108600060016105ab565b610178610108610108926001600160a01b031690565b610108906105c2565b610108906105d8565b610143906105e1565b6020810192916100f291906105ea565b346100e0576106133660046102d0565b61017461061e6105b6565b604051918291826105f3565b346100e0576102cb61063d366004610552565b610ea1565b906100f29161064f610eaa565b906100f29161065d81610f59565b610f83565b906100f291610642565b6101089061067861109d565b6106b3565b6101086101086101089290565b6101087f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61067d565b5061010861068a565b610108600061066c565b3561010881610184565b35610108816100d7565b6106e46027610414565b7f4465706f7369746f72792e756e6c6f636b28756e6c6f636b65722c206d65746160208201527f526f757465722900000000000000000000000000000000000000000000000000604082015290565b6101086106da565b903590601e1936829003018212156100e0570180359067ffffffffffffffff82116100e057602001913682900383136100e057565b50610108906020810190610193565b506101089060208101906100e5565b9060406107cf6100f2936107af6107a86000830183610770565b85906105ea565b6107c66107bf602083018361077f565b6020860152565b8281019061077f565b910152565b91906104be816107eb816102279560209181520190565b809561022b565b949293610108969461081d61082a9461081360c08a019560008b01906105ea565b602089019061078e565b86830360808801526107d4565b9260a08185039101526107d4565b6040513d6000823e3d90fd5b61084e8282611183565b61088661085a826106c6565b61087461086f6001546001600160a01b031690565b6105e1565b610880602085016106d0565b91611259565b6108c261086f836108bd61089a83836106c6565b6108af61086f6001546001600160a01b031690565b906108b8610733565b6112e4565b6106c6565b906108e36108d86001546001600160a01b031690565b93602081019061073b565b959093833b156100e0576109326000969287936108ff60405190565b998a98899788967f22c0bff8000000000000000000000000000000000000000000000000000000008852600488016107f2565b03925af1801561095b576109435750565b6100f290600061095381836101cf565b8101906102d0565b610838565b61096861133e565b6100f2610986565b6101786101086101089290565b61010890610970565b6100f2610993600061097d565b611394565b6100f2610960565b61010860007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b01546001600160a01b031690565b610108919061140d565b6101089060401c610114565b61010890546109df565b610108905b67ffffffffffffffff1690565b61010890546109f5565b6109fa6101086101089290565b9067ffffffffffffffff905b9181191691161790565b6109fa6101086101089267ffffffffffffffff1690565b90610a5b610108610a6292610a34565b8254610a1e565b9055565b9068ff00000000000000009060401b610a2a565b90610a8a610108610a6292151590565b8254610a66565b61014390610a11565b6020810192916100f29190610a91565b610ab2611454565b9081610acd610ac7610ac3836109eb565b1590565b91610a07565b90600092610ada84610a11565b67ffffffffffffffff84161480610bf9575b600193610b09610afb86610a11565b9167ffffffffffffffff1690565b149081610bd1575b155b9081610bc8575b50610b9a57610b439082610b3a86610b3187610a11565b98019788610a4b565b610b8b57610c26565b610b4c57505050565b610b7a610b86927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d294610a7a565b60405191829182610a9a565b0390a1565b610b958487610a7a565b610c26565b7ff92ee8a90000000000000000000000000000000000000000000000000000000084528380600481015b0390fd5b15905038610b1a565b9050610b13610bdf306105e1565b3b610bf0610bec8861067d565b9190565b14919050610b11565b5081610aec565b906001600160a01b0390610a2a565b90610c1f610108610a62926105e1565b8254610c00565b6100f290610c3333611471565b610c3b611482565b6001610c0f565b6100f290610aaa565b61010890610114565b6101089054610c4b565b15610c6557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6465706f73697420616c726561647920657869737473000000000000000000006044820152606490fd5b9060ff90610a2a565b90610cdd610108610a6292151590565b8254610cc4565b9035601e1936839003018112156100e057016020813591019167ffffffffffffffff82116100e0573682900383136100e057565b610108916040810191610d4390610d39610d328280610770565b84906105ea565b6020810190610ce4565b9160208185039101526107d4565b9161010892610d686080820193600083019061078e565b6060818403910152610d18565b907fbb3817ab7fef6fba44a81e5959917aa992d92c518017cff2c8f68f7bc2a4ffc790610e15610da5828561140d565b610dce610db1866106c6565b610dba306105e1565b610dc6602089016106d0565b9133906114ae565b610df6610df1610ac3610dec84600090600052602052604060002090565b610c54565b610c5e565b6101086001610e1083600090600052602052604060002090565b610ccd565b92610e2b610e2260405190565b92839283610d51565b0390a2565b6100f290610e3c61133e565b6000610e478161097d565b6001600160a01b0381166001600160a01b03841614610e6b5750506100f290611394565b7f1e4fbdf70000000000000000000000000000000000000000000000000000000082526001600160a01b03166004820152602490fd5b6100f290610e30565b610eb3306105e1565b7f000000000000000000000000000000000000000000000000000000000000000090610ef06001600160a01b0383165b916001600160a01b031690565b14908115610f2b575b50610f0057565b7fe07c8dba000000000000000000000000000000000000000000000000000000006000908152600490fd5b9050610f48610ee3610f3b6114e4565b926001600160a01b031690565b141538610ef9565b506100f261133e565b6100f290610f50565b905051906100f2826100d7565b906020828203126100e05761010891610f62565b90610f9061086f836105e1565b906020610f9c60405190565b7f52d1902d00000000000000000000000000000000000000000000000000000000815292839060049082905afa6000928161106c575b5061101d5750506001610fe25750565b7f4c9c8ce30000000000000000000000000000000000000000000000000000000060009081526001600160a01b039091166004526024036000fd5b90929161102b61010861068a565b840361103c576100f29293506114f4565b7faa1d49a40000000000000000000000000000000000000000000000000000000060009081526004859052602490fd5b61108f91935060203d602011611096575b61108781836101cf565b810190610f6f565b9138610fd2565b503d61107d565b6110a6306105e1565b6110d86001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610ee3565b03610f0057565b156110e657565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6465706f736974206973206e6f7420617661696c61626c6500000000000000006044820152606490fd5b91906008610a2a91029161115960ff841b90565b921b90565b919061116f610108610a6293151590565b908354611145565b6100f29160009161115e565b6111cd916111909161140d565b61010860006111b46111af610dec858490600052602052604060002090565b6110df565b6111c8838290600052602052604060002090565b611177565b7f7365d0eabb56c257feb8a9eac21febe335838563118e4e5c6041062d0832b2236111f760405190565b8080610e2b565b6112176112116101089263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6001600160a01b0390911681526040810192916100f29160200152565b61129c60049261128d6100f29561127363a9059cbb6111fe565b9261127d60405190565b968794602086019081520161123c565b602082018103825203836101cf565b611560565b6040906112d56112c36100f29597969460608401908482036000860152610494565b6001600160a01b039097166020830152565b01906001600160a01b03169052565b6113399061132a6100f2946112f860405190565b9485936004602086017ffcec75e0000000000000000000000000000000000000000000000000000000008152016112a1565b602082018103825203826101cf565b611610565b6113466109a0565b339061135182610ee3565b036113595750565b7f118cdaa70000000000000000000000000000000000000000000000000000000060009081526001600160a01b039091166004526024036000fd5b6113dc6113d67f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930061086f846113d083546001600160a01b031690565b92610c0f565b916105e1565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061140760405190565b600090a3565b61143e6101089261143292611420600090565b50604051938492602084019283610d51565b908103825203826101cf565b611450611449825190565b9160200190565b2090565b610108611644565b6100f29061146861164c565b6100f290611694565b6100f29061145c565b6100f261164c565b6100f261147a565b6001600160a01b039182168152911660208201526060810192916100f29160400152565b9061129c9061128d6100f2956004956114ca6323b872dd6111fe565b936114d460405190565b978895602087019081520161148a565b61010860006109c761010861068a565b906114fe8261169d565b611507826105e1565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b61153160405190565b600090a28051611544610bec600061067d565b1115611556576115539161175c565b50565b50506100f2611701565b90600060209161156e600090565b50828151910182855af115610838573d90600051600092611591610bec8561067d565b036115fc57506115a0816105e1565b3b6115ad610bec8461067d565b145b6115b7575050565b610bc46115c483926105e1565b7f5274afe70000000000000000000000000000000000000000000000000000000083526001600160a01b031660048301526024820190565b611609610bec600161067d565b14156115af565b6100f29060016118a7565b6101087ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061067d565b61010861161b565b611657610ac36117a5565b61165d57565b7fd7e6bcf8000000000000000000000000000000000000000000000000000000006000908152600490fd5b6100f290610e3c61164c565b6100f290611688565b6000813b6116ad610bec8361067d565b146116c857906100f2916116c261010861068a565b01610c0f565b7f4c9c8ce30000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602490fd5b600061170c8161067d565b34116117155750565b7fb398979f000000000000000000000000000000000000000000000000000000008152600490fd5b3d156117575761174c3d610414565b903d6000602084013e565b606090565b6000806101089361176b606090565b50602081519101845af461177d61173d565b916117b8565b600080916117996a636f6e736f6c652e6c6f6790565b602082519201905afa50565b61010860006117b2611454565b016109eb565b906117c35750611830565b8151906000916117d5610bec8461067d565b148061181b575b6117e557505090565b7f9996b3150000000000000000000000000000000000000000000000000000000082526001600160a01b03166004820152602490fd5b50803b61182a610bec8461067d565b146117dc565b8051600090611841610bec8361067d565b11156118505750805190602001fd5b7fd6bda275000000000000000000000000000000000000000000000000000000008152600490fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600103611878576100f29061178356fea264697066735822122012f2d86bc34732f6e7d59f5cd49ee8bd820509de917fae5c0dd87c6384fbc80364736f6c634300081c0033'\n\ntype DepositoryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: DepositoryConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class Depository__factory extends ContractFactory {\n    constructor(...args: DepositoryConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'Depository'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Depository> {\n        return super.deploy(overrides || {}) as Promise<Depository>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): Depository {\n        return super.attach(address) as Depository\n    }\n    connect(signer: Signer): Depository__factory {\n        return super.connect(signer) as Depository__factory\n    }\n    static readonly contractName: 'Depository'\n    public readonly contractName: 'Depository'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): DepositoryInterface {\n        return new utils.Interface(_abi) as DepositoryInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): Depository {\n        return new Contract(address, _abi, signerOrProvider) as Depository\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { DragonswapRouter, DragonswapRouterInterface } from '../DragonswapRouter'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_WSEI',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'WSEI',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountADesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountSEIMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquiditySEI',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountSEI',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'getAmountIn',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'getAmountOut',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n        ],\n        name: 'getAmountsIn',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n        ],\n        name: 'getAmountsOut',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveB',\n                type: 'uint256',\n            },\n        ],\n        name: 'quote',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountSEIMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquiditySEI',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountSEI',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountSEIMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquiditySEISupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountSEI',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountSEIMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquiditySEIWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountSEI',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountSEIMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountSEI',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactSEIForTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactSEIForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForSEI',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForSEISupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapSEIForExactTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountInMax',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapTokensForExactSEI',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountInMax',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapTokensForExactTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n]\n\nexport class DragonswapRouter__factory {\n    static readonly abi = _abi\n    static createInterface(): DragonswapRouterInterface {\n        return new utils.Interface(_abi) as DragonswapRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): DragonswapRouter {\n        return new Contract(address, _abi, signerOrProvider) as DragonswapRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { ERC20, ERC20Interface } from '../ERC20'\n\nconst _abi = [\n    {\n        constant: true,\n        inputs: [],\n        name: 'name',\n        outputs: [\n            {\n                name: '',\n                type: 'string',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: '_spender',\n                type: 'address',\n            },\n            {\n                name: '_value',\n                type: 'uint256',\n            },\n        ],\n        name: 'approve',\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: '_from',\n                type: 'address',\n            },\n            {\n                name: '_to',\n                type: 'address',\n            },\n            {\n                name: '_value',\n                type: 'uint256',\n            },\n        ],\n        name: 'transferFrom',\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'decimals',\n        outputs: [\n            {\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: '_owner',\n                type: 'address',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                name: 'balance',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'symbol',\n        outputs: [\n            {\n                name: '',\n                type: 'string',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: '_to',\n                type: 'address',\n            },\n            {\n                name: '_value',\n                type: 'uint256',\n            },\n        ],\n        name: 'transfer',\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: '_owner',\n                type: 'address',\n            },\n            {\n                name: '_spender',\n                type: 'address',\n            },\n        ],\n        name: 'allowance',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        payable: true,\n        stateMutability: 'payable',\n        type: 'fallback',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n]\n\nexport class ERC20__factory {\n    static readonly abi = _abi\n    static createInterface(): ERC20Interface {\n        return new utils.Interface(_abi) as ERC20Interface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {\n        return new Contract(address, _abi, signerOrProvider) as ERC20\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { Fabric, FabricInterface } from '../Fabric'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'rToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'chainID',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'sToken',\n                type: 'address',\n            },\n        ],\n        name: 'RepresentationCreated',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_rtoken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'string',\n                name: '_stokenName',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: '_stokenSymbol',\n                type: 'string',\n            },\n            {\n                internalType: 'uint8',\n                name: '_decimals',\n                type: 'uint8',\n            },\n        ],\n        name: 'createRepresentationByAdmin',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_syntTokenAdr',\n                type: 'address',\n            },\n        ],\n        name: 'getRealRepresentation',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_realTokenAdr',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n        ],\n        name: 'getSyntRepresentation',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '_key',\n                type: 'bytes32',\n            },\n        ],\n        name: 'getSyntRepresentationByKey',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_synthesis',\n                type: 'address',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'synthesis',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_stoken',\n                type: 'address',\n            },\n        ],\n        name: 'synthesize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_stoken',\n                type: 'address',\n            },\n        ],\n        name: 'unsynthesize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234801561001057600080fd5b5061297a806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000d95760003560e01c80638da5cb5b116200008b578063e49029fc1162000062578063e49029fc1462000272578063e7ca9aaf14620002ab578063f2fde38b14620003fb57600080fd5b80638da5cb5b14620001fe578063a8160b761462000210578063c4d66de8146200024957600080fd5b8063506890a011620000c0578063506890a01462000146578063715018a614620001bd5780637cf8f32714620001c957600080fd5b8063161acb4714620000de5780632af896fb1462000132575b600080fd5b6200011660048036036020811015620000f657600080fd5b50356001600160a01b039081166000908152606760205260409020541690565b604080516001600160a01b039092168252519081900360200190f35b60655462000116906001600160a01b031681565b62000116600480360360408110156200015e57600080fd5b5060408051823560601b6bffffffffffffffffffffffff1916602082810191909152928301356034808301919091528251808303909101815260549091018252805190830120600090815260669092529020546001600160a01b031690565b620001c762000424565b005b6200011660048036036020811015620001e157600080fd5b50356000908152606660205260409020546001600160a01b031690565b6033546001600160a01b031662000116565b620001c7600480360360608110156200022857600080fd5b506001600160a01b0381358116916020810135916040909101351662000492565b620001c7600480360360208110156200026157600080fd5b50356001600160a01b031662000553565b620001c7600480360360608110156200028a57600080fd5b506001600160a01b0381358116916020810135916040909101351662000699565b620001c7600480360360a0811015620002c357600080fd5b6001600160a01b0382351691602081013591810190606081016040820135640100000000811115620002f457600080fd5b8201836020820111156200030757600080fd5b803590602001918460018302840111640100000000831117156200032a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156200037e57600080fd5b8201836020820111156200039157600080fd5b80359060200191846001830284011164010000000083111715620003b457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff1691506200073c9050565b620001c7600480360360208110156200041357600080fd5b50356001600160a01b0316620007ae565b6033546001600160a01b03163314620004845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b62000490600062000896565b565b6065546001600160a01b03163314620004dd5760405162461bcd60e51b8152600401808060200182810382526021815260200180620028fb6021913960400191505060405180910390fd5b806001600160a01b0316639dc29fac84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156200053557600080fd5b505af11580156200054a573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16620005705760005460ff161562000574565b303b155b620005e85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016200047b565b600054610100900460ff161580156200062857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6200063262000900565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841617905580156200069557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6065546001600160a01b03163314620006e45760405162461bcd60e51b8152600401808060200182810382526021815260200180620028fb6021913960400191505060405180910390fd5b806001600160a01b03166340c10f1984846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156200053557600080fd5b6033546001600160a01b03163314620007985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200047b565b620007a7858585858562000993565b5050505050565b6033546001600160a01b031633146200080a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200047b565b6001600160a01b038116620008885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200047b565b620008938162000896565b50565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166200097f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200047b565b6200098962000cb6565b6200049062000d35565b6001600160a01b038516620009ef576040805162461bcd60e51b815260206004820181905260248201527f53796d623a2072746f6b656e20697320746865207a65726f2061646472657373604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff19606088901b16602080830191909152603480830188905283518084039091018152605490920183528151918101919091206000908152606690915220546001600160a01b0316801562000a865760405162461bcd60e51b81526004018080602001828103825260298152602001806200291c6029913960400191505060405180910390fd5b600084848460405162000a999062000dbf565b60ff82166040820152606080825284519082015283518190602080830191608084019188019080838360005b8381101562000adf57818101518382015260200162000ac5565b50505050905090810190601f16801562000b0d5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101562000b4257818101518382015260200162000b28565b50505050905090810190601f16801562000b705780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f08015801562000b95573d6000803e3d6000fd5b5090508660676000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060666000898960405160200180836001600160a01b031660601b81526014018281526020019250505060405160208183030381529060405280519060200120815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fe33e6b41ee9908e3919a380a52ae7059282c36b87adeee0d2ac1b05dfc50be6f87878360405180846001600160a01b03168152602001838152602001826001600160a01b03168152602001935050505060405180910390a150505050505050565b600054610100900460ff16620004905760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200047b565b600054610100900460ff1662000db45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200047b565b620004903362000896565b611b2d8062000dce8339019056fe6101806040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610140523480156200003757600080fd5b5060405162001b2d38038062001b2d8339810160408190526200005a9162000359565b6040518060400160405280600981526020016853796d62696f73697360b81b81525080604051806040016040528060018152602001603160f81b8152508585620000b3620000ad620001a860201b60201c565b620001ac565b8151620000c8906004906020850190620001fc565b508051620000de906005906020840190620001fc565b5050825160208085019190912083518483012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c0019052805194019390932091935091906080523060601b60c05261012052505050505060f81b7fff00000000000000000000000000000000000000000000000000000000000000166101605250620004319050565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200020a90620003de565b90600052602060002090601f0160209004810192826200022e576000855562000279565b82601f106200024957805160ff191683800117855562000279565b8280016001018555821562000279579182015b82811115620002795782518255916020019190600101906200025c565b50620002879291506200028b565b5090565b5b808211156200028757600081556001016200028c565b600082601f830112620002b457600080fd5b81516001600160401b0380821115620002d157620002d16200041b565b604051601f8301601f19908116603f01168101908282118183101715620002fc57620002fc6200041b565b816040528381526020925086838588010111156200031957600080fd5b600091505b838210156200033d57858201830151818301840152908201906200031e565b838211156200034f5760008385830101525b9695505050505050565b6000806000606084860312156200036f57600080fd5b83516001600160401b03808211156200038757600080fd5b6200039587838801620002a2565b94506020860151915080821115620003ac57600080fd5b50620003bb86828701620002a2565b925050604084015160ff81168114620003d357600080fd5b809150509250925092565b600181811c90821680620003f357607f821691505b602082108114156200041557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160601c60e0516101005161012051610140516101605160f81c6116906200049d60003960006101c30152600061074601526000610d3301526000610d8201526000610d5d01526000610cb601526000610ce001526000610d0a01526116906000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063a457c2d711610081578063d505accf11610066578063d505accf146102bd578063dd62ed3e146102d0578063f2fde38b1461030957600080fd5b8063a457c2d714610297578063a9059cbb146102aa57600080fd5b80638da5cb5b116100b25780638da5cb5b1461026157806395d89b411461027c5780639dc29fac1461028457600080fd5b8063715018a6146102465780637ecebe001461024e57600080fd5b8063313ce56711610124578063395093511161010957806339509351146101f557806340c10f191461020857806370a082311461021d57600080fd5b8063313ce567146101bc5780633644e515146101ed57600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd1461019757806323b872dd146101a9575b600080fd5b61015e61031c565b60405161016b9190611575565b60405180910390f35b61018761018236600461154b565b6103ae565b604051901515815260200161016b565b6003545b60405190815260200161016b565b6101876101b736600461149c565b6103c4565b60405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161016b565b61019b610488565b61018761020336600461154b565b610497565b61021b61021636600461154b565b6104d3565b005b61019b61022b366004611447565b6001600160a01b031660009081526001602052604090205490565b61021b61053b565b61019b61025c366004611447565b6105a1565b6000546040516001600160a01b03909116815260200161016b565b61015e6105c1565b61021b61029236600461154b565b6105d0565b6101876102a536600461154b565b610634565b6101876102b836600461154b565b6106e5565b61021b6102cb3660046114d8565b6106f2565b61019b6102de366004611469565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b61021b610317366004611447565b610856565b60606004805461032b906115f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610357906115f9565b80156103a45780601f10610379576101008083540402835291602001916103a4565b820191906000526020600020905b81548152906001019060200180831161038757829003601f168201915b5050505050905090565b60006103bb338484610938565b50600192915050565b60006103d1848484610a91565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156104705760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61047d8533858403610938565b506001949350505050565b6000610492610ca9565b905090565b3360008181526002602090815260408083206001600160a01b038716845290915281205490916103bb9185906104ce9086906115ca565b610938565b6000546001600160a01b0316331461052d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b6105378282610dd0565b5050565b6000546001600160a01b031633146105955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b61059f6000610eaf565b565b6001600160a01b0381166000908152600660205260408120545b92915050565b60606005805461032b906115f9565b6000546001600160a01b0316331461062a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b6105378282610f17565b3360009081526002602090815260408083206001600160a01b0386168452909152812054828110156106ce5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610467565b6106db3385858403610938565b5060019392505050565b60006103bb338484610a91565b834211156107425760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610467565b60007f00000000000000000000000000000000000000000000000000000000000000008888886107718c611094565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006107cc826110bc565b905060006107dc82878787611125565b9050896001600160a01b0316816001600160a01b03161461083f5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610467565b61084a8a8a8a610938565b50505050505050505050565b6000546001600160a01b031633146108b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b6001600160a01b03811661092c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610467565b61093581610eaf565b50565b6001600160a01b0383166109b35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b038216610a2f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610b0d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b038216610b895760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b03831660009081526001602052604090205481811015610c185760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290610c4f9084906115ca565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9b91815260200190565b60405180910390a350505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610d0257507f000000000000000000000000000000000000000000000000000000000000000046145b15610d2c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b038216610e265760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610467565b8060036000828254610e3891906115ca565b90915550506001600160a01b03821660009081526001602052604081208054839290610e659084906115ca565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216610f935760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b038216600090815260016020526040902054818110156110225760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b03831660009081526001602052604081208383039055600380548492906110519084906115e2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610a84565b6001600160a01b03811660009081526006602052604090208054600181018255905b50919050565b60006105bb6110c9610ca9565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006111368787878761114d565b915091506111438161123a565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111845750600090506003611231565b8460ff16601b1415801561119c57508460ff16601c14155b156111ad5750600090506004611231565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611201573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661122a57600060019250925050611231565b9150600090505b94509492505050565b600081600481111561124e5761124e611644565b14156112575750565b600181600481111561126b5761126b611644565b14156112b95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610467565b60028160048111156112cd576112cd611644565b141561131b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610467565b600381600481111561132f5761132f611644565b14156113a35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610467565b60048160048111156113b7576113b7611644565b14156109355760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610467565b80356001600160a01b038116811461144257600080fd5b919050565b60006020828403121561145957600080fd5b6114628261142b565b9392505050565b6000806040838503121561147c57600080fd5b6114858361142b565b91506114936020840161142b565b90509250929050565b6000806000606084860312156114b157600080fd5b6114ba8461142b565b92506114c86020850161142b565b9150604084013590509250925092565b600080600080600080600060e0888a0312156114f357600080fd5b6114fc8861142b565b965061150a6020890161142b565b95506040880135945060608801359350608088013560ff8116811461152e57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561155e57600080fd5b6115678361142b565b946020939093013593505050565b600060208083528351808285015260005b818110156115a257858101830151858201604001528201611586565b818111156115b4576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156115dd576115dd61162e565b500190565b6000828210156115f4576115f461162e565b500390565b600181811c9082168061160d57607f821691505b602082108114156110b657634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212208bf71d9ddf309d88a97b8c028826275a9599d3cdb2db5b0547bfe39a71698ac864736f6c6343000807003353796d623a2063616c6c6572206973206e6f74207468652073796e74686573697353796d623a20746f6b656e20726570726573656e746174696f6e20616c726561647920657869737473a2646970667358221220a60cf18f476b01d9b1b1871bf88e40a4dd9d1fdce6e06b6bc111cfbb8e5d045264736f6c63430008070033'\n\ntype FabricConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: FabricConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1\n\nexport class Fabric__factory extends ContractFactory {\n    constructor(...args: FabricConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'Fabric'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Fabric> {\n        return super.deploy(overrides || {}) as Promise<Fabric>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): Fabric {\n        return super.attach(address) as Fabric\n    }\n    connect(signer: Signer): Fabric__factory {\n        return super.connect(signer) as Fabric__factory\n    }\n    static readonly contractName: 'Fabric'\n    public readonly contractName: 'Fabric'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): FabricInterface {\n        return new utils.Interface(_abi) as FabricInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): Fabric {\n        return new Contract(address, _abi, signerOrProvider) as Fabric\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { FeeCollector, FeeCollectorInterface } from '../FeeCollector'\n\nconst _abi = [\n    {\n        inputs: [],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'balance',\n                type: 'uint256',\n            },\n        ],\n        name: 'ClaimedTokens',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'fee',\n                type: 'uint256',\n            },\n        ],\n        name: 'OnchainSwap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_newFee',\n                type: 'uint256',\n            },\n        ],\n        name: 'changeFee',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n        ],\n        name: 'claimTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'fee',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'onchainGateway',\n        outputs: [\n            {\n                internalType: 'contract OnchainGateway',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'dex',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'dexgateway',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: 'calldata_',\n                type: 'bytes',\n            },\n        ],\n        name: 'onswap',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class FeeCollector__factory {\n    static readonly abi = _abi\n    static createInterface(): FeeCollectorInterface {\n        return new utils.Interface(_abi) as FeeCollectorInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): FeeCollector {\n        return new Contract(address, _abi, signerOrProvider) as FeeCollector\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { HyperSwapRouter, HyperSwapRouterInterface } from '../HyperSwapRouter'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_WETH',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'WETH',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountADesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidityETH',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n        ],\n        name: 'getAmountsOut',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token1',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'token2',\n                type: 'address',\n            },\n        ],\n        name: 'getPair',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveB',\n                type: 'uint256',\n            },\n        ],\n        name: 'quote',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETH',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETHSupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityETHWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'referrer',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactETHForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'referrer',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForETHSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'referrer',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n]\n\nexport class HyperSwapRouter__factory {\n    static readonly abi = _abi\n    static createInterface(): HyperSwapRouterInterface {\n        return new utils.Interface(_abi) as HyperSwapRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): HyperSwapRouter {\n        return new Contract(address, _abi, signerOrProvider) as HyperSwapRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { IzumiFactory, IzumiFactoryInterface } from '../IzumiFactory'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_chargeReceiver',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_swapX2YModule',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_swapY2XModule',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_liquidityModule',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_limitOrderModule',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_flashModule',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'tokenX',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'tokenY',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                indexed: false,\n                internalType: 'uint24',\n                name: 'pointDelta',\n                type: 'uint24',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'NewPool',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'chargeReceiver',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                internalType: 'uint24',\n                name: 'pointDelta',\n                type: 'uint24',\n            },\n        ],\n        name: 'enableFeeAmount',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint24',\n                name: '',\n                type: 'uint24',\n            },\n        ],\n        name: 'fee2pointDelta',\n        outputs: [\n            {\n                internalType: 'int24',\n                name: '',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'flashModule',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'limitOrderModule',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'liquidityModule',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_chargeReceiver',\n                type: 'address',\n            },\n        ],\n        name: 'modifyChargeReceiver',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenX',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenY',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                internalType: 'int24',\n                name: 'currentPoint',\n                type: 'int24',\n            },\n        ],\n        name: 'newPool',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'addr',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'only_addr_',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: '',\n                type: 'uint24',\n            },\n        ],\n        name: 'pool',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'swapX2YModule',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'swapY2XModule',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class IzumiFactory__factory {\n    static readonly abi = _abi\n    static createInterface(): IzumiFactoryInterface {\n        return new utils.Interface(_abi) as IzumiFactoryInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): IzumiFactory {\n        return new Contract(address, _abi, signerOrProvider) as IzumiFactory\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { IzumiPool, IzumiPoolInterface } from '../IzumiPool'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_tokenX',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_tokenY',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: '_fee',\n                type: 'uint24',\n            },\n            {\n                internalType: 'int24',\n                name: 'currentPoint',\n                type: 'int24',\n            },\n            {\n                internalType: 'int24',\n                name: '_pointDelta',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'int24',\n                name: 'point',\n                type: 'int24',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'sellXEarnY',\n                type: 'bool',\n            },\n        ],\n        name: 'AddLimitOrder',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'int24',\n                name: 'leftPoint',\n                type: 'int24',\n            },\n            {\n                indexed: true,\n                internalType: 'int24',\n                name: 'rightPoint',\n                type: 'int24',\n            },\n            {\n                indexed: false,\n                internalType: 'uint128',\n                name: 'liquidity',\n                type: 'uint128',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n        ],\n        name: 'Burn',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'int24',\n                name: 'point',\n                type: 'int24',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'sellXEarnY',\n                type: 'bool',\n            },\n        ],\n        name: 'DecLimitOrder',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'paidX',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'paidY',\n                type: 'uint256',\n            },\n        ],\n        name: 'Flash',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'int24',\n                name: 'leftPoint',\n                type: 'int24',\n            },\n            {\n                indexed: true,\n                internalType: 'int24',\n                name: 'rightPoint',\n                type: 'int24',\n            },\n            {\n                indexed: false,\n                internalType: 'uint128',\n                name: 'liquidity',\n                type: 'uint128',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n        ],\n        name: 'Mint',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'tokenX',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'tokenY',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'sellXEarnY',\n                type: 'bool',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n        ],\n        name: 'Swap',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'int24',\n                name: 'point',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'amountX',\n                type: 'uint128',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'addLimOrderWithX',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'orderX',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'acquireY',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'int24',\n                name: 'point',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'amountY',\n                type: 'uint128',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'addLimOrderWithY',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'orderY',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'acquireX',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: 'point',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'assignX',\n                type: 'uint128',\n            },\n        ],\n        name: 'assignLimOrderEarnX',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'actualAssignX',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: 'point',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'assignY',\n                type: 'uint128',\n            },\n        ],\n        name: 'assignLimOrderEarnY',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'actualAssignY',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: 'leftPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'int24',\n                name: 'rightPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'liquidDelta',\n                type: 'uint128',\n            },\n        ],\n        name: 'burn',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'int24',\n                name: 'leftPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'int24',\n                name: 'rightPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountXLim',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountYLim',\n                type: 'uint256',\n            },\n        ],\n        name: 'collect',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'actualAmountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'actualAmountY',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'collectFeeCharged',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'int24',\n                name: 'point',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'collectDec',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'collectEarn',\n                type: 'uint128',\n            },\n            {\n                internalType: 'bool',\n                name: 'isEarnY',\n                type: 'bool',\n            },\n        ],\n        name: 'collectLimOrder',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'actualCollectDec',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'actualCollectEarn',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: 'point',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'deltaX',\n                type: 'uint128',\n            },\n        ],\n        name: 'decLimOrderWithX',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'actualDeltaX',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: 'point',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'deltaY',\n                type: 'uint128',\n            },\n        ],\n        name: 'decLimOrderWithY',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'actualDeltaY',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint16',\n                name: 'newNextQueueLen',\n                type: 'uint16',\n            },\n        ],\n        name: 'expandObservationQueue',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'fee',\n        outputs: [\n            {\n                internalType: 'uint24',\n                name: '',\n                type: 'uint24',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'feeChargePercent',\n        outputs: [\n            {\n                internalType: 'uint24',\n                name: '',\n                type: 'uint24',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'feeScaleX_128',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'feeScaleY_128',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'flash',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'leftMostPt',\n        outputs: [\n            {\n                internalType: 'int24',\n                name: '',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: '',\n                type: 'int24',\n            },\n        ],\n        name: 'limitOrderData',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'sellingX',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'earnY',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint256',\n                name: 'accEarnY',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint128',\n                name: 'sellingY',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'earnX',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint256',\n                name: 'accEarnX',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: 'leftPoint',\n                type: 'int24',\n            },\n            {\n                internalType: 'int24',\n                name: 'rightPoint',\n                type: 'int24',\n            },\n        ],\n        name: 'limitOrderSnapshot',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint128',\n                        name: 'sellingX',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'earnY',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'accEarnY',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'sellingY',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'earnX',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'accEarnX',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IiZiSwapPool.LimitOrderStruct[]',\n                name: 'limitOrders',\n                type: 'tuple[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'liquidity',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'liquidity',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastFeeScaleX_128',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastFeeScaleY_128',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'tokenOwedX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'tokenOwedY',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: 'leftPoint',\n                type: 'int24',\n            },\n            {\n                internalType: 'int24',\n                name: 'rightPoint',\n                type: 'int24',\n            },\n        ],\n        name: 'liquiditySnapshot',\n        outputs: [\n            {\n                internalType: 'int128[]',\n                name: 'deltaLiquidities',\n                type: 'int128[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'maxLiquidPt',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: '',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'int24',\n                name: 'leftPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'int24',\n                name: 'rightPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'liquidDelta',\n                type: 'uint128',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'mint',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        name: 'observations',\n        outputs: [\n            {\n                internalType: 'uint32',\n                name: 'timestamp',\n                type: 'uint32',\n            },\n            {\n                internalType: 'int56',\n                name: 'accPoint',\n                type: 'int56',\n            },\n            {\n                internalType: 'bool',\n                name: 'init',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint32[]',\n                name: 'secondsAgos',\n                type: 'uint32[]',\n            },\n        ],\n        name: 'observe',\n        outputs: [\n            {\n                internalType: 'int56[]',\n                name: 'accPoints',\n                type: 'int56[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: '',\n                type: 'int24',\n            },\n        ],\n        name: 'orderOrEndpoint',\n        outputs: [\n            {\n                internalType: 'int24',\n                name: '',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int16',\n                name: '',\n                type: 'int16',\n            },\n        ],\n        name: 'pointBitmap',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pointDelta',\n        outputs: [\n            {\n                internalType: 'int24',\n                name: '',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int24',\n                name: '',\n                type: 'int24',\n            },\n        ],\n        name: 'points',\n        outputs: [\n            {\n                internalType: 'uint128',\n                name: 'liquidSum',\n                type: 'uint128',\n            },\n            {\n                internalType: 'int128',\n                name: 'liquidDelta',\n                type: 'int128',\n            },\n            {\n                internalType: 'uint256',\n                name: 'accFeeXOut_128',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'accFeeYOut_128',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'isEndpt',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'rightMostPt',\n        outputs: [\n            {\n                internalType: 'int24',\n                name: '',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'sqrtRate_96',\n        outputs: [\n            {\n                internalType: 'uint160',\n                name: '',\n                type: 'uint160',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'state',\n        outputs: [\n            {\n                internalType: 'uint160',\n                name: 'sqrtPrice_96',\n                type: 'uint160',\n            },\n            {\n                internalType: 'int24',\n                name: 'currentPoint',\n                type: 'int24',\n            },\n            {\n                internalType: 'uint16',\n                name: 'observationCurrentIndex',\n                type: 'uint16',\n            },\n            {\n                internalType: 'uint16',\n                name: 'observationQueueLen',\n                type: 'uint16',\n            },\n            {\n                internalType: 'uint16',\n                name: 'observationNextQueueLen',\n                type: 'uint16',\n            },\n            {\n                internalType: 'bool',\n                name: 'locked',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint128',\n                name: 'liquidity',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'liquidityX',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint128',\n                name: 'amount',\n                type: 'uint128',\n            },\n            {\n                internalType: 'int24',\n                name: 'lowPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapX2Y',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint128',\n                name: 'desireY',\n                type: 'uint128',\n            },\n            {\n                internalType: 'int24',\n                name: 'lowPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapX2YDesireY',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint128',\n                name: 'amount',\n                type: 'uint128',\n            },\n            {\n                internalType: 'int24',\n                name: 'highPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapY2X',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint128',\n                name: 'desireX',\n                type: 'uint128',\n            },\n            {\n                internalType: 'int24',\n                name: 'highPt',\n                type: 'int24',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapY2XDesireX',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'tokenX',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'tokenY',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalFeeXCharged',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalFeeYCharged',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'userEarnX',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'lastAccEarn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint128',\n                name: 'sellingRemain',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'sellingDec',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'earn',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'earnAssign',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'userEarnY',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'lastAccEarn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint128',\n                name: 'sellingRemain',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'sellingDec',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'earn',\n                type: 'uint128',\n            },\n            {\n                internalType: 'uint128',\n                name: 'earnAssign',\n                type: 'uint128',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n]\n\nexport class IzumiPool__factory {\n    static readonly abi = _abi\n    static createInterface(): IzumiPoolInterface {\n        return new utils.Interface(_abi) as IzumiPoolInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): IzumiPool {\n        return new Contract(address, _abi, signerOrProvider) as IzumiPool\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { IzumiQuoter, IzumiQuoterInterface } from '../IzumiQuoter'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_weth',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'WETH9',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'multicall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'results',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenX',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenY',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n        ],\n        name: 'pool',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'refundETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint128',\n                name: 'amount',\n                type: 'uint128',\n            },\n            {\n                internalType: 'bytes',\n                name: 'path',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapAmount',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'acquire',\n                type: 'uint256',\n            },\n            {\n                internalType: 'int24[]',\n                name: 'pointAfterList',\n                type: 'int24[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint128',\n                name: 'desire',\n                type: 'uint128',\n            },\n            {\n                internalType: 'bytes',\n                name: 'path',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapDesire',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'cost',\n                type: 'uint256',\n            },\n            {\n                internalType: 'int24[]',\n                name: 'pointAfterList',\n                type: 'int24[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenX',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenY',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'amount',\n                type: 'uint128',\n            },\n            {\n                internalType: 'int24',\n                name: 'lowPt',\n                type: 'int24',\n            },\n        ],\n        name: 'swapX2Y',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n            {\n                internalType: 'int24',\n                name: 'finalPoint',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'x',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'y',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'path',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapX2YCallback',\n        outputs: [],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenX',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenY',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'desireY',\n                type: 'uint128',\n            },\n            {\n                internalType: 'int24',\n                name: 'lowPt',\n                type: 'int24',\n            },\n        ],\n        name: 'swapX2YDesireY',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'int24',\n                name: 'finalPoint',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenX',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenY',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'amount',\n                type: 'uint128',\n            },\n            {\n                internalType: 'int24',\n                name: 'highPt',\n                type: 'int24',\n            },\n        ],\n        name: 'swapY2X',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountX',\n                type: 'uint256',\n            },\n            {\n                internalType: 'int24',\n                name: 'finalPoint',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'x',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'y',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'path',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapY2XCallback',\n        outputs: [],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenX',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenY',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                internalType: 'uint128',\n                name: 'desireX',\n                type: 'uint128',\n            },\n            {\n                internalType: 'int24',\n                name: 'highPt',\n                type: 'int24',\n            },\n        ],\n        name: 'swapY2XDesireX',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountY',\n                type: 'uint256',\n            },\n            {\n                internalType: 'int24',\n                name: 'finalPoint',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n        ],\n        name: 'sweepToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'minAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n        ],\n        name: 'unwrapWETH9',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n]\n\nexport class IzumiQuoter__factory {\n    static readonly abi = _abi\n    static createInterface(): IzumiQuoterInterface {\n        return new utils.Interface(_abi) as IzumiQuoterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): IzumiQuoter {\n        return new Contract(address, _abi, signerOrProvider) as IzumiQuoter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { IzumiSwap, IzumiSwapInterface } from '../IzumiSwap'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_weth',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'WETH9',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'multicall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'results',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenX',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenY',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n        ],\n        name: 'pool',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'refundETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'path',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'amount',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minAcquired',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct Swap.SwapAmountParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'swapAmount',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'cost',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'acquire',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'path',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'desire',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxPayed',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct Swap.SwapDesireParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'swapDesire',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'cost',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'acquire',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenX',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenY',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'int24',\n                        name: 'boundaryPt',\n                        type: 'int24',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'amount',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxPayed',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minAcquired',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct Swap.SwapParams',\n                name: 'swapParams',\n                type: 'tuple',\n            },\n        ],\n        name: 'swapX2Y',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'x',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'y',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapX2YCallback',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenX',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenY',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'int24',\n                        name: 'boundaryPt',\n                        type: 'int24',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'amount',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxPayed',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minAcquired',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct Swap.SwapParams',\n                name: 'swapParams',\n                type: 'tuple',\n            },\n        ],\n        name: 'swapX2YDesireY',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenX',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenY',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'int24',\n                        name: 'boundaryPt',\n                        type: 'int24',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'amount',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxPayed',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minAcquired',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct Swap.SwapParams',\n                name: 'swapParams',\n                type: 'tuple',\n            },\n        ],\n        name: 'swapY2X',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'x',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'y',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'swapY2XCallback',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenX',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenY',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'int24',\n                        name: 'boundaryPt',\n                        type: 'int24',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint128',\n                        name: 'amount',\n                        type: 'uint128',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxPayed',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minAcquired',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct Swap.SwapParams',\n                name: 'swapParams',\n                type: 'tuple',\n            },\n        ],\n        name: 'swapY2XDesireX',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n        ],\n        name: 'sweepToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'minAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n        ],\n        name: 'unwrapWETH9',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n]\n\nexport class IzumiSwap__factory {\n    static readonly abi = _abi\n    static createInterface(): IzumiSwapInterface {\n        return new utils.Interface(_abi) as IzumiSwapInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): IzumiSwap {\n        return new Contract(address, _abi, signerOrProvider) as IzumiSwap\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { KavaRouter, KavaRouterInterface } from '../KavaRouter'\n\nconst _abi = [\n    {\n        type: 'constructor',\n        stateMutability: 'nonpayable',\n        inputs: [\n            {\n                type: 'address',\n                name: '_factory',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: '_weth',\n                internalType: 'address',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: '',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'UNSAFE_swapExactTokensForTokens',\n        inputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n            {\n                type: 'tuple[]',\n                name: 'routes',\n                internalType: 'struct Router.route[]',\n                components: [\n                    {\n                        type: 'address',\n                        name: 'from',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'address',\n                        name: 'to',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'bool',\n                        name: 'stable',\n                        internalType: 'bool',\n                    },\n                ],\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountB',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'addLiquidity',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADesired',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountBDesired',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountBMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'payable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountToken',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETH',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'addLiquidityETH',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenDesired',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETHMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'address',\n                name: '',\n                internalType: 'address',\n            },\n        ],\n        name: 'factory',\n        inputs: [],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amount',\n                internalType: 'uint256',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n        ],\n        name: 'getAmountOut',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'tokenIn',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenOut',\n                internalType: 'address',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'getAmountsOut',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'tuple[]',\n                name: 'routes',\n                internalType: 'struct Router.route[]',\n                components: [\n                    {\n                        type: 'address',\n                        name: 'from',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'address',\n                        name: 'to',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'bool',\n                        name: 'stable',\n                        internalType: 'bool',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'reserveA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'reserveB',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'getReserves',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'bool',\n                name: '',\n                internalType: 'bool',\n            },\n        ],\n        name: 'isPair',\n        inputs: [\n            {\n                type: 'address',\n                name: 'pair',\n                internalType: 'address',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'address',\n                name: 'pair',\n                internalType: 'address',\n            },\n        ],\n        name: 'pairFor',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountB',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'quoteAddLiquidity',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'amountADesired',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountBDesired',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountB',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'quoteRemoveLiquidity',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountB',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidity',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountBMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountToken',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETH',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETH',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETHMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountToken',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETH',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETHSupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETHMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountToken',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETH',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETHWithPermit',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETHMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n            {\n                type: 'bool',\n                name: 'approveMax',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint8',\n                name: 'v',\n                internalType: 'uint8',\n            },\n            {\n                type: 'bytes32',\n                name: 'r',\n                internalType: 'bytes32',\n            },\n            {\n                type: 'bytes32',\n                name: 's',\n                internalType: 'bytes32',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountToken',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETH',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'address',\n                name: 'token',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountTokenMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountETHMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n            {\n                type: 'bool',\n                name: 'approveMax',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint8',\n                name: 'v',\n                internalType: 'uint8',\n            },\n            {\n                type: 'bytes32',\n                name: 'r',\n                internalType: 'bytes32',\n            },\n            {\n                type: 'bytes32',\n                name: 's',\n                internalType: 'bytes32',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256',\n                name: 'amountA',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountB',\n                internalType: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityWithPermit',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint256',\n                name: 'liquidity',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountAMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountBMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n            {\n                type: 'bool',\n                name: 'approveMax',\n                internalType: 'bool',\n            },\n            {\n                type: 'uint8',\n                name: 'v',\n                internalType: 'uint8',\n            },\n            {\n                type: 'bytes32',\n                name: 'r',\n                internalType: 'bytes32',\n            },\n            {\n                type: 'bytes32',\n                name: 's',\n                internalType: 'bytes32',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'pure',\n        outputs: [\n            {\n                type: 'address',\n                name: 'token0',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'token1',\n                internalType: 'address',\n            },\n        ],\n        name: 'sortTokens',\n        inputs: [\n            {\n                type: 'address',\n                name: 'tokenA',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenB',\n                internalType: 'address',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'payable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapExactETHForTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'tuple[]',\n                name: 'routes',\n                internalType: 'struct Router.route[]',\n                components: [\n                    {\n                        type: 'address',\n                        name: 'from',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'address',\n                        name: 'to',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'bool',\n                        name: 'stable',\n                        internalType: 'bool',\n                    },\n                ],\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'payable',\n        outputs: [],\n        name: 'swapExactETHForTokensSupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'tuple[]',\n                name: 'routes',\n                internalType: 'struct Router.route[]',\n                components: [\n                    {\n                        type: 'address',\n                        name: 'from',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'address',\n                        name: 'to',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'bool',\n                        name: 'stable',\n                        internalType: 'bool',\n                    },\n                ],\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapExactTokensForETH',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'tuple[]',\n                name: 'routes',\n                internalType: 'struct Router.route[]',\n                components: [\n                    {\n                        type: 'address',\n                        name: 'from',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'address',\n                        name: 'to',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'bool',\n                        name: 'stable',\n                        internalType: 'bool',\n                    },\n                ],\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [],\n        name: 'swapExactTokensForETHSupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'tuple[]',\n                name: 'routes',\n                internalType: 'struct Router.route[]',\n                components: [\n                    {\n                        type: 'address',\n                        name: 'from',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'address',\n                        name: 'to',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'bool',\n                        name: 'stable',\n                        internalType: 'bool',\n                    },\n                ],\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapExactTokensForTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'tuple[]',\n                name: 'routes',\n                internalType: 'struct Router.route[]',\n                components: [\n                    {\n                        type: 'address',\n                        name: 'from',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'address',\n                        name: 'to',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'bool',\n                        name: 'stable',\n                        internalType: 'bool',\n                    },\n                ],\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [\n            {\n                type: 'uint256[]',\n                name: 'amounts',\n                internalType: 'uint256[]',\n            },\n        ],\n        name: 'swapExactTokensForTokensSimple',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'address',\n                name: 'tokenFrom',\n                internalType: 'address',\n            },\n            {\n                type: 'address',\n                name: 'tokenTo',\n                internalType: 'address',\n            },\n            {\n                type: 'bool',\n                name: 'stable',\n                internalType: 'bool',\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'nonpayable',\n        outputs: [],\n        name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',\n        inputs: [\n            {\n                type: 'uint256',\n                name: 'amountIn',\n                internalType: 'uint256',\n            },\n            {\n                type: 'uint256',\n                name: 'amountOutMin',\n                internalType: 'uint256',\n            },\n            {\n                type: 'tuple[]',\n                name: 'routes',\n                internalType: 'struct Router.route[]',\n                components: [\n                    {\n                        type: 'address',\n                        name: 'from',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'address',\n                        name: 'to',\n                        internalType: 'address',\n                    },\n                    {\n                        type: 'bool',\n                        name: 'stable',\n                        internalType: 'bool',\n                    },\n                ],\n            },\n            {\n                type: 'address',\n                name: 'to',\n                internalType: 'address',\n            },\n            {\n                type: 'uint256',\n                name: 'deadline',\n                internalType: 'uint256',\n            },\n        ],\n    },\n    {\n        type: 'function',\n        stateMutability: 'view',\n        outputs: [\n            {\n                type: 'address',\n                name: '',\n                internalType: 'contract IWETH',\n            },\n        ],\n        name: 'weth',\n        inputs: [],\n    },\n    {\n        type: 'receive',\n        stateMutability: 'payable',\n    },\n]\n\nexport class KavaRouter__factory {\n    static readonly abi = _abi\n    static createInterface(): KavaRouterInterface {\n        return new utils.Interface(_abi) as KavaRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): KavaRouter {\n        return new Contract(address, _abi, signerOrProvider) as KavaRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { KimRouter, KimRouterInterface } from '../KimRouter'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_WETH',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'WETH',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountADesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidityETH',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'feeSharingContract',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n        name: 'assign',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n        ],\n        name: 'getAmountsOut',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token1',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'token2',\n                type: 'address',\n            },\n        ],\n        name: 'getPair',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveB',\n                type: 'uint256',\n            },\n        ],\n        name: 'quote',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'feeSharingContract',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n        ],\n        name: 'register',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'tokenId',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETH',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETHSupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityETHWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'referrer',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactETHForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'referrer',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForETHSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'referrer',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n]\n\nexport class KimRouter__factory {\n    static readonly abi = _abi\n    static createInterface(): KimRouterInterface {\n        return new utils.Interface(_abi) as KimRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): KimRouter {\n        return new Contract(address, _abi, signerOrProvider) as KimRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { MetaRouter, MetaRouterInterface } from '../MetaRouter'\n\nconst _abi = [\n    {\n        inputs: [],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'TransitTokenSent',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_calldata',\n                type: 'bytes',\n            },\n            {\n                internalType: 'uint256',\n                name: '_offset',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n        ],\n        name: 'externalCall',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'crossChainID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'externalID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenReal',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'chainID',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'swapTokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'secondDexRouter',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'secondSwapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'finalReceiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'finalCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'finalOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaMintTransaction',\n                name: '_metaMintTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaMintSwap',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'firstSwapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'secondSwapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'approvedTokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'firstDexRouter',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'secondDexRouter',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'nativeIn',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'relayRecipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'otherSideCalldata',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaRouteTransaction',\n                name: '_metarouteTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaRoute',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'metaRouterGateway',\n        outputs: [\n            {\n                internalType: 'contract MetaRouterGateway',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_router',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_swapCalldata',\n                type: 'bytes',\n            },\n            {\n                internalType: 'address',\n                name: '_burnToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_synthesis',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_burnCalldata',\n                type: 'bytes',\n            },\n        ],\n        name: 'returnSwap',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x60a060405234801561001057600080fd5b503060405161001e90610060565b6001600160a01b039091168152602001604051809103906000f08015801561004a573d6000803e3d6000fd5b5060601b6001600160601b03191660805261006d565b6104d780611db283390190565b60805160601c611cfe6100b46000396000818160c60152818161066c015281816108180152818161097801528181610cad01528181610ff401526112500152611cfe6000f3fe60806040526004361061005a5760003560e01c8063a11b119811610043578063a11b1198146100a1578063c394a5da146100b4578063f5b697a51461010457600080fd5b80633bc788351461005f578063732cffe914610081575b600080fd5b34801561006b57600080fd5b5061007f61007a366004611a40565b610124565b005b34801561008d57600080fd5b5061007f61009c366004611809565b61053a565b61007f6100af366004611a7c565b6107e7565b3480156100c057600080fd5b506100e87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b34801561011057600080fd5b5061007f61011f3660046118ca565b61119c565b600061013360e0830183611b30565b600081811061014457610144611c16565b905060200201602081019061015991906117ee565b9050610169610120830183611b7a565b1590506102ad5760008061020b61018360e0860186611b30565b600081811061019457610194611c16565b90506020020160208101906101a991906117ee565b60208601356101c0610120880161010089016117ee565b6101ce610120890189611b7a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506024925061124a915050565b915091508161027557610253816040518060400160405280602081526020017f4d657461526f757465723a20696e7465726e616c2073776170206661696c65648152506113b0565b60405162461bcd60e51b815260040161026c9190611afd565b60405180910390fd5b61028260e0850185611b30565b600181811061029357610293611c16565b90506020020160208101906102a891906117ee565b925050505b6102bb610160830183611b7a565b15905061040357604082013560006102d7610160850185611b7a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250608485018790526040516370a0823160e01b8152306004820152949550936001600160a01b03881693506370a082319250602401905060206040518083038186803b15801561035557600080fd5b505afa158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d9190611ab8565b90506000806103b586846103a96101608b016101408c016117ee565b878b610180013561124a565b91509150816103fd57610253816040518060400160405280601d81526020017f4d657461526f757465723a2066696e616c2063616c6c206661696c65640000008152506113b0565b50505050505b600061041260e0840184611b30565b600161042160e0870187611b30565b61042c929150611bc1565b81811061043b5761043b611c16565b905060200201602081019061045091906117ee565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561049157600080fd5b505afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c99190611ab8565b90508015610535576105356104e160e0850185611b30565b60016104f060e0880188611b30565b6104fb929150611bc1565b81811061050a5761050a611c16565b905060200201602081019061051f91906117ee565b61052f60e0860160c087016117ee565b836113e6565b505050565b6000806105828b8b8b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506024925061124a915050565b91509150816105ad5761025381604051806060016040528060228152602001611c85602291396113b0565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b1580156105ef57600080fd5b505afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190611ab8565b9050600085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506064810183905290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690881614156106e75760405162461bcd60e51b815260206004820152601f60248201527f4d657461526f7574657256323a20696e76616c696420726563697069656e7400604482015260640161026c565b863b878161074b5760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b5050600080886001600160a01b0316836040516107689190611ae1565b6000604051808303816000865af19150503d80600081146107a5576040519150601f19603f3d011682016040523d82523d6000602084013e6107aa565b606091505b5091509150816107d65761025381604051806060016040528060318152602001611c54603191396113b0565b505050505050505050505050505050565b60006107f66040830183611b30565b915061080a905060e0830160c08401611952565b6108f4576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639fc314c861084a6040850185611b30565b600081811061085b5761085b611c16565b905060200201602081019061087091906117ee565b336040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0392831660048201529116602482015260a08501356044820152606401600060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b505050505b60a08201356109038380611b7a565b159050610bed5761091a60e0840160c08501611952565b61096e5761096e61092e6040850185611b30565b600081811061093f5761093f611c16565b905060200201602081019061095491906117ee565b61096460808601606087016117ee565b8560a00135611555565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166109a860808501606086016117ee565b6001600160a01b031614156109ff5760405162461bcd60e51b815260206004820181905260248201527f4d657461526f757465723a20696e76616c696420666972737420726f75746572604482015260640161026c565b600080610a1260808601606087016117ee565b803b9250905081610a795760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b506000905080610a8f60808601606087016117ee565b6001600160a01b031634610aa38780611b7a565b604051610ab1929190611ad1565b60006040518083038185875af1925050503d8060008114610aee576040519150601f19603f3d011682016040523d82523d6000602084013e610af3565b606091505b509150915081610b3c57610253816040518060400160405280601d81526020017f4d657461526f757465723a2066697273742073776170206661696c65640000008152506113b0565b610b496040860186611b30565b6001818110610b5a57610b5a611c16565b9050602002016020810190610b6f91906117ee565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610bb057600080fd5b505afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190611ab8565b925050505b80610bfb6020850185611b7a565b159050610f47576000610c116020860186611b7a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050602481018490529050610ca3610c5e6040870187611b30565b610c69600288611bc1565b818110610c7857610c78611c16565b9050602002016020810190610c8d91906117ee565b610c9d60a08801608089016117ee565b85611555565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610cdd60a08701608088016117ee565b6001600160a01b03161415610d5a5760405162461bcd60e51b815260206004820152602160248201527f4d657461526f757465723a20696e76616c6964207365636f6e6420726f75746560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161026c565b600080610d6d60a08801608089016117ee565b803b9250905081610dd45760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b506000905080610dea60a08801608089016117ee565b6001600160a01b031683604051610e019190611ae1565b6000604051808303816000865af19150503d8060008114610e3e576040519150601f19603f3d011682016040523d82523d6000602084013e610e43565b606091505b509150915081610e8c57610253816040518060400160405280601e81526020017f4d657461526f757465723a207365636f6e642073776170206661696c656400008152506113b0565b610e996040880188611b30565b610ea4600189611bc1565b818110610eb357610eb3611c16565b9050602002016020810190610ec891906117ee565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610f0957600080fd5b505afa158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190611ab8565b93505050505b610f9d610f576040860186611b30565b610f62600187611bc1565b818110610f7157610f71611c16565b9050602002016020810190610f8691906117ee565b610f97610100870160e088016117ee565b83611555565b6000610fad610100860186611b7a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506064810183905290506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611025610100870160e088016117ee565b6001600160a01b0316141561107c5760405162461bcd60e51b815260206004820152601d60248201527f4d657461526f757465723a20696e76616c696420726563697069656e74000000604482015260640161026c565b600080611090610100880160e089016117ee565b803b92509050816110f75760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b50600090508061110e610100880160e089016117ee565b6001600160a01b0316836040516111259190611ae1565b6000604051808303816000865af19150503d8060008114611162576040519150601f19603f3d011682016040523d82523d6000602084013e611167565b606091505b5091509150816111935761025381604051806060016040528060228152602001611ca7602291396113b0565b50505050505050565b60006111e288888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061124a915050565b50905080611240576111f58883896113e6565b604080516001600160a01b038481168252602082018a90528a168183015290517f0ac368c799fd87078497a837c3b184349108599d7c108f68710d3321ba416c6f9181900360600190a15b5050505050505050565b600060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614156112d05760405162461bcd60e51b815260206004820152601f60248201527f4d657461526f757465723a20696e76616c696420726563656976655369646500604482015260640161026c565b6112db878688611555565b838301869052843b85816113455760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b5050846001600160a01b03168460405161135f9190611ae1565b6000604051808303816000865af19150503d806000811461139c576040519150601f19603f3d011682016040523d82523d6000602084013e6113a1565b606091505b50909890975095505050505050565b60606044835110156113c35750806113e0565b600483019250828060200190518101906113dd9190611993565b90505b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916114709190611ae1565b6000604051808303816000865af19150503d80600081146114ad576040519150601f19603f3d011682016040523d82523d6000602084013e6114b2565b606091505b50915091508180156114dc5750805115806114dc5750808060200190518101906114dc9190611976565b61154e5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161026c565b5050505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e9060440160206040518083038186803b1580156115b857600080fd5b505afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f09190611ab8565b101561053557604080516001600160a01b0380851660248301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff604480840182905284518085039091018152606490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790529251610535938793879391926000928392908716916116ab9190611ae1565b6000604051808303816000865af19150503d80600081146116e8576040519150601f19603f3d011682016040523d82523d6000602084013e6116ed565b606091505b50915091508180156117175750805115806117175750808060200190518101906117179190611976565b61154e5760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c6564000000000000000000000000000000000000000000606482015260840161026c565b80356001600160a01b03811681146117a057600080fd5b919050565b60008083601f8401126117b757600080fd5b50813567ffffffffffffffff8111156117cf57600080fd5b6020830191508360208285010111156117e757600080fd5b9250929050565b60006020828403121561180057600080fd5b6113dd82611789565b600080600080600080600080600060e08a8c03121561182757600080fd5b6118308a611789565b985060208a0135975061184560408b01611789565b965060608a013567ffffffffffffffff8082111561186257600080fd5b61186e8d838e016117a5565b909850965086915061188260808d01611789565b955061189060a08d01611789565b945060c08c01359150808211156118a657600080fd5b506118b38c828d016117a5565b915080935050809150509295985092959850929598565b600080600080600080600060c0888a0312156118e557600080fd5b6118ee88611789565b96506020880135955061190360408901611789565b9450606088013567ffffffffffffffff81111561191f57600080fd5b61192b8a828b016117a5565b9095509350506080880135915061194460a08901611789565b905092959891949750929550565b60006020828403121561196457600080fd5b813561196f81611c42565b9392505050565b60006020828403121561198857600080fd5b815161196f81611c42565b6000602082840312156119a557600080fd5b815167ffffffffffffffff808211156119bd57600080fd5b818401915084601f8301126119d157600080fd5b8151818111156119e3576119e3611c2c565b604051601f8201601f19908116603f01168101908382118183101715611a0b57611a0b611c2c565b81604052828152876020848701011115611a2457600080fd5b611a35836020830160208801611be6565b979650505050505050565b600060208284031215611a5257600080fd5b813567ffffffffffffffff811115611a6957600080fd5b82016101a0818503121561196f57600080fd5b600060208284031215611a8e57600080fd5b813567ffffffffffffffff811115611aa557600080fd5b8201610120818503121561196f57600080fd5b600060208284031215611aca57600080fd5b5051919050565b8183823760009101908152919050565b60008251611af3818460208701611be6565b9190910192915050565b6020815260008251806020840152611b1c816040850160208701611be6565b601f01601f19169190910160400192915050565b6000808335601e19843603018112611b4757600080fd5b83018035915067ffffffffffffffff821115611b6257600080fd5b6020019150600581901b36038213156117e757600080fd5b6000808335601e19843603018112611b9157600080fd5b83018035915067ffffffffffffffff821115611bac57600080fd5b6020019150368190038213156117e757600080fd5b600082821015611be157634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015611c01578181015183820152602001611be9565b83811115611c10576000848401525b50505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611c5057600080fd5b5056fe4d657461526f7574657256323a2072657665727453796e74686573697a65526571756573742063616c6c206661696c65644d657461526f7574657256323a20696e7465726e616c2073776170206661696c65644d657461526f757465723a206f7468657220736964652063616c6c206661696c6564a2646970667358221220a2dff3f0a8dbc197d1ad55f50e2b6d0821fbeb5977ccbd177433edefb43232f964736f6c6343000807003360a060405234801561001057600080fd5b506040516104d73803806104d783398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c61043961009e6000396000818160550152818160a2015261017101526104396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639fc314c81461003b578063dbec15bb14610050575b600080fd5b61004e610049366004610363565b6100a0565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461016a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f53796d623a2063616c6c6572206973206e6f7420746865206d657461726f757460448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61019683837f00000000000000000000000000000000000000000000000000000000000000008461019b565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161023a91906103c8565b6000604051808303816000865af19150503d8060008114610277576040519150601f19603f3d011682016040523d82523d6000602084013e61027c565b606091505b50915091508180156102a65750805115806102a65750808060200190518101906102a6919061039f565b610332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610161565b505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461035e57600080fd5b919050565b60008060006060848603121561037857600080fd5b6103818461033a565b925061038f6020850161033a565b9150604084013590509250925092565b6000602082840312156103b157600080fd5b815180151581146103c157600080fd5b9392505050565b6000825160005b818110156103e957602081860181015185830152016103cf565b818111156103f8576000828501525b50919091019291505056fea26469706673582212202568575dd38d51c811ca9abb487d12cf7f92601b834f2b8dba043bc452c3f35164736f6c63430008070033'\n\ntype MetaRouterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: MetaRouterConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class MetaRouter__factory extends ContractFactory {\n    constructor(...args: MetaRouterConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'MetaRouter'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MetaRouter> {\n        return super.deploy(overrides || {}) as Promise<MetaRouter>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): MetaRouter {\n        return super.attach(address) as MetaRouter\n    }\n    connect(signer: Signer): MetaRouter__factory {\n        return super.connect(signer) as MetaRouter__factory\n    }\n    static readonly contractName: 'MetaRouter'\n    public readonly contractName: 'MetaRouter'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): MetaRouterInterface {\n        return new utils.Interface(_abi) as MetaRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): MetaRouter {\n        return new Contract(address, _abi, signerOrProvider) as MetaRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { Multicall, MulticallInterface } from '../Multicall'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'target',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'callData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct Multicall2.Call[]',\n                name: 'calls',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'aggregate',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'blockNumber',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes[]',\n                name: 'returnData',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'target',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'callData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct Multicall2.Call[]',\n                name: 'calls',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'blockAndAggregate',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'blockNumber',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'blockHash',\n                type: 'bytes32',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'success',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'returnData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct Multicall2.Result[]',\n                name: 'returnData',\n                type: 'tuple[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'blockNumber',\n                type: 'uint256',\n            },\n        ],\n        name: 'getBlockHash',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: 'blockHash',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getBlockNumber',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'blockNumber',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCurrentBlockCoinbase',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'coinbase',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCurrentBlockDifficulty',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'difficulty',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCurrentBlockGasLimit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'gaslimit',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCurrentBlockTimestamp',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'timestamp',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'addr',\n                type: 'address',\n            },\n        ],\n        name: 'getEthBalance',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'balance',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getLastBlockHash',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: 'blockHash',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bool',\n                name: 'requireSuccess',\n                type: 'bool',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'target',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'callData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct Multicall2.Call[]',\n                name: 'calls',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'tryAggregate',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'success',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'returnData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct Multicall2.Result[]',\n                name: 'returnData',\n                type: 'tuple[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bool',\n                name: 'requireSuccess',\n                type: 'bool',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'target',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'callData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct Multicall2.Call[]',\n                name: 'calls',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'tryBlockAndAggregate',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'blockNumber',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'blockHash',\n                type: 'bytes32',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'success',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'returnData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct Multicall2.Result[]',\n                name: 'returnData',\n                type: 'tuple[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class Multicall__factory {\n    static readonly abi = _abi\n    static createInterface(): MulticallInterface {\n        return new utils.Interface(_abi) as MulticallInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): Multicall {\n        return new Contract(address, _abi, signerOrProvider) as Multicall\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { MulticallRouter, MulticallRouterInterface } from '../MulticallRouter'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes[]',\n                name: '_calldata',\n                type: 'bytes[]',\n            },\n            {\n                internalType: 'address[]',\n                name: '_receiveSides',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address[]',\n                name: '_path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: '_offset',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n        ],\n        name: 'multicall',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234801561001057600080fd5b50610de6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631e859a0514610030575b600080fd5b61004361003e366004610b54565b610045565b005b6100718360008151811061005b5761005b610c1a565b602002602001015161006a3390565b30896103af565b60005b85518110156102b157600084828151811061009157610091610c1a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012b9190610c30565b9050600087838151811061014157610141610c1a565b60200260200101519050600085848151811061015f5761015f610c1a565b6020026020010151905082818301526101ab87858151811061018357610183610c1a565b602002602001015189868151811061019d5761019d610c1a565b602002602001015185610534565b6000808986815181106101c0576101c0610c1a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16846040516101ec9190610c79565b6000604051808303816000865af19150503d8060008114610229576040519150601f19603f3d011682016040523d82523d6000602084013e61022e565b606091505b50915091508161029957610277816040518060400160405280601c81526020017f4d756c746963616c6c526f757465723a2063616c6c206661696c6564000000008152506105e5565b60405162461bcd60e51b81526004016102909190610c95565b60405180910390fd5b505050505080806102a990610cde565b915050610074565b50600083600185516102c39190610cf9565b815181106102d3576102d3610c1a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190610c30565b905080156103a6576103a684600186516103879190610cf9565b8151811061039757610397610c1a565b6020026020010151838361061b565b50505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161044e9190610c79565b6000604051808303816000865af19150503d806000811461048b576040519150601f19603f3d011682016040523d82523d6000602084013e610490565b606091505b50915091508180156104ba5750805115806104ba5750808060200190518101906104ba9190610d10565b61052c5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610290565b505050505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015282919085169063dd62ed3e90604401602060405180830381865afa1580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190610c30565b10156105e0576105e08383600019610797565b505050565b60606044835110156105f8575080610615565b600483019250828060200190518101906106129190610d39565b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916106b29190610c79565b6000604051808303816000865af19150503d80600081146106ef576040519150601f19603f3d011682016040523d82523d6000602084013e6106f4565b606091505b509150915081801561071e57508051158061071e57508080602001905181019061071e9190610d10565b6107905760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610290565b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052915160009283929087169161082e9190610c79565b6000604051808303816000865af19150503d806000811461086b576040519150601f19603f3d011682016040523d82523d6000602084013e610870565b606091505b509150915081801561089a57508051158061089a57508080602001905181019061089a9190610d10565b6107905760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c65640000000000000000000000000000000000000000006064820152608401610290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561094b5761094b61090c565b604052919050565b600067ffffffffffffffff82111561096d5761096d61090c565b5060051b60200190565b600067ffffffffffffffff8211156109915761099161090c565b50601f01601f191660200190565b600082601f8301126109b057600080fd5b813560206109c56109c083610953565b610922565b82815260059290921b840181019181810190868411156109e457600080fd5b8286015b84811015610a6357803567ffffffffffffffff811115610a085760008081fd5b8701603f81018913610a1a5760008081fd5b848101356040610a2c6109c083610977565b8281528b82848601011115610a415760008081fd5b82828501898301376000928101880192909252508452509183019183016109e8565b509695505050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a9257600080fd5b919050565b600082601f830112610aa857600080fd5b81356020610ab86109c083610953565b82815260059290921b84018101918181019086841115610ad757600080fd5b8286015b84811015610a6357610aec81610a6e565b8352918301918301610adb565b600082601f830112610b0a57600080fd5b81356020610b1a6109c083610953565b82815260059290921b84018101918181019086841115610b3957600080fd5b8286015b84811015610a635780358352918301918301610b3d565b60008060008060008060c08789031215610b6d57600080fd5b86359550602087013567ffffffffffffffff80821115610b8c57600080fd5b610b988a838b0161099f565b96506040890135915080821115610bae57600080fd5b610bba8a838b01610a97565b95506060890135915080821115610bd057600080fd5b610bdc8a838b01610a97565b94506080890135915080821115610bf257600080fd5b50610bff89828a01610af9565b925050610c0e60a08801610a6e565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c4257600080fd5b5051919050565b60005b83811015610c64578181015183820152602001610c4c565b83811115610c73576000848401525b50505050565b60008251610c8b818460208701610c49565b9190910192915050565b6020815260008251806020840152610cb4816040850160208701610c49565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610cf257610cf2610cc8565b5060010190565b600082821015610d0b57610d0b610cc8565b500390565b600060208284031215610d2257600080fd5b81518015158114610d3257600080fd5b9392505050565b600060208284031215610d4b57600080fd5b815167ffffffffffffffff811115610d6257600080fd5b8201601f81018413610d7357600080fd5b8051610d816109c082610977565b818152856020838501011115610d9657600080fd5b610da7826020830160208601610c49565b9594505050505056fea264697066735822122093d426beff7768b31552a91402fe54dbd5fff518998f3cc478bad3a1a60f5f8e64736f6c634300080b0033'\n\ntype MulticallRouterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: MulticallRouterConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class MulticallRouter__factory extends ContractFactory {\n    constructor(...args: MulticallRouterConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'MulticallRouter'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MulticallRouter> {\n        return super.deploy(overrides || {}) as Promise<MulticallRouter>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): MulticallRouter {\n        return super.attach(address) as MulticallRouter\n    }\n    connect(signer: Signer): MulticallRouter__factory {\n        return super.connect(signer) as MulticallRouter__factory\n    }\n    static readonly contractName: 'MulticallRouter'\n    public readonly contractName: 'MulticallRouter'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): MulticallRouterInterface {\n        return new utils.Interface(_abi) as MulticallRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): MulticallRouter {\n        return new Contract(address, _abi, signerOrProvider) as MulticallRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { MulticallRouterV2, MulticallRouterV2Interface } from '../MulticallRouterV2'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes[]',\n                name: '_calldata',\n                type: 'bytes[]',\n            },\n            {\n                internalType: 'address[]',\n                name: '_receiveSides',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address[]',\n                name: '_path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: '_offset',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'bool[]',\n                name: '_isNativeIn',\n                type: 'bool[]',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n        ],\n        name: 'multicall',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234801561001057600080fd5b506111c1806100206000396000f3fe6080604052600436106100225760003560e01c8063bc982fc41461002e57600080fd5b3661002957005b600080fd5b61004161003c366004610efb565b610043565b005b816000815181106100565761005661112b565b6020026020010151156100bd57600034116100b85760405162461bcd60e51b815260206004820152601c60248201527f4d756c746963616c6c526f757465723a207a65726f20616d6f756e740000000060448201526064015b60405180910390fd5b6100e9565b6100e9846000815181106100d3576100d361112b565b60200260200101516100e23390565b308a6106e4565b60005b8651811015610536578281815181106101075761010761112b565b6020026020010151156102935760004790506000808860008151811061012f5761012f61112b565b60200260200101519050803b915081600014156101b45760405162461bcd60e51b815260206004820152603060248201527f4d756c746963616c6c526f757465723a2063616c6c20666f722061206e6f6e2d60448201527f636f6e7472616374206163636f756e740000000000000000000000000000000060648201526084016100af565b6000808a86815181106101c9576101c961112b565b60200260200101516001600160a01b0316858d88815181106101ed576101ed61112b565b60200260200101516040516102029190610fe7565b60006040518083038185875af1925050503d806000811461023f576040519150601f19603f3d011682016040523d82523d6000602084013e610244565b606091505b50915091508161028957610270816040518060600160405280602381526020016111696023913961085c565b60405162461bcd60e51b81526004016100af9190611003565b5050505050610524565b60008582815181106102a7576102a761112b565b60209081029190910101516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561030b57600080fd5b505afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610ee2565b905060008883815181106103595761035961112b565b6020026020010151905060008684815181106103775761037761112b565b602002602001015190506000808a86815181106103965761039661112b565b602002602001015190508483850152803b915081600014156104205760405162461bcd60e51b815260206004820152603060248201527f4d756c746963616c6c526f757465723a2063616c6c20666f722061206e6f6e2d60448201527f636f6e7472616374206163636f756e740000000000000000000000000000000060648201526084016100af565b505061045f8885815181106104375761043761112b565b60200260200101518a86815181106104515761045161112b565b602002602001015185610892565b6000808a86815181106104745761047461112b565b60200260200101516001600160a01b0316846040516104939190610fe7565b6000604051808303816000865af19150503d80600081146104d0576040519150601f19603f3d011682016040523d82523d6000602084013e6104d5565b606091505b50915091508161051e57610270816040518060400160405280601c81526020017f4d756c746963616c6c526f757465723a2063616c6c206661696c65640000000081525061085c565b50505050505b8061052e816110fa565b9150506100ec565b506000846001865161054891906110b3565b815181106105585761055861112b565b60209081029190910101516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156105bc57600080fd5b505afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f49190610ee2565b9050801561062d5761062d856001875161060e91906110b3565b8151811061061e5761061e61112b565b60200260200101518383610951565b4780156106d9576000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114610681576040519150601f19603f3d011682016040523d82523d6000602084013e610686565b606091505b50509050806106d75760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e6420457468657200000000000000000000000060448201526064016100af565b505b505050505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916107769190610fe7565b6000604051808303816000865af19150503d80600081146107b3576040519150601f19603f3d011682016040523d82523d6000602084013e6107b8565b606091505b50915091508180156107e25750805115806107e25750808060200190518101906107e29190610e47565b6108545760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c656400000000000000000000000000000060648201526084016100af565b505050505050565b606060448351101561086f57508061088c565b600483019250828060200190518101906108899190610e6b565b90505b92915050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e9060440160206040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d9190610ee2565b101561094c5761093f83836000610ac0565b61094c8383600019610ac0565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916109db9190610fe7565b6000604051808303816000865af19150503d8060008114610a18576040519150601f19603f3d011682016040523d82523d6000602084013e610a1d565b606091505b5091509150818015610a47575080511580610a47575080806020019051810190610a479190610e47565b610ab95760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c65640000000000000000000000000000000000000060648201526084016100af565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790529151600092839290871691610b4a9190610fe7565b6000604051808303816000865af19150503d8060008114610b87576040519150601f19603f3d011682016040523d82523d6000602084013e610b8c565b606091505b5091509150818015610bb6575080511580610bb6575080806020019051810190610bb69190610e47565b610ab95760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c656400000000000000000000000000000000000000000060648201526084016100af565b80356001600160a01b0381168114610c3f57600080fd5b919050565b600082601f830112610c5557600080fd5b81356020610c6a610c6583611067565b611036565b80838252828201915082860187848660051b8901011115610c8a57600080fd5b60005b85811015610cb057610c9e82610c28565b84529284019290840190600101610c8d565b5090979650505050505050565b600082601f830112610cce57600080fd5b81356020610cde610c6583611067565b80838252828201915082860187848660051b8901011115610cfe57600080fd5b60005b85811015610cb0578135610d1481611157565b84529284019290840190600101610d01565b600082601f830112610d3757600080fd5b81356020610d47610c6583611067565b80838252828201915082860187848660051b8901011115610d6757600080fd5b60005b85811015610cb057813567ffffffffffffffff811115610d8957600080fd5b8801603f81018a13610d9a57600080fd5b858101356040610dac610c658361108b565b8281528c82848601011115610dc057600080fd5b828285018a8301376000928101890192909252508552509284019290840190600101610d6a565b600082601f830112610df857600080fd5b81356020610e08610c6583611067565b80838252828201915082860187848660051b8901011115610e2857600080fd5b60005b85811015610cb057813584529284019290840190600101610e2b565b600060208284031215610e5957600080fd5b8151610e6481611157565b9392505050565b600060208284031215610e7d57600080fd5b815167ffffffffffffffff811115610e9457600080fd5b8201601f81018413610ea557600080fd5b8051610eb3610c658261108b565b818152856020838501011115610ec857600080fd5b610ed98260208301602086016110ca565b95945050505050565b600060208284031215610ef457600080fd5b5051919050565b600080600080600080600060e0888a031215610f1657600080fd5b87359650602088013567ffffffffffffffff80821115610f3557600080fd5b610f418b838c01610d26565b975060408a0135915080821115610f5757600080fd5b610f638b838c01610c44565b965060608a0135915080821115610f7957600080fd5b610f858b838c01610c44565b955060808a0135915080821115610f9b57600080fd5b610fa78b838c01610de7565b945060a08a0135915080821115610fbd57600080fd5b50610fca8a828b01610cbd565b925050610fd960c08901610c28565b905092959891949750929550565b60008251610ff98184602087016110ca565b9190910192915050565b60208152600082518060208401526110228160408501602087016110ca565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561105f5761105f611141565b604052919050565b600067ffffffffffffffff82111561108157611081611141565b5060051b60200190565b600067ffffffffffffffff8211156110a5576110a5611141565b50601f01601f191660200190565b6000828210156110c5576110c5611115565b500390565b60005b838110156110e55781810151838201526020016110cd565b838111156110f4576000848401525b50505050565b600060001982141561110e5761110e611115565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461116557600080fd5b5056fe4d756c746963616c6c526f757465723a206e61746976652063616c6c206661696c6564a2646970667358221220dbc5d27713815a216e194dcaeee0f467ee6a77e599fb355d519592906912cf4f64736f6c63430008070033'\n\ntype MulticallRouterV2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: MulticallRouterV2ConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class MulticallRouterV2__factory extends ContractFactory {\n    constructor(...args: MulticallRouterV2ConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'MulticallRouterV2'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MulticallRouterV2> {\n        return super.deploy(overrides || {}) as Promise<MulticallRouterV2>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): MulticallRouterV2 {\n        return super.attach(address) as MulticallRouterV2\n    }\n    connect(signer: Signer): MulticallRouterV2__factory {\n        return super.connect(signer) as MulticallRouterV2__factory\n    }\n    static readonly contractName: 'MulticallRouterV2'\n    public readonly contractName: 'MulticallRouterV2'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): MulticallRouterV2Interface {\n        return new utils.Interface(_abi) as MulticallRouterV2Interface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): MulticallRouterV2 {\n        return new Contract(address, _abi, signerOrProvider) as MulticallRouterV2\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { OctoPoolFeeCollector, OctoPoolFeeCollectorInterface } from '../OctoPoolFeeCollector'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_feeReceiver',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_feeRate',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'balance',\n                type: 'uint256',\n            },\n        ],\n        name: 'ClaimedTokens',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'fee',\n                type: 'uint256',\n            },\n        ],\n        name: 'FeeCollected',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'WAD',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_newFeeRate',\n                type: 'uint256',\n            },\n        ],\n        name: 'changeFeeRate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'collectFee',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'feeRate',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'feeReceiver',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newFeeReceiver',\n                type: 'address',\n            },\n        ],\n        name: 'setFeeReceiver',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x6080604052670de0b6b3a764000060035534801561001c57600080fd5b50604051610b0a380380610b0a83398101604081905261003b916100bc565b6100443361006c565b600155600280546001600160a01b0319166001600160a01b03929092169190911790556100f6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100cf57600080fd5b82516001600160a01b03811681146100e657600080fd5b6020939093015192949293505050565b610a05806101056000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063978bbdb911610076578063b3f006741161005b578063b3f0067414610122578063efdcd97414610135578063f2fde38b1461014857600080fd5b8063978bbdb914610106578063affca9321461010f57600080fd5b80636a146024146100a8578063715018a6146100c45780637ff7b0d2146100ce5780638da5cb5b146100e1575b600080fd5b6100b160035481565b6040519081526020015b60405180910390f35b6100cc61015b565b005b6100cc6100dc366004610840565b6101c6565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100bb565b6100b160015481565b6100cc61011d36600461086c565b61026c565b6002546100ee906001600160a01b031681565b6100cc610143366004610885565b6102cb565b6100cc610156366004610885565b61035f565b6000546001600160a01b031633146101ba5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101c46000610441565b565b6101d2813330856104a9565b6000600354600154846101e591906108cf565b6101ef91906108ec565b905061020582336102008487610927565b610560565b60025461021d9083906001600160a01b031683610560565b604080516001600160a01b0384168152602081018590529081018290527f108516ddcf5ba43cea6bb2cd5ff6d59ac196c1c86ccb9178332b9dd72d1ca5619060600160405180910390a1505050565b6000546001600160a01b031633146102c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b1565b600155565b6000546001600160a01b031633146103255760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b1565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103b95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b1565b6001600160a01b0381166104355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101b1565b61043e81610441565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261055a9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526105ae565b50505050565b6040516001600160a01b0383166024820152604481018290526105a99084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016104f6565b505050565b6000610603826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106939092919063ffffffff16565b8051909150156105a95780806020019051810190610621919061093a565b6105a95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101b1565b60606106a284846000856106ac565b90505b9392505050565b6060824710156107245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101b1565b843b6107725760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101b1565b600080866001600160a01b0316858760405161078e9190610980565b60006040518083038185875af1925050503d80600081146107cb576040519150601f19603f3d011682016040523d82523d6000602084013e6107d0565b606091505b50915091506107e08282866107eb565b979650505050505050565b606083156107fa5750816106a5565b82511561080a5782518084602001fd5b8160405162461bcd60e51b81526004016101b1919061099c565b80356001600160a01b038116811461083b57600080fd5b919050565b6000806040838503121561085357600080fd5b8235915061086360208401610824565b90509250929050565b60006020828403121561087e57600080fd5b5035919050565b60006020828403121561089757600080fd5b6106a582610824565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176108e6576108e66108a0565b92915050565b600082610922577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b818103818111156108e6576108e66108a0565b60006020828403121561094c57600080fd5b815180151581146106a557600080fd5b60005b8381101561097757818101518382015260200161095f565b50506000910152565b6000825161099281846020870161095c565b9190910192915050565b60208152600082518060208401526109bb81604085016020870161095c565b601f01601f1916919091016040019291505056fea264697066735822122066d7925f09ed4bc46642455b4e2bc57639e34c77f22523edc1ebc237299aecab64736f6c63430008130033'\n\ntype OctoPoolFeeCollectorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: OctoPoolFeeCollectorConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class OctoPoolFeeCollector__factory extends ContractFactory {\n    constructor(...args: OctoPoolFeeCollectorConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'OctoPoolFeeCollector'\n    }\n\n    deploy(\n        _feeReceiver: string,\n        _feeRate: BigNumberish,\n        overrides?: Overrides & { from?: string | Promise<string> }\n    ): Promise<OctoPoolFeeCollector> {\n        return super.deploy(_feeReceiver, _feeRate, overrides || {}) as Promise<OctoPoolFeeCollector>\n    }\n    getDeployTransaction(\n        _feeReceiver: string,\n        _feeRate: BigNumberish,\n        overrides?: Overrides & { from?: string | Promise<string> }\n    ): TransactionRequest {\n        return super.getDeployTransaction(_feeReceiver, _feeRate, overrides || {})\n    }\n    attach(address: string): OctoPoolFeeCollector {\n        return super.attach(address) as OctoPoolFeeCollector\n    }\n    connect(signer: Signer): OctoPoolFeeCollector__factory {\n        return super.connect(signer) as OctoPoolFeeCollector__factory\n    }\n    static readonly contractName: 'OctoPoolFeeCollector'\n    public readonly contractName: 'OctoPoolFeeCollector'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): OctoPoolFeeCollectorInterface {\n        return new utils.Interface(_abi) as OctoPoolFeeCollectorInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): OctoPoolFeeCollector {\n        return new Contract(address, _abi, signerOrProvider) as OctoPoolFeeCollector\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { OmniPool, OmniPoolInterface } from '../OmniPool'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'approved',\n                type: 'bool',\n            },\n        ],\n        name: 'ApprovalForAll',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'AssetAdded',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'bool',\n                name: 'status',\n                type: 'bool',\n            },\n        ],\n        name: 'AssetStatusChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'Deposit',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'FillPool',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint8',\n                name: 'version',\n                type: 'uint8',\n            },\n        ],\n        name: 'Initialized',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'NewA',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'lpDividendRatio',\n                type: 'uint256',\n            },\n        ],\n        name: 'NewFee',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'addr',\n                type: 'address',\n            },\n        ],\n        name: 'NewFeeTo',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'NewLPFee',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'newMaxSupply',\n                type: 'uint256',\n            },\n        ],\n        name: 'NewMaxSupply',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'NewMintFeeThreshold',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newVeSIS',\n                type: 'address',\n            },\n        ],\n        name: 'NewVeSIS',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Paused',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'fromToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'toToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'fromAmount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'toAmount',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'Swap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'ids',\n                type: 'uint256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'values',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'TransferBatch',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'id',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'TransferSingle',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'string',\n                name: 'value',\n                type: 'string',\n            },\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'id',\n                type: 'uint256',\n            },\n        ],\n        name: 'URI',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Unpaused',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'Withdraw',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'a',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_maxSupply',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: '_decimals',\n                type: 'uint8',\n            },\n        ],\n        name: 'addAssetOcto',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'assetToIndex',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'id',\n                type: 'uint256',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address[]',\n                name: 'accounts',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'ids',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'balanceOfBatch',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: '',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_tokenID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_newMaxSupply',\n                type: 'uint256',\n            },\n        ],\n        name: 'changeMaxSupply',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_id',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_minimumLiquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'deposit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'fee',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'devaddr',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'feeTo',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'globalEquilCovRatio',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'equilCovRatio',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'invariant',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        name: 'indexToAsset',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'cash',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liability',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'maxSupply',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'totalSupply',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'decimals',\n                type: 'uint8',\n            },\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: 'active',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_a',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_lpFee',\n                type: 'uint256',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n        ],\n        name: 'isApprovedForAll',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'lastIndex',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'lpDividendRatio',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'lpFee',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_id',\n                type: 'uint256',\n            },\n        ],\n        name: 'mintFee',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'mintFeeThreshold',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'paused',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'ids',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'safeBatchTransferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'id',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'safeTransferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_newA',\n                type: 'uint256',\n            },\n        ],\n        name: 'setA',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'operator',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: 'approved',\n                type: 'bool',\n            },\n        ],\n        name: 'setApprovalForAll',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_id',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: '_active',\n                type: 'bool',\n            },\n        ],\n        name: 'setAssetStatus',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_newLpDividendRatio',\n                type: 'uint256',\n            },\n        ],\n        name: 'setFeeRatio',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newFeeTo',\n                type: 'address',\n            },\n        ],\n        name: 'setFeeTo',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_newLpFee',\n                type: 'uint256',\n            },\n        ],\n        name: 'setLPFee',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_newMintFeeThreshold',\n                type: 'uint256',\n            },\n        ],\n        name: 'setMintFeeThreshold',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newVeSIS',\n                type: 'address',\n            },\n        ],\n        name: 'setVeSISAddress',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_id',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'spreadAccumulatedError',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes4',\n                name: 'interfaceId',\n                type: 'bytes4',\n            },\n        ],\n        name: 'supportsInterface',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_fromID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_toID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_fromAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_minToAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swap',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'actualToAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lpFeeAmount',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        name: 'uri',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'veSIS',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_id',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_minAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'withdraw',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'fee',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234801561001057600080fd5b50614695806100206000396000f3fe608060405234801561001057600080fd5b50600436106102475760003560e01c80638456cb591161013b578063d043c565116100b8578063f242432a1161007c578063f242432a146105b9578063f2fde38b146105cc578063f3f6f0d7146105df578063f46901ed146105e8578063f6f70eaf146105fb57600080fd5b8063d043c56514610530578063d49e77cd14610543578063e4a3011614610557578063e985e9c51461056a578063ee919d50146105a657600080fd5b80638f6bdeaa116100ff5780638f6bdeaa146104455780639eeb6a2214610458578063a22cb465146104f6578063ce016ea114610509578063cfc399ea1461051c57600080fd5b80638456cb59146103fe5780638a2dfe09146104065780638a35ace31461040e5780638c9a4bb8146104215780638da5cb5b1461043457600080fd5b80633f4ba83a116101c95780635cfe092e1161018d5780635cfe092e146103c65780635f4b9bde146103d0578063704ce43e146103e3578063715018a6146103ec578063815bfd29146103f457600080fd5b80633f4ba83a146103585780634422a8dd146103605780634e1273f41461038857806353cb6a5e146103a85780635c975abb146103bb57600080fd5b806319f4ff2f1161021057806319f4ff2f146102ea57806324e75ca0146102ff578063265e7bde146103125780632eb2c2d61461032557806339e599451461033857600080fd5b8062fdd58e1461024c578063017e7e581461027257806301ffc9a71461029e5780630dbe671f146102c15780630e89341c146102ca575b600080fd5b61025f61025a366004613b2a565b61060e565b6040519081526020015b60405180910390f35b61010354610286906001600160a01b031681565b6040516001600160a01b039091168152602001610269565b6102b16102ac366004613c88565b6106a9565b6040519015158152602001610269565b61025f60fe5481565b6102dd6102d8366004613cc2565b6106f9565b6040516102699190613f26565b6102fd6102f8366004613cc2565b61078d565b005b6102fd61030d366004613cf4565b610802565b6102fd610320366004613d19565b61089c565b6102fd6103333660046139e4565b6109e6565b61025f610346366004613996565b60fc6020526000908152604090205481565b6102fd610a32565b61037361036e366004613d3b565b610a44565b60408051928352602083019190915201610269565b61039b610396366004613b9a565b610c5b565b6040516102699190613eee565b6102fd6103b6366004613cc2565b610d85565b60655460ff166102b1565b61025f6101015481565b6103736103de366004613d3b565b610dea565b61025f60ff5481565b6102fd611102565b61025f6101005481565b6102fd611114565b610373611124565b6102fd61041c366004613cc2565b611168565b6102fd61042f366004613d19565b611174565b6033546001600160a01b0316610286565b610373610453366004613d82565b611352565b6104b3610466366004613cc2565b60fb60205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff808216916001600160a01b0361010082041691600160a81b9091041687565b60408051978852602088019690965294860193909352606085019190915260ff1660808401526001600160a01b031660a0830152151560c082015260e001610269565b6102fd610504366004613af3565b611693565b6102fd610517366004613b54565b61169e565b61010454610286906001600160a01b031681565b6102fd61053e366004613cc2565b61187d565b61010254610286906001600160a01b031681565b6102fd610565366004613d19565b6118bb565b6102b16105783660046139b1565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b6102fd6105b4366004613cc2565b611a71565b6102fd6105c7366004613a8e565b611ad6565b6102fd6105da366004613996565b611b1b565b61025f60fd5481565b6102fd6105f6366004613996565b611b91565b6102fd610609366004613996565b611c0c565b60006001600160a01b03831661067e5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b50600081815260c9602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806106da57506001600160e01b031982166303a24d0760e21b145b806106a357506301ffc9a760e01b6001600160e01b03198316146106a3565b606060cb805461070890614476565b80601f016020809104026020016040519081016040528092919081815260200182805461073490614476565b80156107815780601f1061075657610100808354040283529160200191610781565b820191906000526020600020905b81548152906001019060200180831161076457829003601f168201915b50505050509050919050565b610795611c87565b670de0b6b3a76400008111156107bd5760405162461bcd60e51b8152600401610675906140bc565b6107c5611ce1565b6101008190556040518181527f63fe946ed58429ac3c5e64d4356ff92c26d7fa1e73586515df8ba9f059ab54a5906020015b60405180910390a150565b61080a611c87565b600082815260fb602052604090206004015460ff600160a81b9091041615158115151461089857600082815260fb6020526040808220600401805460ff60a81b1916600160a81b8515159081029190911791829055915191926101009091046001600160a01b0316917f409295ac74e8693e50d9c1104ed31735b01ce0bbb0772e2fc4392180993c8a949190a35b5050565b6108a4611c87565b600082815260fb60205260408120600401546108c490839060ff16611d09565b90506108d6816001600160ff1b031190565b6109225760405162461bcd60e51b815260206004820152601760248201527f4e6577206d617820737570706c7920746f6f20686967680000000000000000006044820152606401610675565b600083815260fb60205260409020548110156109905760405162461bcd60e51b815260206004820152602760248201527f43757272656e742062616c616e6365206578636565647320676976656e206d6160448201526678537570706c7960c81b6064820152608401610675565b600083815260fb60205260408082206002810184905560040154905183926101009092046001600160a01b0316917fc5d8aa673058ca711657496eae7c88ab5e64efd2f3391dcb3ed365b93ecb184f91a3505050565b6001600160a01b038516331480610a025750610a028533610578565b610a1e5760405162461bcd60e51b815260040161067590613f70565b610a2b8585858585611d71565b5050505050565b610a3a611c87565b610a42611f51565b565b600080610a4f611fa3565b82428111610a6f5760405162461bcd60e51b8152600401610675906140e3565b846001600160a01b038116610a965760405162461bcd60e51b815260040161067590614007565b600089815260fb60205260409020610aaf338b8b611fe9565b610ab88a61216d565b6000610ac48b8b61229e565b6004850154929850965091508690610ae0908b9060ff16611d09565b10610afd5760405162461bcd60e51b815260040161067590614158565b85826000016000828254610b119190614410565b9250508190555080826001016000828254610b2c9190614410565b9250508190555089826003016000828254610b479190614410565b909155505060018201541580610b7e5750610b6b6064670de0b6b3a764000061422b565b60018301548354610b7b91612454565b10155b610bb65760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b6044820152606401610675565b6004820154610be9908990610bcf90899060ff1661248f565b600485015461010090046001600160a01b031691906124bf565b5060048101546001600160a01b038089169161010081049091169082907ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad990610c36908a9060ff1661248f565b60408051918252602082018f9052015b60405180910390a45050509550959350505050565b60608151835114610cc05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610675565b6000835167ffffffffffffffff811115610cdc57610cdc614558565b604051908082528060200260200182016040528015610d05578160200160208202803683370190505b50905060005b8451811015610d7d57610d50858281518110610d2957610d29614542565b6020026020010151858381518110610d4357610d43614542565b602002602001015161060e565b828281518110610d6257610d62614542565b6020908102919091010152610d76816144de565b9050610d0b565b509392505050565b610d8d611c87565b670de0b6b3a7640000811115610db55760405162461bcd60e51b8152600401610675906140bc565b60ff8190556040518181527f0df0ce83543295289f05f3782542da3058e533082716a3b74f8913499444f3c5906020016107f7565b600080610df5611fa3565b82428111610e155760405162461bcd60e51b8152600401610675906140e3565b846001600160a01b038116610e3c5760405162461bcd60e51b815260040161067590614007565b600089815260fb6020526040902060040154600160a81b900460ff16610e745760405162461bcd60e51b815260040161067590613f39565b600089815260fb602052604090206002810154600490910154610e9b908a9060ff16611d09565b60008b815260fb6020526040902054610eb491906141e5565b1115610f025760405162461bcd60e51b815260206004820152601e60248201527f466f7262696464656e3a206d617820737570706c7920657863656564656400006044820152606401610675565b610f0b8961216d565b600089815260fb6020526040812060040154610f36908b90610f31908c9060ff16611d09565b612522565b9196509094509050848810610f5d5760405162461bcd60e51b815260040161067590614158565b60008a815260fb6020526040902060010154610f8a90610f7e9083906141e5565b6001600160ff1b031190565b610fcb5760405162461bcd60e51b8152602060048201526012602482015271098d2c2c4d2d8d2e8f240e8dede40d0d2ced60731b6044820152606401610675565b60008a815260fb6020526040902060040154610feb908a9060ff16611d09565b60008b815260fb6020526040812080549091906110099084906141e5565b909155505060008a815260fb60205260408120600101805483929061102f9084906141e5565b909155505060008a815260fb6020526040812060030180548792906110559084906141e5565b92505081905550611077878b876040518060200160405280600081525061273d565b60008a815260fb60205260409020600401546110a39061010090046001600160a01b031633308c61284a565b60008a815260fb60209081526040918290206004015482518c81529182018890526001600160a01b038a811693610100909204169133917ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b9101610c46565b61110a611c87565b610a426000612888565b61111c611c87565b610a426128da565b600080600080611132612917565b8092508193505050600061115161114c848460fe546129d0565b6129fb565b90508061115d846129fb565b945094505050509091565b6111718161216d565b50565b61117c611c87565b6000828152610105602090815260408083205460fb909252808320805460049182015492516370a0823160e01b815230928101929092529161122b9160ff82169161010090046001600160a01b0316906370a082319060240160206040518083038186803b1580156111ed57600080fd5b505afa158015611201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112259190613cdb565b90611d09565b6112359190614410565b61123f9190614410565b9050808211156112615760405162461bcd60e51b8152600401610675906140bc565b600083815260fb60205260408120805484929061127f9084906141e5565b9091555050600083815260fb60205260409020546001600160ff1b03116112f75760405162461bcd60e51b815260206004820152602660248201527f496d706f737369626c6520746f2073707265616420616363756d756c617465646044820152651032b93937b960d11b6064820152608401610675565b600083815260fb60209081526040918290206004015491518481526101009092046001600160a01b0316917f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff137910160405180910390a2505050565b60008061135d611fa3565b8242811161137d5760405162461bcd60e51b8152600401610675906140e3565b846001600160a01b0381166113a45760405162461bcd60e51b815260040161067590614007565b60008a815260fb6020526040902060040154600160a81b900460ff166113dc5760405162461bcd60e51b815260040161067590613f39565b600089815260fb6020526040902060040154600160a81b900460ff166114145760405162461bcd60e51b815260040161067590613f39565b600089815260fb60205260408082206004908101548d84529190922090910154610100918290046001600160a01b03908116929091041614156114885760405162461bcd60e51b815260206004820152600c60248201526b53616d65206164647265737360a01b6044820152606401610675565b60008a815260fb6020526040902060028101546004909101546114af908a9060ff16611d09565b60008c815260fb60205260409020546114c891906141e5565b11156115165760405162461bcd60e51b815260206004820152601e60248201527f466f7262696464656e3a206d617820737570706c7920657863656564656400006044820152606401610675565b60008a815260fb6020526040902060040154611563908b908b9061153e908c9060ff16611d09565b60008d815260fb602052604090206004015461155e908c9060ff16611d09565b612a4a565b60008b815260fb6020526040902060040154919550935061158890859060ff1661248f565b60008a815260fb60205260409020600401549094506115ab90849060ff1661248f565b60008b815260fb60205260409020600401549093506115da9061010090046001600160a01b031633308b61284a565b600089815260fb60205260409020600401546116059061010090046001600160a01b031687866124bf565b60008a815260fb602090815260408083206004908101548d855293829020015481516001600160a01b0361010095869004811682529490910484169281019290925281018a9052606081018690529087169033907f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d19060800160405180910390a35050965096945050505050565b610898338383612bd6565b6116a6611c87565b826001600160a01b0381166116cd5760405162461bcd60e51b815260040161067590614007565b6001600160a01b03808516600081815260fc6020908152604080832054835260fb9091529020600401546101009004909116141561174d5760405162461bcd60e51b815260206004820152601c60248201527f41737365742068617320616c7265616479206265656e206164646564000000006044820152606401610675565b6040805160e0810182526000808252602082015290810161176e8585611d09565b81526000602080830182905260ff8087166040808601919091526001600160a01b03808b166060808801919091526001608097880181905260fd8054885260fb87528488208a518155968a0151918701919091559288015160028601558701516003850155948601516004909301805460a088015160c0909801511515600160a81b0260ff60a81b1998909716610100026001600160a81b031990911694909316939093179190911794909416929092179091558154919061182f836144de565b909155506001600160a01b038516600081815260fc602052604080822093909355915190917f0e3c58ebfb2e7465fbb1c32e6b4f40c3c4f5ca77e8218a386aff8617831260d791a250505050565b611885611c87565b6101018190556040518181527f71592c407ca0abb34bb7ada163a2a8b25a2e58342a3c0926df1b9ce73cb214a5906020016107f7565b600054610100900460ff16158080156118db5750600054600160ff909116105b806118f55750303b1580156118f5575060005460ff166001145b6119585760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610675565b6000805460ff19166001179055801561197b576000805461ff0019166101001790555b611983612cb7565b61198b612ce6565b6119ac60405180606001604052806027815260200161463960279139612d19565b670de0b6b3a76400008311156119d45760405162461bcd60e51b8152600401610675906140bc565b670de0b6b3a76400008211156119fc5760405162461bcd60e51b8152600401610675906140bc565b60fe83905560ff829055670de0b6b3a76400006101005561010480546001600160a01b031916331790558015611a6c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b611a79611c87565b670de0b6b3a7640000811115611aa15760405162461bcd60e51b8152600401610675906140bc565b60fe8190556040518181527f3f4ccc115548cf9126e487dcdf7c805dbb3578de78180051ace88afa59675e9c906020016107f7565b6001600160a01b038516331480611af25750611af28533610578565b611b0e5760405162461bcd60e51b815260040161067590613f70565b610a2b8585858585612d49565b611b23611c87565b6001600160a01b038116611b885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610675565b61117181612888565b611b99611c87565b806001600160a01b038116611bc05760405162461bcd60e51b815260040161067590614007565b61010380546001600160a01b0319166001600160a01b0384169081179091556040517fd7ecd1f497e38c39a3455e0704e1bddc382baa8059756b571ff24b92cab7ff5490600090a25050565b611c14611c87565b806001600160a01b038116611c3b5760405162461bcd60e51b815260040161067590614007565b61010480546001600160a01b0319166001600160a01b0384169081179091556040517f698bdbadb3d770955212e2624318544242e40229072137a1dd6ac7edc93d847890600090a25050565b6033546001600160a01b03163314610a425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610675565b60005b60fd5481101561117157611cf78161216d565b80611d01816144de565b915050611ce4565b600060128260ff161015611d3e57611d22826012614427565b611d2d90600a614282565b611d3790846143b2565b90506106a3565b60128260ff161115611d6a57611d55601283614427565b611d6090600a614282565b611d37908461422b565b5090919050565b8151835114611dd35760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610675565b6001600160a01b038416611df95760405162461bcd60e51b81526004016106759061402d565b3360005b8451811015611ee3576000858281518110611e1a57611e1a614542565b602002602001015190506000858381518110611e3857611e38614542565b602090810291909101810151600084815260c9835260408082206001600160a01b038e168352909352919091205490915081811015611e895760405162461bcd60e51b815260040161067590614072565b600083815260c9602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ec89084906141e5565b9250508190555050505080611edc906144de565b9050611dfd565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f33929190613f01565b60405180910390a4611f49818787878787612e77565b505050505050565b611f59612fe2565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615610a425760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610675565b6001600160a01b03831661204b5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610675565b3360006120578461302b565b905060006120648461302b565b604080516020808201835260009182905288825260c981528282206001600160a01b038b16835290522054909150848110156120ee5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610675565b600086815260c9602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6000818152610105602052604090205480158061218c57506101015481105b15612195575050565b60006121b861010054670de0b6b3a76400006121b19190614410565b8390613076565b905080156122195761010454600084815260fb6020526040902060040154612219916001600160a01b0316906121f290849060ff1661248f565b600086815260fb602052604090206004015461010090046001600160a01b031691906124bf565b60006122258284614410565b905080156122895760006122398583612522565b50600087815260fb6020526040812060010180549294508493509161225f9084906141e5565b9091555050600085815260fb6020526040812080548492906122829084906141e5565b9091555050505b50505060009081526101056020526040812055565b600082815260fb602052604081206003810154600190910154829182916122c69086906143b2565b6122d0919061422b565b9150816123105760405162461bcd60e51b815260206004820152600e60248201526d5a65726f206c697175696469747960901b6044820152606401610675565b600061231b83613096565b612324906144f9565b600087815260fb60205260408120549192509061234090613096565b600088815260fb60205260408120600101549192509061235f90613096565b60fe54909150600061237185846141a4565b9050600061237f8585613100565b905060006123a16123908584613100565b61239a90846143d1565b8690613134565b9050600060026123c36123bc87670de0b6b3a76400006143d1565b8a90613134565b6123cd90846141a4565b6123d791906141fd565b9050600061240d826123f36123ec888061432d565b8990613134565b6123fd858061432d565b61240791906141a4565b90613154565b61241790836141a4565b905061242661114c828a6143d1565b9b508b8b10612440576124398c8c614410565b9950612444565b8a9b505b5050505050505050509250925092565b60008161246260028261422b565b612474670de0b6b3a7640000866143b2565b61247e91906141e5565b612488919061422b565b9392505050565b600060128260ff1610156124a857611d55826012614427565b60128260ff161115611d6a57611d22601283614427565b6040516001600160a01b038316602482015260448101829052611a6c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613218565b60008060008061253185613096565b600087815260fb60205260408120549192509061254d90613096565b600088815260fb60205260408120600101549192509061256c90613096565b60fe546000955090915081612583578795506126cc565b600061258f85856141a4565b12156125ad5760405162461bcd60e51b8152600401610675906140bc565b60006125b98484613100565b905060006125c785876141a4565b905060006125d58486613134565b6125e090600261432d565b6125fc6125f586670de0b6b3a76400006143d1565b8490613134565b61260691906141a4565b9050600061261e866126188782613134565b90613134565b6126288480613134565b61264a866126368a8a61432d565b61264091906141fd565b61239a908b6143d1565b61265491906143d1565b61265e91906141a4565b905060008161266e87600461432d565b612678919061432d565b612682848061432d565b61268c91906143d1565b90506126c460026126ba886126a18588613154565b6126aa886144f9565b6126b491906141a4565b90613100565b61114c91906141fd565b9a5050505050505b8786106126e4576126dd8887614410565b94506126e8565b8795505b600089815260fb6020526040902060010154801561272d5760008a815260fb6020526040902060030154819061271e90896143b2565b612728919061422b565b61272f565b865b975050505050509250925092565b6001600160a01b03841661279d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610675565b3360006127a98561302b565b905060006127b68561302b565b9050600086815260c9602090815260408083206001600160a01b038b168452909152812080548792906127ea9084906141e5565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612164836000898989896132ea565b6040516001600160a01b03808516602483015283166044820152606481018290526128829085906323b872dd60e01b906084016124eb565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6128e2611fa3565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f863390565b60fe546000908190815b60fd548110156129ca57600081815260fb602052604081205461294390613096565b600083815260fb60205260408120600101549192509061296290613096565b9050806129705750506129b8565b600061297c8383613100565b905061298882876141a4565b95506129a86129978683613100565b6129a190836143d1565b8390613134565b6129b290886141a4565b96505050505b806129c2816144de565b915050612921565b50509091565b6000806129dd8585613100565b6129e6906144f9565b90506129f281846133b4565b95945050505050565b600080821215612a465760405162461bcd60e51b815260206004820152601660248201527576616c7565206d75737420626520706f73697469766560501b6044820152606401610675565b5090565b600084815260fb60205260408120548190612a6990610f7e90866141e5565b612ab55760405162461bcd60e51b815260206004820152601760248201527f496e697469616c20616d6f756e7420746f6f20686967680000000000000000006044820152606401610675565b612ac88686612ac387613096565b6133ef565b9092509050818310612aec5760405162461bcd60e51b815260040161067590614158565b6000858152610105602052604081208054839290612b0b9084906141e5565b9091555050600086815260fb602052604081208054869290612b2e9084906141e5565b90915550612b3e905081836141e5565b600086815260fb602052604081208054909190612b5c908490614410565b90915550612b7590506064670de0b6b3a764000061422b565b600086815260fb6020526040902060018101549054612b9391612454565b1015612bcd5760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b6044820152606401610675565b94509492505050565b816001600160a01b0316836001600160a01b03161415612c4a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610675565b6001600160a01b03838116600081815260ca6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600054610100900460ff16612cde5760405162461bcd60e51b81526004016106759061410d565b610a4261360b565b600054610100900460ff16612d0d5760405162461bcd60e51b81526004016106759061410d565b6065805460ff19169055565b600054610100900460ff16612d405760405162461bcd60e51b81526004016106759061410d565b6111718161363b565b6001600160a01b038416612d6f5760405162461bcd60e51b81526004016106759061402d565b336000612d7b8561302b565b90506000612d888561302b565b9050600086815260c9602090815260408083206001600160a01b038c16845290915290205485811015612dcd5760405162461bcd60e51b815260040161067590614072565b600087815260c9602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612e0c9084906141e5565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612e6c848a8a8a8a8a6132ea565b505050505050505050565b6001600160a01b0384163b15611f495760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612ebb9089908990889088908890600401613e56565b602060405180830381600087803b158015612ed557600080fd5b505af1925050508015612f05575060408051601f3d908101601f19168201909252612f0291810190613ca5565b60015b612fb257612f1161456e565b806308c379a01415612f4b5750612f2661458a565b80612f315750612f4d565b8060405162461bcd60e51b81526004016106759190613f26565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610675565b6001600160e01b0319811663bc197c8160e01b146121645760405162461bcd60e51b815260040161067590613fbf565b60655460ff16610a425760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610675565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061306557613065614542565b602090810291909101015292915050565b6000670de0b6b3a764000061308c60028261422b565b61247484866143b2565b60006001600160ff1b03821115612a465760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610675565b60008161310e6002826141fd565b613120670de0b6b3a76400008661432d565b61312a91906141a4565b61248891906141fd565b6000670de0b6b3a764000061314a6002826141fd565b613120848661432d565b600060038313156132095760008213801561316f5750828213155b1561317b5750806131ab565b600082128015613193575082613190836144f9565b13155b156131a8576131a1826144f9565b90506131ab565b50815b60006002826131ba81876141fd565b6131c491906141a4565b6131ce91906141fd565b90505b818114613203579050806002816131e881876141fd565b6131f291906141a4565b6131fc91906141fd565b90506131d1565b506106a3565b82156106a35750600192915050565b600061326d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661366b9092919063ffffffff16565b805190915015611a6c578080602001905181019061328b9190613c6b565b611a6c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610675565b6001600160a01b0384163b15611f495760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061332e9089908990889088908890600401613eb4565b602060405180830381600087803b15801561334857600080fd5b505af1925050508015613378575060408051601f3d908101601f1916820190925261337591810190613ca5565b60015b61338457612f1161456e565b6001600160e01b0319811663f23a6e6160e01b146121645760405162461bcd60e51b815260040161067590613fbf565b60006002836133e581670de0b6b3a76400006133d187600461432d565b6133db919061432d565b6123fd888061432d565b61312a91906143d1565b600082815260fb6020526040812054819081908161340c82613096565b600089815260fb60205260408120549192509061342890613096565b60008a815260fb60205260408120600101549192509061344790613096565b60008a815260fb60205260408120600101549192509061346690613096565b60fe54909150811580159061347a57508215155b6134965760405162461bcd60e51b8152600401610675906140bc565b60006134cf866134a6858061432d565b6134b091906141fd565b866134bb878061432d565b6134c591906141fd565b6129a191906141a4565b6134d987876141a4565b6134e391906143d1565b905060006134f5856126b48e896141a4565b905060006135038386613100565b8561350e8685613100565b61351890856143d1565b613522908961432d565b61352c91906141fd565b61353691906143d1565b9050600061354482866133b4565b90506000896135538884613134565b61355d91906143d1565b9050600081121561357b5761357461114c826144f9565b9b50613587565b613584816129fb565b9b505b8b8b10156135c95760405162461bcd60e51b815260206004820152600f60248201526e09cdee840cadcdeeaced040c6c2e6d608b1b6044820152606401610675565b60ff546135d7908d90613076565b9c5060008f13156135f3576135ec8d8d614410565b9d506135f7565b8b9d505b505050505050505050505050935093915050565b600054610100900460ff166136325760405162461bcd60e51b81526004016106759061410d565b610a4233612888565b600054610100900460ff166136625760405162461bcd60e51b81526004016106759061410d565b61117181613682565b606061367a8484600085613695565b949350505050565b80516108989060cb9060208401906137ff565b6060824710156136f65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610675565b6001600160a01b0385163b61374d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610675565b600080866001600160a01b031685876040516137699190613e3a565b60006040518083038185875af1925050503d80600081146137a6576040519150601f19603f3d011682016040523d82523d6000602084013e6137ab565b606091505b50915091506137bb8282866137c6565b979650505050505050565b606083156137d5575081612488565b8251156137e55782518084602001fd5b8160405162461bcd60e51b81526004016106759190613f26565b82805461380b90614476565b90600052602060002090601f01602090048101928261382d5760008555613873565b82601f1061384657805160ff1916838001178555613873565b82800160010185558215613873579182015b82811115613873578251825591602001919060010190613858565b50612a469291505b80821115612a46576000815560010161387b565b80356001600160a01b03811681146138a657600080fd5b919050565b600082601f8301126138bc57600080fd5b813560206138c982614180565b6040516138d682826144b1565b8381528281019150858301600585901b870184018810156138f657600080fd5b60005b85811015613915578135845292840192908401906001016138f9565b5090979650505050505050565b600082601f83011261393357600080fd5b813567ffffffffffffffff81111561394d5761394d614558565b604051613964601f8301601f1916602001826144b1565b81815284602083860101111561397957600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156139a857600080fd5b6124888261388f565b600080604083850312156139c457600080fd5b6139cd8361388f565b91506139db6020840161388f565b90509250929050565b600080600080600060a086880312156139fc57600080fd5b613a058661388f565b9450613a136020870161388f565b9350604086013567ffffffffffffffff80821115613a3057600080fd5b613a3c89838a016138ab565b94506060880135915080821115613a5257600080fd5b613a5e89838a016138ab565b93506080880135915080821115613a7457600080fd5b50613a8188828901613922565b9150509295509295909350565b600080600080600060a08688031215613aa657600080fd5b613aaf8661388f565b9450613abd6020870161388f565b93506040860135925060608601359150608086013567ffffffffffffffff811115613ae757600080fd5b613a8188828901613922565b60008060408385031215613b0657600080fd5b613b0f8361388f565b91506020830135613b1f81614614565b809150509250929050565b60008060408385031215613b3d57600080fd5b613b468361388f565b946020939093013593505050565b600080600060608486031215613b6957600080fd5b613b728461388f565b925060208401359150604084013560ff81168114613b8f57600080fd5b809150509250925092565b60008060408385031215613bad57600080fd5b823567ffffffffffffffff80821115613bc557600080fd5b818501915085601f830112613bd957600080fd5b81356020613be682614180565b604051613bf382826144b1565b8381528281019150858301600585901b870184018b1015613c1357600080fd5b600096505b84871015613c3d57613c298161388f565b835260019690960195918301918301613c18565b5096505086013592505080821115613c5457600080fd5b50613c61858286016138ab565b9150509250929050565b600060208284031215613c7d57600080fd5b815161248881614614565b600060208284031215613c9a57600080fd5b813561248881614622565b600060208284031215613cb757600080fd5b815161248881614622565b600060208284031215613cd457600080fd5b5035919050565b600060208284031215613ced57600080fd5b5051919050565b60008060408385031215613d0757600080fd5b823591506020830135613b1f81614614565b60008060408385031215613d2c57600080fd5b50508035926020909101359150565b600080600080600060a08688031215613d5357600080fd5b853594506020860135935060408601359250613d716060870161388f565b949793965091946080013592915050565b60008060008060008060c08789031215613d9b57600080fd5b86359550602087013594506040870135935060608701359250613dc06080880161388f565b915060a087013590509295509295509295565b600081518084526020808501945080840160005b83811015613e0357815187529582019590820190600101613de7565b509495945050505050565b60008151808452613e2681602086016020860161444a565b601f01601f19169290920160200192915050565b60008251613e4c81846020870161444a565b9190910192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090613e8290830186613dd3565b8281036060840152613e948186613dd3565b90508281036080840152613ea88185613e0e565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906137bb90830184613e0e565b6020815260006124886020830184613dd3565b604081526000613f146040830185613dd3565b82810360208401526129f28185613dd3565b6020815260006124886020830184613e0e565b6020808252601e908201527f417373657420776173206465616374697661746564206279206f776e65720000604082015260600190565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252600d908201526c496e76616c69642076616c756560981b604082015260600190565b60208082526010908201526f111958591b1a5b99481b9bdd081b595d60821b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600e908201526d416d6f756e7420746f6f206c6f7760901b604082015260600190565b600067ffffffffffffffff82111561419a5761419a614558565b5060051b60200190565b600080821280156001600160ff1b03849003851316156141c6576141c6614516565b600160ff1b83900384128116156141df576141df614516565b50500190565b600082198211156141f8576141f8614516565b500190565b60008261420c5761420c61452c565b600160ff1b82146000198414161561422657614226614516565b500590565b60008261423a5761423a61452c565b500490565b600181815b8085111561427a57816000190482111561426057614260614516565b8085161561426d57918102915b93841c9390800290614244565b509250929050565b600061248860ff84168360008261429b575060016106a3565b816142a8575060006106a3565b81600181146142be57600281146142c8576142e4565b60019150506106a3565b60ff8411156142d9576142d9614516565b50506001821b6106a3565b5060208310610133831016604e8410600b8410161715614307575081810a6106a3565b614311838361423f565b806000190482111561432557614325614516565b029392505050565b60006001600160ff1b038184138284138082168684048611161561435357614353614516565b600160ff1b600087128281168783058912161561437257614372614516565b6000871292508782058712848416161561438e5761438e614516565b878505871281841616156143a4576143a4614516565b505050929093029392505050565b60008160001904831182151516156143cc576143cc614516565b500290565b60008083128015600160ff1b8501841216156143ef576143ef614516565b6001600160ff1b038401831381161561440a5761440a614516565b50500390565b60008282101561442257614422614516565b500390565b600060ff821660ff84168082101561444157614441614516565b90039392505050565b60005b8381101561446557818101518382015260200161444d565b838111156128825750506000910152565b600181811c9082168061448a57607f821691505b602082108114156144ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff811182821017156144d7576144d7614558565b6040525050565b60006000198214156144f2576144f2614516565b5060010190565b6000600160ff1b82141561450f5761450f614516565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156145875760046000803e5060005160e01c5b90565b600060443d10156145985790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156145c857505050505090565b82850191508151818111156145e05750505050505090565b843d87010160208285010111156145fa5750505050505090565b614609602082860101876144b1565b509095945050505050565b801515811461117157600080fd5b6001600160e01b03198116811461117157600080fdfe68747470733a2f2f6f63746f6e6674732e73796d62696f7369732e66696e616e63652f7b69647da264697066735822122024564eb74644f14216c8d97a92ce81d620b3e57c547e0af319e32b20a8c7c9fd64736f6c63430008050033'\n\ntype OmniPoolConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: OmniPoolConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class OmniPool__factory extends ContractFactory {\n    constructor(...args: OmniPoolConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'OmniPool'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<OmniPool> {\n        return super.deploy(overrides || {}) as Promise<OmniPool>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): OmniPool {\n        return super.attach(address) as OmniPool\n    }\n    connect(signer: Signer): OmniPool__factory {\n        return super.connect(signer) as OmniPool__factory\n    }\n    static readonly contractName: 'OmniPool'\n    public readonly contractName: 'OmniPool'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): OmniPoolInterface {\n        return new utils.Interface(_abi) as OmniPoolInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): OmniPool {\n        return new Contract(address, _abi, signerOrProvider) as OmniPool\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { OmniPoolOracle, OmniPoolOracleInterface } from '../OmniPoolOracle'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint8',\n                name: 'version',\n                type: 'uint8',\n            },\n        ],\n        name: 'Initialized',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Paused',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Unpaused',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'a',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'devaddr',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_pool',\n                type: 'address',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'lastIndex',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'lpDividendRatio',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'lpFee',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'paused',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pool',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'poolDev',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_id',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'quoteDeposit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'lpTokenToMint',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liabilityToMint',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reward',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_fromAsset',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_toAsset',\n                type: 'uint256',\n            },\n            {\n                internalType: 'int256',\n                name: '_fromAmount',\n                type: 'int256',\n            },\n        ],\n        name: 'quoteFrom',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'actualToAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lpFeeAmount',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_id',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_liquidity',\n                type: 'uint256',\n            },\n        ],\n        name: 'quoteWithdraw',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liabilityToBurn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'fee',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234801561001057600080fd5b506123b1806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80638456cb59116100b2578063c4d66de811610081578063e8fa77a011610066578063e8fa77a01461023b578063f2fde38b1461024e578063f3f6f0d71461026157600080fd5b8063c4d66de814610215578063d49e77cd1461022857600080fd5b80638456cb59146101cc5780638da5cb5b146101d45780639c6f81cb146101e5578063a3602bee146101ed57600080fd5b80635c975abb116100ee5780635c975abb1461019e578063704ce43e146101b4578063715018a6146101bc578063815bfd29146101c457600080fd5b80630dbe671f146101205780630f4d3eaf1461013b57806316f0115b146101695780633f4ba83a14610194575b600080fd5b610128610269565b6040519081526020015b60405180910390f35b61014e610149366004611fde565b610304565b60408051938452602084019290925290820152606001610132565b60975461017c906001600160a01b031681565b6040516001600160a01b039091168152602001610132565b61019c610816565b005b60655460ff166040519015158152602001610132565b61012861087a565b61019c6108d8565b6101286108ea565b61019c610948565b6033546001600160a01b031661017c565b61017c6109aa565b6102006101fb366004612000565b610a40565b60408051928352602083019190915201610132565b61019c610223366004611ee0565b611157565b60985461017c906001600160a01b031681565b61014e610249366004611fde565b6112c1565b61019c61025c366004611ee0565b6117b3565b610128611843565b609754604080517f0dbe671f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691630dbe671f916004808301926020929190829003018186803b1580156102c757600080fd5b505afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190611fc5565b905090565b609754604051634f75b51160e11b815260048101849052600091829182916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103859190611f21565b60600151609754604051634f75b51160e11b81526004810188905286916001600160a01b031690639eeb6a229060240160e06040518083038186803b1580156103cd57600080fd5b505afa1580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104059190611f21565b60200151610413919061226c565b61041d91906120ca565b9150816104715760405162461bcd60e51b815260206004820152600e60248201527f5a65726f206c697175696469747900000000000000000000000000000000000060448201526064015b60405180910390fd5b600061047c8361231d565b609754604051634f75b51160e11b8152600481018990529192506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190611f21565b51609754604051634f75b51160e11b8152600481018a90529192506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b15801561054957600080fd5b505afa15801561055d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105819190611f21565b6020015190506000609760009054906101000a90046001600160a01b03166001600160a01b0316630dbe671f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d757600080fd5b505afa1580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f9190611fc5565b9050600061061d858461202c565b9050600061062b85856118a1565b9050600061064d61063c85846118a1565b610646908461228b565b86906118de565b90506000600261066f61066887670de0b6b3a764000061228b565b8a906118de565b610679908461202c565b610683919061209c565b905060006106b98261069f61069888806121cc565b89906118de565b6106a985806121cc565b6106b3919061202c565b906118fe565b6106c3908361202c565b90506106cf818961228b565b9b5050505050508686106106ee576106e787876122e3565b94506106f2565b8596505b609754604051634f75b51160e11b8152600481018b905261077b916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561073857600080fd5b505afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190611f21565b6080015188906119c2565b609754604051634f75b51160e11b8152600481018c9052919850610809916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b1580156107c657600080fd5b505afa1580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190611f21565b6080015186906119c2565b9450505050509250925092565b6098546001600160a01b031633146108705760405162461bcd60e51b815260206004820152600960248201527f466f7262696464656e00000000000000000000000000000000000000000000006044820152606401610468565b610878611a2a565b565b609754604080517f704ce43e00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163704ce43e916004808301926020929190829003018186803b1580156102c757600080fd5b6108e0611a7c565b6108786000611ad6565b609754604080517f815bfd2900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163815bfd29916004808301926020929190829003018186803b1580156102c757600080fd5b6098546001600160a01b031633146109a25760405162461bcd60e51b815260206004820152600960248201527f466f7262696464656e00000000000000000000000000000000000000000000006044820152606401610468565b610878611b40565b609754604080517f91cca3db00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916391cca3db916004808301926020929190829003018186803b158015610a0857600080fd5b505afa158015610a1c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190611f04565b609754604051634f75b51160e11b81526004810185905260009182918291829182918291610ad6916001600160a01b031690639eeb6a229060240160e06040518083038186803b158015610a9357600080fd5b505afa158015610aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acb9190611f21565b608001518890611b7d565b609754604051634f75b51160e11b8152600481018b90529198506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190611f21565b51609754604080517f0dbe671f000000000000000000000000000000000000000000000000000000008152905192935083926000926001600160a01b031691630dbe671f916004808301926020929190829003018186803b158015610bbc57600080fd5b505afa158015610bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf49190611fc5565b609754604051634f75b51160e11b8152600481018f90529192506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b158015610c3e57600080fd5b505afa158015610c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c769190611f21565b6000015190506000609760009054906101000a90046001600160a01b03166001600160a01b0316639eeb6a228f6040518263ffffffff1660e01b8152600401610cc191815260200190565b60e06040518083038186803b158015610cd957600080fd5b505afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190611f21565b6020015190506000609760009054906101000a90046001600160a01b03166001600160a01b0316639eeb6a228f6040518263ffffffff1660e01b8152600401610d5c91815260200190565b60e06040518083038186803b158015610d7457600080fd5b505afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190611f21565b60200151929850909650909450508315801590610dc857508415155b610e145760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642076616c7565000000000000000000000000000000000000006044820152606401610468565b6000610e5483610e2487806121cc565b610e2e919061209c565b88610e3989806121cc565b610e43919061209c565b610e4d919061202c565b83906118de565b610e5e848961202c565b610e68919061228b565b90506000610e8087610e7a8e8b61202c565b906118a1565b90506000610e8e83886118a1565b87610e9986856118a1565b610ea3908561228b565b610ead908b6121cc565b610eb7919061209c565b610ec1919061228b565b90506000610ecf8286611bd7565b9050600086610ede8a846118de565b610ee8919061228b565b90506000811215610f0357610efc8161231d565b9b50610f07565b809b505b50505088851015610f5a5760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420656e6f756768206361736800000000000000000000000000000000006044820152606401610468565b609754604080517f704ce43e0000000000000000000000000000000000000000000000000000000081529051610ff8926001600160a01b03169163704ce43e916004808301926020929190829003018186803b158015610fb957600080fd5b505afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190611fc5565b8a90611c12565b995060008c13156110145761100d8a8a6122e3565b9a50611018565b889a505b609754604051634f75b51160e11b8152600481018f90526110a1916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561105e57600080fd5b505afa158015611072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110969190611f21565b608001518c906119c2565b9a50611144609760009054906101000a90046001600160a01b03166001600160a01b0316639eeb6a228f6040518263ffffffff1660e01b81526004016110e991815260200190565b60e06040518083038186803b15801561110157600080fd5b505afa158015611115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111399190611f21565b608001518b906119c2565b9950505050505050505050935093915050565b600054610100900460ff16158080156111775750600054600160ff909116105b806111915750303b158015611191575060005460ff166001145b6112035760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610468565b6000805460ff191660011790558015611226576000805461ff0019166101001790555b61122e611c46565b611236611ccb565b609780546001600160a01b0384167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155609880549091163317905580156112bd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b609754604051634f75b51160e11b81526004810184905260009182918291611353916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190611f21565b608001518590611d54565b609754604051634f75b51160e11b81526004810188905291955085916000916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d59190611f21565b51609754604051634f75b51160e11b8152600481018a90529192506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190611f21565b6020015190506000609760009054906101000a90046001600160a01b03166001600160a01b0316630dbe671f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ae57600080fd5b505afa1580156114c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e69190611fc5565b9050816114f557879550611665565b6000611501858561202c565b121561154f5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642076616c7565000000000000000000000000000000000000006044820152606401610468565b600061155b84846118a1565b90506000611569858761202c565b9050600061157784866118de565b6115829060026121cc565b61159e61159786670de0b6b3a764000061228b565b84906118de565b6115a8919061202c565b905060006115c0866115ba87826118de565b906118de565b6115ca84806118de565b6115ec866115d88a8a6121cc565b6115e2919061209c565b610646908b61228b565b6115f6919061228b565b611600919061202c565b90506000816116108760046121cc565b61161a91906121cc565b61162484806121cc565b61162e919061228b565b905060026116538761164084876118fe565b6116498761231d565b610e7a919061202c565b61165d919061209c565b9a5050505050505b87861061167d5761167688876122e3565b9450611681565b8795505b609754604051634f75b51160e11b8152600481018b90526000916001600160a01b031690639eeb6a229060240160e06040518083038186803b1580156116c657600080fd5b505afa1580156116da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fe9190611f21565b60200151905080156117a357609754604051634f75b51160e11b8152600481018c905282916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561174e57600080fd5b505afa158015611762573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117869190611f21565b60600151611794908961226c565b61179e91906120ca565b6117a5565b865b975050505050509250925092565b6117bb611a7c565b6001600160a01b0381166118375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610468565b61184081611ad6565b50565b609754604080517ff3f6f0d700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163f3f6f0d7916004808301926020929190829003018186803b1580156102c757600080fd5b6000816118af60028261209c565b6118c1670de0b6b3a7640000866121cc565b6118cb919061202c565b6118d5919061209c565b90505b92915050565b6000670de0b6b3a76400006118f460028261209c565b6118c184866121cc565b600060038313156119b3576000821380156119195750828213155b15611925575080611955565b60008212801561193d57508261193a8361231d565b13155b156119525761194b8261231d565b9050611955565b50815b6000600282611964818761209c565b61196e919061202c565b611978919061209c565b90505b8181146119ad57905080600281611992818761209c565b61199c919061202c565b6119a6919061209c565b905061197b565b506118d8565b82156118d85750600192915050565b600060128260ff1610156119f7576119db8260126122fa565b6119e690600a612121565b6119f090846120ca565b90506118d8565b60128260ff161115611a2357611a0e6012836122fa565b611a1990600a612121565b6119f0908461226c565b5090919050565b611a32611d84565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6033546001600160a01b031633146108785760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610468565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611b48611dd6565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a5f3390565b600060128260ff161015611bab57611b968260126122fa565b611ba190600a612121565b6119f090846121cc565b60128260ff161115611a2357611bc26012836122fa565b611bcd90600a612121565b6119f0908461209c565b6000600283611c0881670de0b6b3a7640000611bf48760046121cc565b611bfe91906121cc565b6106a988806121cc565b6118cb919061228b565b6000670de0b6b3a7640000611c286002826120ca565b611c32848661226c565b611c3c9190612084565b6118d591906120ca565b600054610100900460ff16611cc35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610468565b610878611e29565b600054610100900460ff16611d485760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610468565b6065805460ff19169055565b600060128260ff161015611d6d57611a0e8260126122fa565b60128260ff161115611a23576119db6012836122fa565b60655460ff166108785760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610468565b60655460ff16156108785760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610468565b600054610100900460ff16611ea65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610468565b61087833611ad6565b8051611eba81612366565b919050565b80518015158114611eba57600080fd5b805160ff81168114611eba57600080fd5b600060208284031215611ef257600080fd5b8135611efd81612366565b9392505050565b600060208284031215611f1657600080fd5b8151611efd81612366565b600060e08284031215611f3357600080fd5b60405160e0810181811067ffffffffffffffff82111715611f6457634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152611f9760808401611ecf565b6080820152611fa860a08401611eaf565b60a0820152611fb960c08401611ebf565b60c08201529392505050565b600060208284031215611fd757600080fd5b5051919050565b60008060408385031215611ff157600080fd5b50508035926020909101359150565b60008060006060848603121561201557600080fd5b505081359360208301359350604090920135919050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156120665761206661233a565b82600160ff1b03841281161561207e5761207e61233a565b50500190565b600082198211156120975761209761233a565b500190565b6000826120ab576120ab612350565b6000198314600160ff1b831416156120c5576120c561233a565b500590565b6000826120d9576120d9612350565b500490565b600181815b808511156121195781600019048211156120ff576120ff61233a565b8085161561210c57918102915b93841c93908002906120e3565b509250929050565b60006118d560ff84168360008261213a575060016118d8565b81612147575060006118d8565b816001811461215d576002811461216757612183565b60019150506118d8565b60ff8411156121785761217861233a565b50506001821b6118d8565b5060208310610133831016604e8410600b84101617156121a6575081810a6118d8565b6121b083836120de565b80600019048211156121c4576121c461233a565b029392505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60008413600084138583048511828216161561220d5761220d61233a565b600160ff1b600087128682058812818416161561222c5761222c61233a565b600087129250878205871284841616156122485761224861233a565b8785058712818416161561225e5761225e61233a565b505050929093029392505050565b60008160001904831182151516156122865761228661233a565b500290565b600080831283600160ff1b018312811516156122a9576122a961233a565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156122dd576122dd61233a565b50500390565b6000828210156122f5576122f561233a565b500390565b600060ff821660ff8416808210156123145761231461233a565b90039392505050565b6000600160ff1b8214156123335761233361233a565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461184057600080fdfea26469706673582212203b7f3bb1aa41c8479d600ab7a7c4738d0a79beab9ad61c6b4563e2091d13d90764736f6c63430008050033'\n\ntype OmniPoolOracleConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: OmniPoolOracleConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class OmniPoolOracle__factory extends ContractFactory {\n    constructor(...args: OmniPoolOracleConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'OmniPoolOracle'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<OmniPoolOracle> {\n        return super.deploy(overrides || {}) as Promise<OmniPoolOracle>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): OmniPoolOracle {\n        return super.attach(address) as OmniPoolOracle\n    }\n    connect(signer: Signer): OmniPoolOracle__factory {\n        return super.connect(signer) as OmniPoolOracle__factory\n    }\n    static readonly contractName: 'OmniPoolOracle'\n    public readonly contractName: 'OmniPoolOracle'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): OmniPoolOracleInterface {\n        return new utils.Interface(_abi) as OmniPoolOracleInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): OmniPoolOracle {\n        return new Contract(address, _abi, signerOrProvider) as OmniPoolOracle\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { OneInchOracle, OneInchOracleInterface } from '../OneInchOracle'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract MultiWrapper',\n                name: '_multiWrapper',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IOracle[]',\n                name: 'existingOracles',\n                type: 'address[]',\n            },\n            {\n                internalType: 'enum OffchainOracle.OracleType[]',\n                name: 'oracleTypes',\n                type: 'uint8[]',\n            },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'existingConnectors',\n                type: 'address[]',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'wBase',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'contract IERC20',\n                name: 'connector',\n                type: 'address',\n            },\n        ],\n        name: 'ConnectorAdded',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'contract IERC20',\n                name: 'connector',\n                type: 'address',\n            },\n        ],\n        name: 'ConnectorRemoved',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'contract MultiWrapper',\n                name: 'multiWrapper',\n                type: 'address',\n            },\n        ],\n        name: 'MultiWrapperUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'contract IOracle',\n                name: 'oracle',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'enum OffchainOracle.OracleType',\n                name: 'oracleType',\n                type: 'uint8',\n            },\n        ],\n        name: 'OracleAdded',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'contract IOracle',\n                name: 'oracle',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'enum OffchainOracle.OracleType',\n                name: 'oracleType',\n                type: 'uint8',\n            },\n        ],\n        name: 'OracleRemoved',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'connector',\n                type: 'address',\n            },\n        ],\n        name: 'addConnector',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IOracle',\n                name: 'oracle',\n                type: 'address',\n            },\n            {\n                internalType: 'enum OffchainOracle.OracleType',\n                name: 'oracleKind',\n                type: 'uint8',\n            },\n        ],\n        name: 'addOracle',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'connectors',\n        outputs: [\n            {\n                internalType: 'contract IERC20[]',\n                name: 'allConnectors',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'srcToken',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'dstToken',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: 'useWrappers',\n                type: 'bool',\n            },\n        ],\n        name: 'getRate',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'weightedRate',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'srcToken',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: 'useSrcWrappers',\n                type: 'bool',\n            },\n        ],\n        name: 'getRateToEth',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'weightedRate',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'multiWrapper',\n        outputs: [\n            {\n                internalType: 'contract MultiWrapper',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'oracles',\n        outputs: [\n            {\n                internalType: 'contract IOracle[]',\n                name: 'allOracles',\n                type: 'address[]',\n            },\n            {\n                internalType: 'enum OffchainOracle.OracleType[]',\n                name: 'oracleTypes',\n                type: 'uint8[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'connector',\n                type: 'address',\n            },\n        ],\n        name: 'removeConnector',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IOracle',\n                name: 'oracle',\n                type: 'address',\n            },\n            {\n                internalType: 'enum OffchainOracle.OracleType',\n                name: 'oracleKind',\n                type: 'uint8',\n            },\n        ],\n        name: 'removeOracle',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract MultiWrapper',\n                name: '_multiWrapper',\n                type: 'address',\n            },\n        ],\n        name: 'setMultiWrapper',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class OneInchOracle__factory {\n    static readonly abi = _abi\n    static createInterface(): OneInchOracleInterface {\n        return new utils.Interface(_abi) as OneInchOracleInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): OneInchOracle {\n        return new Contract(address, _abi, signerOrProvider) as OneInchOracle\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { Pair, PairInterface } from '../Pair'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount0',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount1',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'Burn',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount0',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount1',\n                type: 'uint256',\n            },\n        ],\n        name: 'Mint',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount0In',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount1In',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount0Out',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount1Out',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'Swap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint112',\n                name: 'reserve0',\n                type: 'uint112',\n            },\n            {\n                indexed: false,\n                internalType: 'uint112',\n                name: 'reserve1',\n                type: 'uint112',\n            },\n        ],\n        name: 'Sync',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'MINIMUM_LIQUIDITY',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'PERMIT_TYPEHASH',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        payable: false,\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n        ],\n        name: 'allowance',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'approve',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'burn',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amount0',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount1',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'decimals',\n        outputs: [\n            {\n                internalType: 'uint8',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        payable: false,\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'getReserves',\n        outputs: [\n            {\n                internalType: 'uint112',\n                name: 'reserve0',\n                type: 'uint112',\n            },\n            {\n                internalType: 'uint112',\n                name: 'reserve1',\n                type: 'uint112',\n            },\n            {\n                internalType: 'uint32',\n                name: 'blockTimestampLast',\n                type: 'uint32',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'kLast',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'mint',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'name',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        payable: false,\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n        ],\n        name: 'nonces',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'permit',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'price0CumulativeLast',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'price1CumulativeLast',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'skim',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amount0Out',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount1Out',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'swap',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'symbol',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        payable: false,\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [],\n        name: 'sync',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'token0',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'token1',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'transfer',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'transferFrom',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class Pair__factory {\n    static readonly abi = _abi\n    static createInterface(): PairInterface {\n        return new utils.Interface(_abi) as PairInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): Pair {\n        return new Contract(address, _abi, signerOrProvider) as Pair\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { PartnerFeeCollector, PartnerFeeCollectorInterface } from '../PartnerFeeCollector'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'FeeClaimed',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'fee',\n                type: 'uint256',\n            },\n        ],\n        name: 'FeeCollected',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'feeRate',\n                type: 'uint256',\n            },\n        ],\n        name: 'PartnerActivated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n        ],\n        name: 'PartnerDeactivated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'feeRate',\n                type: 'uint256',\n            },\n        ],\n        name: 'PartnerFeeRateUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'fee',\n                type: 'uint256',\n            },\n        ],\n        name: 'PartnerFixedFeeUpdated',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'WAD',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'feeRate',\n                type: 'uint256',\n            },\n        ],\n        name: 'activatePartner',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_defaultPartner',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_defaultFeeRate',\n                type: 'uint256',\n            },\n        ],\n        name: 'changeDefaultPartner',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'claimFee',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n        ],\n        name: 'collectFee',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'collectedFees',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n        ],\n        name: 'deactivatePartner',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'defaultPartner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'fixedFee',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_defaultPartner',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_defaultFeeRate',\n                type: 'uint256',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'partners',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: 'isActive',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint256',\n                name: 'feeRate',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'feeRate',\n                type: 'uint256',\n            },\n        ],\n        name: 'setFeeRate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'partner',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'newFixedFee',\n                type: 'uint256',\n            },\n        ],\n        name: 'setFixedFee',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class PartnerFeeCollector__factory {\n    static readonly abi = _abi\n    static createInterface(): PartnerFeeCollectorInterface {\n        return new utils.Interface(_abi) as PartnerFeeCollectorInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): PartnerFeeCollector {\n        return new Contract(address, _abi, signerOrProvider) as PartnerFeeCollector\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { Portal, PortalInterface } from '../Portal'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'crossChainID',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'bridgingFee',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'BurnCompleted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'requestId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'clientId',\n                type: 'bytes32',\n            },\n        ],\n        name: 'ClientIdLog',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'MetaRevertRequest',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Paused',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'RevertBurnRequest',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'bridgingFee',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'RevertSynthesizeCompleted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'metaRouter',\n                type: 'address',\n            },\n        ],\n        name: 'SetMetaRouter',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'threshold',\n                type: 'uint256',\n            },\n        ],\n        name: 'SetTokenThreshold',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'activate',\n                type: 'bool',\n            },\n        ],\n        name: 'SetWhitelistToken',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'chainID',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'revertableAddress',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'SynthesizeRequest',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Unpaused',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'bridge',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_bridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_trustedForwarder',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_wrapper',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_whitelistedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IMetaRouter',\n                name: '_metaRouter',\n                type: 'address',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'forwarder',\n                type: 'address',\n            },\n        ],\n        name: 'isTrustedForwarder',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'internalID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'managerChainBridge',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'sourceChainBridge',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'managerChainId',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'sourceChainId',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'router',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'swapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'sourceChainSynthesis',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'burnToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'burnCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'clientID',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaRevertTransaction',\n                name: '_metaRevertTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaRevertRequest',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'metaRouter',\n        outputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'rtoken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'chain2address',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'oppositeBridge',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'syntCaller',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'chainID',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'swapTokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'secondDexRouter',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'secondSwapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'finalReceiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'finalCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'finalOffset',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'revertableAddress',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'clientID',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaSynthesizeTransaction',\n                name: '_metaSynthesizeTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaSynthesize',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_crossChainID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_rToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_finalReceiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_finalCalldata',\n                type: 'bytes',\n            },\n            {\n                internalType: 'uint256',\n                name: '_finalOffset',\n                type: 'uint256',\n            },\n        ],\n        name: 'metaUnsynthesize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'paused',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'requestCount',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'requests',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'chain2address',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'rtoken',\n                type: 'address',\n            },\n            {\n                internalType: 'enum Portal.RequestState',\n                name: 'state',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_internalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainId',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'revertBurnRequest',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'revertSynthesize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: '_metaRouter',\n                type: 'address',\n            },\n        ],\n        name: 'setMetaRouter',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_threshold',\n                type: 'uint256',\n            },\n        ],\n        name: 'setTokenThreshold',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: '_activate',\n                type: 'bool',\n            },\n        ],\n        name: 'setWhitelistToken',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_chain2address',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_revertableAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'synthesize',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_chain2address',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_revertableAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'synthesizeNative',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'approvalData',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'chain2address',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'oppositeBridge',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'revertableAddress',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'chainID',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'clientID',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct Portal.SynthesizeWithPermitTransaction',\n                name: '_syntWithPermitTx',\n                type: 'tuple',\n            },\n        ],\n        name: 'synthesizeWithPermit',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'tokenThreshold',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'tokenWhitelist',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_crossChainID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n        ],\n        name: 'unsynthesize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'unsynthesizeStates',\n        outputs: [\n            {\n                internalType: 'enum Portal.UnsynthesizeState',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'versionRecipient',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'wrapper',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234801561001057600080fd5b506141b0806100206000396000f3fe6080604052600436106101cd5760003560e01c80638bb39802116100f7578063ce654c1711610095578063f2fde38b11610064578063f2fde38b146105bc578063fab92894146105dc578063fb7c7c2a14610619578063fce633c21461063957600080fd5b8063ce654c171461053c578063dbec15bb1461055c578063e78cea921461057c578063eadd5c341461059c57600080fd5b8063ac210cc7116100d1578063ac210cc7146104bc578063b1659a3c146104dc578063c23a4c88146104fc578063c42a28941461051c57600080fd5b80638bb39802146103fe5780638da5cb5b1461041e5780639d8669851461045057600080fd5b80635badbe4c1161016f578063715018a61161013e578063715018a614610384578063753d7563146103995780637c374f99146103c95780638456cb59146103e957600080fd5b80635badbe4c146102fa5780635c975abb14610310578063687752781461032a57806370a082311461035757600080fd5b80632816f4db116101ab5780632816f4db146102345780633f4ba83a1461025a578063486ff0cd1461026f578063572b6c05146102bb57600080fd5b806308759e9b146101d25780631459457a146101f45780631ebe53ef14610214575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613a48565b610659565b005b34801561020057600080fd5b506101f261020f366004613461565b610908565b34801561022057600080fd5b506101f261022f366004613aa4565b610a8b565b610247610242366004613914565b610ca5565b6040519081526020015b60405180910390f35b34801561026657600080fd5b506101f2610e52565b34801561027b57600080fd5b50604080518082018252600581527f322e302e31000000000000000000000000000000000000000000000000000000602082015290516102519190613d09565b3480156102c757600080fd5b506102ea6102d63660046133d7565b6065546001600160a01b0391821691161490565b6040519015158152602001610251565b34801561030657600080fd5b5061024760685481565b34801561031c57600080fd5b506069546102ea9060ff1681565b34801561033657600080fd5b506102476103453660046133d7565b606d6020526000908152604090205481565b34801561036357600080fd5b506102476103723660046133d7565b606c6020526000908152604090205481565b34801561039057600080fd5b506101f2610f1b565b3480156103a557600080fd5b506102ea6103b43660046133d7565b606e6020526000908152604090205460ff1681565b3480156103d557600080fd5b506101f26103e43660046134d2565b610fa0565b3480156103f557600080fd5b506101f261107d565b34801561040a57600080fd5b506101f261041936600461350b565b61112c565b34801561042a57600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610251565b34801561045c57600080fd5b506104ab61046b366004613554565b606a6020526000908152604090208054600182015460028301546003909301546001600160a01b039283169391831692811690600160a01b900460ff1685565b604051610251959493929190613c34565b3480156104c857600080fd5b50606654610438906001600160a01b031681565b3480156104e857600080fd5b506102476104f736600461398e565b6111f6565b34801561050857600080fd5b506101f2610517366004613b02565b61133d565b34801561052857600080fd5b506101f2610537366004613a26565b611646565b34801561054857600080fd5b506102476105573660046136a2565b6118c7565b34801561056857600080fd5b50606f54610438906001600160a01b031681565b34801561058857600080fd5b50606754610438906001600160a01b031681565b3480156105a857600080fd5b506101f26105b73660046133d7565b611a13565b3480156105c857600080fd5b506101f26105d73660046133d7565b611b69565b3480156105e857600080fd5b5061060c6105f7366004613554565b606b6020526000908152604090205460ff1681565b6040516102519190613cf6565b34801561062557600080fd5b50610247610634366004613825565b611c6a565b34801561064557600080fd5b506101f261065436600461356d565b611eb6565b60695460ff16156106a05760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b60448201526064015b60405180910390fd5b600085306106ac612535565b6040805160208101949094526bffffffffffffffffffffffff19606093841b811691850191909152911b16605482015246606882015260880160408051601f198184030181529190528051602090910120905060016000828152606b602052604090205460ff16600281111561072457610724613fe5565b141561077e5760405162461bcd60e51b8152602060048201526024808201527f53796d623a205265616c20746f6b656e7320616c7265616479207472616e7366604482015263195c995960e21b6064820152608401610697565b6000818152606b6020908152604091829020805460ff1916600217905581518083018352601b81527f7265766572744275726e2875696e743235362c62797465733332290000000000908201528151602481018a90526044808201859052835180830390910181526064909101835290810180516001600160e01b03167ff70519ae000000000000000000000000000000000000000000000000000000001790526067549151633675e4e160e11b815290916001600160a01b031690636cebc9c2906108549084908a908a908a90600401613cc0565b600060405180830381600087803b15801561086e57600080fd5b505af1158015610882573d6000803e3d6000fd5b505050505061088f612535565b6001600160a01b0316867f40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b60405160405180910390a3817f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f5876040516108f791815260200190565b60405180910390a250505050505050565b600054610100900460ff166109235760005460ff1615610927565b303b155b6109995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610697565b600054610100900460ff161580156109d857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6109e18561257b565b606780546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff199283161790925560668054878416908316179055606f80548584169216919091179055831615610a54576001600160a01b0383166000908152606e60205260409020805460ff191660011790555b8015610a8357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050505050565b6067546001600160a01b03163314610ae55760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f74207468652062726964676500006044820152606401610697565b60695460ff1615610b275760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6000858152606b602052604081205460ff166002811115610b4a57610b4a613fe5565b14610bbd5760405162461bcd60e51b815260206004820152602660248201527f53796d623a2073796e74686574696320746f6b656e7320656d657267656e637960448201527f556e6275726e00000000000000000000000000000000000000000000000000006064820152608401610697565b6001600160a01b0383166000908152606c6020526040902054610be1908390613f4f565b6001600160a01b0384166000908152606c6020908152604080832093909355878252606b905220805460ff19166001179055610c278382610c228986613f4f565b61261d565b606754610c3f9084906001600160a01b03168861261d565b6001600160a01b03811684867faeef64b7687b985665b6620c7fa271b6f051a3fbe2bfc366fb9c964602eb6d26610c768a87613f4f565b60408051918252602082018c90526001600160a01b0389169082015260600160405180910390a4505050505050565b60695460009060ff1615610cea5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6066546001600160a01b03166000908152606e602052604090205460ff16610d545760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e00000000000000006044820152606401610697565b6066546001600160a01b03166000908152606d6020526040902054341015610dbe5760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c64000000006044820152606401610697565b606660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b5050606654610e4693508b92506001600160a01b03169050348a8a8a8a8a8a612777565b98975050505050505050565b610e5a612535565b6001600160a01b0316610e756033546001600160a01b031690565b6001600160a01b031614610ecb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6069805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610efe612535565b6040516001600160a01b03909116815260200160405180910390a1565b610f23612535565b6001600160a01b0316610f3e6033546001600160a01b031690565b6001600160a01b031614610f945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b610f9e6000612b38565b565b610fa8612535565b6001600160a01b0316610fc36033546001600160a01b031690565b6001600160a01b0316146110195760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6001600160a01b0382166000818152606e6020908152604091829020805460ff19168515159081179091558251938452908301527f0a4552f1105808db6a44587c9ef0a7c4064bf620b9d843b514ad7365bd52239a91015b60405180910390a15050565b611085612535565b6001600160a01b03166110a06033546001600160a01b031690565b6001600160a01b0316146110f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6069805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610efe612535565b611134612535565b6001600160a01b031661114f6033546001600160a01b031690565b6001600160a01b0316146111a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6001600160a01b0382166000818152606d6020908152604091829020849055815192835282018390527fa6742efd4f410d6fd9688a6cf6a15b6d51121097a263056a3576baaacdc4a9ae9101611071565b60695460009060ff161561123b5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6001600160a01b0389166000908152606e602052604090205460ff166112a35760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e00000000000000006044820152606401610697565b6001600160a01b0389166000908152606d602052604090205488101561130b5760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c64000000006044820152606401610697565b61131e89611317612535565b308b612b97565b61132f8a8a8a8a8a8a8a8a8a612777565b9a9950505050505050505050565b6067546001600160a01b031633146113975760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f74207468652062726964676500006044820152606401610697565b60695460ff16156113d95760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6000878152606b602052604081205460ff1660028111156113fc576113fc613fe5565b1461146f5760405162461bcd60e51b815260206004820152602660248201527f53796d623a2073796e74686574696320746f6b656e7320656d657267656e637960448201527f556e6275726e00000000000000000000000000000000000000000000000000006064820152608401610697565b6001600160a01b0384166000908152606c6020526040902054611493908690613f4f565b6001600160a01b038581166000908152606c60209081526040808320949094558a8252606b905291909120805460ff191660011790556067546114d9918691168b61261d565b6114e38986613f4f565b945081516000141561154e576114fa84878761261d565b60408051868152602081018b90526001600160a01b03861681830152905130918a918a917faeef64b7687b985665b6620c7fa271b6f051a3fbe2bfc366fb9c964602eb6d26919081900360600190a461163b565b606f546115669085906001600160a01b03168761261d565b606f546040517ff5b697a50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063f5b697a5906115b990879089908890889088908e90600401613c74565b600060405180830381600087803b1580156115d357600080fd5b505af11580156115e7573d6000803e3d6000fd5b505060408051888152602081018d90526001600160a01b0388168183015290513093508b92508a917faeef64b7687b985665b6620c7fa271b6f051a3fbe2bfc366fb9c964602eb6d26919081900360600190a45b505050505050505050565b6067546001600160a01b031633146116a05760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f74207468652062726964676500006044820152606401610697565b60695460ff16156116e25760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6000818152606a6020526040902060016003820154600160a01b900460ff16600281111561171257611712613fe5565b146117855760405162461bcd60e51b815260206004820152602960248201527f53796d623a207374617465206e6f74206f70656e206f7220747820646f65732060448201527f6e6f7420657869737400000000000000000000000000000000000000000000006064820152608401610697565b600381018054740200000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff82161790915560028201546001600160a01b039091166000908152606c60205260409020546117f19190613f4f565b6003820180546001600160a01b039081166000908152606c6020526040902092909255548254600284015461183493928316929190911690610c22908790613f4f565b6003810154606754611853916001600160a01b0390811691168561261d565b805460028201546001600160a01b039091169083907fefcdf9ea4e65571d2ce9c030c46954e950662df8a7d8bd039fc4417e37b2f88c90611895908790613f4f565b600385015460408051928352602083018990526001600160a01b039091169082015260600160405180910390a3505050565b60695460009060ff161561190c5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6040808301516001600160a01b03166000908152606e602052205460ff166119765760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e00000000000000006044820152606401610697565b6040808301516001600160a01b03166000908152606d6020908152919020549083015110156119e75760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c64000000006044820152606401610697565b611a0282604001516119f7612535565b308560200151612b97565b611a0b82612cf2565b90505b919050565b611a1b612535565b6001600160a01b0316611a366033546001600160a01b031690565b6001600160a01b031614611a8c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6001600160a01b038116611b085760405162461bcd60e51b815260206004820152602760248201527f53796d623a206d657461526f757465722063616e6e6f74206265207a65726f2060448201527f61646472657373000000000000000000000000000000000000000000000000006064820152608401610697565b606f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd5c54ab1d37bfef4dd2253d9d73c292e46f5bd8a67ca5920aab4c2e1993178e79060200160405180910390a150565b611b71612535565b6001600160a01b0316611b8c6033546001600160a01b031690565b6001600160a01b031614611be25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6001600160a01b038116611c5e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610697565b611c6781612b38565b50565b60695460009060ff1615611caf5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6040808301516001600160a01b03166000908152606e602052205460ff16611d195760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e00000000000000006044820152606401610697565b6040808301516001600160a01b03166000908152606d602052205460608301511015611d875760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c64000000006044820152606401610697565b6000806000806000808760200151806020019051810190611da891906133fb565b6040808f015190517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b038089166004830152306024830152604482018890526064820187905260ff8616608483015260a4820185905260c48201849052979d50959b5093995091975095509350919091169063d505accf9060e401600060405180830381600087803b158015611e4657600080fd5b505af1158015611e5a573d6000803e3d6000fd5b50505050505050505050611e7f8260400151611e74612535565b308560600151612b97565b611a0b82600001518360400151846060015185608001518660a001518760c001518860e001518961010001518a6101200151612777565b60695460ff1615611ef85760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b61010081015151156121a4576000816020015130611f14612535565b6040805160208101949094526bffffffffffffffffffffffff19606093841b811691850191909152911b16605482015246606882015260880160408051601f198184030181529190528051602090910120905060016000828152606b602052604090205460ff166002811115611f8c57611f8c613fe5565b1415611fe65760405162461bcd60e51b8152602060048201526024808201527f53796d623a205265616c20746f6b656e7320616c7265616479207472616e7366604482015263195c995960e21b6064820152608401610697565b6000818152606b60209081526040808320805460ff19166002179055805160808101909152604380825290916140ed90830139805190602001208360000151838560e001518661010001518761012001518861014001518961016001516040516024016120599796959493929190613e34565b60408051601f198184030181529181526020820180516001600160e01b03167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260675485830151606087015160a08801519451633675e4e160e11b81529395506001600160a01b0390921693636cebc9c2936120e6938793929091600401613cc0565b600060405180830381600087803b15801561210057600080fd5b505af1158015612114573d6000803e3d6000fd5b50505050612120612535565b6001600160a01b031683602001517f40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b60405160405180910390a38261018001517f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f5846020015160405161219591815260200190565b60405180910390a250506124f0565b61016081015151156123a95760008160200151306121c0612535565b6040805160208101949094526bffffffffffffffffffffffff19606093841b811691850191909152911b16605482015246606882015260880160408051601f198184030181529190528051602090910120905060016000828152606b602052604090205460ff16600281111561223857612238613fe5565b14156122925760405162461bcd60e51b8152602060048201526024808201527f53796d623a205265616c20746f6b656e7320616c7265616479207472616e7366604482015263195c995960e21b6064820152608401610697565b6000818152606b60209081526040808320805460ff19166002179055805160808101909152604280825290916140ab9083013980519060200120836000015183308660800151466122e1612535565b604051602481019690965260448601949094526001600160a01b039283166064860152908216608485015260a48401521660c482015260e40160408051601f198184030181529181526020820180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252606754610120860151606087015160a08801519451633675e4e160e11b81529395506001600160a01b0390921693636cebc9c2936120e6938793929091600401613cc0565b600060405180608001604052806058815260200161405360589139805190602001208260000151836020015184604001518560800151466123e8612535565b610180890151604051602481019790975260448701959095526001600160a01b039384166064870152918316608486015260a48501521660c483015260e48201526101040160408051601f198184030181529181526020820180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252606754610120850151606086015160a08701519451633675e4e160e11b81529395506001600160a01b0390921693636cebc9c2936124bc938793929091600401613cc0565b600060405180830381600087803b1580156124d657600080fd5b505af11580156124ea573d6000803e3d6000fd5b50505050505b6124f8612535565b6001600160a01b031681602001517fbd03c66ec5bd3d01fbf22bc794f68ac88b693023b438724019205a4b42aefb2060405160405180910390a350565b6065546000906001600160a01b031633141561257657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b600054610100900460ff166125e65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610697565b6125ee61316c565b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916126929190613c18565b6000604051808303816000865af19150503d80600081146126cf576040519150601f19603f3d011682016040523d82523d6000602084013e6126d4565b606091505b50915091508180156126fe5750805115806126fe5750808060200190518101906126fe9190613537565b6127705760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610697565b5050505050565b6001600160a01b0388166000908152606c602052604081205461279b908990613f37565b6001600160a01b03808b166000908152606c602052604090209190915584166127c2578693505b6068546040516bffffffffffffffffffffffff193060601b166020820152603481019190915246605482015260740160408051601f1981840301815282825280516020918201209083018190526bffffffffffffffffffffffff1960608a811b8216938501939093529187901b909116605483015260688201859052915060009060880160405160208183030381529060405280519060200120905060006040518060800160405280604b8152602001614130604b91398051602090910120604051602481018e905260448101849052606481018590526001600160a01b03808e1660848301524660a483015260c482018d90528b1660e48201526101040160408051601f198184030181529181526020820180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252815160a0810190925291508061291f612535565b6001600160a01b0390811682528b81166020830152604082018d90528d166060820152608001600190526000838152606a60209081526040918290208351815473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039283161783559285015160018301805485169183169190911790559284015160028083019190915560608501516003830180549485169190951690811785556080860151929492937fffffffffffffffffffffff000000000000000000000000000000000000000000161790600160a01b908490811115612a0357612a03613fe5565b0217905550506068805491506000612a1a83613f96565b9091555050606754604051633675e4e160e11b81526001600160a01b0390911690636cebc9c290612a559084908c908c908b90600401613cc0565b600060405180830381600087803b158015612a6f57600080fd5b505af1158015612a83573d6000803e3d6000fd5b505050505050836001600160a01b031683612a9c612535565b604080518581526001600160a01b038c811660208301529181018d90528d821660608201529116907f31325fe0a1a2e6a5b1e41572156ba5b4e94f0fae7e7f63ec21e9b5ce1e4b3eab9060800160405180910390a4817f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f582604051612b2391815260200190565b60405180910390a29998505050505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691612c149190613c18565b6000604051808303816000865af19150503d8060008114612c51576040519150601f19603f3d011682016040523d82523d6000602084013e612c56565b606091505b5091509150818015612c80575080511580612c80575080806020019051810190612c809190613537565b610a835760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610697565b6020808201516040808401516001600160a01b03166000908152606c909352822054612d1e9190613f37565b6040808401516001600160a01b039081166000908152606c60205291909120919091556101c083015116612d615760608201516001600160a01b03166101c08301525b6068546040516bffffffffffffffffffffffff193060601b166020820152603481019190915246605482015260740160408051601f19818403018152828252805160209182012060808601516101c087015160e08801519386018390526bffffffffffffffffffffffff19606092831b811695870195909552901b9092166054840152606883015291506000906088016040516020818303038152906040528051906020012090506000604051806101a00160405280856000015181526020018560200151815260200184815260200183815260200185604001516001600160a01b0316815260200146815260200185606001516001600160a01b0316815260200185610100015181526020018561012001516001600160a01b0316815260200185610140015181526020018561016001516001600160a01b031681526020018561018001518152602001856101a001518152509050600081604051602401612eca9190613d1c565b60408051601f19818403018152918152602080830180516001600160e01b03167fc29a91bc00000000000000000000000000000000000000000000000000000000179052815160a08101835260c08901516001600160a01b0390811682526060808b0151821683850152928a015182850152928901519092169082015290915060808101600190526000848152606a60209081526040918290208351815473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039283161783559285015160018301805485169183169190911790559284015160028083019190915560608501516003830180549485169190951690811785556080860151929492937fffffffffffffffffffffff000000000000000000000000000000000000000000161790600160a01b90849081111561300c5761300c613fe5565b021790555050606880549150600061302383613f96565b9091555050606754608086015160a087015160e0880151604051633675e4e160e11b81526001600160a01b0390941693636cebc9c29361306c9387939192909190600401613cc0565b600060405180830381600087803b15801561308657600080fd5b505af115801561309a573d6000803e3d6000fd5b5050505050836101c001516001600160a01b03168460e001518560c001516001600160a01b03167f31325fe0a1a2e6a5b1e41572156ba5b4e94f0fae7e7f63ec21e9b5ce1e4b3eab86886060015189602001518a6040015160405161312494939291909384526001600160a01b039283166020850152604084019190915216606082015260800190565b60405180910390a46101e08401516040518481527f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f59060200160405180910390a25050919050565b600054610100900460ff166131d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610697565b6131df6131e7565b610f9e613252565b600054610100900460ff16610f9e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610697565b600054610100900460ff166132bd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610697565b610f9e6132c8612535565b612b38565b8035611a0e8161402f565b600082601f8301126132e957600080fd5b8135602067ffffffffffffffff82111561330557613305613ffb565b8160051b613314828201613f06565b83815282810190868401838801850189101561332f57600080fd5b600093505b8584101561335b5780356133478161402f565b835260019390930192918401918401613334565b50979650505050505050565b600082601f83011261337857600080fd5b813567ffffffffffffffff81111561339257613392613ffb565b6133a56020601f19601f84011601613f06565b8181528460208386010111156133ba57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156133e957600080fd5b81356133f48161402f565b9392505050565b60008060008060008060c0878903121561341457600080fd5b865161341f8161402f565b809650506020870151945060408701519350606087015160ff8116811461344557600080fd5b809350506080870151915060a087015190509295509295509295565b600080600080600060a0868803121561347957600080fd5b85356134848161402f565b945060208601356134948161402f565b935060408601356134a48161402f565b925060608601356134b48161402f565b915060808601356134c48161402f565b809150509295509295909350565b600080604083850312156134e557600080fd5b82356134f08161402f565b9150602083013561350081614044565b809150509250929050565b6000806040838503121561351e57600080fd5b82356135298161402f565b946020939093013593505050565b60006020828403121561354957600080fd5b81516133f481614044565b60006020828403121561356657600080fd5b5035919050565b60006020828403121561357f57600080fd5b813567ffffffffffffffff8082111561359757600080fd5b908301906101a082860312156135ac57600080fd5b6135b4613e94565b82358152602083013560208201526135ce604084016132cd565b60408201526135df606084016132cd565b60608201526135f0608084016132cd565b608082015260a083013560a082015260c083013560c082015261361560e084016132cd565b60e0820152610100808401358381111561362e57600080fd5b61363a88828701613367565b82840152505061012061364e8185016132cd565b908201526101406136608482016132cd565b90820152610160838101358381111561367857600080fd5b61368488828701613367565b91830191909152506101809283013592810192909252509392505050565b6000602082840312156136b457600080fd5b813567ffffffffffffffff808211156136cc57600080fd5b9083019061020082860312156136e157600080fd5b6136e9613ebe565b8235815260208301356020820152613703604084016132cd565b6040820152613714606084016132cd565b6060820152613725608084016132cd565b608082015261373660a084016132cd565b60a082015261374760c084016132cd565b60c082015260e083013560e0820152610100808401358381111561376a57600080fd5b613776888287016132d8565b82840152505061012061378a8185016132cd565b9082015261014083810135838111156137a257600080fd5b6137ae88828701613367565b8284015250506101606137c28185016132cd565b9082015261018083810135838111156137da57600080fd5b6137e688828701613367565b8284015250506101a0915081830135828201526101c091506138098284016132cd565b918101919091526101e091820135918101919091529392505050565b60006020828403121561383757600080fd5b813567ffffffffffffffff8082111561384f57600080fd5b90830190610140828603121561386457600080fd5b61386c613ee2565b8235815260208301358281111561388257600080fd5b61388e87828601613367565b6020830152506138a0604084016132cd565b6040820152606083013560608201526138bb608084016132cd565b60808201526138cc60a084016132cd565b60a08201526138dd60c084016132cd565b60c08201526138ee60e084016132cd565b60e082015261010083810135908201526101209283013592810192909252509392505050565b600080600080600080600060e0888a03121561392f57600080fd5b8735965060208801356139418161402f565b955060408801356139518161402f565b945060608801356139618161402f565b935060808801356139718161402f565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060008060006101208a8c0312156139ad57600080fd5b8935985060208a01356139bf8161402f565b975060408a0135965060608a01356139d68161402f565b955060808a01356139e68161402f565b945060a08a01356139f68161402f565b935060c08a0135613a068161402f565b8093505060e08a013591506101008a013590509295985092959850929598565b60008060408385031215613a3957600080fd5b50508035926020909101359150565b60008060008060008060c08789031215613a6157600080fd5b86359550602087013594506040870135613a7a8161402f565b93506060870135613a8a8161402f565b9598949750929560808101359460a0909101359350915050565b60008060008060008060c08789031215613abd57600080fd5b8635955060208701359450604087013593506060870135613add8161402f565b92506080870135915060a0870135613af48161402f565b809150509295509295509295565b60008060008060008060008060006101208a8c031215613b2157600080fd5b8935985060208a0135975060408a0135965060608a0135613b418161402f565b955060808a0135945060a08a0135613b588161402f565b935060c08a0135613b688161402f565b925060e08a013567ffffffffffffffff811115613b8457600080fd5b613b908c828d01613367565b9250506101008a013590509295985092959850929598565b600081518084526020808501945080840160005b83811015613be15781516001600160a01b031687529582019590820190600101613bbc565b509495945050505050565b60008151808452613c04816020860160208601613f66565b601f01601f19169290920160200192915050565b60008251613c2a818460208701613f66565b9190910192915050565b6001600160a01b0386811682528581166020830152604082018590528316606082015260a08101613c6483614011565b8260808301529695505050505050565b60006001600160a01b038089168352876020840152808716604084015260c06060840152613ca560c0840187613bec565b60808401959095529290921660a09091015250949350505050565b608081526000613cd36080830187613bec565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60208101613d0383614011565b91905290565b6020815260006133f46020830184613bec565b602081528151602082015260208201516040820152604082015160608201526060820151608082015260006080830151613d6160a08401826001600160a01b03169052565b5060a083015160c083015260c0830151613d8660e08401826001600160a01b03169052565b5060e08301516101a06101008181860152613da56101c0860184613ba8565b90860151909250610120613dc3868201836001600160a01b03169052565b80870151915050601f19610140818786030181880152613de38584613bec565b945080880151925050610160613e03818801846001600160a01b03169052565b80880151925050610180818786030181880152613e208584613bec565b970151959092019490945250929392505050565b87815286602082015260006001600160a01b03808816604084015260e06060840152613e6360e0840188613bec565b818716608085015281861660a085015283810360c0850152613e858186613bec565b9b9a5050505050505050505050565b6040516101a0810167ffffffffffffffff81118282101715613eb857613eb8613ffb565b60405290565b604051610200810167ffffffffffffffff81118282101715613eb857613eb8613ffb565b604051610140810167ffffffffffffffff81118282101715613eb857613eb8613ffb565b604051601f8201601f1916810167ffffffffffffffff81118282101715613f2f57613f2f613ffb565b604052919050565b60008219821115613f4a57613f4a613fcf565b500190565b600082821015613f6157613f61613fcf565b500390565b60005b83811015613f81578181015183820152602001613f69565b83811115613f90576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fc857613fc8613fcf565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60038110611c6757634e487b7160e01b600052602160045260246000fd5b6001600160a01b0381168114611c6757600080fd5b8015158114611c6757600080fdfe72657665727453796e74686573697a655265717565737442794272696467652875696e743235362c627974657333322c616464726573732c616464726573732c75696e743235362c616464726573732c62797465733332297265766572744275726e416e644275726e2875696e743235362c627974657333322c616464726573732c616464726573732c75696e743235362c61646472657373297265766572744d6574614275726e2875696e743235362c627974657333322c616464726573732c62797465732c616464726573732c616464726573732c6279746573296d696e7453796e746865746963546f6b656e2875696e743235362c627974657333322c627974657333322c616464726573732c75696e743235362c75696e743235362c6164647265737329a26469706673582212205f794dfc3d082a9fe4634663bdb02d42fadbdfffeee26c417985792d30280c2e64736f6c63430008070033'\n\ntype PortalConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: PortalConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1\n\nexport class Portal__factory extends ContractFactory {\n    constructor(...args: PortalConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'Portal'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Portal> {\n        return super.deploy(overrides || {}) as Promise<Portal>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): Portal {\n        return super.attach(address) as Portal\n    }\n    connect(signer: Signer): Portal__factory {\n        return super.connect(signer) as Portal__factory\n    }\n    static readonly contractName: 'Portal'\n    public readonly contractName: 'Portal'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): PortalInterface {\n        return new utils.Interface(_abi) as PortalInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): Portal {\n        return new Contract(address, _abi, signerOrProvider) as Portal\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { SwapUnlocker, SwapUnlockerInterface } from '../SwapUnlocker'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: 'condition',\n                type: 'bytes',\n            },\n        ],\n        name: 'decodeCondition',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'outToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'outMinAmount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'target',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'targetCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'targetOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct SwapUnlocker.Condition',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'outToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'outMinAmount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'target',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'targetCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'targetOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct SwapUnlocker.Condition',\n                name: 'c',\n                type: 'tuple',\n            },\n        ],\n        name: 'encodeCondition',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'swapper',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'swapCalldata',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct SwapUnlocker.Solution',\n                name: 's',\n                type: 'tuple',\n            },\n        ],\n        name: 'encodeSolution',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: 'metarouter',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'nonce',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Deposit',\n                name: 'deposit',\n                type: 'tuple',\n            },\n            {\n                internalType: 'bytes',\n                name: 'condition',\n                type: 'bytes',\n            },\n            {\n                internalType: 'bytes',\n                name: 'solution',\n                type: 'bytes',\n            },\n        ],\n        name: 'unlock',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234601957604051610cdd61001f8239610cdd90f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806322c0bff8146100525780635937fd8b1461004d578063760bd1181461004857638d8bf0a20361007857610349565b6102ed565b6101fd565b610134565b6001600160a01b031690565b90565b6001600160a01b0381165b0361007857565b600080fd5b9050359061008a82610066565b565b908160609103126100785790565b909182601f830112156100785781359167ffffffffffffffff831161007857602001926001830284011161007857565b919060c083820312610078576100e0818461007d565b926100ee826020830161008c565b92608082013567ffffffffffffffff8111610078578361010f91840161009a565b92909360a082013567ffffffffffffffff811161007857610130920161009a565b9091565b34610078576101536101473660046100ca565b949390939291926106d5565b60405180805b0390f35b908160a09103126100785790565b9060208282031261007857813567ffffffffffffffff811161007857610063920161015d565b60005b8381106101a45750506000910152565b8181015183820152602001610194565b6101d56101de6020936101e8936101c9815190565b80835293849260200190565b95869101610191565b601f01601f191690565b0190565b6020808252610063929101906101b4565b346100785761015961021861021336600461016b565b610a5d565b604051918291826101ec565b9060208282031261007857813567ffffffffffffffff811161007857610130920161009a565b610057610063610063926001600160a01b031690565b6100639061024a565b61006390610260565b61027b90610269565b9052565b90610063906080806102d460a084016102a060008801516000870190610272565b6102af60208801516020870152565b6040878101516001600160a01b031690860152606087015185820360608701526101b4565b940151910152565b60208082526100639291019061027f565b3461007857610159610309610303366004610224565b90610b66565b604051918291826102dc565b908160409103126100785790565b9060208282031261007857813567ffffffffffffffff8111610078576100639201610315565b346100785761015961021861035f366004610323565b610bcb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176103b557604052565b610364565b9061008a6103c760405190565b9283610393565b67ffffffffffffffff81116103b557602090601f01601f19160190565b906103fd6103f8836103ce565b6103ba565b918252565b61040c60136103eb565b7f53776170556e6c6f636b65722e756e6c6f636b00000000000000000000000000602082015290565b610063610402565b6001600160a01b038116610071565b9050359061008a8261043d565b90826000939282370152565b909291926104756103f8826103ce565b93818552818301116100785761008a916020850190610459565b9080601f830112156100785781602061006393359101610465565b919091604081840312610078576104c160406103ba565b926104cc818361044c565b8452602082013567ffffffffffffffff8111610078576104ec920161048f565b6020830152565b9060208282031261007857813567ffffffffffffffff81116100785761006392016104aa565b3561006381610066565b80610071565b3561006381610523565b600091031261007857565b6100636100636100639290565b61027b9061053e565b61008a94610599829897956105896080966105826105a697600060a089019801906001600160a01b03169052565b60208c0152565b6001600160a01b031660408a0152565b87820360608901526101b4565b94019061054b565b6040513d6000823e3d90fd5b9050519061008a82610523565b9060208282031261007857610063916105ba565b156105e257565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6f7574416d6f756e74206973206e6f7420656e6f7567680000000000000000006044820152606490fd5b61064b602b6103eb565b7f696e736964652076616c696461746f722053776170202d206f7574416d6f756e60208201527f742076616c696461746564000000000000000000000000000000000000000000604082015290565b610063610641565b61008a94610599829897956105896080966105826106d097600060a089019801906001600160a01b03169052565b940152565b936106f8610701929694610707946106f36106ee610435565b610be7565b610b66565b938101906104f3565b92610269565b91633add6d5a9061072b602061072461071f88610519565b610269565b9601610529565b602061073e83516001600160a01b031690565b92015190600096863b156100785761077588809461075b60405190565b968795869561076a8b60e01b90565b875260048701610554565b038183885af180156108c257610900575b508382019261079f61071f85516001600160a01b031690565b9360206107ab60405190565b7f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015295869060249082905afa9485156108c2576000956108c7575b5061071f61082f9161081761080f610063602089015190565b8810156105db565b6108226106ee61069a565b516001600160a01b031690565b9161084460408501516001600160a01b031690565b936108556080606083015192015190565b91833b156100785761088a61087f93899793889461087260405190565b9a8b998a98899760e01b90565b8752600487016106a2565b03925af180156108c25761089c575050565b8161008a92903d106108bb575b6108b38183610393565b810190610533565b503d6108a9565b6105ae565b61082f9195506108f161071f9160203d6020116108f9575b6108e98183610393565b8101906105c7565b9591506107f6565b503d6108df565b61091690853d87116108bb576108b38183610393565b38610786565b5061006390602081019061007d565b9050359061008a82610523565b5061006390602081019061092b565b5061006390602081019061044c565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368390030181121561007857016020813591019167ffffffffffffffff82116100785736829003831361007857565b91906101de816109bf816101e89560209181520190565b8095610459565b90610063906080610a47610a3d60a084016109eb6109e4888061091c565b8690610272565b610a026109fb6020890189610938565b6020870152565b610a22610a126040890189610947565b6001600160a01b03166040870152565b610a2f6060880188610956565b9086830360608801526109a8565b9482810190610938565b910152565b6020808252610063929101906109c6565b610063610a6960405190565b8092610a79602083019182610a4c565b90810382520382610393565b61006360a06103ba565b610a97610a85565b60008082526020820181905260408201819052606080830152608082015290565b610063610a8f565b91909160a08184031261007857610ad760a06103ba565b92610ae2818361007d565b8452610af1816020840161092b565b6020850152610b03816040840161044c565b6040850152606082013567ffffffffffffffff81116100785782610b2e83608093610b39960161048f565b60608701520161092b565b6080830152565b9060208282031261007857813567ffffffffffffffff8111610078576100639201610ac0565b61006391610b72610ab8565b50810190610b40565b610063916040810191610bac90610ba2610b958280610947565b6001600160a01b03168452565b6020810190610956565b9160208185039101526109a8565b602080825261006392910190610b7b565b610063610bd760405190565b8092610a79602083019182610bba565b610c2c610c3b61008a92610bfa60405190565b9283916004602084017f41304fac000000000000000000000000000000000000000000000000000000008152016101ec565b60208201810382520382610393565b61008a906001610c97565b60008091610c5c6a636f6e736f6c652e6c6f6790565b602082519201905afa50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600103610c685761008a90610c4656fea2646970667358221220703d176f8e130463a26dc59f39ef81cb409847fb51c7d46559d3596c6124bbb764736f6c634300081c0033'\n\ntype SwapUnlockerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: SwapUnlockerConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class SwapUnlocker__factory extends ContractFactory {\n    constructor(...args: SwapUnlockerConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'SwapUnlocker'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<SwapUnlocker> {\n        return super.deploy(overrides || {}) as Promise<SwapUnlocker>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): SwapUnlocker {\n        return super.attach(address) as SwapUnlocker\n    }\n    connect(signer: Signer): SwapUnlocker__factory {\n        return super.connect(signer) as SwapUnlocker__factory\n    }\n    static readonly contractName: 'SwapUnlocker'\n    public readonly contractName: 'SwapUnlocker'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): SwapUnlockerInterface {\n        return new utils.Interface(_abi) as SwapUnlockerInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): SwapUnlocker {\n        return new Contract(address, _abi, signerOrProvider) as SwapUnlocker\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { SymBtc, SymBtcInterface } from '../SymBtc'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'bridge',\n        outputs: [\n            {\n                internalType: 'contract BridgeV2',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'btcChainId',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'btcTokenAddress',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_btcFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_btcTxId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'SymBtc.BtcInputIndex',\n                name: '_inputIndex',\n                type: 'uint32',\n            },\n            {\n                internalType: 'BtcSerial',\n                name: '_wrapSerial',\n                type: 'uint64',\n            },\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'receiveSideCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'receiveSideOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct SymBtc.FromBTCTransactionTail',\n                name: '_tail',\n                type: 'tuple',\n            },\n        ],\n        name: 'getBTCCalldata',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '_btcTxId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'SymBtc.BtcInputIndex',\n                name: '_inputIndex',\n                type: 'uint32',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n        ],\n        name: 'getBTCExternalID',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '_btcTxId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'SymBtc.BtcInputIndex',\n                name: '_inputIndex',\n                type: 'uint32',\n            },\n        ],\n        name: 'getBTCInternalID',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getBtcTotalSupply',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_btcFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_btcTxId',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'SymBtc.BtcInputIndex',\n                name: '_inputIndex',\n                type: 'uint32',\n            },\n            {\n                internalType: 'BtcSerial',\n                name: '_wrapSerial',\n                type: 'uint64',\n            },\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'receiveSideCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'receiveSideOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct SymBtc.FromBTCTransactionTail',\n                name: '_transactionTail',\n                type: 'tuple',\n            },\n        ],\n        name: 'getHashBTC',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newMPC',\n                type: 'address',\n            },\n        ],\n        name: 'getMpcHash',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSyntToken',\n        outputs: [\n            {\n                internalType: 'contract SyntERC20',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_bridgeAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_synthesisAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_tokenAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainId',\n                type: 'uint256',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'mpc',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'receiveSideCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'receiveSideOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct SymBtc.FromBTCTransactionTail',\n                name: '_transactionTail',\n                type: 'tuple',\n            },\n        ],\n        name: 'packBTCTransactionTail',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'synthesis',\n        outputs: [\n            {\n                internalType: 'contract Synthesis',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: '_transactionTail',\n                type: 'bytes',\n            },\n        ],\n        name: 'unpackBTCTransactionTail',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'receiveSideCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'receiveSideOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct SymBtc.FromBTCTransactionTail',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n]\n\nexport class SymBtc__factory {\n    static readonly abi = _abi\n    static createInterface(): SymBtcInterface {\n        return new utils.Interface(_abi) as SymBtcInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): SymBtc {\n        return new Contract(address, _abi, signerOrProvider) as SymBtc\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { Synthesis, SynthesisInterface } from '../Synthesis'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'BtcSerial',\n                name: 'serial',\n                type: 'uint64',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'bridgingFee',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'BTCSynthesizeCompleted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'chainID',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'revertableAddress',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'BurnRequest',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'BtcSerial',\n                name: 'burnSerial',\n                type: 'uint64',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes',\n                name: 'to',\n                type: 'bytes',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'rtoken',\n                type: 'address',\n            },\n        ],\n        name: 'BurnRequestBTC',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'chainID',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'revertableAddress',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'int8',\n                        name: 'workchain',\n                        type: 'int8',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'address_hash',\n                        type: 'bytes32',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct Synthesis.TonAddress',\n                name: 'to',\n                type: 'tuple',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'BurnRequestTON',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'requestId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'clientId',\n                type: 'bytes32',\n            },\n        ],\n        name: 'ClientIdLog',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'BtcSerial',\n                name: 'burnSerial',\n                type: 'uint64',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'clientId',\n                type: 'bytes32',\n            },\n        ],\n        name: 'ClientIdLogBTC',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Paused',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'bridgingFee',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'RevertBurnCompleted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'RevertSynthesizeRequest',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'fabric',\n                type: 'address',\n            },\n        ],\n        name: 'SetFabric',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'metaRouter',\n                type: 'address',\n            },\n        ],\n        name: 'SetMetaRouter',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'minFee',\n                type: 'uint256',\n            },\n        ],\n        name: 'SetMinFeeBTC',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'threshold',\n                type: 'uint256',\n            },\n        ],\n        name: 'SetTokenThreshold',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'crossChainID',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'bridgingFee',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'SynthesizeCompleted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Unpaused',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'bridge',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_stoken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_chain2address',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_revertableAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'burnSyntheticToken',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: 'internalID',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes',\n                name: '_to',\n                type: 'bytes',\n            },\n            {\n                internalType: 'address',\n                name: '_stoken',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'burnSyntheticTokenBTC',\n        outputs: [\n            {\n                internalType: 'BtcSerial',\n                name: '',\n                type: 'uint64',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_stoken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_crossChainID',\n                type: 'bytes32',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'int8',\n                        name: 'workchain',\n                        type: 'int8',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'address_hash',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct Synthesis.TonAddress',\n                name: '_chain2address',\n                type: 'tuple',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_revertableAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'burnSyntheticTokenTON',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: 'internalID',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'fabric',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_bridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_trustedForwarder',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IMetaRouter',\n                name: '_metaRouter',\n                type: 'address',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'forwarder',\n                type: 'address',\n            },\n        ],\n        name: 'isTrustedForwarder',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'crossChainID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'syntCaller',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'finalReceiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'sToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'finalCallData',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'finalOffset',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'chain2address',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'oppositeBridge',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'revertableAddress',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'chainID',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'clientID',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaBurnTransaction',\n                name: '_metaBurnTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaBurnSyntheticToken',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: 'internalID',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'crossChainID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'externalID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenReal',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'chainID',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'swapTokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'secondDexRouter',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'secondSwapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'finalReceiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'finalCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'finalOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaMintTransaction',\n                name: '_metaMintTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaMintSyntheticToken',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'BtcSerial',\n                        name: 'serial',\n                        type: 'uint64',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'crossChainID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'externalID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenReal',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'chainID',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'receiveSideCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'receiveSideOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaMintTransactionBTC',\n                name: '_metaMintTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaMintSyntheticTokenBTC',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'metaRouter',\n        outputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_crossChainID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_tokenReal',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n        ],\n        name: 'mintSyntheticToken',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'paused',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'realToBurnSerialBTC',\n        outputs: [\n            {\n                internalType: 'BtcSerial',\n                name: '',\n                type: 'uint64',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'realToMintSerialBTC',\n        outputs: [\n            {\n                internalType: 'BtcSerial',\n                name: '',\n                type: 'uint64',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'requestCount',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'requests',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'chain2address',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'stoken',\n                type: 'address',\n            },\n            {\n                internalType: 'enum Synthesis.RequestState',\n                name: 'state',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'revertBurn',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_revertableAddress',\n                type: 'address',\n            },\n        ],\n        name: 'revertBurnAndBurn',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_router',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_swapCalldata',\n                type: 'bytes',\n            },\n            {\n                internalType: 'address',\n                name: '_synthesis',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_burnToken',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_burnCalldata',\n                type: 'bytes',\n            },\n        ],\n        name: 'revertMetaBurn',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_internalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'revertSynthesizeRequest',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_internalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_sender',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'revertSynthesizeRequestByBridge',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_fabric',\n                type: 'address',\n            },\n        ],\n        name: 'setFabric',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: '_metaRouter',\n                type: 'address',\n            },\n        ],\n        name: 'setMetaRouter',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_synt',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_minFee',\n                type: 'uint256',\n            },\n        ],\n        name: 'setMinFeeBTC',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_threshold',\n                type: 'uint256',\n            },\n        ],\n        name: 'setTokenThreshold',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'syntToMinFeeBTC',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'synthesizeStates',\n        outputs: [\n            {\n                internalType: 'enum Synthesis.SynthesizeState',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'tokenThreshold',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'versionRecipient',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n]\n\nexport class Synthesis__factory {\n    static readonly abi = _abi\n    static createInterface(): SynthesisInterface {\n        return new utils.Interface(_abi) as SynthesisInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): Synthesis {\n        return new Contract(address, _abi, signerOrProvider) as Synthesis\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { ThorRouter, ThorRouterInterface } from '../ThorRouter'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'rune',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'asset',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'Deposit',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'oldVault',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newVault',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'asset',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'TransferAllowance',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'asset',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'TransferOut',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'target',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'finalAsset',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'TransferOutAndCall',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'oldVault',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newVault',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'asset',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct THORChain_Router.Coin[]',\n                name: 'coins',\n                type: 'tuple[]',\n            },\n            {\n                indexed: false,\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'VaultTransfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'RUNE',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address payable',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'asset',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'deposit',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address payable',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'asset',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expiration',\n                type: 'uint256',\n            },\n        ],\n        name: 'depositWithExpiry',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'router',\n                type: 'address',\n            },\n            {\n                internalType: 'address payable',\n                name: 'asgard',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'asset',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct THORChain_Router.Coin[]',\n                name: 'coins',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'returnVaultAssets',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'router',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'newVault',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'asset',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'transferAllowance',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address payable',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'asset',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'transferOut',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address payable',\n                name: 'aggregator',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'finalToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'string',\n                name: 'memo',\n                type: 'string',\n            },\n        ],\n        name: 'transferOutAndCall',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'vaultAllowance',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n]\n\nexport class ThorRouter__factory {\n    static readonly abi = _abi\n    static createInterface(): ThorRouterInterface {\n        return new utils.Interface(_abi) as ThorRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): ThorRouter {\n        return new Contract(address, _abi, signerOrProvider) as ThorRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { TonBridge, TonBridgeInterface } from '../TonBridge'\n\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'newBridgeChainId',\n                type: 'uint256',\n            },\n        ],\n        name: 'ChangeBridgeChainId',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'newBroadcaster',\n                type: 'address',\n            },\n        ],\n        name: 'ChangeBroadcaster',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'newBridge',\n                type: 'address',\n            },\n        ],\n        name: 'ChangeSymbiosisBridge',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'newBridge',\n                type: 'address',\n            },\n        ],\n        name: 'ChangeTonBridge',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'bridgeChainId',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'broadcaster',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'int8',\n                        name: 'workchain',\n                        type: 'int8',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'address_hash',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct TonBridge.TonAddress',\n                name: '_tonAddress',\n                type: 'tuple',\n            },\n        ],\n        name: 'callBridgeRequest',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_newBridgeChainId',\n                type: 'uint256',\n            },\n        ],\n        name: 'changeBridgeChainId',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newBroadcaster',\n                type: 'address',\n            },\n        ],\n        name: 'changeBroadcaster',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newSymbiosisBridge',\n                type: 'address',\n            },\n        ],\n        name: 'changeSymbiosisBridge',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newTonBridge',\n                type: 'address',\n            },\n        ],\n        name: 'changeTonBridge',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_tonBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_symbiosisBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_bridgeChainId',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_broadcaster',\n                type: 'address',\n            },\n        ],\n        name: 'initialize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbiosisBridge',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'tonBridge',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class TonBridge__factory {\n    static readonly abi = _abi\n    static createInterface(): TonBridgeInterface {\n        return new utils.Interface(_abi) as TonBridgeInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): TonBridge {\n        return new Contract(address, _abi, signerOrProvider) as TonBridge\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { UniLikeRouter, UniLikeRouterInterface } from '../UniLikeRouter'\n\nconst _abi = [\n    {\n        inputs: [],\n        name: 'WETH',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountADesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenDesired',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidityETH',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'getAmountIn',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'getAmountOut',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n        ],\n        name: 'getAmountsIn',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n        ],\n        name: 'getAmountsOut',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'reserveB',\n                type: 'uint256',\n            },\n        ],\n        name: 'quote',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidity',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETH',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityETHSupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityETHWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountToken',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountTokenMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountETHMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountETH',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'liquidity',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountAMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountBMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bool',\n                name: 'approveMax',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'removeLiquidityWithPermit',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountA',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountB',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapETHForExactTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactETHForTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactETHForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForETH',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForETHSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountInMax',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapTokensForExactETH',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountInMax',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'swapTokensForExactTokens',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amounts',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class UniLikeRouter__factory {\n    static readonly abi = _abi\n    static createInterface(): UniLikeRouterInterface {\n        return new utils.Interface(_abi) as UniLikeRouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): UniLikeRouter {\n        return new Contract(address, _abi, signerOrProvider) as UniLikeRouter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { UniV3Factory, UniV3FactoryInterface } from '../UniV3Factory'\n\nconst _abi = [\n    {\n        inputs: [],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                indexed: true,\n                internalType: 'int24',\n                name: 'tickSpacing',\n                type: 'int24',\n            },\n        ],\n        name: 'FeeAmountEnabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'oldOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token0',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token1',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                indexed: false,\n                internalType: 'int24',\n                name: 'tickSpacing',\n                type: 'int24',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolCreated',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'tokenA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'tokenB',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n        ],\n        name: 'createPool',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                internalType: 'int24',\n                name: 'tickSpacing',\n                type: 'int24',\n            },\n        ],\n        name: 'enableFeeAmount',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint24',\n                name: '',\n                type: 'uint24',\n            },\n        ],\n        name: 'feeAmountTickSpacing',\n        outputs: [\n            {\n                internalType: 'int24',\n                name: '',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: '',\n                type: 'uint24',\n            },\n        ],\n        name: 'getPool',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'parameters',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'token0',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'token1',\n                type: 'address',\n            },\n            {\n                internalType: 'uint24',\n                name: 'fee',\n                type: 'uint24',\n            },\n            {\n                internalType: 'int24',\n                name: 'tickSpacing',\n                type: 'int24',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_owner',\n                type: 'address',\n            },\n        ],\n        name: 'setOwner',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class UniV3Factory__factory {\n    static readonly abi = _abi\n    static createInterface(): UniV3FactoryInterface {\n        return new utils.Interface(_abi) as UniV3FactoryInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): UniV3Factory {\n        return new Contract(address, _abi, signerOrProvider) as UniV3Factory\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { UniV3Quoter, UniV3QuoterInterface } from '../UniV3Quoter'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_WETH9',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'WETH9',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: 'path',\n                type: 'bytes',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n        ],\n        name: 'quoteExactInput',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint160[]',\n                name: 'sqrtPriceX96AfterList',\n                type: 'uint160[]',\n            },\n            {\n                internalType: 'uint32[]',\n                name: 'initializedTicksCrossedList',\n                type: 'uint32[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'gasEstimate',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'uint160',\n                        name: 'sqrtPriceLimitX96',\n                        type: 'uint160',\n                    },\n                ],\n                internalType: 'struct IQuoterV2.QuoteExactInputSingleParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'quoteExactInputSingle',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint160',\n                name: 'sqrtPriceX96After',\n                type: 'uint160',\n            },\n            {\n                internalType: 'uint32',\n                name: 'initializedTicksCrossed',\n                type: 'uint32',\n            },\n            {\n                internalType: 'uint256',\n                name: 'gasEstimate',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: 'path',\n                type: 'bytes',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'quoteExactOutput',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint160[]',\n                name: 'sqrtPriceX96AfterList',\n                type: 'uint160[]',\n            },\n            {\n                internalType: 'uint32[]',\n                name: 'initializedTicksCrossedList',\n                type: 'uint32[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'gasEstimate',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'uint160',\n                        name: 'sqrtPriceLimitX96',\n                        type: 'uint160',\n                    },\n                ],\n                internalType: 'struct IQuoterV2.QuoteExactOutputSingleParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'quoteExactOutputSingle',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint160',\n                name: 'sqrtPriceX96After',\n                type: 'uint160',\n            },\n            {\n                internalType: 'uint32',\n                name: 'initializedTicksCrossed',\n                type: 'uint32',\n            },\n            {\n                internalType: 'uint256',\n                name: 'gasEstimate',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int256',\n                name: 'amount0Delta',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'amount1Delta',\n                type: 'int256',\n            },\n            {\n                internalType: 'bytes',\n                name: 'path',\n                type: 'bytes',\n            },\n        ],\n        name: 'uniswapV3SwapCallback',\n        outputs: [],\n        stateMutability: 'view',\n        type: 'function',\n    },\n]\n\nexport class UniV3Quoter__factory {\n    static readonly abi = _abi\n    static createInterface(): UniV3QuoterInterface {\n        return new utils.Interface(_abi) as UniV3QuoterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): UniV3Quoter {\n        return new Contract(address, _abi, signerOrProvider) as UniV3Quoter\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { UniV3Router, UniV3RouterInterface } from '../UniV3Router'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factory',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_WETH9',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'WETH9',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'path',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountOutMinimum',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct ISwapRouter.ExactInputParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'exactInput',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountOutMinimum',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint160',\n                        name: 'sqrtPriceLimitX96',\n                        type: 'uint160',\n                    },\n                ],\n                internalType: 'struct ISwapRouter.ExactInputSingleParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'exactInputSingle',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'path',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountInMaximum',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct ISwapRouter.ExactOutputParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'exactOutput',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountInMaximum',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint160',\n                        name: 'sqrtPriceLimitX96',\n                        type: 'uint160',\n                    },\n                ],\n                internalType: 'struct ISwapRouter.ExactOutputSingleParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'exactOutputSingle',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int256',\n                name: 'amount0Delta',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'amount1Delta',\n                type: 'int256',\n            },\n            {\n                internalType: 'bytes',\n                name: '_data',\n                type: 'bytes',\n            },\n        ],\n        name: 'hyperswapV3SwapCallback',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'multicall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'results',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'refundETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'selfPermit',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'nonce',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expiry',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'selfPermitAllowed',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'nonce',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expiry',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'selfPermitAllowedIfNecessary',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'selfPermitIfNecessary',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n        ],\n        name: 'sweepToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'feeBips',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'feeRecipient',\n                type: 'address',\n            },\n        ],\n        name: 'sweepTokenWithFee',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n        ],\n        name: 'unwrapWETH9',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'feeBips',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'feeRecipient',\n                type: 'address',\n            },\n        ],\n        name: 'unwrapWETH9WithFee',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n]\n\nexport class UniV3Router__factory {\n    static readonly abi = _abi\n    static createInterface(): UniV3RouterInterface {\n        return new utils.Interface(_abi) as UniV3RouterInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): UniV3Router {\n        return new Contract(address, _abi, signerOrProvider) as UniV3Router\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { UniV3Router02, UniV3Router02Interface } from '../UniV3Router02'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_factoryV2',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'factoryV3',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_positionManager',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_WETH9',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'WETH9',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'approveMax',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'approveMaxMinusOne',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'approveZeroThenMax',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'approveZeroThenMaxMinusOne',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: 'data',\n                type: 'bytes',\n            },\n        ],\n        name: 'callPositionManager',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: 'result',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'paths',\n                type: 'bytes[]',\n            },\n            {\n                internalType: 'uint128[]',\n                name: 'amounts',\n                type: 'uint128[]',\n            },\n            {\n                internalType: 'uint24',\n                name: 'maximumTickDivergence',\n                type: 'uint24',\n            },\n            {\n                internalType: 'uint32',\n                name: 'secondsAgo',\n                type: 'uint32',\n            },\n        ],\n        name: 'checkOracleSlippage',\n        outputs: [],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: 'path',\n                type: 'bytes',\n            },\n            {\n                internalType: 'uint24',\n                name: 'maximumTickDivergence',\n                type: 'uint24',\n            },\n            {\n                internalType: 'uint32',\n                name: 'secondsAgo',\n                type: 'uint32',\n            },\n        ],\n        name: 'checkOracleSlippage',\n        outputs: [],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'path',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountOutMinimum',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IV3SwapRouter.ExactInputParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'exactInput',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountOutMinimum',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint160',\n                        name: 'sqrtPriceLimitX96',\n                        type: 'uint160',\n                    },\n                ],\n                internalType: 'struct IV3SwapRouter.ExactInputSingleParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'exactInputSingle',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'path',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountInMaximum',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IV3SwapRouter.ExactOutputParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'exactOutput',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountInMaximum',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint160',\n                        name: 'sqrtPriceLimitX96',\n                        type: 'uint160',\n                    },\n                ],\n                internalType: 'struct IV3SwapRouter.ExactOutputSingleParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'exactOutputSingle',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factory',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'factoryV2',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'getApprovalType',\n        outputs: [\n            {\n                internalType: 'enum IApproveAndCall.ApprovalType',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'token0',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'token1',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'tokenId',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount0Min',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount1Min',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IApproveAndCall.IncreaseLiquidityParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'increaseLiquidity',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: 'result',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'token0',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'token1',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint24',\n                        name: 'fee',\n                        type: 'uint24',\n                    },\n                    {\n                        internalType: 'int24',\n                        name: 'tickLower',\n                        type: 'int24',\n                    },\n                    {\n                        internalType: 'int24',\n                        name: 'tickUpper',\n                        type: 'int24',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount0Min',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount1Min',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct IApproveAndCall.MintParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'mint',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: 'result',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: 'previousBlockhash',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'multicall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: '',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'multicall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: '',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'multicall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'results',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'positionManager',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'pull',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'refundETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'selfPermit',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'nonce',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expiry',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'selfPermitAllowed',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'nonce',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expiry',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'selfPermitAllowedIfNecessary',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint8',\n                name: 'v',\n                type: 'uint8',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'r',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: 's',\n                type: 'bytes32',\n            },\n        ],\n        name: 'selfPermitIfNecessary',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountOutMin',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'swapExactTokensForTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountInMax',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'path',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'swapTokensForExactTokens',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n        ],\n        name: 'sweepToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n        ],\n        name: 'sweepToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'feeBips',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'feeRecipient',\n                type: 'address',\n            },\n        ],\n        name: 'sweepTokenWithFee',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'feeBips',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'feeRecipient',\n                type: 'address',\n            },\n        ],\n        name: 'sweepTokenWithFee',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int256',\n                name: 'amount0Delta',\n                type: 'int256',\n            },\n            {\n                internalType: 'int256',\n                name: 'amount1Delta',\n                type: 'int256',\n            },\n            {\n                internalType: 'bytes',\n                name: '_data',\n                type: 'bytes',\n            },\n        ],\n        name: 'uniswapV3SwapCallback',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n        ],\n        name: 'unwrapWETH9',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapWETH9',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'feeBips',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'feeRecipient',\n                type: 'address',\n            },\n        ],\n        name: 'unwrapWETH9WithFee',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountMinimum',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'feeBips',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'feeRecipient',\n                type: 'address',\n            },\n        ],\n        name: 'unwrapWETH9WithFee',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n]\n\nexport class UniV3Router02__factory {\n    static readonly abi = _abi\n    static createInterface(): UniV3Router02Interface {\n        return new utils.Interface(_abi) as UniV3Router02Interface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): UniV3Router02 {\n        return new Contract(address, _abi, signerOrProvider) as UniV3Router02\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { Unwrapper, UnwrapperInterface } from '../Unwrapper'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_wrapper',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_newWrapper',\n                type: 'address',\n            },\n        ],\n        name: 'setWrapper',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_amountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n        ],\n        name: 'unwrap',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'wrapper',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n]\n\nexport class Unwrapper__factory {\n    static readonly abi = _abi\n    static createInterface(): UnwrapperInterface {\n        return new utils.Interface(_abi) as UnwrapperInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): Unwrapper {\n        return new Contract(address, _abi, signerOrProvider) as Unwrapper\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { Weth, WethInterface } from '../Weth'\n\nconst _abi = [\n    {\n        constant: true,\n        inputs: [],\n        name: 'name',\n        outputs: [\n            {\n                name: '',\n                type: 'string',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: 'guy',\n                type: 'address',\n            },\n            {\n                name: 'wad',\n                type: 'uint256',\n            },\n        ],\n        name: 'approve',\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: 'src',\n                type: 'address',\n            },\n            {\n                name: 'dst',\n                type: 'address',\n            },\n            {\n                name: 'wad',\n                type: 'uint256',\n            },\n        ],\n        name: 'transferFrom',\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: 'wad',\n                type: 'uint256',\n            },\n        ],\n        name: 'withdraw',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'decimals',\n        outputs: [\n            {\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'symbol',\n        outputs: [\n            {\n                name: '',\n                type: 'string',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: 'dst',\n                type: 'address',\n            },\n            {\n                name: 'wad',\n                type: 'uint256',\n            },\n        ],\n        name: 'transfer',\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [],\n        name: 'deposit',\n        outputs: [],\n        payable: true,\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: '',\n                type: 'address',\n            },\n            {\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'allowance',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        payable: true,\n        stateMutability: 'payable',\n        type: 'fallback',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'src',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'guy',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'wad',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'src',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                name: 'dst',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'wad',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'dst',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'wad',\n                type: 'uint256',\n            },\n        ],\n        name: 'Deposit',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: 'src',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                name: 'wad',\n                type: 'uint256',\n            },\n        ],\n        name: 'Withdrawal',\n        type: 'event',\n    },\n]\n\nexport class Weth__factory {\n    static readonly abi = _abi\n    static createInterface(): WethInterface {\n        return new utils.Interface(_abi) as WethInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): Weth {\n        return new Contract(address, _abi, signerOrProvider) as Weth\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'\nimport { Provider, TransactionRequest } from '@ethersproject/providers'\nimport type { WithdrawUnlocker, WithdrawUnlockerInterface } from '../WithdrawUnlocker'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'SafeERC20FailedOperation',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes',\n                name: 'condition',\n                type: 'bytes',\n            },\n        ],\n        name: 'decodeCondition',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct WithdrawUnlocker.Condition',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct WithdrawUnlocker.Condition',\n                name: 'c',\n                type: 'tuple',\n            },\n        ],\n        name: 'encodeCondition',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'encodeSolution',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: 'metarouter',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'transfer',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: 'metarouter',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'nonce',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct DepositoryTypes.Deposit',\n                name: 'deposit',\n                type: 'tuple',\n            },\n            {\n                internalType: 'bytes',\n                name: 'condition',\n                type: 'bytes',\n            },\n            {\n                internalType: 'bytes',\n                name: 'solution',\n                type: 'bytes',\n            },\n        ],\n        name: 'unlock',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nconst _bytecode =\n    '0x608060405234601957604051610ba761001f8239610ba790f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806322c0bff8146100625780635554dbd81461005d578063760bd118146100585780639bbd27b2146100535763f18d03cc0361008857610313565b61028d565b610235565b6101e4565b610144565b6001600160a01b031690565b90565b6001600160a01b0381165b0361008857565b600080fd5b9050359061009a82610076565b565b908160609103126100885790565b909182601f830112156100885781359167ffffffffffffffff831161008857602001926001830284011161008857565b919060c083820312610088576100f0818461008d565b926100fe826020830161009c565b92608082013567ffffffffffffffff8111610088578361011f9184016100aa565b92909360a082013567ffffffffffffffff81116100885761014092016100aa565b9091565b34610088576101636101573660046100da565b949390939291926105fe565b60405180805b0390f35b600091031261008857565b60005b83811061018b5750506000910152565b818101518382015260200161017b565b6101bc6101c56020936101cf936101b0815190565b80835293849260200190565b95869101610178565b601f01601f191690565b0190565b60208082526100739291019061019b565b34610088576101f436600461016d565b6101696101ff610770565b604051918291826101d3565b9060208282031261008857813567ffffffffffffffff81116100885761014092016100aa565b9052565b346100885761016961025161024b36600461020b565b906107e5565b6040519182918290516001600160a01b0316815260200190565b908160209103126100885790565b90602082820312610088576100739161026b565b34610088576101696101ff6102a3366004610279565b610839565b6001600160a01b038116610081565b9050359061009a826102a8565b80610081565b9050359061009a826102c4565b608081830312610088576102eb828261008d565b926100736102fc846020850161008d565b93606061030c82604087016102b7565b94016102ca565b34610088576101636103263660046102d7565b929190916108b6565b6100736100736100739290565b1561034357565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5769746864726177556e6c6f636b657220736f6c7574696f6e2073686f756c6460448201527f20626520656d7074790000000000000000000000000000000000000000000000606482015280608481015b0390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761041e57604052565b6103cd565b9061009a61043060405190565b92836103fc565b67ffffffffffffffff811161041e57602090601f01601f19160190565b9061046661046183610437565b610423565b918252565b6104756022610454565b7f5769746864726177556e6c6f636b65722e756e6c6f636b28726563697069656e60208201527f7429000000000000000000000000000000000000000000000000000000000000604082015290565b61007361046b565b610067610073610073926001600160a01b031690565b610073906104cc565b610073906104e2565b3561007381610076565b35610073816102c4565b61052161051b6100739263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b610231906104eb565b61058b61009a9461057b606094989795610571608086019a6000870190610546565b6020850190610546565b6001600160a01b03166040830152565b0152565b6102319061032f565b61009a946105dd829897956105cd6080966105c66105ea97600060a089019801906001600160a01b03169052565b60208c0152565b6001600160a01b031660408a0152565b878203606089015261019b565b94019061058f565b6040513d6000823e3d90fd5b916106cd6106d26106d8926106406106de959761061f61063b9b60049b5090565b9260009b8c946106356106318761032f565b9190565b1461033c565b6107e5565b019461066361065687516001600160a01b031690565b61065e6104c4565b61090e565b6106cd898801966106be602061068961067b8b6104f4565b93516001600160a01b031690565b9a01996106958b6104fe565b906106a363f18d03cc610508565b93866106ae60405190565b9e8f96602088019081520161054f565b602082018103825203896103fc565b6104eb565b936104f4565b926104fe565b906106e8306104eb565b91813b15610088578580946107338261070060405190565b988997889687957f3add6d5a00000000000000000000000000000000000000000000000000000000875260048701610598565b03925af1801561076b57610745575050565b8161009a92903d10610764575b61075c81836103fc565b81019061016d565b503d610752565b6105f2565b6040516100738160208101805b908103825203826103fc565b6100736020610423565b61079b610789565b9060008252565b610073610793565b9190602083820312610088576107cd9060006107c66020610423565b94016102b7565b8252565b9060208282031261008857610073916107aa565b610073916107f16107a2565b508101906107d1565b506100739060208101906102b7565b61009a919060009061081b90806107fa565b6001600160a01b0316910152565b60208101929161009a9190610809565b61007361084560405190565b809261077d602083019182610829565b61085f6033610454565b7f5769746864726177556e6c6f636b65722e7472616e7366657228746f6b656e2c60208201527f20726563697069656e742c20616d6f756e742900000000000000000000000000604082015290565b610073610855565b906108db61009a9493926106cd85856108ce866104eb565b6108d66108ae565b6109a0565b90610a0b565b929160206108fe61009a936040870190878203600089015261019b565b9401906001600160a01b03169052565b9061096361009a9261095461092260405190565b9384926004602085017f319af333000000000000000000000000000000000000000000000000000000008152016108e1565b602082018103825203826103fc565b610a55565b61058b61009a9461057b61098e606095999896996080860190868203600088015261019b565b6001600160a01b039099166020850152565b61095461009a9461096393946109b560405190565b9586946004602087017f8ef3f39900000000000000000000000000000000000000000000000000000000815201610968565b6001600160a01b0391821681529116602082015260608101929161009a9160400152565b90610a5090610a4161009a95600495610a276323b872dd610508565b93610a3160405190565b97889560208701908152016109e7565b602082018103825203836103fc565b610a60565b61009a906001610b61565b906000602091610a6e600090565b50828151910182855af1156105f2573d90600051600092610a916106318561032f565b03610afc5750610aa0816104eb565b3b610aad6106318461032f565b145b610ab7575050565b6103c9610ac483926104eb565b7f5274afe70000000000000000000000000000000000000000000000000000000083526001600160a01b031660048301526024820190565b610b09610631600161032f565b1415610aaf565b60008091610b266a636f6e736f6c652e6c6f6790565b602082519201905afa50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600103610b325761009a90610b1056fea26469706673582212201be08d6a83a1a9933f37b101875c39c7aea55d9af053a01792f9c6e742cedf1064736f6c634300081c0033'\n\ntype WithdrawUnlockerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>\n\nconst isSuperArgs = (xs: WithdrawUnlockerConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>\n    xs.length > 1\n\nexport class WithdrawUnlocker__factory extends ContractFactory {\n    constructor(...args: WithdrawUnlockerConstructorParams) {\n        if (isSuperArgs(args)) {\n            super(...args)\n        } else {\n            super(_abi, _bytecode, args[0])\n        }\n        this.contractName = 'WithdrawUnlocker'\n    }\n\n    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<WithdrawUnlocker> {\n        return super.deploy(overrides || {}) as Promise<WithdrawUnlocker>\n    }\n    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {\n        return super.getDeployTransaction(overrides || {})\n    }\n    attach(address: string): WithdrawUnlocker {\n        return super.attach(address) as WithdrawUnlocker\n    }\n    connect(signer: Signer): WithdrawUnlocker__factory {\n        return super.connect(signer) as WithdrawUnlocker__factory\n    }\n    static readonly contractName: 'WithdrawUnlocker'\n    public readonly contractName: 'WithdrawUnlocker'\n    static readonly bytecode = _bytecode\n    static readonly abi = _abi\n    static createInterface(): WithdrawUnlockerInterface {\n        return new utils.Interface(_abi) as WithdrawUnlockerInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): WithdrawUnlocker {\n        return new Contract(address, _abi, signerOrProvider) as WithdrawUnlocker\n    }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from 'ethers'\nimport { Provider } from '@ethersproject/providers'\nimport type { WTON, WTONInterface } from '../WTON'\n\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: 'string',\n                name: 'name_',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: 'symbol_',\n                type: 'string',\n            },\n            {\n                internalType: 'address[]',\n                name: 'initialSet',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'int256',\n                name: 'oracleSetHash',\n                type: 'int256',\n            },\n            {\n                indexed: false,\n                internalType: 'address[]',\n                name: 'newOracles',\n                type: 'address[]',\n            },\n        ],\n        name: 'NewOracleSet',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'int8',\n                name: 'to_wc',\n                type: 'int8',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'to_addr_hash',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapEthToTon',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'int8',\n                name: 'workchain',\n                type: 'int8',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'ton_address_hash',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'ton_tx_hash',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'uint64',\n                name: 'lt',\n                type: 'uint64',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapTonToEth',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'allowBurn',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n        ],\n        name: 'allowance',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'approve',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'int8',\n                        name: 'workchain',\n                        type: 'int8',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'address_hash',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct TonUtils.TonAddress',\n                name: 'addr',\n                type: 'tuple',\n            },\n        ],\n        name: 'burn',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'int8',\n                        name: 'workchain',\n                        type: 'int8',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'address_hash',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct TonUtils.TonAddress',\n                name: 'addr',\n                type: 'tuple',\n            },\n        ],\n        name: 'burnFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: 'digest',\n                type: 'bytes32',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'signer',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'signature',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct TonUtils.Signature',\n                name: 'sig',\n                type: 'tuple',\n            },\n        ],\n        name: 'checkSignature',\n        outputs: [],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [\n            {\n                internalType: 'uint8',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'subtractedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'finishedVotings',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getFullOracleSet',\n        outputs: [\n            {\n                internalType: 'address[]',\n                name: '',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bool',\n                name: 'newBurnStatus',\n                type: 'bool',\n            },\n            {\n                internalType: 'int256',\n                name: 'nonce',\n                type: 'int256',\n            },\n        ],\n        name: 'getNewBurnStatusId',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: 'result',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int256',\n                name: 'oracleSetHash',\n                type: 'int256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'set',\n                type: 'address[]',\n            },\n        ],\n        name: 'getNewSetId',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: 'result',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'receiver',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint64',\n                        name: 'amount',\n                        type: 'uint64',\n                    },\n                    {\n                        components: [\n                            {\n                                components: [\n                                    {\n                                        internalType: 'int8',\n                                        name: 'workchain',\n                                        type: 'int8',\n                                    },\n                                    {\n                                        internalType: 'bytes32',\n                                        name: 'address_hash',\n                                        type: 'bytes32',\n                                    },\n                                ],\n                                internalType: 'struct TonUtils.TonAddress',\n                                name: 'address_',\n                                type: 'tuple',\n                            },\n                            {\n                                internalType: 'bytes32',\n                                name: 'tx_hash',\n                                type: 'bytes32',\n                            },\n                            {\n                                internalType: 'uint64',\n                                name: 'lt',\n                                type: 'uint64',\n                            },\n                        ],\n                        internalType: 'struct TonUtils.TonTxID',\n                        name: 'tx',\n                        type: 'tuple',\n                    },\n                ],\n                internalType: 'struct TonUtils.SwapData',\n                name: 'data',\n                type: 'tuple',\n            },\n        ],\n        name: 'getSwapDataId',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: 'result',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'isOracle',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        name: 'oraclesSet',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'transfer',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'transferFrom',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'receiver',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint64',\n                        name: 'amount',\n                        type: 'uint64',\n                    },\n                    {\n                        components: [\n                            {\n                                components: [\n                                    {\n                                        internalType: 'int8',\n                                        name: 'workchain',\n                                        type: 'int8',\n                                    },\n                                    {\n                                        internalType: 'bytes32',\n                                        name: 'address_hash',\n                                        type: 'bytes32',\n                                    },\n                                ],\n                                internalType: 'struct TonUtils.TonAddress',\n                                name: 'address_',\n                                type: 'tuple',\n                            },\n                            {\n                                internalType: 'bytes32',\n                                name: 'tx_hash',\n                                type: 'bytes32',\n                            },\n                            {\n                                internalType: 'uint64',\n                                name: 'lt',\n                                type: 'uint64',\n                            },\n                        ],\n                        internalType: 'struct TonUtils.TonTxID',\n                        name: 'tx',\n                        type: 'tuple',\n                    },\n                ],\n                internalType: 'struct TonUtils.SwapData',\n                name: 'data',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'signer',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'signature',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct TonUtils.Signature[]',\n                name: 'signatures',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'voteForMinting',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'int256',\n                name: 'oracleSetHash',\n                type: 'int256',\n            },\n            {\n                internalType: 'address[]',\n                name: 'newOracles',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'signer',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'signature',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct TonUtils.Signature[]',\n                name: 'signatures',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'voteForNewOracleSet',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bool',\n                name: 'newBurnStatus',\n                type: 'bool',\n            },\n            {\n                internalType: 'int256',\n                name: 'nonce',\n                type: 'int256',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'signer',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'signature',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct TonUtils.Signature[]',\n                name: 'signatures',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'voteForSwitchBurn',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n]\n\nexport class WTON__factory {\n    static readonly abi = _abi\n    static createInterface(): WTONInterface {\n        return new utils.Interface(_abi) as WTONInterface\n    }\n    static connect(address: string, signerOrProvider: Signer | Provider): WTON {\n        return new Contract(address, _abi, signerOrProvider) as WTON\n    }\n}\n","export class SdkError extends Error {\n    constructor(message: string, cause?: unknown) {\n        super(message)\n\n        this.message = `[${this.constructor.name}] ${message}`\n        this.name = this.constructor.name\n\n        if (cause) {\n            this.message = `${this.message}. Cause: ${this.unwrapCause(cause)}`\n        }\n    }\n\n    private unwrapCause(cause: unknown): string {\n        if (cause instanceof AggregateError) {\n            const errors = cause.errors\n                .map((e: unknown) => {\n                    return this.unwrapCause(e)\n                })\n                .join(', ')\n            return `${cause.message} [${errors}]`\n        } else if (cause instanceof Error) {\n            return cause.message\n        } else if (typeof cause === 'string' && cause.length > 0) {\n            return cause\n        } else if (typeof cause === 'number') {\n            return `${cause}`\n        } else if (typeof cause === 'object') {\n            return JSON.stringify(cause)\n        } else {\n            return 'Unknown'\n        }\n    }\n}\n\n// routing\nexport class RoutingError extends SdkError {}\n\nexport class NoTransitTokenError extends RoutingError {}\n\nexport class NoRepresentationFoundError extends RoutingError {}\n\n// limits\nexport class LimitError extends SdkError {}\n\nexport class AmountTooLowError extends LimitError {}\n\nexport class AmountTooHighError extends LimitError {}\n\nexport class AmountLessThanFeeError extends LimitError {}\n\n// advisor\nexport class AdvisorError extends SdkError {}\n\n// ChainFlip\nexport class ChainFlipError extends SdkError {}\n\n// ThorChain\nexport class ThorChainError extends SdkError {}\n\n// trade\nexport class TradeError extends SdkError {}\n\nexport class WrapTradeError extends TradeError {}\n\nexport class UniV2TradeError extends TradeError {}\n\nexport class UniV3TradeError extends TradeError {}\n\nexport class IzumiTradeError extends TradeError {}\n\nexport class OpenOceanTradeError extends TradeError {}\n\nexport class OneInchTradeError extends TradeError {}\n\nexport class DedustTradeError extends TradeError {}\n\nexport class StonFiTradeError extends TradeError {}\n\nexport class RaydiumTradeError extends TradeError {}\n\nexport class JupiterTradeError extends TradeError {}\n\nenum SwapAggregatorErrorCategory {\n    RateLimit = 'rate_limit',\n    SwapAggregatorError = 'swap_aggregator_error',\n    LiquidityError = 'liquidity_error',\n    TokenError = 'token_error',\n    BigIntError = 'bigint_error',\n    ExceedPlan = 'exceed_plan',\n    OracleError = 'oracle_error',\n    Unknown = 'unknown',\n}\n\nconst aggregatorCategoryPatterns: Record<SwapAggregatorErrorCategory, (string | RegExp)[]> = {\n    [SwapAggregatorErrorCategory.RateLimit]: ['rate limit', 'too many requests', 'the limit of requests', /\\b429\\b/],\n    [SwapAggregatorErrorCategory.SwapAggregatorError]: [\n        'swap error', // 1inch\n        'cannot create trade', // uni v2\n        'no path found', // izumi\n        'route not found', // uni v3\n    ],\n    [SwapAggregatorErrorCategory.OracleError]: ['oneinch oracle'],\n    [SwapAggregatorErrorCategory.ExceedPlan]: ['plan has been exceeded'],\n    [SwapAggregatorErrorCategory.LiquidityError]: ['insufficient liquidity', 'No avail liquidity'],\n    [SwapAggregatorErrorCategory.BigIntError]: ['converted to bigint', 'to a bigint'],\n    [SwapAggregatorErrorCategory.TokenError]: ['not valid token'],\n    [SwapAggregatorErrorCategory.Unknown]: ['unknown'],\n}\n\nexport function aggregatorErrorToText(reason: string) {\n    const lowerCaseReason = reason.toLowerCase()\n\n    for (const [category, patterns] of Object.entries(aggregatorCategoryPatterns) as [\n        SwapAggregatorErrorCategory,\n        (string | RegExp)[]\n    ][]) {\n        for (const pattern of patterns) {\n            if (typeof pattern === 'string') {\n                if (lowerCaseReason.includes(pattern.toLowerCase())) return category\n            } else if (pattern.test(lowerCaseReason)) {\n                return category\n            }\n        }\n    }\n\n    return SwapAggregatorErrorCategory.Unknown\n}\n","import { TransactionRequest } from '@ethersproject/providers'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { AddressZero } from '@ethersproject/constants/lib/addresses'\nimport { BigNumberish, BytesLike } from 'ethers'\nimport JSBI from 'jsbi'\nimport { Token, TokenAmount } from '../entities'\nimport { AmountLessThanFeeError, SdkError } from './sdkError'\nimport type { Symbiosis } from './symbiosis'\nimport { getExternalId, getInternalId, isTronChainId, prepareTronTransaction, TronTransactionData } from './chainUtils'\nimport { MulticallRouter } from './contracts'\nimport { ChainId } from '../constants'\nimport { OctoPoolTrade } from './trade'\nimport { OmniPoolConfig } from './types'\nimport { PendingRequest } from './revertRequest'\nimport { TRON_PORTAL_ABI } from './tronAbis'\nimport { CROSS_CHAIN_ID } from './constants'\n\ntype RevertBase = {\n    type: 'tron' | 'evm'\n    fee: TokenAmount\n}\nexport type EvmRevertResponse = RevertBase & {\n    transactionRequest: TransactionRequest\n}\n\nexport type TronRevertResponse = RevertBase & {\n    transactionRequest: TronTransactionData\n}\n\nexport type RevertResponse = TronRevertResponse | EvmRevertResponse\n\nexport class RevertPending {\n    protected multicallRouter: MulticallRouter\n\n    private deadline!: number\n    private slippage!: number\n    private transitTokenFrom!: Token\n    private transitTokenTo!: Token\n    private omniPoolConfig: OmniPoolConfig\n\n    constructor(private symbiosis: Symbiosis, private request: PendingRequest) {\n        const token = this.request.fromTokenAmount.token\n        const omniPoolConfig = symbiosis.getOmniPoolByToken(token)\n        if (!omniPoolConfig) {\n            throw new SdkError(`Cannot find omni pool config by token ${token.address}`)\n        }\n\n        this.omniPoolConfig = omniPoolConfig\n        this.multicallRouter = this.symbiosis.multicallRouter(this.omniPoolConfig.chainId)\n    }\n\n    async revert(slippage: number, deadline: number): Promise<RevertResponse> {\n        this.slippage = slippage\n        this.deadline = deadline\n\n        if (this.request.type === 'burn-v2') {\n            this.transitTokenFrom = this.symbiosis.transitToken(this.request.chainIdFrom, this.omniPoolConfig)\n            this.transitTokenTo = this.symbiosis.transitToken(this.request.chainIdTo, this.omniPoolConfig)\n        }\n\n        const fee = await this.getFee()\n\n        const feeV2 = this.request.type === 'burn-v2' ? await this.getFeeV2() : undefined\n\n        const transactionRequest = await this.getTransactionRequest(fee, feeV2)\n\n        if ('call_value' in transactionRequest) {\n            return {\n                type: 'tron',\n                fee,\n                transactionRequest,\n            }\n        }\n\n        return {\n            type: 'evm',\n            fee,\n            transactionRequest,\n        }\n    }\n\n    protected async getFeeV2(): Promise<TokenAmount> {\n        const feeToken = this.transitTokenFrom\n        const [receiveSide, calldata] = await this.feeBurnCallDataV2()\n\n        const { price: fee } = await this.symbiosis.getBridgeFee({\n            receiveSide,\n            calldata,\n            chainIdFrom: this.omniPoolConfig.chainId,\n            chainIdTo: this.request.chainIdFrom,\n        })\n        return new TokenAmount(feeToken, fee)\n    }\n\n    protected async feeBurnCallDataV2(): Promise<[string, string]> {\n        const chainIdIn = this.omniPoolConfig.chainId\n        const chainIdOut = this.request.chainIdFrom\n        const { revertableAddress, fromTokenAmount } = this.request\n\n        const synthesis = this.symbiosis.synthesis(chainIdIn)\n        const portal = this.symbiosis.portal(chainIdOut)\n\n        const internalId = getInternalId({\n            contractAddress: synthesis.address,\n            requestCount: MaxUint256,\n            chainId: chainIdIn,\n        })\n\n        const externalId = getExternalId({\n            internalId,\n            contractAddress: portal.address,\n            revertableAddress,\n            chainId: chainIdOut,\n        })\n\n        const calldata = portal.interface.encodeFunctionData('metaUnsynthesize', [\n            '0', // _stableBridgingFee\n            CROSS_CHAIN_ID, // crossChainID\n            externalId, // _externalID,\n            revertableAddress, // _to\n            fromTokenAmount.raw.toString(), // _amount\n            this.transitTokenFrom.address, // _rToken\n            AddressZero, // _finalReceiveSide\n            [], // _finalCalldata\n            0, // _finalOffset\n        ])\n        return [portal.address, calldata]\n    }\n\n    private buildMetaBurnCalldata(feeV2?: TokenAmount) {\n        const { from, chainIdFrom } = this.request\n\n        const synthesis = this.symbiosis.synthesis(this.omniPoolConfig.chainId)\n        const synth = this.getSyntheticToken(this.transitTokenFrom)\n        if (!synth) {\n            throw new SdkError(`Cannot find synthetic token between mChain and ${chainIdFrom}`)\n        }\n\n        const metarouter = this.symbiosis.metaRouter(this.omniPoolConfig.chainId)\n\n        let revertableAddress: string\n        if (isTronChainId(chainIdFrom)) {\n            revertableAddress = this.symbiosis.getRevertableAddress(chainIdFrom)\n        } else {\n            revertableAddress = from\n        }\n\n        const calldata = synthesis.interface.encodeFunctionData('metaBurnSyntheticToken', [\n            {\n                stableBridgingFee: feeV2 ? feeV2.raw.toString() : '0',\n                amount: '0',\n                crossChainID: CROSS_CHAIN_ID,\n                syntCaller: metarouter.address,\n                finalReceiveSide: AddressZero,\n                sToken: synth.address,\n                finalCallData: [],\n                finalOffset: 0,\n                chain2address: from, // NOTE: funds will be returned there if got stuck\n                receiveSide: this.symbiosis.portal(chainIdFrom).address,\n                oppositeBridge: this.symbiosis.bridge(chainIdFrom).address,\n                revertableAddress,\n                chainID: chainIdFrom,\n                clientID: this.symbiosis.clientId,\n            },\n        ])\n        return [synth.address, calldata]\n    }\n\n    private async getFee(): Promise<TokenAmount> {\n        const { type, chainIdTo, chainIdFrom, internalId, revertableAddress } = this.request\n\n        const externalId = this.getExternalId()\n\n        let receiveSide: string\n        let calldata: string\n        let advisorChainIdFrom: ChainId = chainIdTo\n        let advisorChainIdTo: ChainId = chainIdFrom\n        const feeToken = this.request.originalFromTokenAmount.token\n\n        if (type === 'synthesize') {\n            const portal = this.symbiosis.portal(chainIdFrom)\n            calldata = portal.interface.encodeFunctionData('revertSynthesize', ['0', externalId])\n            receiveSide = portal.address\n        } else if (type === 'burn') {\n            const synthesis = this.symbiosis.synthesis(chainIdFrom)\n            calldata = synthesis.interface.encodeFunctionData('revertBurn', ['0', externalId])\n            receiveSide = synthesis.address\n        } else if (type === 'synthesize-v2') {\n            advisorChainIdFrom = chainIdFrom\n            advisorChainIdTo = chainIdTo\n\n            const synthesis = this.symbiosis.synthesis(chainIdTo)\n            calldata = synthesis.interface.encodeFunctionData('revertSynthesizeRequestByBridge', [\n                '0',\n                internalId,\n                this.symbiosis.portal(chainIdFrom).address, // _receiveSide\n                this.symbiosis.bridge(chainIdFrom).address, // _oppositeBridge\n                chainIdFrom, // _chainId\n                revertableAddress, // _sender\n                this.symbiosis.clientId, // _clientId\n            ])\n            receiveSide = synthesis.address\n        } else if (type === 'burn-v2') {\n            advisorChainIdTo = this.omniPoolConfig.chainId\n            const synthesis = this.symbiosis.synthesis(this.omniPoolConfig.chainId)\n            const [router, swapCalldata] = await this.buildSwapCalldata()\n            const [burnToken, burnCalldata] = this.buildMetaBurnCalldata()\n\n            calldata = synthesis.interface.encodeFunctionData('revertMetaBurn', [\n                '0', // stableBridgingFee\n                externalId,\n                router,\n                swapCalldata,\n                synthesis.address,\n                burnToken,\n                burnCalldata,\n            ])\n            receiveSide = synthesis.address\n        } else {\n            // burn-v2-revert\n            const synthesis = this.symbiosis.synthesis(chainIdFrom)\n            calldata = synthesis.interface.encodeFunctionData('revertBurnAndBurn', [\n                '0', // stableBridgingFee\n                externalId,\n                this.symbiosis.portal(chainIdTo).address, // _receiveSide\n                this.symbiosis.bridge(chainIdTo).address, // _oppositeBridge\n                chainIdTo, // _chainId\n                revertableAddress, // _revertableAddress\n            ])\n            receiveSide = synthesis.address\n        }\n\n        const { price: fee } = await this.symbiosis.getBridgeFee({\n            receiveSide,\n            calldata,\n            chainIdFrom: advisorChainIdFrom,\n            chainIdTo: advisorChainIdTo,\n        })\n\n        const feeTokenAmount = new TokenAmount(feeToken, fee)\n        if (\n            this.request.originalFromTokenAmount.lessThan(feeTokenAmount) ||\n            this.request.originalFromTokenAmount.equalTo(feeTokenAmount)\n        ) {\n            throw new AmountLessThanFeeError(\n                `Amount ${this.request.fromTokenAmount.toSignificant()} ${\n                    this.request.fromTokenAmount.token.symbol\n                } less than fee ${feeTokenAmount.toSignificant()} ${feeTokenAmount.token.symbol}`\n            )\n        }\n\n        return feeTokenAmount\n    }\n\n    private async getTransactionRequest(\n        fee: TokenAmount,\n        feeV2?: TokenAmount\n    ): Promise<TransactionRequest | TronTransactionData> {\n        if (this.request.type === 'synthesize') {\n            return this.getRevertSynthesizeTransactionRequest(fee)\n        }\n\n        if (this.request.type === 'synthesize-v2') {\n            return this.getRevertSynthesizeTransactionRequestV2(fee)\n        }\n\n        if (this.request.type === 'burn') {\n            return this.getRevertBurnTransactionRequest(fee)\n        }\n\n        if (this.request.type === 'burn-v2') {\n            return await this.getRevertBurnTransactionRequestV2(fee, feeV2)\n        }\n\n        return await this.getRevertBurnTransactionRequestV2Revert(fee)\n    }\n\n    private getRevertSynthesizeTransactionRequestV2(fee: TokenAmount): TransactionRequest | TronTransactionData {\n        const { internalId, chainIdFrom, revertableAddress } = this.request\n        const portal = this.symbiosis.portal(chainIdFrom)\n\n        const params = {\n            stableBridgingFee: fee.raw.toString(),\n            internalID: internalId,\n            receiveSide: portal.address,\n            managerChainBridge: this.symbiosis.bridge(this.omniPoolConfig.chainId).address,\n            sourceChainBridge: this.symbiosis.bridge(chainIdFrom).address,\n            managerChainId: this.omniPoolConfig.chainId,\n            sourceChainId: chainIdFrom,\n            router: AddressZero, // multicall router\n            swapCalldata: [], // swapCalldata,\n            sourceChainSynthesis: this.symbiosis.synthesis(this.omniPoolConfig.chainId).address,\n            burnToken: AddressZero, //burnToken,\n            burnCalldata: [], // burnCalldata,\n            clientID: this.symbiosis.clientId,\n        }\n\n        if (isTronChainId(chainIdFrom)) {\n            return prepareTronTransaction({\n                chainId: chainIdFrom,\n                tronWeb: this.symbiosis.tronWeb(chainIdFrom),\n                abi: TRON_PORTAL_ABI,\n                contractAddress: portal.address,\n                functionName: 'metaRevertRequest',\n                params: [\n                    [\n                        fee.raw.toString(), // stableBridgingFee, uint256\n                        internalId, // internalID, bytes32\n                        portal.address, // receiveSide, address\n                        this.symbiosis.bridge(this.omniPoolConfig.chainId).address, // managerChainBridge, address\n                        this.symbiosis.bridge(chainIdFrom).address, // sourceChainBridge, address\n                        this.omniPoolConfig.chainId, // managerChainId, uint256\n                        chainIdFrom, // sourceChainId, uint256\n                        AddressZero, // router, address\n                        [], // swapCalldata, bytes\n                        this.symbiosis.synthesis(this.omniPoolConfig.chainId).address, // sourceChainSynthesis, address\n                        AddressZero, // burnToken, address\n                        [], // burnCalldata, bytes\n                        this.symbiosis.clientId, // clientID, bytes32\n                    ],\n                ],\n                ownerAddress: revertableAddress,\n                value: 0,\n            })\n        }\n\n        return {\n            to: portal.address,\n            data: portal.interface.encodeFunctionData('metaRevertRequest', [params]),\n            chainId: chainIdFrom,\n        }\n    }\n\n    private getRevertSynthesizeTransactionRequest(fee: TokenAmount): TransactionRequest {\n        const { internalId, chainIdTo, chainIdFrom } = this.request\n\n        const synthesis = this.symbiosis.synthesis(chainIdTo)\n        const otherPortal = this.symbiosis.portal(chainIdFrom)\n        const otherBridge = this.symbiosis.bridge(chainIdFrom)\n\n        return {\n            to: synthesis.address,\n            data: synthesis.interface.encodeFunctionData('revertSynthesizeRequest', [\n                fee.raw.toString(),\n                internalId,\n                otherPortal.address,\n                otherBridge.address,\n                chainIdFrom,\n                this.symbiosis.clientId,\n            ]),\n            chainId: chainIdTo,\n        }\n    }\n\n    private getRevertBurnTransactionRequest(fee: TokenAmount): TransactionRequest | TronTransactionData {\n        const { internalId, chainIdTo, chainIdFrom } = this.request\n\n        const otherBridge = this.symbiosis.bridge(chainIdFrom)\n        const portal = this.symbiosis.portal(chainIdTo)\n        const otherSynthesis = this.symbiosis.synthesis(chainIdFrom)\n\n        const params = [\n            fee.raw.toString(),\n            internalId,\n            otherSynthesis.address,\n            otherBridge.address,\n            chainIdFrom,\n            this.symbiosis.clientId,\n        ] as [BigNumberish, BytesLike, string, string, BigNumberish, BytesLike]\n\n        if (isTronChainId(chainIdTo)) {\n            return prepareTronTransaction({\n                chainId: chainIdTo,\n                tronWeb: this.symbiosis.tronWeb(chainIdTo),\n                abi: TRON_PORTAL_ABI,\n                contractAddress: portal.address,\n                functionName: 'revertBurnRequest',\n                params,\n                ownerAddress: this.request.revertableAddress,\n                value: 0,\n            })\n        }\n\n        return {\n            to: portal.address,\n            data: portal.interface.encodeFunctionData('revertBurnRequest', params),\n            chainId: chainIdTo,\n        }\n    }\n\n    private getSyntheticToken(realToken: Token): Token | undefined {\n        return this.symbiosis.getRepresentation(realToken, this.omniPoolConfig.chainId)\n    }\n\n    private async buildSwapCalldata(fee?: TokenAmount): Promise<[string, string]> {\n        const { originalFromTokenAmount, chainIdFrom, chainIdTo } = this.request\n\n        const tokenIn = this.getSyntheticToken(this.transitTokenTo)\n        if (!tokenIn) {\n            throw new SdkError(`Cannot find synthetic token between mChain and ${chainIdTo}`)\n        }\n        const tokenAmountIn = new TokenAmount(tokenIn, originalFromTokenAmount.raw) // sStable -> Stable\n        const amount = fee ? new TokenAmount(tokenIn, JSBI.subtract(tokenAmountIn.raw, fee.raw)) : tokenAmountIn\n\n        const tokenOut = this.getSyntheticToken(this.transitTokenFrom)\n        if (!tokenOut) {\n            throw new SdkError(`Cannot find synthetic token between mChain and ${chainIdFrom}`)\n        }\n\n        const to = this.symbiosis.metaRouter(this.omniPoolConfig.chainId).address\n\n        const octoPoolTrade = new OctoPoolTrade({\n            tokenAmountIn: amount,\n            tokenAmountInMin: amount, // amountInMin\n            tokenOut,\n            slippage: this.slippage,\n            deadline: this.deadline,\n            symbiosis: this.symbiosis,\n            to,\n            omniPoolConfig: this.omniPoolConfig,\n        })\n        await octoPoolTrade.init()\n\n        return [\n            this.multicallRouter.address,\n            this.multicallRouter.interface.encodeFunctionData('multicall', [\n                amount.raw.toString(),\n                [octoPoolTrade.callData], // calldata\n                [octoPoolTrade.routerAddress], // receiveSides\n                [tokenIn.address, tokenOut.address], // path\n                [100], // offset\n                to,\n            ]),\n        ]\n    }\n\n    private async getRevertBurnTransactionRequestV2(\n        fee: TokenAmount,\n        feeV2?: TokenAmount\n    ): Promise<TransactionRequest | TronTransactionData> {\n        const { internalId, chainIdTo } = this.request\n\n        const mChainBridge = this.symbiosis.bridge(this.omniPoolConfig.chainId)\n        const portal = this.symbiosis.portal(chainIdTo)\n        const mChainSynthesis = this.symbiosis.synthesis(this.omniPoolConfig.chainId)\n\n        const [router, swapCalldata] = await this.buildSwapCalldata(fee)\n        const [burnToken, burnCalldata] = this.buildMetaBurnCalldata(feeV2)\n\n        const params = {\n            stableBridgingFee: fee.raw.toString(),\n            internalID: internalId,\n            receiveSide: mChainSynthesis.address,\n            managerChainBridge: mChainBridge.address,\n            managerChainId: this.omniPoolConfig.chainId,\n            sourceChainBridge: AddressZero,\n            sourceChainId: this.request.chainIdFrom,\n            sourceChainSynthesis: mChainSynthesis.address,\n            router, // multicall router\n            swapCalldata,\n            burnToken,\n            burnCalldata,\n            clientID: this.symbiosis.clientId,\n        }\n\n        if (isTronChainId(chainIdTo)) {\n            return prepareTronTransaction({\n                chainId: chainIdTo,\n                tronWeb: this.symbiosis.tronWeb(chainIdTo),\n                abi: TRON_PORTAL_ABI,\n                contractAddress: portal.address,\n                functionName: 'metaRevertRequest',\n                params: [\n                    [\n                        fee.raw.toString(), // stableBridgingFee, uint256\n                        internalId, // internalID, bytes32\n                        mChainSynthesis.address, // receiveSide, address\n                        mChainBridge.address, // managerChainBridge, address\n                        AddressZero, // sourceChainBridge, address\n                        this.omniPoolConfig.chainId, // managerChainId, uint256\n                        this.request.chainIdFrom, // sourceChainId, uint256\n                        router, // router, address\n                        swapCalldata, // swapCalldata, bytes\n                        mChainSynthesis.address, // sourceChainSynthesis, address\n                        burnToken, // burnToken, address\n                        burnCalldata, // burnCalldata, bytes\n                        this.symbiosis.clientId, // clientID, bytes32\n                    ],\n                ],\n                ownerAddress: this.request.revertableAddress, // correct??\n                value: 0,\n            })\n        }\n\n        return {\n            to: portal.address,\n            data: portal.interface.encodeFunctionData('metaRevertRequest', [params]),\n            chainId: chainIdTo,\n        }\n    }\n\n    private async getRevertBurnTransactionRequestV2Revert(\n        fee: TokenAmount\n    ): Promise<TransactionRequest | TronTransactionData> {\n        const { internalId, chainIdTo } = this.request\n\n        const portal = this.symbiosis.portal(chainIdTo)\n\n        const params = {\n            stableBridgingFee: fee.raw.toString(),\n            internalID: internalId,\n            receiveSide: portal.address,\n            managerChainBridge: this.symbiosis.bridge(this.omniPoolConfig.chainId).address,\n            sourceChainBridge: AddressZero,\n            managerChainId: this.omniPoolConfig.chainId,\n            sourceChainId: chainIdTo,\n            router: AddressZero, // multicall router\n            swapCalldata: [],\n            sourceChainSynthesis: this.symbiosis.synthesis(this.omniPoolConfig.chainId).address,\n            burnToken: AddressZero,\n            burnCalldata: '0x00', // any not empty calldata\n            clientID: this.symbiosis.clientId,\n        }\n\n        if (isTronChainId(chainIdTo)) {\n            return prepareTronTransaction({\n                chainId: chainIdTo,\n                tronWeb: this.symbiosis.tronWeb(chainIdTo),\n                abi: TRON_PORTAL_ABI,\n                contractAddress: portal.address,\n                functionName: 'metaRevertRequest',\n                params: [\n                    [\n                        fee.raw.toString(), // stableBridgingFee, uint256\n                        internalId, // internalID, bytes32\n                        portal.address, // receiveSide, address\n                        this.symbiosis.bridge(this.omniPoolConfig.chainId).address, // managerChainBridge, address\n                        AddressZero, // sourceChainBridge, address\n                        this.omniPoolConfig.chainId, // managerChainId, uint256\n                        chainIdTo, // sourceChainId, uint256\n                        AddressZero, // multicall router, address\n                        [], // swapCalldata, bytes\n                        this.symbiosis.synthesis(this.omniPoolConfig.chainId).address, // sourceChainSynthesis, address\n                        AddressZero, // burnToken, address\n                        '0x00', // burnCalldata, bytes, any not empty calldata\n                        this.symbiosis.clientId, // clientID, bytes32\n                    ],\n                ],\n                ownerAddress: this.request.revertableAddress,\n                value: 0,\n            })\n        }\n        return {\n            to: portal.address,\n            data: portal.interface.encodeFunctionData('metaRevertRequest', [params]),\n            chainId: chainIdTo,\n        }\n    }\n\n    private getExternalId(): string {\n        const { type, internalId, chainIdTo, revertableAddress } = this.request\n\n        let contractAddress: string\n        if (type === 'synthesize' || type === 'synthesize-v2') {\n            contractAddress = this.symbiosis.synthesis(chainIdTo).address\n        } else {\n            contractAddress = this.symbiosis.portal(chainIdTo).address\n        }\n\n        return getExternalId({ internalId, chainId: chainIdTo, revertableAddress, contractAddress })\n    }\n}\n","import { address, Network, networks } from 'bitcoinjs-lib'\nimport { BigNumber } from 'ethers'\n\nimport { TokenAmount } from '../../entities'\nimport { Cache } from '../cache'\nimport { getFastestFee } from '../mempool'\nimport { Synthesis } from '../contracts'\nimport { ChainId } from '../../constants'\n\nexport const getThreshold = async (syBtcAmount: TokenAmount, synthesis: Synthesis, cache: Cache) => {\n    const syBtc = syBtcAmount.token\n\n    const threshold = await cache.get(\n        ['tokenThreshold', synthesis.address, syBtc.address],\n        async () => {\n            return synthesis.tokenThreshold(syBtc.address)\n        },\n        24 * 60 * 60 // 24 hours\n    )\n    return new TokenAmount(syBtc, threshold.toString())\n}\n\nexport const getToBtcFee = async (syBtcAmount: TokenAmount, synthesis: Synthesis, cache: Cache) => {\n    const syBtc = syBtcAmount.token\n    let fee = await cache.get(\n        ['syntToMinFeeBTC', synthesis.address, syBtc.address],\n        async () => {\n            return synthesis.syntToMinFeeBTC(syBtc.address)\n        },\n        600 // 10 minutes\n    )\n\n    try {\n        const fastestFee = await cache.get(['getFastestFee'], getFastestFee, 60) // 1 minute\n        const recommendedFee = BigNumber.from(fastestFee * 300) // 300 vByte\n        if (recommendedFee.gt(fee)) {\n            fee = recommendedFee\n        }\n    } catch {\n        /* nothing */\n    }\n\n    return new TokenAmount(syBtc, fee.toString())\n}\n\nexport function isBtcChainId(chainId: ChainId | undefined) {\n    if (!chainId) return false\n    return chainId in BTC_NETWORKS\n}\n\nexport const BTC_NETWORKS: Partial<Record<ChainId, Network>> = {\n    [ChainId.BTC_MAINNET]: networks.bitcoin,\n    [ChainId.BTC_MUTINY]: networks.testnet,\n    [ChainId.BTC_TESTNET4]: networks.testnet,\n}\n\nexport function getPkScriptForChain(addr: string, btcChain: Network): Buffer {\n    return address.toOutputScript(addr, btcChain)\n}\n\nexport function getPkScript(addr: string, btcChainId: ChainId): Buffer {\n    const network = BTC_NETWORKS[btcChainId]\n    if (!network) {\n        throw new Error(`Unknown BTC network ${btcChainId}`)\n    }\n    return getPkScriptForChain(addr, network)\n}\n\nexport function getAddress(pkScript: string, btcChain: Network): string {\n    return address.fromOutputScript(Buffer.from(pkScript.substring(2), 'hex'), btcChain)\n}\n\nasync function getPortalSettings(forwarderUrl: string) {\n    // kind of the state: 0=finalized 1=pending 2=best\n    const portalApiUrl = new URL(`${forwarderUrl}/portal?kind=2`)\n\n    const response = await fetch(portalApiUrl)\n    if (!response.ok) {\n        const text = await response.text()\n        const json = JSON.parse(text)\n        throw new Error(json.message ?? text)\n    }\n\n    return response.json()\n}\n\nexport async function getBtcPortalFee(forwarderUrl: string, cache: Cache): Promise<string> {\n    let fee = await cache.get(\n        ['getMinBtcFee', forwarderUrl],\n        async () => {\n            const response = await getPortalSettings(forwarderUrl)\n            const {\n                state: { minBtcFee },\n            } = response\n\n            return Number(minBtcFee)\n        },\n        600 // 10 minutes\n    )\n\n    try {\n        const fastestFee = await cache.get(['getFastestFee'], getFastestFee, 60) // 1 minute\n        const recommendedFee = fastestFee * 200 // 200 vByte\n        if (recommendedFee > fee) {\n            fee = recommendedFee\n        }\n    } catch {\n        /* nothing */\n    }\n    return fee.toString()\n}\n\nexport async function getUnwrapDustLimit(forwarderUrl: string, cache: Cache): Promise<string> {\n    const unwrapDustLimit = await cache.get(\n        ['getUnwrapDustLimit', forwarderUrl],\n        async () => {\n            const response = await getPortalSettings(forwarderUrl)\n\n            const {\n                state: { unwrapDustLimit },\n            } = response\n\n            return Number(unwrapDustLimit)\n        },\n        60 * 60 // 1 hour\n    )\n\n    return unwrapDustLimit.toString()\n}\n","import { SdkError } from './sdkError'\n\nexport async function getFastestFee(): Promise<number> {\n    const response = await fetch('https://mempool.space/api/v1/fees/recommended')\n    if (!response.ok) {\n        const text = await response.text()\n        const json = JSON.parse(text)\n        throw new SdkError(json.message ?? text)\n    }\n\n    const { fastestFee } = await response.json()\n\n    return fastestFee\n}\n","import { Address, beginCell, Cell, Contract, toNano } from '@ton/core'\nimport { JettonMaster } from '@ton/ton'\n\nimport { ChainId } from '../../constants'\nimport { Symbiosis } from '../symbiosis'\nimport { Token, TokenAmount } from '../../entities'\nimport { TonTransactionData } from '../types'\nimport { SdkError } from '../sdkError'\nimport { parseUnits } from '@ethersproject/units'\n\nexport const TON_TOKEN_DECIMALS = 9\n\nexport const TON_REFERRAL_ADDRESS = Address.parse('UQD35aoXN2UbZ1ZrjjjKsLNH-ISdp5Lj42d_0Q_pllYmRth0')\n\nexport const TON_STONFI_PROXY_ADDRESS = 'EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c'\n\nexport function isTonChainId(chainId: ChainId | undefined) {\n    if (!chainId) return false\n    return [ChainId.TON_MAINNET, ChainId.TON_TESTNET].includes(chainId)\n}\n\nexport function callDataToCell(finalCallData: Buffer): Cell {\n    const MAX_BYTES_IN_CELL = 127\n\n    function padBuffer(buf: Buffer): Buffer {\n        const targetLength = Math.ceil(buf.length / 32) * 32\n        const paddingLength = targetLength - buf.length\n\n        if (paddingLength === 0) {\n            return buf\n        }\n\n        const paddedBuffer = Buffer.alloc(targetLength)\n        buf.copy(paddedBuffer)\n        return paddedBuffer\n    }\n\n    function createCell(buf: Buffer): Cell {\n        const builder = beginCell()\n\n        const bytesToStore = buf.subarray(0, MAX_BYTES_IN_CELL)\n        builder.storeBuffer(bytesToStore)\n\n        if (buf.length > MAX_BYTES_IN_CELL) {\n            const remainingBuffer = buf.subarray(MAX_BYTES_IN_CELL)\n            builder.storeRef(createCell(remainingBuffer))\n        }\n\n        return builder.endCell()\n    }\n\n    return createCell(padBuffer(finalCallData))\n}\n\nexport type BridgeConfig = {\n    isPaused: boolean\n    owner: Address\n    admin: Address\n    mpcAddress: Buffer\n    externalIdContractCode: Cell\n    tonAddress: Address\n}\n\nexport const Opcodes = {\n    EpSynthesize: 2048159929,\n    EpMetaSynthesize: 1585287200,\n}\n\nexport const EventIds = {\n    MPCChanged: BigInt(3246037916),\n    BurnCompleted: BigInt(1659197634),\n    SetJettonThreshold: BigInt(3303282619),\n    OracleRequest: BigInt(2067945553),\n}\n\nexport class Bridge implements Contract {\n    constructor(readonly address: Address, readonly init?: { code: Cell; data: Cell }) {}\n\n    // Creates forward payload for 'synthesize' endpoint\n    static synthesizeMessage({\n        stableBridgingFee,\n        token,\n        amount,\n        chain2Address,\n        receiveSide,\n        oppositeBridge,\n        revertableAddress,\n        chainId,\n    }: {\n        stableBridgingFee: bigint\n        token: Address\n        amount: bigint\n        chain2Address: Buffer\n        receiveSide: Buffer\n        oppositeBridge: Buffer\n        revertableAddress: Buffer\n        chainId: bigint\n    }): Cell {\n        const payloadCell1 = beginCell()\n            .storeCoins(stableBridgingFee)\n            .storeAddress(token) // token\n            .storeCoins(amount)\n            .storeBuffer(chain2Address)\n            .storeBuffer(receiveSide)\n            .endCell()\n\n        const payloadCell2 = beginCell()\n            .storeBuffer(oppositeBridge)\n            .storeBuffer(revertableAddress)\n            .storeUint(chainId, 256)\n            .endCell()\n\n        return beginCell().storeUint(Opcodes.EpSynthesize, 32).storeRef(payloadCell1).storeRef(payloadCell2).endCell()\n    }\n\n    static metaSynthesizeMessage({\n        stableBridgingFee,\n        token,\n        amount,\n        chain2Address,\n        receiveSide,\n        oppositeBridge,\n        chainId,\n        finalReceiveSide,\n        finalOffset,\n        revertableAddress,\n        swapTokens,\n        secondDexRouter,\n        secondSwapCallData,\n        finalCallData,\n    }: {\n        stableBridgingFee: bigint\n        token: Address\n        amount: bigint\n        chain2Address: Buffer\n        receiveSide: Buffer\n        oppositeBridge: Buffer\n        chainId: bigint\n        finalReceiveSide: Buffer\n        finalOffset: bigint\n        revertableAddress: Buffer\n        swapTokens: Buffer[]\n        secondDexRouter: Buffer\n        secondSwapCallData: Buffer\n        finalCallData: Buffer\n    }): Cell {\n        const payloadCell1 = beginCell()\n            .storeCoins(stableBridgingFee)\n            .storeAddress(token)\n            .storeCoins(amount)\n            .storeBuffer(chain2Address)\n\n        const payloadCell2 = beginCell()\n            .storeBuffer(receiveSide)\n            .storeBuffer(oppositeBridge)\n            .storeUint(chainId, 256)\n            .storeBuffer(finalReceiveSide)\n\n        const swapTokensCellBuilder = beginCell()\n        swapTokens.forEach((tokenAddr) => swapTokensCellBuilder.storeBuffer(tokenAddr))\n\n        const finalCallDataCell = callDataToCell(finalCallData)\n        const secondSwapCallDataCell = callDataToCell(secondSwapCallData)\n\n        const payloadCell3 = beginCell()\n            .storeUint(finalOffset, 256)\n            .storeBuffer(revertableAddress)\n            .storeUint(finalCallData.length, 64)\n            .storeRef(swapTokensCellBuilder.endCell())\n            .storeRef(finalCallDataCell)\n            .storeBuffer(secondDexRouter)\n            .storeRef(secondSwapCallDataCell)\n            .storeUint(secondSwapCallData.length, 64)\n            .endCell()\n\n        return beginCell()\n            .storeUint(Opcodes.EpMetaSynthesize, 32)\n            .storeRef(payloadCell1)\n            .storeRef(payloadCell2)\n            .storeRef(payloadCell3)\n            .endCell()\n    }\n}\n\nexport const MIN_META_SYNTH_TONS = toNano('0.02')\nexport const MIN_META_SYNTH_JETTONS = toNano('0.2')\nexport const MIN_SYNTH_TONS = toNano('0.015')\nexport const MIN_SYNTH_JETTONS = toNano('0.2')\nexport const NOTIFICATION_PAYMENT = toNano('0.05')\n\ninterface MetaSynthesizeParams {\n    symbiosis: Symbiosis\n    fee: TokenAmount\n    from: string\n    to: string\n    revertableAddress: string\n    amountIn: TokenAmount\n    chainIdOut: ChainId\n    swapTokens: string[]\n    secondSwapCallData: string\n    secondDexRouter: string\n    finalCallData: string\n    finalReceiveSide: string\n    finalOffset: number\n    validUntil: number\n}\n\nexport function isWTon(symbiosis: Symbiosis, token: Token) {\n    const wton = symbiosis\n        .tokens()\n        .find((token) => isTonChainId(token.chainId) && token.symbol?.toLowerCase() === 'ton')\n    if (!wton) {\n        return false\n    }\n    return wton.equals(token)\n}\n\nexport async function buildMetaSynthesize(params: MetaSynthesizeParams): Promise<TonTransactionData> {\n    const {\n        symbiosis,\n        fee,\n        from,\n        to,\n        revertableAddress,\n        amountIn,\n        chainIdOut,\n        swapTokens,\n        secondDexRouter,\n        secondSwapCallData,\n        finalReceiveSide,\n        finalCallData,\n        finalOffset,\n        validUntil,\n    } = params\n    const tonChainConfig = symbiosis.config.chains.find((chain) => chain.id === amountIn.token.chainId)\n    if (!tonChainConfig) {\n        throw new SdkError(`No TON chain config for chain ${amountIn.token.chainId}`)\n    }\n    const tonPortal = tonChainConfig.tonPortal\n    if (!tonPortal) {\n        throw new SdkError(`No TON portal for chain ${amountIn.token.chainId}`)\n    }\n\n    const tonTokenAddress = amountIn.token.tonAddress\n\n    const metaSynthesizeBody = Bridge.metaSynthesizeMessage({\n        stableBridgingFee: BigInt(fee.raw.toString()),\n        token: Address.parse(tonTokenAddress), // simulate jetton for gas token TEP-161\n        amount: BigInt(amountIn.raw.toString()),\n        chain2Address: Buffer.from(to.slice(2), 'hex'),\n        receiveSide: Buffer.from(symbiosis.synthesis(chainIdOut).address.slice(2), 'hex'),\n        oppositeBridge: Buffer.from(symbiosis.bridge(chainIdOut).address.slice(2), 'hex'),\n        chainId: BigInt(chainIdOut),\n        revertableAddress: Buffer.from(revertableAddress.slice(2), 'hex'),\n        swapTokens: swapTokens.map((token) => Buffer.from(token.slice(2), 'hex')), // sTON, sWTON host chain tokens\n        secondDexRouter: Buffer.from(secondDexRouter.slice(2), 'hex'),\n        secondSwapCallData: Buffer.from(secondSwapCallData.slice(2), 'hex'),\n        finalCallData: Buffer.from(finalCallData.slice(2), 'hex'), // metaBurnSyntheticToken host chain (synthesis.sol) hostchain (include extra swap on 3-rd chain)\n        finalReceiveSide: Buffer.from(finalReceiveSide.slice(2), 'hex'), // synthesis host chain address\n        finalOffset: BigInt(finalOffset),\n    })\n\n    const tonFee = new TokenAmount(amountIn.token, MIN_META_SYNTH_TONS)\n\n    if (isWTon(symbiosis, amountIn.token)) {\n        return {\n            validUntil,\n            messages: [\n                {\n                    address: tonPortal,\n                    amount: amountIn.add(tonFee).raw.toString(),\n                    payload: metaSynthesizeBody.toBoc().toString('base64'),\n                },\n            ],\n        }\n    } else {\n        const tonTokenAddress = amountIn.token.tonAddress\n\n        const jettonMaster = JettonMaster.create(Address.parse(tonTokenAddress))\n\n        const tonClient = await symbiosis.getTonClient()\n        const provider = tonClient.provider(jettonMaster.address)\n\n        const jettonWalletAddress = await jettonMaster.getWalletAddress(provider, Address.parse(from))\n\n        const cell = beginCell()\n            .storeUint(0x0f8a7ea5, 32) // opcode for jetton transfer\n            .storeUint(0, 64) // query id\n            .storeCoins(BigInt(amountIn.raw.toString())) // jetton amount\n            .storeAddress(Address.parse(tonPortal)) // destination\n            .storeAddress(Address.parse(from)) // response_destination for excesses of ton\n            .storeBit(0) // null custom payload\n            .storeCoins(NOTIFICATION_PAYMENT) // forward amount - if >0, will send notification message\n            .storeMaybeRef(metaSynthesizeBody)\n            .endCell()\n\n        return {\n            validUntil,\n            messages: [\n                {\n                    address: jettonWalletAddress.toString(),\n                    amount: MIN_META_SYNTH_JETTONS.toString(),\n                    payload: cell.toBoc().toString('base64'),\n                },\n            ],\n        }\n    }\n}\n\ninterface SynthesizeParams {\n    symbiosis: Symbiosis\n    fee: TokenAmount\n    amountIn: TokenAmount\n    chainIdOut: ChainId\n    from: string\n    to: string\n    revertableAddress: string\n    validUntil: number\n}\n\nexport async function buildSynthesize(params: SynthesizeParams): Promise<TonTransactionData> {\n    const { symbiosis, fee, from, amountIn, to, chainIdOut, validUntil, revertableAddress } = params\n    const tonChainConfig = symbiosis.config.chains.find((chain) => chain.id === amountIn.token.chainId)\n    if (!tonChainConfig) {\n        throw new SdkError(`No TON chain config for chain ${amountIn.token.chainId}`)\n    }\n    const tonPortal = tonChainConfig.tonPortal\n    if (!tonPortal) {\n        throw new SdkError(`No TON portal for chain ${amountIn.token.chainId}`)\n    }\n\n    const tonTokenAddress = amountIn.token.tonAddress\n\n    const synthesizeMessage = Bridge.synthesizeMessage({\n        stableBridgingFee: BigInt(fee.raw.toString()),\n        token: Address.parse(tonTokenAddress),\n        amount: BigInt(amountIn.raw.toString()),\n        chain2Address: Buffer.from(to.slice(2), 'hex'),\n        receiveSide: Buffer.from(symbiosis.synthesis(chainIdOut).address.slice(2), 'hex'),\n        oppositeBridge: Buffer.from(symbiosis.bridge(chainIdOut).address.slice(2), 'hex'),\n        revertableAddress: Buffer.from(revertableAddress.slice(2), 'hex'),\n        chainId: BigInt(chainIdOut),\n    })\n\n    const tonFee = new TokenAmount(amountIn.token, MIN_SYNTH_TONS)\n\n    if (isWTon(symbiosis, amountIn.token)) {\n        return {\n            validUntil,\n            messages: [\n                {\n                    address: tonPortal,\n                    amount: amountIn.add(tonFee).raw.toString(),\n                    payload: synthesizeMessage.toBoc().toString('base64'),\n                },\n            ],\n        }\n    } else {\n        const tonTokenAddress = amountIn.token.tonAddress\n\n        const jettonMaster = JettonMaster.create(Address.parse(tonTokenAddress))\n\n        const tonClient = await symbiosis.getTonClient()\n        const provider = tonClient.provider(jettonMaster.address)\n\n        const jettonWalletAddress = await jettonMaster.getWalletAddress(provider, Address.parse(from))\n\n        const cell = beginCell()\n            .storeUint(0x0f8a7ea5, 32) // opcode for jetton transfer\n            .storeUint(0, 64) // query id\n            .storeCoins(BigInt(amountIn.raw.toString())) // jetton amount\n            .storeAddress(Address.parse(tonPortal)) // destination\n            .storeAddress(Address.parse(from)) // response_destination for excesses of ton\n            .storeBit(0) // null custom payload\n            .storeCoins(NOTIFICATION_PAYMENT) // forward amount - if >0, will send notification message\n            .storeMaybeRef(synthesizeMessage)\n            .endCell()\n\n        return {\n            validUntil,\n            messages: [\n                {\n                    address: jettonWalletAddress.toString(),\n                    amount: MIN_SYNTH_JETTONS.toString(),\n                    payload: cell.toBoc().toString('base64'),\n                },\n            ],\n        }\n    }\n}\n\n// TODO implement fee estimation\nexport function tonAdvisorMock(feeToken: Token) {\n    let feeRaw = '0.1' // wton\n    if (feeToken.symbol?.toLowerCase().includes('usdt')) {\n        feeRaw = '0.5'\n    }\n    if (feeToken.symbol?.toLowerCase().includes('uxlink')) {\n        feeRaw = '1'\n    }\n    if (feeToken.symbol?.toLowerCase().includes('cati')) {\n        feeRaw = '1'\n    }\n    if (feeToken.symbol?.toLowerCase().includes('pineye')) {\n        feeRaw = '1000'\n    }\n    if (feeToken.symbol?.toLowerCase().includes('evaa')) {\n        feeRaw = '1'\n    }\n    return {\n        fee: new TokenAmount(feeToken, parseUnits(feeRaw, feeToken.decimals).toString()),\n        save: new TokenAmount(feeToken, '0'),\n    }\n}\n","import { Filter, Log } from '@ethersproject/providers'\nimport { parseUnits } from '@ethersproject/units'\nimport { BigNumber, utils } from 'ethers'\nimport JSBI from 'jsbi'\nimport { BigintIsh, ChainId, ONE } from '../../constants'\nimport { Fraction, Percent, Token, TokenAmount, Trade, wrappedToken } from '../../entities'\nimport { BASES_TO_CHECK_TRADES_AGAINST, BIPS_BASE, CUSTOM_BASES } from '../constants'\nimport type { Symbiosis } from '../symbiosis'\nimport { Field } from '../types'\nimport flatMap from 'lodash.flatmap'\nimport { SdkError } from '../sdkError'\nimport { isBtcChainId } from './btc'\nimport { isTronChainId } from './tron'\nimport { isTonChainId } from './ton'\nimport { isSolanaChainId } from './solana'\n\ninterface GetInternalIdParams {\n    contractAddress: string\n    requestCount: BigNumber\n    chainId: ChainId\n}\n\ninterface GetExternalIdParams {\n    internalId: string\n    contractAddress: string\n    revertableAddress: string\n    chainId: ChainId\n}\n\nexport function isEvmChainId(chainId: ChainId | undefined) {\n    if (!chainId) return false\n    return !isBtcChainId(chainId) && !isTronChainId(chainId) && !isTonChainId(chainId) && !isSolanaChainId(chainId)\n}\n\nexport function getInternalId({ contractAddress, requestCount, chainId }: GetInternalIdParams): string {\n    return utils.solidityKeccak256(['address', 'uint256', 'uint256'], [contractAddress, requestCount, chainId])\n}\n\nexport function getExternalId({\n    internalId,\n    contractAddress,\n    revertableAddress,\n    chainId,\n}: GetExternalIdParams): string {\n    return utils.solidityKeccak256(\n        ['bytes32', 'address', 'address', 'uint256'],\n        [internalId, contractAddress, revertableAddress, chainId]\n    )\n}\n\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n    return value.mul(BigNumber.from(10000).add(BigNumber.from(5000))).div(BigNumber.from(10000))\n}\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(\n    trade?: Trade,\n    dexFee?: number\n): {\n    priceImpactWithoutFee?: Percent\n    realizedLPFee?: TokenAmount\n} {\n    const BASE_FEE = new Percent(JSBI.BigInt(dexFee || 30), JSBI.BigInt(10000))\n    const ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\n    const INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE)\n\n    // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n    const realizedLPFee = !trade\n        ? undefined\n        : ONE_HUNDRED_PERCENT.subtract(\n              trade.route.pairs.reduce<Fraction>(\n                  (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n                  ONE_HUNDRED_PERCENT\n              )\n          )\n\n    // remove lp fees from price impact\n    const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined\n\n    // the x*y=k impact\n    const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\n        ? new Percent(\n              JSBI.multiply(priceImpactWithoutFeeFraction?.numerator, JSBI.BigInt('-1')),\n              priceImpactWithoutFeeFraction?.denominator\n          )\n        : undefined\n\n    // the amount of the input that accrues to LPs\n    const realizedLPFeeAmount =\n        realizedLPFee &&\n        trade &&\n        new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\n    return {\n        priceImpactWithoutFee: priceImpactWithoutFeePercent,\n        realizedLPFee: realizedLPFeeAmount,\n    }\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n    return new Percent(JSBI.BigInt(Math.floor(num)), JSBI.BigInt(10000))\n}\n\nexport function getMinAmount(slippage: number, amount: BigintIsh): JSBI {\n    const slippageTolerance = basisPointsToPercent(slippage)\n    return new Fraction(ONE).subtract(slippageTolerance).multiply(amount).quotient\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(\n    trade: Trade | undefined,\n    allowedSlippage: number\n): { [field in Field]?: TokenAmount } {\n    const pct = basisPointsToPercent(allowedSlippage)\n    return {\n        [Field.INPUT]: trade?.maximumAmountIn(pct),\n        [Field.OUTPUT]: trade?.minimumAmountOut(pct),\n    }\n}\n\nexport function calculatePriceImpact(tokenAmountIn: TokenAmount, tokenAmountOut: TokenAmount): Percent {\n    const typedValueParsed = parseUnits(\n        tokenAmountOut.toExact(tokenAmountIn.token.decimals),\n        tokenAmountIn.token.decimals\n    ).toString()\n    if (typedValueParsed === '0') {\n        throw new SdkError('Cannot parse amountOut with decimals')\n    }\n    const amountIn = tokenAmountIn.raw\n    const amountOut = JSBI.BigInt(typedValueParsed)\n\n    const diff = JSBI.subtract(amountOut, amountIn)\n    const value = JSBI.divide(JSBI.multiply(diff, BIPS_BASE), amountIn)\n    return new Percent(value, BIPS_BASE)\n}\n\nexport class GetLogTimeoutExceededError extends Error {\n    constructor(public readonly filter: Filter) {\n        super(`Timed out waiting for logs matching filter: ${JSON.stringify(filter)}`)\n    }\n}\n\nexport const DEFAULT_EXCEED_DELAY = 1000 * 60 * 20 // 20 minutes\n\ninterface GetLogsWithTimeoutParams {\n    symbiosis: Symbiosis\n    chainId: ChainId\n    filter: Filter\n    exceedDelay?: number\n}\n\nfunction _promiseRaceResolved<T>(promises: Promise<T>[]): Promise<T> {\n    let rejectCounter = 0\n    const totalPromises = promises.length\n\n    return new Promise((resolve, reject) => {\n        const onReject = () => {\n            rejectCounter++\n            if (rejectCounter === totalPromises) {\n                reject(new SdkError('All promises were rejected.'))\n            }\n        }\n\n        promises.forEach((promise) => {\n            // Promise.resolve to \"promisify\" any value\n            Promise.resolve(promise).then(resolve).catch(onReject)\n        })\n    })\n}\n\nexport async function getLogWithTimeout({\n    symbiosis,\n    chainId,\n    filter,\n    exceedDelay: exceedTimeout = DEFAULT_EXCEED_DELAY,\n}: GetLogsWithTimeoutParams): Promise<Log> {\n    const spareRpcs = symbiosis.config.chains.find((chain) => chain.id === chainId)?.spareRpcs ?? []\n    const spareProviders = spareRpcs.map((rpc) => symbiosis.getProvider(chainId, rpc))\n\n    const provider = symbiosis.getProvider(chainId)\n\n    let activeFilter = filter\n    if (!activeFilter.fromBlock) {\n        const fromBlock = await symbiosis.getFromBlockWithOffset(chainId)\n\n        activeFilter = { ...filter, fromBlock }\n    }\n\n    return new Promise((resolve, reject) => {\n        const period = 1000 * 10 // 10 seconds\n        let pastTime = 0\n        let logs: Log[] = []\n\n        const getLogs = async () => {\n            pastTime += period\n            if (pastTime > exceedTimeout) {\n                clearInterval(interval)\n                reject(new GetLogTimeoutExceededError(activeFilter))\n                return\n            }\n\n            try {\n                logs = await provider.getLogs(activeFilter)\n            } catch (error) {\n                logs = await _promiseRaceResolved(\n                    spareProviders.map((spareProvider) => spareProvider.getLogs(activeFilter))\n                )\n            } finally {\n                if (logs.length > 0) {\n                    resolve(logs[0])\n                    clearInterval(interval)\n                }\n            }\n        }\n\n        const interval = setInterval(getLogs, period)\n    })\n}\n\nexport function getAllPairCombinations(tokenIn: Token, tokenOut: Token): [Token, Token][] {\n    const chainId = tokenIn.chainId\n\n    // Base tokens for building intermediary trading routes\n    const bases = BASES_TO_CHECK_TRADES_AGAINST[chainId] || []\n\n    // All pairs from base tokens\n    const basePairs: [Token, Token][] = flatMap(bases, (base: Token): [Token, Token][] =>\n        bases.map((otherBase) => [base, otherBase])\n    ).filter(([t0, t1]) => t0.address !== t1.address)\n\n    const [tokenA, tokenB] = [wrappedToken(tokenIn), wrappedToken(tokenOut)]\n    if (!tokenA || !tokenB) {\n        return []\n    }\n\n    return (\n        [\n            // the direct pair\n            [tokenA, tokenB],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs,\n        ]\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n            .filter(([t0, t1]) => t0.address !== t1.address)\n            // This filter will remove all the pairs that are not supported by the CUSTOM_BASES settings\n            // This option is currently not used on Pancake swap\n            .filter(([t0, t1]) => {\n                if (!chainId) return true\n                const customBases = CUSTOM_BASES[chainId]\n                if (!customBases) return true\n\n                const customBasesA: Token[] | undefined = customBases[t0.address]\n                const customBasesB: Token[] | undefined = customBases[t1.address]\n\n                if (!customBasesA && !customBasesB) return true\n                if (customBasesA && !customBasesA.find((base) => t1.equals(base))) return false\n                if (customBasesB && !customBasesB.find((base) => t0.equals(base))) return false\n\n                return true\n            })\n    )\n}\n\nexport interface DetailedSlippage {\n    A: number\n    B: number\n    C: number\n}\n\nexport function splitSlippage(totalSlippage: number, hasTradeA: boolean, hasTradeC: boolean): DetailedSlippage {\n    const minSlippage = 20 // 0.2%\n    if (totalSlippage < minSlippage) {\n        throw new SdkError(`Slippage cannot be less than ${(minSlippage / 100).toString()}%`)\n    }\n\n    let extraSwapsCount = 0\n    if (hasTradeA) {\n        extraSwapsCount += 1\n    }\n    if (hasTradeC) {\n        extraSwapsCount += 1\n    }\n    const swapsCount = extraSwapsCount + 1\n\n    const avg = totalSlippage / swapsCount\n\n    let addition = 0\n    let symbiosisPoolSlippage = avg\n    const symbiosisPoolMaxSlippage = 20 // 0.2%\n    if (avg > symbiosisPoolMaxSlippage) {\n        const rest = avg - symbiosisPoolMaxSlippage\n        symbiosisPoolSlippage = symbiosisPoolMaxSlippage\n        addition = extraSwapsCount > 0 ? rest / extraSwapsCount : 0\n    }\n\n    return {\n        A: hasTradeA ? Math.floor((avg + addition) * 100) / 100 : 0,\n        B: Math.floor(symbiosisPoolSlippage * 100) / 100,\n        C: hasTradeC ? Math.floor((avg + addition + symbiosisPoolSlippage) * 100) / 100 : 0,\n    }\n}\n","import { AddressZero } from '@ethersproject/constants'\nimport JSBI from 'jsbi'\nimport { ChainId } from '../constants'\nimport { Percent, Token, WETH } from '../entities'\n\nexport const CROSS_CHAIN_ID = '0x0000000000000000000000000000000000000000000000000000000000000000'\n\n// a list of tokens by chain\ntype ChainTokensList = {\n    readonly [chainId in ChainId]?: Token[]\n}\n\nexport const WETH_ONLY: ChainTokensList = {\n    [ChainId.ETH_MAINNET]: [WETH[ChainId.ETH_MAINNET]],\n    [ChainId.ETH_RINKEBY]: [WETH[ChainId.ETH_RINKEBY]],\n    [ChainId.ETH_KOVAN]: [WETH[ChainId.ETH_KOVAN]],\n    [ChainId.BSC_MAINNET]: [WETH[ChainId.BSC_MAINNET]],\n    [ChainId.BSC_TESTNET]: [WETH[ChainId.BSC_TESTNET]],\n    [ChainId.MATIC_MAINNET]: [WETH[ChainId.MATIC_MAINNET]],\n    [ChainId.MATIC_MUMBAI]: [WETH[ChainId.MATIC_MUMBAI]],\n    [ChainId.AVAX_MAINNET]: [WETH[ChainId.AVAX_MAINNET]],\n    [ChainId.AVAX_TESTNET]: [WETH[ChainId.AVAX_TESTNET]],\n    [ChainId.HECO_MAINNET]: [WETH[ChainId.HECO_MAINNET]],\n    [ChainId.HECO_TESTNET]: [WETH[ChainId.HECO_TESTNET]],\n    [ChainId.OKEX_MAINNET]: [WETH[ChainId.OKEX_MAINNET]],\n    [ChainId.OKEX_TESTNET]: [WETH[ChainId.OKEX_TESTNET]],\n    [ChainId.BOBA_MAINNET]: [WETH[ChainId.BOBA_MAINNET]],\n    [ChainId.BOBA_AVALANCHE]: [WETH[ChainId.BOBA_AVALANCHE]],\n    [ChainId.SYMBIOSIS_TESTNET]: [WETH[ChainId.SYMBIOSIS_TESTNET]],\n    [ChainId.SYMBIOSIS_MAINNET]: [WETH[ChainId.SYMBIOSIS_MAINNET]],\n    [ChainId.BOBA_RINKEBY]: [WETH[ChainId.BOBA_RINKEBY]],\n    [ChainId.MILKOMEDA_MAINNET]: [WETH[ChainId.MILKOMEDA_MAINNET]],\n    [ChainId.MILKOMEDA_DEVNET]: [WETH[ChainId.MILKOMEDA_DEVNET]],\n    [ChainId.AURORA_MAINNET]: [WETH[ChainId.AURORA_MAINNET]],\n    [ChainId.AURORA_TESTNET]: [WETH[ChainId.AURORA_TESTNET]],\n    [ChainId.TELOS_MAINNET]: [WETH[ChainId.TELOS_MAINNET]],\n    [ChainId.TELOS_TESTNET]: [WETH[ChainId.TELOS_TESTNET]],\n    [ChainId.SHARDEUM_TESTNET_2]: [WETH[ChainId.SHARDEUM_TESTNET_2]],\n    [ChainId.KAVA_MAINNET]: [WETH[ChainId.KAVA_MAINNET]],\n    [ChainId.SCROLL_SEPOLIA]: [WETH[ChainId.SCROLL_SEPOLIA]],\n    [ChainId.ZKSYNC_MAINNET]: [WETH[ChainId.ZKSYNC_MAINNET]],\n    [ChainId.ARBITRUM_MAINNET]: [WETH[ChainId.ARBITRUM_MAINNET]],\n    [ChainId.ARBITRUM_NOVA]: [WETH[ChainId.ARBITRUM_NOVA]],\n    [ChainId.OPTIMISM_MAINNET]: [WETH[ChainId.OPTIMISM_MAINNET]],\n    [ChainId.ZETACHAIN_ATHENS_2]: [WETH[ChainId.ZETACHAIN_ATHENS_2]],\n    [ChainId.POLYGON_ZK]: [WETH[ChainId.POLYGON_ZK]],\n    [ChainId.LINEA_TESTNET]: [WETH[ChainId.LINEA_TESTNET]],\n    [ChainId.LINEA_MAINNET]: [WETH[ChainId.LINEA_MAINNET]],\n    [ChainId.MANTLE_MAINNET]: [WETH[ChainId.MANTLE_MAINNET]],\n    [ChainId.MANTLE_TESTNET]: [WETH[ChainId.MANTLE_TESTNET]],\n    [ChainId.BASE_MAINNET]: [WETH[ChainId.BASE_MAINNET]],\n    [ChainId.TRON_MAINNET]: [WETH[ChainId.TRON_MAINNET]],\n    [ChainId.TRON_TESTNET]: [WETH[ChainId.TRON_TESTNET]],\n    [ChainId.SCROLL_MAINNET]: [WETH[ChainId.SCROLL_MAINNET]],\n    [ChainId.MANTA_MAINNET]: [WETH[ChainId.MANTA_MAINNET]],\n    [ChainId.METIS_MAINNET]: [WETH[ChainId.METIS_MAINNET]],\n    [ChainId.OKX_X1_TESTNET]: [WETH[ChainId.OKX_X1_TESTNET]],\n    [ChainId.BAHAMUT_MAINNET]: [WETH[ChainId.BAHAMUT_MAINNET]],\n    [ChainId.MODE_MAINNET]: [WETH[ChainId.MODE_MAINNET]],\n    [ChainId.RSK_MAINNET]: [WETH[ChainId.RSK_MAINNET]],\n    [ChainId.BLAST_MAINNET]: [WETH[ChainId.BLAST_MAINNET]],\n    [ChainId.MERLIN_MAINNET]: [WETH[ChainId.MERLIN_MAINNET]],\n    [ChainId.ZKLINK_MAINNET]: [WETH[ChainId.ZKLINK_MAINNET]],\n    [ChainId.CORE_MAINNET]: [WETH[ChainId.CORE_MAINNET]],\n    [ChainId.SEPOLIA_TESTNET]: [WETH[ChainId.SEPOLIA_TESTNET]],\n    [ChainId.TAIKO_MAINNET]: [WETH[ChainId.TAIKO_MAINNET]],\n    [ChainId.SEI_EVM_MAINNET]: [WETH[ChainId.SEI_EVM_MAINNET]],\n    [ChainId.ZETACHAIN_MAINNET]: [WETH[ChainId.ZETACHAIN_MAINNET]],\n    [ChainId.CRONOS_MAINNET]: [WETH[ChainId.CRONOS_MAINNET]],\n    [ChainId.FRAXTAL_MAINNET]: [WETH[ChainId.FRAXTAL_MAINNET]],\n    [ChainId.GRAVITY_MAINNET]: [WETH[ChainId.GRAVITY_MAINNET]],\n    [ChainId.BSQUARED_MAINNET]: [WETH[ChainId.BSQUARED_MAINNET]],\n    [ChainId.CRONOS_ZK_MAINNET]: [WETH[ChainId.CRONOS_ZK_MAINNET]],\n    [ChainId.MORPH_MAINNET]: [WETH[ChainId.MORPH_MAINNET]],\n    [ChainId.SOLANA_MAINNET]: [WETH[ChainId.SOLANA_MAINNET]],\n    [ChainId.GOAT_MAINNET]: [WETH[ChainId.GOAT_MAINNET]],\n    [ChainId.SONIC_MAINNET]: [WETH[ChainId.SONIC_MAINNET]],\n    [ChainId.ABSTRACT_MAINNET]: [WETH[ChainId.ABSTRACT_MAINNET]],\n    [ChainId.GNOSIS_MAINNET]: [WETH[ChainId.GNOSIS_MAINNET]],\n    [ChainId.BERACHAIN_MAINNET]: [WETH[ChainId.BERACHAIN_MAINNET]],\n    [ChainId.UNICHAIN_MAINNET]: [WETH[ChainId.UNICHAIN_MAINNET]],\n    [ChainId.SONEIUM_MAINNET]: [WETH[ChainId.SONEIUM_MAINNET]],\n    [ChainId.OPBNB_MAINNET]: [WETH[ChainId.OPBNB_MAINNET]],\n    [ChainId.HYPERLIQUID_MAINNET]: [WETH[ChainId.HYPERLIQUID_MAINNET]],\n    [ChainId.KATANA_MAINNET]: [WETH[ChainId.KATANA_MAINNET]],\n    [ChainId.APECHAIN_MAINNET]: [WETH[ChainId.APECHAIN_MAINNET]],\n    [ChainId.PLASMA_MAINNET]: [WETH[ChainId.PLASMA_MAINNET]],\n}\n\nexport const DEX_TOKENS_TO_CHECK_TRADES_AGAINST = {\n    [ChainId.ETH_MAINNET]: [\n        new Token({\n            chainId: ChainId.ETH_MAINNET,\n            address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n            decimals: 18,\n            symbol: 'DAI',\n            name: 'Dai Stablecoin',\n        }),\n        new Token({\n            chainId: ChainId.ETH_MAINNET,\n            address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n            decimals: 6,\n            symbol: 'USDC',\n            name: 'USD//C',\n        }),\n        new Token({\n            chainId: ChainId.ETH_MAINNET,\n            address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n            decimals: 6,\n            symbol: 'USDT',\n            name: 'Tether USD',\n        }),\n        // new Token({\n        //     chainId: ChainId.ETH_MAINNET,\n        //     address: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',\n        //     decimals: 8,\n        //     symbol: 'WBTC',\n        //     name: 'Wrapped BTC',\n        // }),\n    ],\n    [ChainId.BSC_MAINNET]: [\n        // new Token({\n        //     chainId: ChainId.BSC_MAINNET,\n        //     address: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\n        //     decimals: 18,\n        //     symbol: 'CAKE',\n        //     name: 'PancakeSwap Token',\n        // }),\n        new Token({\n            chainId: ChainId.BSC_MAINNET,\n            address: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n            decimals: 18,\n            symbol: 'BUSD',\n            name: 'Binance USD',\n        }),\n        new Token({\n            chainId: ChainId.BSC_MAINNET,\n            address: '0x55d398326f99059fF775485246999027B3197955',\n            decimals: 18,\n            symbol: 'USDT',\n            name: 'Tether USD',\n        }),\n        // new Token({\n        //     chainId: ChainId.BSC_MAINNET,\n        //     address: '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',\n        //     decimals: 18,\n        //     symbol: 'BTCB',\n        //     name: 'Binance BTC',\n        // }),\n        // new Token({\n        //     chainId: ChainId.BSC_MAINNET,\n        //     address: '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',\n        //     decimals: 18,\n        //     symbol: 'UST',\n        //     name: 'Wrapped UST Token',\n        // }),\n        // new Token({\n        //     chainId: ChainId.BSC_MAINNET,\n        //     address: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n        //     decimals: 18,\n        //     symbol: 'ETH',\n        //     name: 'Binance-Peg Ethereum Token',\n        // }),\n        new Token({\n            chainId: ChainId.BSC_MAINNET,\n            address: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n            decimals: 18,\n            symbol: 'USDC',\n            name: 'Binance-Peg USD Coin',\n        }),\n    ],\n    [ChainId.AVAX_MAINNET]: [\n        // new Token({\n        //     chainId: ChainId.AVAX_MAINNET,\n        //     address: '0x60781C2586D68229fde47564546784ab3fACA982',\n        //     decimals: 18,\n        //     symbol: 'PNG',\n        //     name: 'Pangolin',\n        // }),\n        new Token({\n            chainId: ChainId.AVAX_MAINNET,\n            address: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\n            decimals: 6,\n            symbol: 'USDT.e',\n            name: 'Tether USD',\n        }),\n        new Token({\n            chainId: ChainId.AVAX_MAINNET,\n            address: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\n            decimals: 18,\n            symbol: 'DAI.e',\n            name: 'Dai Stablecoin',\n        }),\n        new Token({\n            chainId: ChainId.AVAX_MAINNET,\n            address: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n            decimals: 6,\n            symbol: 'USDC.e',\n            name: 'USD Coin',\n        }),\n        // new Token({\n        //     chainId: ChainId.AVAX_MAINNET,\n        //     address: '0x260Bbf5698121EB85e7a74f2E45E16Ce762EbE11',\n        //     decimals: 6,\n        //     symbol: 'UST',\n        //     name: 'Axelar Wrapped UST',\n        // }),\n        new Token({\n            chainId: ChainId.AVAX_MAINNET,\n            address: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E',\n            decimals: 6,\n            symbol: 'USDC',\n            name: 'USD Coin',\n        }),\n    ],\n    [ChainId.MATIC_MAINNET]: [\n        new Token({\n            chainId: ChainId.MATIC_MAINNET,\n            address: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n            decimals: 6,\n            symbol: 'USDC',\n            name: 'USDC',\n        }),\n        new Token({\n            chainId: ChainId.MATIC_MAINNET,\n            address: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n            decimals: 6,\n            symbol: 'USDT',\n            name: 'Tether USD',\n        }),\n        // new Token({\n        //     chainId: ChainId.MATIC_MAINNET,\n        //     address: '0x831753DD7087CaC61aB5644b308642cc1c33Dc13',\n        //     decimals: 18,\n        //     symbol: 'QUICK',\n        //     name: 'QuickSwap',\n        // }),\n        // new Token({\n        //     chainId: ChainId.MATIC_MAINNET,\n        //     address: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n        //     decimals: 18,\n        //     symbol: 'ETH',\n        //     name: 'Ether',\n        // }),\n        new Token({\n            chainId: ChainId.MATIC_MAINNET,\n            address: '0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6',\n            decimals: 18,\n            symbol: 'wBTC',\n            name: 'Wrapped Bitcoin',\n        }),\n        new Token({\n            chainId: ChainId.MATIC_MAINNET,\n            address: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\n            decimals: 18,\n            symbol: 'DAI',\n            name: 'Dai Stablecoin',\n        }),\n    ],\n    [ChainId.BOBA_AVALANCHE]: [],\n    [ChainId.SYMBIOSIS_TESTNET]: [],\n    [ChainId.SYMBIOSIS_MAINNET]: [],\n    [ChainId.BOBA_MAINNET]: [\n        new Token({\n            chainId: ChainId.BOBA_MAINNET,\n            symbol: 'DAI',\n            name: 'Dai Stablecoin',\n            address: '0xf74195Bb8a5cf652411867c5C2C5b8C2a402be35',\n            decimals: 18,\n        }),\n        new Token({\n            chainId: ChainId.BOBA_MAINNET,\n            symbol: 'WBTC',\n            name: 'Wrapped BTC',\n            address: '0xdc0486f8bf31DF57a952bcd3c1d3e166e3d9eC8b',\n            decimals: 8,\n        }),\n        new Token({\n            chainId: ChainId.BOBA_MAINNET,\n            name: 'USD Coin',\n            address: '0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc',\n            symbol: 'USDC',\n            decimals: 6,\n        }),\n        new Token({\n            chainId: ChainId.BOBA_MAINNET,\n            symbol: 'USDT',\n            name: 'Tether USD',\n            address: '0x5DE1677344D3Cb0D7D465c10b72A8f60699C062d',\n            decimals: 6,\n        }),\n        new Token({\n            chainId: ChainId.BOBA_MAINNET,\n            symbol: 'BOBA',\n            name: 'Boba Token',\n            address: '0xa18bF3994C0Cc6E3b63ac420308E5383f53120D7',\n            decimals: 18,\n        }),\n        new Token({\n            chainId: ChainId.BOBA_MAINNET,\n            symbol: 'OLO',\n            name: 'OolongSwap Token',\n            address: '0x5008F837883EA9a07271a1b5eB0658404F5a9610',\n            decimals: 18,\n        }),\n    ],\n    [ChainId.MILKOMEDA_MAINNET]: [\n        new Token({\n            chainId: ChainId.MILKOMEDA_MAINNET,\n            symbol: 'sUSDC',\n            name: 'USDC from Ethereum',\n            address: '0x42110A5133F91B49E32B671Db86E2C44Edc13832',\n            decimals: 6,\n        }),\n        new Token({\n            chainId: ChainId.MILKOMEDA_MAINNET,\n            symbol: 'SIS',\n            name: 'SIS from Ethereum',\n            address: '0xedd4D7DAa6bf8746997CEbbF974a60B838757601',\n            decimals: 18,\n        }),\n    ],\n    [ChainId.AURORA_MAINNET]: [\n        new Token({\n            chainId: ChainId.AURORA_MAINNET,\n            symbol: 'USDC',\n            name: 'USD Coin',\n            address: '0xB12BFcA5A55806AaF64E99521918A4bf0fC40802',\n            decimals: 6,\n        }),\n        new Token({\n            chainId: ChainId.AURORA_MAINNET,\n            symbol: 'USDT',\n            name: 'Tether USD',\n            address: '0x4988a896b1227218e4A686fdE5EabdcAbd91571f',\n            decimals: 6,\n        }),\n        new Token({\n            chainId: ChainId.AURORA_MAINNET,\n            symbol: 'wNEAR',\n            name: 'Wrapped NEAR',\n            address: '0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d',\n            decimals: 24,\n        }),\n        new Token({\n            chainId: ChainId.AURORA_MAINNET,\n            symbol: 'AURORA',\n            name: 'AURORA',\n            address: '0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79',\n            decimals: 18,\n        }),\n    ],\n    [ChainId.KAVA_MAINNET]: [\n        new Token({\n            chainId: ChainId.KAVA_MAINNET,\n            address: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\n            decimals: 6,\n            symbol: 'USDC',\n            name: 'USD Coin',\n        }),\n    ],\n    [ChainId.SCROLL_SEPOLIA]: [],\n    [ChainId.ZKSYNC_MAINNET]: [\n        new Token({\n            chainId: ChainId.ZKSYNC_MAINNET,\n            address: '0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4',\n            decimals: 6,\n            symbol: 'USDC',\n            name: 'USD Coin',\n        }),\n    ],\n    [ChainId.ARBITRUM_MAINNET]: [\n        new Token({\n            chainId: ChainId.ARBITRUM_MAINNET,\n            address: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n            decimals: 6,\n            symbol: 'USDC',\n            name: 'USD Coin',\n        }),\n    ],\n    [ChainId.ARBITRUM_NOVA]: [\n        new Token({\n            chainId: ChainId.ARBITRUM_NOVA,\n            address: '0x750ba8b76187092B0D1E87E28daaf484d1b5273b',\n            decimals: 6,\n            symbol: 'USDC',\n            name: 'USD Coin',\n        }),\n    ],\n    [ChainId.OPTIMISM_MAINNET]: [\n        new Token({\n            chainId: ChainId.OPTIMISM_MAINNET,\n            address: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\n            decimals: 6,\n            symbol: 'USDC',\n            name: 'USD Coin',\n        }),\n    ],\n    [ChainId.ZETACHAIN_ATHENS_2]: [],\n    [ChainId.POLYGON_ZK]: [],\n    [ChainId.TRON_TESTNET]: [\n        new Token({\n            chainId: ChainId.TRON_TESTNET,\n            address: 'TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs',\n            decimals: 6,\n            symbol: 'USDT',\n            name: 'Tether USD',\n        }),\n    ],\n    [ChainId.TRON_MAINNET]: [\n        new Token({\n            chainId: ChainId.TRON_MAINNET,\n            address: 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',\n            decimals: 6,\n            symbol: 'USDT',\n            name: 'Tether USD',\n        }),\n    ],\n    [ChainId.LINEA_TESTNET]: [],\n    [ChainId.LINEA_MAINNET]: [],\n    [ChainId.MANTLE_MAINNET]: [],\n    [ChainId.MANTLE_TESTNET]: [],\n    [ChainId.BASE_MAINNET]: [],\n    [ChainId.SCROLL_MAINNET]: [],\n    [ChainId.MANTA_MAINNET]: [],\n    [ChainId.METIS_MAINNET]: [],\n    [ChainId.OKX_X1_TESTNET]: [],\n    [ChainId.BAHAMUT_MAINNET]: [],\n    [ChainId.MODE_MAINNET]: [],\n    [ChainId.RSK_MAINNET]: [],\n    [ChainId.BLAST_MAINNET]: [],\n    [ChainId.MERLIN_MAINNET]: [],\n    [ChainId.ZKLINK_MAINNET]: [],\n    [ChainId.CORE_MAINNET]: [],\n    [ChainId.TAIKO_MAINNET]: [],\n    [ChainId.SEI_EVM_MAINNET]: [],\n    [ChainId.ZETACHAIN_MAINNET]: [],\n    [ChainId.CRONOS_MAINNET]: [],\n    [ChainId.FRAXTAL_MAINNET]: [],\n    [ChainId.GRAVITY_MAINNET]: [],\n    [ChainId.BSQUARED_MAINNET]: [],\n    [ChainId.CRONOS_ZK_MAINNET]: [\n        new Token({\n            chainId: ChainId.CRONOS_ZK_MAINNET,\n            address: '0x5b91e29Ae5A71d9052620Acb813d5aC25eC7a4A2',\n            decimals: 18,\n            symbol: 'vUSD',\n            name: 'Veno USD',\n        }),\n    ],\n    [ChainId.MORPH_MAINNET]: [\n        new Token({\n            chainId: ChainId.MORPH_MAINNET,\n            address: '0xc7D67A9cBB121b3b0b9c053DD9f469523243379A',\n            decimals: 18,\n            symbol: 'USDT',\n            name: 'Tether USD',\n        }),\n    ],\n    [ChainId.SOLANA_MAINNET]: [],\n    [ChainId.GOAT_MAINNET]: [],\n    [ChainId.SONIC_MAINNET]: [],\n    [ChainId.ABSTRACT_MAINNET]: [],\n    [ChainId.GNOSIS_MAINNET]: [],\n    [ChainId.BERACHAIN_MAINNET]: [],\n    [ChainId.UNICHAIN_MAINNET]: [],\n    [ChainId.SONEIUM_MAINNET]: [],\n    [ChainId.OPBNB_MAINNET]: [],\n    [ChainId.HYPERLIQUID_MAINNET]: [],\n    [ChainId.KATANA_MAINNET]: [],\n    [ChainId.APECHAIN_MAINNET]: [],\n    [ChainId.PLASMA_MAINNET]: [],\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokensList = {\n    ...WETH_ONLY,\n    [ChainId.ETH_MAINNET]: [WETH[ChainId.ETH_MAINNET], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.ETH_MAINNET]],\n    [ChainId.BSC_MAINNET]: [WETH[ChainId.BSC_MAINNET], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.BSC_MAINNET]],\n    [ChainId.AVAX_MAINNET]: [WETH[ChainId.AVAX_MAINNET], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.AVAX_MAINNET]],\n    [ChainId.MATIC_MAINNET]: [\n        WETH[ChainId.MATIC_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.MATIC_MAINNET],\n    ],\n    [ChainId.BOBA_MAINNET]: [WETH[ChainId.BOBA_MAINNET], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.BOBA_MAINNET]],\n    [ChainId.BOBA_AVALANCHE]: [\n        WETH[ChainId.BOBA_AVALANCHE],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.BOBA_AVALANCHE],\n    ],\n    [ChainId.SYMBIOSIS_TESTNET]: [\n        WETH[ChainId.SYMBIOSIS_TESTNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.SYMBIOSIS_TESTNET],\n    ],\n    [ChainId.SYMBIOSIS_MAINNET]: [\n        WETH[ChainId.SYMBIOSIS_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.SYMBIOSIS_MAINNET],\n    ],\n    [ChainId.AURORA_MAINNET]: [\n        WETH[ChainId.AURORA_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.AURORA_MAINNET],\n    ],\n    [ChainId.KAVA_MAINNET]: [WETH[ChainId.KAVA_MAINNET], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.KAVA_MAINNET]],\n    [ChainId.ZKSYNC_MAINNET]: [\n        WETH[ChainId.ZKSYNC_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.ZKSYNC_MAINNET],\n    ],\n    [ChainId.ARBITRUM_MAINNET]: [\n        WETH[ChainId.ARBITRUM_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.ARBITRUM_MAINNET],\n    ],\n    [ChainId.ARBITRUM_NOVA]: [\n        WETH[ChainId.ARBITRUM_NOVA],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.ARBITRUM_NOVA],\n    ],\n    [ChainId.OPTIMISM_MAINNET]: [\n        WETH[ChainId.OPTIMISM_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.OPTIMISM_MAINNET],\n    ],\n    [ChainId.POLYGON_ZK]: [WETH[ChainId.POLYGON_ZK], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.POLYGON_ZK]],\n    [ChainId.TRON_TESTNET]: [WETH[ChainId.TRON_TESTNET], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.TRON_TESTNET]],\n    [ChainId.MODE_MAINNET]: [WETH[ChainId.MODE_MAINNET], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.MODE_MAINNET]],\n    [ChainId.RSK_MAINNET]: [WETH[ChainId.RSK_MAINNET], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.RSK_MAINNET]],\n    [ChainId.BLAST_MAINNET]: [\n        WETH[ChainId.BLAST_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.BLAST_MAINNET],\n    ],\n    [ChainId.MERLIN_MAINNET]: [\n        WETH[ChainId.MERLIN_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.MERLIN_MAINNET],\n    ],\n    [ChainId.ZKLINK_MAINNET]: [\n        WETH[ChainId.ZKLINK_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.ZKLINK_MAINNET],\n    ],\n    [ChainId.TAIKO_MAINNET]: [\n        WETH[ChainId.TAIKO_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.TAIKO_MAINNET],\n    ],\n    [ChainId.SEI_EVM_MAINNET]: [\n        WETH[ChainId.SEI_EVM_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.SEI_EVM_MAINNET],\n    ],\n    [ChainId.ZETACHAIN_MAINNET]: [\n        WETH[ChainId.ZETACHAIN_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.ZETACHAIN_MAINNET],\n    ],\n    [ChainId.CRONOS_MAINNET]: [\n        WETH[ChainId.CRONOS_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.CRONOS_MAINNET],\n    ],\n    [ChainId.FRAXTAL_MAINNET]: [\n        WETH[ChainId.FRAXTAL_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.FRAXTAL_MAINNET],\n    ],\n    [ChainId.GRAVITY_MAINNET]: [\n        WETH[ChainId.GRAVITY_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.GRAVITY_MAINNET],\n    ],\n    [ChainId.BSQUARED_MAINNET]: [\n        WETH[ChainId.BSQUARED_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.BSQUARED_MAINNET],\n    ],\n    [ChainId.CRONOS_ZK_MAINNET]: [\n        WETH[ChainId.CRONOS_ZK_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.CRONOS_ZK_MAINNET],\n    ],\n    [ChainId.MORPH_MAINNET]: [\n        WETH[ChainId.MORPH_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.MORPH_MAINNET],\n    ],\n    [ChainId.SOLANA_MAINNET]: [\n        WETH[ChainId.SOLANA_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.SOLANA_MAINNET],\n    ],\n    [ChainId.GOAT_MAINNET]: [WETH[ChainId.GOAT_MAINNET], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.GOAT_MAINNET]],\n    [ChainId.SONIC_MAINNET]: [\n        WETH[ChainId.SONIC_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.SONIC_MAINNET],\n    ],\n    [ChainId.ABSTRACT_MAINNET]: [\n        WETH[ChainId.ABSTRACT_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.ABSTRACT_MAINNET],\n    ],\n    [ChainId.GNOSIS_MAINNET]: [\n        WETH[ChainId.GNOSIS_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.GNOSIS_MAINNET],\n    ],\n    [ChainId.BERACHAIN_MAINNET]: [\n        WETH[ChainId.BERACHAIN_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.BERACHAIN_MAINNET],\n    ],\n    [ChainId.UNICHAIN_MAINNET]: [\n        WETH[ChainId.UNICHAIN_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.UNICHAIN_MAINNET],\n    ],\n    [ChainId.SONEIUM_MAINNET]: [\n        WETH[ChainId.SONEIUM_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.SONEIUM_MAINNET],\n    ],\n    [ChainId.OPBNB_MAINNET]: [\n        WETH[ChainId.OPBNB_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.OPBNB_MAINNET],\n    ],\n    [ChainId.HYPERLIQUID_MAINNET]: [\n        WETH[ChainId.HYPERLIQUID_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.HYPERLIQUID_MAINNET],\n    ],\n    [ChainId.KATANA_MAINNET]: [\n        WETH[ChainId.KATANA_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.KATANA_MAINNET],\n    ],\n    [ChainId.APECHAIN_MAINNET]: [\n        WETH[ChainId.APECHAIN_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.APECHAIN_MAINNET],\n    ],\n    [ChainId.PLASMA_MAINNET]: [\n        WETH[ChainId.PLASMA_MAINNET],\n        ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[ChainId.PLASMA_MAINNET],\n    ],\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: {\n    [chainId in ChainId]?: { [tokenAddress: string]: Token[] }\n} = {\n    [ChainId.BSC_MAINNET]: {},\n}\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n\n// Multicall2 addresses (tryAggregate method required)\nexport const MULTICALL_ADDRESSES: { [chainId in ChainId]?: string } = {\n    [ChainId.ETH_MAINNET]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n    [ChainId.ETH_RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n    [ChainId.ETH_KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n    [ChainId.BSC_MAINNET]: '0xfF6FD90A470Aaa0c1B8A54681746b07AcdFedc9B',\n    [ChainId.BSC_TESTNET]: '0xbC4F726A6dB460DcFE49E6a56886470B94Dfc302',\n    [ChainId.MATIC_MAINNET]: '0x275617327c958bD06b5D6b871E7f491D76113dd8',\n    [ChainId.MATIC_MUMBAI]: '0xe9939e7Ea7D7fb619Ac57f648Da7B1D425832631',\n    [ChainId.AVAX_MAINNET]: '0x29b6603d17b9d8f021ecb8845b6fd06e1adf89de',\n    [ChainId.AVAX_TESTNET]: '0x9A9b5Ef5CeAbaC69d3B4A71c4da782554A35B638',\n    [ChainId.HECO_MAINNET]: AddressZero,\n    [ChainId.HECO_TESTNET]: '0x9a9b5ef5ceabac69d3b4a71c4da782554a35b638',\n    [ChainId.OKEX_MAINNET]: AddressZero,\n    [ChainId.OKEX_TESTNET]: '0x9A9b5Ef5CeAbaC69d3B4A71c4da782554A35B638',\n    [ChainId.BOBA_MAINNET]: '0xaeD5b25BE1c3163c907a471082640450F928DDFE',\n    [ChainId.BOBA_AVALANCHE]: '0x92C5b5B66988E6B8931a8CD3faa418b42003DF2F',\n    [ChainId.SYMBIOSIS_TESTNET]: '0x7F373f8033D64Abd491ceBeAc2dE070050F97229',\n    [ChainId.SYMBIOSIS_MAINNET]: '0x6148FD6C649866596C3d8a971fC313E5eCE84882',\n    [ChainId.BOBA_RINKEBY]: '0x773ccf8ba321c9f96a100b4b0fa1ecf7046645f5',\n    [ChainId.MILKOMEDA_MAINNET]: '0xa46157Cda2D019Ba4cDcd8cE12A04760c15C355b',\n    [ChainId.MILKOMEDA_DEVNET]: '0x41b5984f45AfB2560a0ED72bB69A98E8b32B3cCA',\n    [ChainId.AURORA_MAINNET]: '0xbf69a56d35b8d6f5a8e0e96b245a72f735751e54',\n    [ChainId.AURORA_TESTNET]: '0x4a5143B13C84DB00E6d8c19b9EA00f3b91416d20',\n    [ChainId.TELOS_MAINNET]: '0x53dC7535028e2fcaCa0d847AD108b9240C0801b1',\n    [ChainId.TELOS_TESTNET]: '0x9a01bf917477dd9f5d715d188618fc8b7350cd22',\n    [ChainId.SHARDEUM_TESTNET_2]: '0x41b5984f45AfB2560a0ED72bB69A98E8b32B3cCA',\n    [ChainId.KAVA_MAINNET]: '0x30A62aA52Fa099C4B227869EB6aeaDEda054d121',\n    [ChainId.SCROLL_SEPOLIA]: '0xF3Cfa393be621097669BcD2bD4923CEC347E1210',\n    [ChainId.ZKSYNC_MAINNET]: '0x52192C3De01535a9Ad2743A5Fe4f774868103C20',\n    [ChainId.ARBITRUM_MAINNET]: '0x80c7dd17b01855a6d2347444a0fcc36136a314de',\n    [ChainId.ARBITRUM_NOVA]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.OPTIMISM_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.ZETACHAIN_ATHENS_2]: '0x9a01bf917477dD9F5D715D188618fc8B7350cd22',\n    [ChainId.POLYGON_ZK]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.TRON_TESTNET]: '0x00e08cb2cd7480ddf6c54430207dff81ce359887',\n    [ChainId.TRON_MAINNET]: '0x32A4F47A74A6810BD0BF861CABAB99656A75DE9E',\n    [ChainId.LINEA_TESTNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.LINEA_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.MANTLE_MAINNET]: '0xb55cc6B5B402437b66c13c0CEd0EF367aa7c26da',\n    [ChainId.MANTLE_TESTNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.BASE_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.SCROLL_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.MANTA_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.METIS_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.OKX_X1_TESTNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.BAHAMUT_MAINNET]: '0xa385B1436fD2A6a1c6865E22c522A1aA40CaDCC6',\n    [ChainId.MODE_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.RSK_MAINNET]: '0xca11bde05977b3631167028862be2a173976ca11',\n    [ChainId.BLAST_MAINNET]: '0xca11bde05977b3631167028862be2a173976ca11',\n    [ChainId.MERLIN_MAINNET]: '0x45CFd6FB7999328F189aaD2739Fba4Be6C45E5bf',\n    [ChainId.ZKLINK_MAINNET]: '0x7E06D0CD8D3fDDBB875345dF389d986f810A49F6',\n    [ChainId.SEPOLIA_TESTNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.CORE_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.TAIKO_MAINNET]: '0x076f5925112b13a4D4c70fc83d9019f1854e4415',\n    [ChainId.SEI_EVM_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.ZETACHAIN_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.CRONOS_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.FRAXTAL_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.GRAVITY_MAINNET]: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n    [ChainId.BSQUARED_MAINNET]: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n    [ChainId.CRONOS_ZK_MAINNET]: '0x4c398CB4b7D4d31a54D254d8Aed09B9e8353E80E',\n    [ChainId.MORPH_MAINNET]: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n    [ChainId.SOLANA_MAINNET]: AddressZero,\n    [ChainId.GOAT_MAINNET]: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n    [ChainId.SONIC_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.ABSTRACT_MAINNET]: '0xBf63C7944B1635c79a0f0eE7e07b1702837AD1F9',\n    [ChainId.GNOSIS_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.BERACHAIN_MAINNET]: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n    [ChainId.UNICHAIN_MAINNET]: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n    [ChainId.SONEIUM_MAINNET]: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n    [ChainId.OPBNB_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.HYPERLIQUID_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.KATANA_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n    [ChainId.APECHAIN_MAINNET]: '0xcA11bde05977b3631167028862bE2a173976CA11',\n    [ChainId.PLASMA_MAINNET]: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n}\n\nexport const MULTICALL_ROUTER_V2: Partial<Record<ChainId, string>> = {\n    [ChainId.ETH_MAINNET]: '0x44487a445a7595446309464A82244B4bD4e325D5',\n    [ChainId.ARBITRUM_MAINNET]: '0x5ad095DE83693ba063941f2f2C5A0dF02383B651',\n    [ChainId.ZKSYNC_MAINNET]: '0x7D2172C9bf79263FFf6E456c423a5e3E69F9AA4b',\n    [ChainId.BSC_MAINNET]: '0xeB278638fFa33CC776230dE4FF88eD5142ed8c1A',\n    [ChainId.RSK_MAINNET]: '0xca506793a420e901bbca8066be5661e3c52c84c2',\n}\n","import { TransactionRequest } from '@ethersproject/providers'\n\nimport { ChainId, TokenConstructor } from '../constants'\nimport { Percent, Token, TokenAmount } from '../entities'\nimport { OneInchProtocols } from './trade/oneInchTrade'\nimport { SymbiosisKind, SymbiosisTradeType } from './trade'\nimport { TronTransactionData } from './chainUtils'\nimport { Symbiosis } from './symbiosis'\nimport { ProfilerItem } from '../entities/profiler'\nimport { SymbiosisTrade } from './trade/symbiosisTrade'\nimport { BigNumber, BytesLike } from 'ethers'\nimport { PartnerFeeCollector } from './contracts'\nimport { Cache } from './cache'\nimport { ConfigCacheData } from './config/cache/builder'\n\nexport enum Field {\n    INPUT = 'INPUT',\n    OUTPUT = 'OUTPUT',\n}\n\nexport interface VolumeFeeCollector {\n    chainId: ChainId\n    address: string\n    feeRate: string\n    eligibleChains: ChainId[]\n    default?: boolean\n}\n\nexport type BridgeDirection = 'burn' | 'mint' | 'v2'\n\nexport type DepositoryConfig = {\n    depository: string\n    swapUnlocker: string\n    withdrawUnlocker: string\n    branchedUnlocker: string\n    btcRefundUnlocker?: string\n}\n\nexport type ChainConfig = {\n    id: ChainId\n    rpc: string\n    headers?: Record<string, string>\n    spareRpcs?: string[]\n    dexFee: number\n    filterBlockOffset: number\n    stables: TokenConstructor[]\n    metaRouter: string\n    metaRouterGateway: string\n    multicallRouter: string\n    router: string\n    bridge: string\n    synthesis: string\n    portal: string\n    fabric: string\n    tonPortal?: string\n    partnerFeeCollector?: string\n    depository?: DepositoryConfig\n}\n\nexport type AdvisorConfig = {\n    url: string\n}\n\nexport type OmniPoolConfig = {\n    chainId: ChainId\n    address: string\n    oracle: string\n    generalPurpose: boolean\n    coinGeckoId: string\n}\n\nexport type SwapLimit = {\n    chainId: ChainId\n    address: string\n    min: string\n    max: string\n}\n\nexport type BtcConfig = {\n    btc: Token\n    symBtc: {\n        address: string\n        chainId: ChainId\n    }\n    forwarderUrl: string\n}\n\nexport type Config = {\n    advisor: AdvisorConfig\n    omniPools: OmniPoolConfig[]\n    revertableAddress: Partial<Record<ChainId, string>> & { default: string }\n    limits: SwapLimit[]\n    chains: ChainConfig[]\n    refundAddress: string\n    btcConfigs: BtcConfig[]\n}\n\nexport type OverrideChainConfig = {\n    id: ChainId\n    rpc: string\n    headers?: Record<string, string>\n}\nexport type FeeConfig = {\n    token: Token\n    value: string\n}\n\nexport type SelectMode = 'fastest' | 'best_return'\n\nexport type OneInchConfig = {\n    apiUrl: string\n    apiKeys: string[]\n}\n\nexport type OpenOceanConfig = {\n    apiUrl: string\n    apiKeys: string[]\n}\n\nexport type * from './config/cache/builder'\n\nexport type OverrideConfig = {\n    btcConfigs?: BtcConfig[]\n    chains?: OverrideChainConfig[]\n    limits?: SwapLimit[]\n    fetch?: typeof fetch\n    advisor?: AdvisorConfig\n    oneInchConfig?: OneInchConfig\n    openOceanConfig?: OpenOceanConfig\n    volumeFeeCollectors?: VolumeFeeCollector[]\n    cache?: Cache\n    config?: Config\n    configCache?: ConfigCacheData\n}\n\nexport interface MiddlewareCall {\n    address: string\n    data: string\n    offset: number\n}\n\nexport interface RevertableAddress {\n    chainId: ChainId\n    address: string\n}\n\nexport type TradeAContext = 'metaRouter' | 'multicallRouter'\n\nexport interface SwapExactInParams {\n    symbiosis: Symbiosis\n    tokenAmountIn: TokenAmount\n    tokenOut: Token\n    from: string\n    to: string\n    slippage: number\n    deadline: number\n    transitTokenIn?: Token\n    transitTokenOut?: Token\n    oneInchProtocols?: OneInchProtocols\n    middlewareCall?: MiddlewareCall\n    revertableAddresses?: RevertableAddress[]\n    selectMode?: SelectMode\n    tradeAContext?: TradeAContext\n    partnerAddress?: string\n    refundAddress?: string\n    generateBtcDepositAddress?: boolean\n    disableSrcChainRouting?: boolean\n    disableDstChainRouting?: boolean\n}\n\nexport type BtcTransactionData = {\n    depositAddress: string\n    validUntil: string\n    tokenAmountOut: TokenAmount\n}\n\nexport type TonTransactionData = {\n    validUntil: number\n    messages: {\n        address: string\n        amount: string\n        payload: string\n    }[]\n}\n\nexport type SolanaTransactionData = {\n    instructions: string\n}\n\nexport type SwapExactInTransactionPayload =\n    | {\n          transactionType: 'evm'\n          transactionRequest: TransactionRequest\n      }\n    | {\n          transactionType: 'tron'\n          transactionRequest: TronTransactionData\n      }\n    | {\n          transactionType: 'btc'\n          transactionRequest: BtcTransactionData\n      }\n    | {\n          transactionType: 'ton'\n          transactionRequest: TonTransactionData\n      }\n    | {\n          transactionType: 'solana'\n          transactionRequest: SolanaTransactionData\n      }\n\nexport type RouteItem = {\n    provider: SymbiosisTradeType\n    tokens: Token[]\n}\n\nexport type FeeItem = {\n    provider: SymbiosisTradeType\n    value: TokenAmount\n    save?: TokenAmount\n    description?: string\n}\n\nexport type SwapExactInResult = {\n    kind: SymbiosisKind\n    tokenAmountOut: TokenAmount\n    tokenAmountOutMin: TokenAmount\n    priceImpact: Percent\n    approveTo: string\n    routes: RouteItem[]\n    fees: FeeItem[]\n\n    amountInUsd?: TokenAmount\n    timeLog?: ProfilerItem[]\n    routeType?: string\n    poolAddress?: string\n    tradeA?: SymbiosisTrade\n    tradeC?: SymbiosisTrade\n} & SwapExactInTransactionPayload\n\nexport type MultiCallItem = {\n    to: string\n    data: BytesLike\n    offset: number\n    value: string\n    amountIn: TokenAmount // is used as approveToken as well\n    amountOut: TokenAmount\n    amountOutMin: TokenAmount\n    priceImpact: Percent\n    fees: FeeItem[]\n    routes: RouteItem[]\n}\n\nexport type PartnerFeeCallParams = {\n    partnerAddress: string\n    partnerFeeCollector: PartnerFeeCollector\n    feeRate: BigNumber\n    fixedFee: BigNumber\n}\n\nexport type MetricParams = {\n    operation: string\n    kind: string\n    tokenIn?: Token\n    tokenOut?: Token\n}\n\nexport type CounterParams = {\n    provider: string\n    reason: string\n    chain_id: string\n}\n\nexport type PriceImpactMetricParams = {\n    name_from: string\n    name_to: string\n    token_amount: number\n    price_impact: number\n}\n","import {\n    AddressLookupTableAccount,\n    Connection,\n    PublicKey,\n    SystemProgram,\n    TransactionMessage,\n    VersionedTransaction,\n} from '@solana/web3.js'\nimport { ChainId } from '../../constants'\nimport { GAS_TOKEN, Token, TokenAmount } from '../../entities'\n\nexport function isSolanaChainId(chainId: ChainId | undefined) {\n    if (!chainId) return false\n    return [ChainId.SOLANA_MAINNET].includes(chainId)\n}\n\nexport const SOL_USDC = new Token({\n    name: 'USDC',\n    symbol: 'USDC',\n    address: '0x0000000000000000000000000000000000000003',\n    chainId: ChainId.SOLANA_MAINNET,\n    decimals: 6,\n    icons: {\n        large: `https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png`,\n        small: `https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png`,\n    },\n    attributes: {\n        solana: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    },\n})\n\nexport function getSolanaConnection() {\n    return new Connection('https://solana-rpc.publicnode.com')\n}\n\nconst SOL_FEE_COLLECTOR = '7niUN8QFTN8V3y47fqLpAPs5Hq9T79BrSq8CAVjq6YJX'\nconst SOL_FEE_AMOUNT = 2000000 // 0.002 SOL (9 decimals)\n\nexport async function addSolanaFee(from: string, instructions?: string) {\n    if (!instructions) {\n        throw new Error('Theres is no instructions in solana trade')\n    }\n    const connection = getSolanaConnection()\n    const transferSolInstruction = SystemProgram.transfer({\n        fromPubkey: new PublicKey(from),\n        toPubkey: new PublicKey(SOL_FEE_COLLECTOR),\n        lamports: SOL_FEE_AMOUNT,\n    })\n\n    const txBuffer = Buffer.from(instructions, 'base64')\n    const transaction = VersionedTransaction.deserialize(txBuffer)\n\n    // Get Address Lookup Table\n    const lookupTableAccounts = await Promise.all(\n        transaction.message.addressTableLookups.map(async (lookup) => {\n            const response = await connection.getAddressLookupTable(lookup.accountKey)\n            return response.value as AddressLookupTableAccount\n        })\n    )\n\n    const message = TransactionMessage.decompile(transaction.message, {\n        addressLookupTableAccounts: lookupTableAccounts,\n    })\n\n    message.instructions.unshift(transferSolInstruction)\n\n    transaction.message = message.compileToV0Message(lookupTableAccounts)\n\n    return {\n        instructions: Buffer.from(transaction.serialize()).toString('base64'),\n        fee: new TokenAmount(GAS_TOKEN[ChainId.SOLANA_MAINNET], BigInt(SOL_FEE_AMOUNT)),\n    }\n}\n","import { Percent, Token, TokenAmount } from '../../entities'\nimport { BigNumber } from 'ethers'\nimport { FeeItem } from '../types'\nimport { TradeError } from '../sdkError'\n\nexport type SymbiosisTradeType =\n    | 'uni-v2'\n    | 'uni-v3'\n    | '1inch'\n    | 'open-ocean'\n    | 'wrap'\n    | 'izumi'\n    | 'octopool'\n    | 'symbiosis'\n    | 'thorchain-bridge'\n    | 'chainflip-bridge'\n    | 'raydium'\n    | 'stonfi'\n    | 'dedust'\n    | 'jupiter'\n    | 'depository'\n\nexport type SymbiosisKind = 'onchain-swap' | 'crosschain-swap' | 'wrap' | 'unwrap' | 'bridge' | 'from-btc-swap'\n\nexport interface SymbiosisTradeParams {\n    tokenAmountIn: TokenAmount\n    tokenAmountInMin: TokenAmount\n    tokenOut: Token\n    to: string\n    slippage: number\n}\n\nexport interface SymbiosisTradeOutResult {\n    amountOut: TokenAmount\n    amountOutMin: TokenAmount\n    routerAddress: string\n    route: Token[]\n    priceImpact: Percent\n    callData: string\n    callDataOffset: number\n    minReceivedOffset: number\n    minReceivedOffset2?: number\n    functionSelector?: string\n    instructions?: string\n    fees?: FeeItem[]\n    value?: bigint\n}\n\nclass OutNotInitializedError extends Error {\n    constructor(msg?: string) {\n        super(`Out is not initialized: ${msg}`)\n    }\n}\n\nexport abstract class SymbiosisTrade {\n    public tokenAmountIn: TokenAmount\n    public tokenAmountInMin: TokenAmount\n    public tokenOut: Token\n    public to: string\n    public slippage: number\n\n    protected out?: SymbiosisTradeOutResult\n\n    protected constructor({ tokenAmountIn, tokenAmountInMin, tokenOut, to, slippage }: SymbiosisTradeParams) {\n        this.tokenAmountIn = tokenAmountIn\n        this.tokenAmountInMin = tokenAmountInMin\n        this.tokenOut = tokenOut\n        this.to = to\n        this.slippage = slippage\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        throw new TradeError('Implement me')\n    }\n\n    public async init(): Promise<this> {\n        throw new TradeError('Implement me')\n    }\n\n    get amountOut(): TokenAmount {\n        this.assertOutInitialized('amountOut')\n        return this.out.amountOut\n    }\n\n    get amountOutMin(): TokenAmount {\n        this.assertOutInitialized('amountOutMin')\n        return this.out.amountOutMin\n    }\n\n    get routerAddress(): string {\n        this.assertOutInitialized('routerAddress')\n        return this.out.routerAddress\n    }\n\n    get value(): bigint | undefined {\n        this.assertOutInitialized('value')\n        return this.out.value\n    }\n\n    get route(): Token[] {\n        this.assertOutInitialized('route')\n        return this.out.route\n    }\n\n    get callData(): string {\n        this.assertOutInitialized('callData')\n        return this.out.callData\n    }\n\n    get callDataOffset(): number {\n        this.assertOutInitialized('callDataOffset')\n        return this.out.callDataOffset\n    }\n\n    get minReceivedOffset(): number {\n        this.assertOutInitialized('minReceivedOffset')\n        return this.out.minReceivedOffset\n    }\n\n    get minReceivedOffset2(): number {\n        this.assertOutInitialized('minReceivedOffset2')\n        return this.out.minReceivedOffset2 || 0\n    }\n\n    get priceImpact(): Percent {\n        this.assertOutInitialized('priceImpact')\n        return this.out.priceImpact\n    }\n\n    get functionSelector(): string | undefined {\n        this.assertOutInitialized('functionSelector')\n        return this.out.functionSelector\n    }\n\n    get instructions(): string | undefined {\n        this.assertOutInitialized('instructions')\n        return this.out.instructions\n    }\n\n    get fees(): FeeItem[] | undefined {\n        this.assertOutInitialized('fees')\n        return this.out.fees\n    }\n\n    public applyAmountIn(newAmountIn: TokenAmount, newAmountInMin: TokenAmount) {\n        this.assertOutInitialized('applyAmountIn')\n\n        // >>> amountIn\n        const amountInBn = BigNumber.from(this.tokenAmountIn.raw.toString())\n        const proportionallyBn = (value: BigNumber) => {\n            const newAmountInBn = BigNumber.from(newAmountIn.raw.toString())\n            return value.mul(newAmountInBn).div(amountInBn)\n        }\n        const proportionally = (value: TokenAmount) => {\n            return new TokenAmount(value.token, proportionallyBn(BigNumber.from(value.raw.toString())).toString())\n        }\n        const newAmountOut = proportionally(this.amountOut)\n\n        // >>> amountInMin\n        const amountInMinBn = BigNumber.from(this.tokenAmountInMin.raw.toString())\n        const proportionallyMinBn = (value: BigNumber) => {\n            const newAmountInMinBn = BigNumber.from(newAmountInMin.raw.toString())\n            return value.mul(newAmountInMinBn).div(amountInMinBn)\n        }\n        const proportionallyMin = (value: TokenAmount) => {\n            return new TokenAmount(value.token, proportionallyMinBn(BigNumber.from(value.raw.toString())).toString())\n        }\n        const newAmountOutMin = proportionallyMin(this.amountOutMin)\n\n        let callData = this.callData\n        if (this.minReceivedOffset > 0) {\n            const minReceivedFromCallDataRaw = SymbiosisTrade.getAmountFromCallData(callData, this.minReceivedOffset)\n            callData = SymbiosisTrade.patchCallData(\n                callData,\n                this.minReceivedOffset,\n                proportionallyMinBn(minReceivedFromCallDataRaw)\n            )\n        }\n        // NOTE: probably there is a better solution\n        if (this.minReceivedOffset2 > 0) {\n            const minReceived2FromCallDataRaw = SymbiosisTrade.getAmountFromCallData(callData, this.minReceivedOffset2)\n            callData = SymbiosisTrade.patchCallData(\n                callData,\n                this.minReceivedOffset2,\n                proportionallyMinBn(minReceived2FromCallDataRaw)\n            )\n        }\n        if (this.callDataOffset > 0) {\n            const amountInFromCallDataRaw = SymbiosisTrade.getAmountFromCallData(callData, this.callDataOffset)\n            callData = SymbiosisTrade.patchCallData(\n                callData,\n                this.callDataOffset,\n                proportionallyBn(amountInFromCallDataRaw)\n            )\n        }\n\n        this.tokenAmountIn = newAmountIn\n        this.tokenAmountInMin = newAmountInMin\n        this.out = {\n            ...this.out,\n            amountOut: newAmountOut,\n            amountOutMin: newAmountOutMin,\n            callData,\n        }\n    }\n\n    private assertOutInitialized(msg?: string): asserts this is {\n        out: SymbiosisTradeOutResult\n    } {\n        if (!this.out) {\n            throw new OutNotInitializedError(msg)\n        }\n    }\n\n    public static getAmountFromCallData(data: string, bytesOffset: number): BigNumber {\n        let hexPrefix = 0\n        if (data.startsWith('0x')) {\n            hexPrefix += 2\n        }\n        const stringOffset = bytesOffset * 2 + hexPrefix\n\n        const amountWidth = 64\n        const amountString = '0x' + data.substring(stringOffset - amountWidth, stringOffset)\n        return BigNumber.from(amountString)\n    }\n\n    public static patchCallData(data: string, bytesOffset: number, amount: BigNumber) {\n        let hexPrefix = 0\n        if (data.startsWith('0x')) {\n            hexPrefix += 2\n        }\n        const stringOffset = bytesOffset * 2 + hexPrefix\n        if (data.length < stringOffset) {\n            throw new TradeError('offset is to big')\n        }\n        const amountWidth = 64\n        const stringAmount = amount.toHexString().substring(2).padStart(amountWidth, '0').toLowerCase()\n        if (stringAmount.length !== amountWidth) {\n            throw new TradeError('amount is to wide')\n        }\n\n        return data.substring(0, stringOffset - amountWidth) + stringAmount + data.substring(stringOffset)\n    }\n}\n","import { Provider } from '@ethersproject/providers'\nimport { ChainId } from '../constants'\nimport { MULTICALL_ADDRESSES } from './constants'\nimport { Multicall, Multicall__factory } from './contracts'\n\nexport class NoMulticallAddressError extends Error {\n    public constructor(chainId: ChainId) {\n        super(\n            `Failed to create Multicall instance. We do not know the multicall address on this network. ChainId: ${chainId}`\n        )\n    }\n}\n\nexport async function getMulticall(provider: Provider): Promise<Multicall> {\n    const { chainId } = await provider.getNetwork()\n\n    const address = MULTICALL_ADDRESSES[chainId as ChainId]\n\n    if (!address) {\n        throw new NoMulticallAddressError(chainId)\n    }\n\n    return Multicall__factory.connect(address, provider)\n}\n","import { ChainId, NATIVE_TOKEN_ADDRESS } from '../../constants'\nimport { Percent, TokenAmount, wrappedToken } from '../../entities'\nimport { OneInchOracle__factory } from '../contracts'\nimport { Symbiosis } from '../symbiosis'\nimport { getMinAmount } from '../chainUtils'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport { getMulticall } from '../multicall'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { formatUnits } from '@ethersproject/units'\nimport JSBI from 'jsbi'\nimport { BIPS_BASE } from '../constants'\nimport { OneInchTradeError } from '../sdkError'\n\nexport type OneInchProtocols = string[]\n\ninterface GetTradePriceImpactParams {\n    tokenAmountIn: TokenAmount\n    tokenAmountOut: TokenAmount\n}\n\ninterface Protocol {\n    id: string\n    title: string\n    img: string\n    img_color: string\n}\n\ninterface OneInchError {\n    error: string\n    description: string\n    statusCode: 400 | 500\n    requestId: string\n    meta: { type: string; value: string }[]\n}\n\ninterface OneInchTradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n    from: string\n    protocols?: OneInchProtocols\n}\n\nconst ONE_INCH_CHAINS: ChainId[] = [\n    ChainId.ETH_MAINNET,\n    ChainId.BSC_MAINNET,\n    ChainId.MATIC_MAINNET,\n    ChainId.OPTIMISM_MAINNET,\n    ChainId.ARBITRUM_MAINNET,\n    ChainId.AVAX_MAINNET,\n    ChainId.ZKSYNC_MAINNET,\n    ChainId.BASE_MAINNET,\n    ChainId.GNOSIS_MAINNET,\n    // ChainId.UNICHAIN_MAINNET, // TODO\n    // ChainId.LINEA_MAINNET, // TODO\n    // ChainId.SONIC_MAINNET, // TODO\n]\n\nconst ONE_INCH_ORACLE_MAP: { [chainId in ChainId]?: string } = {\n    [ChainId.ETH_MAINNET]: '0x00000000000D6FFc74A8feb35aF5827bf57f6786',\n    [ChainId.BSC_MAINNET]: '0x00000000000D6FFc74A8feb35aF5827bf57f6786',\n    [ChainId.MATIC_MAINNET]: '0x00000000000D6FFc74A8feb35aF5827bf57f6786',\n    [ChainId.OPTIMISM_MAINNET]: '0x00000000000D6FFc74A8feb35aF5827bf57f6786',\n    [ChainId.ARBITRUM_MAINNET]: '0x00000000000D6FFc74A8feb35aF5827bf57f6786',\n    [ChainId.AVAX_MAINNET]: '0x00000000000D6FFc74A8feb35aF5827bf57f6786',\n    [ChainId.ZKSYNC_MAINNET]: '0x739B4e7a3ad8210B6315F75b24cfe0D3226f6945',\n    [ChainId.BASE_MAINNET]: '0x00000000000D6FFc74A8feb35aF5827bf57f6786',\n    [ChainId.GNOSIS_MAINNET]: '0x00000000000D6FFc74A8feb35aF5827bf57f6786',\n    // [ChainId.UNICHAIN_MAINNET]: '', // TODO\n    // [ChainId.LINEA_MAINNET]: '', // TODO\n    // [ChainId.SONIC_MAINNET]: '', // TODO\n}\n\nexport class OneInchTrade extends SymbiosisTrade {\n    private readonly symbiosis: Symbiosis\n    private readonly from: string\n    private readonly protocols: OneInchProtocols\n\n    static isAvailable(chainId: ChainId): boolean {\n        return ONE_INCH_CHAINS.includes(chainId)\n    }\n\n    public constructor(params: OneInchTradeParams) {\n        super(params)\n\n        const { symbiosis, from, protocols } = params\n        this.symbiosis = symbiosis\n        this.from = from\n        this.protocols = protocols || []\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return '1inch'\n    }\n\n    public async init() {\n        let fromTokenAddress = this.tokenAmountIn.token.address\n        if (this.tokenAmountIn.token.isNative) {\n            fromTokenAddress = NATIVE_TOKEN_ADDRESS\n        }\n\n        let toTokenAddress = this.tokenOut.address\n        if (this.tokenOut.isNative) {\n            toTokenAddress = NATIVE_TOKEN_ADDRESS\n        }\n\n        const protocolsOrigin = await OneInchTrade.getProtocols(this.symbiosis, this.tokenAmountIn.token.chainId)\n        let protocols = this.protocols.filter((x) => protocolsOrigin.includes(x))\n        if (protocols.length === 0) {\n            protocols = protocolsOrigin\n        }\n\n        const searchParams = new URLSearchParams()\n\n        searchParams.set('src', fromTokenAddress)\n        searchParams.set('dst', toTokenAddress)\n        searchParams.set('amount', this.tokenAmountIn.raw.toString())\n        searchParams.set('from', this.from)\n        searchParams.set('slippage', (this.slippage / 100).toFixed(4))\n        searchParams.set('receiver', this.to)\n        searchParams.set('disableEstimate', 'true')\n        searchParams.set('allowPartialFill', 'false')\n        searchParams.set('usePatching', 'true')\n        searchParams.set('protocols', protocols.join(','))\n\n        let json: any\n        try {\n            json = await OneInchTrade.request(this.symbiosis, `${this.tokenAmountIn.token.chainId}/swap`, searchParams)\n        } catch (error) {\n            let errorText = 'Unknown error'\n\n            if (error instanceof Error) {\n                try {\n                    const parsed = JSON.parse(error.message ?? '') as OneInchError\n                    errorText = `Message: ${parsed.description}`\n                } catch {\n                    errorText = error?.message ?? 'Unknown error'\n                }\n            }\n\n            throw new OneInchTradeError(`Cannot get swap on chain ${this.tokenAmountIn.token.chainId}: ${errorText}`)\n        }\n\n        const tx: {\n            from: string\n            to: string\n            data: string\n            value: string\n            gas: string\n            gasPrice: string\n        } = json['tx']\n        const callData = tx.data\n        const { amountOffset, minReceivedOffset } = this.getOffsets(callData)\n\n        const amountOutRaw: string = json['toAmount']\n        const amountOut = new TokenAmount(this.tokenOut, amountOutRaw)\n\n        const amountOutMinRaw = getMinAmount(this.slippage, amountOutRaw)\n        const amountOutMin = new TokenAmount(this.tokenOut, amountOutMinRaw)\n\n        const priceImpact = await this.getTradePriceImpact({\n            tokenAmountIn: this.tokenAmountIn,\n            tokenAmountOut: amountOut,\n        })\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            route: [this.tokenAmountIn.token, this.tokenOut],\n            routerAddress: tx.to,\n            callData,\n            callDataOffset: amountOffset,\n            minReceivedOffset,\n            priceImpact,\n        }\n        return this\n    }\n\n    private static async request(symbiosis: Symbiosis, method: string, urlParams?: URLSearchParams) {\n        const requestUrl = new URL(method, symbiosis.oneInchConfig.apiUrl)\n\n        if (urlParams) {\n            requestUrl.search = urlParams.toString()\n        }\n\n        const apiKeys = symbiosis.oneInchConfig.apiKeys\n        const apiKey = apiKeys[Math.floor(Math.random() * apiKeys.length)]\n        const response = await fetch(requestUrl.toString(), {\n            headers: { Authorization: `Bearer ${apiKey}` },\n        })\n\n        if (!response.ok) {\n            const text = await response.text()\n\n            throw new OneInchTradeError(text)\n        }\n\n        return response.json()\n    }\n\n    static async getProtocols(symbiosis: Symbiosis, chainId: ChainId): Promise<OneInchProtocols> {\n        try {\n            const json = await symbiosis.cache.get(\n                ['oneInchGetProtocols', chainId.toString()],\n                async () => {\n                    return OneInchTrade.request(symbiosis, `${chainId}/liquidity-sources`)\n                },\n                4 * 60 * 60 // 4h\n            )\n\n            return json['protocols'].reduce((acc: OneInchProtocols, protocol: Protocol) => {\n                if (protocol.id.includes('ONE_INCH_LIMIT_ORDER')) {\n                    return acc\n                }\n                if (protocol.id.includes('PMM')) {\n                    return acc\n                }\n                acc.push(protocol.id)\n                return acc\n            }, [])\n        } catch (error) {\n            throw new OneInchTradeError(`Cannot get swap on chain ${chainId}`, error)\n        }\n    }\n\n    private getOffsets(callData: string) {\n        const methods = [\n            // V4\n            {\n                // swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)\n                sigHash: '7c025200',\n                offset: 260,\n                minReceivedOffset: 292,\n            },\n            {\n                // clipperSwapTo(address,address,address,uint256,uint256)\n                sigHash: '9994dd15',\n                offset: 132,\n                minReceivedOffset: 164,\n            },\n            {\n                // fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address)\n                sigHash: 'baba5855',\n                offset: 292,\n                minReceivedOffset: 324,\n            },\n            {\n                // uniswapV3SwapTo(address,uint256,uint256,uint256[])\n                sigHash: 'bc80f1a8',\n                offset: 68,\n                minReceivedOffset: 100,\n            },\n\n            // V5\n            {\n                // clipperSwapTo(address,address,address,address,uint256,uint256,uint256,bytes32,bytes32)\n                sigHash: '093d4fa5',\n                offset: 164, // +\n                minReceivedOffset: 196,\n            },\n            {\n                // clipperSwap(address,address,address,address,uint256,uint256,uint256,bytes32,bytes32)\n                sigHash: '84bd6d29',\n                offset: 132, // +\n                minReceivedOffset: 164,\n            },\n            {\n                // swap(address,(address,address,address,address,uint256,uint256,uint256),bytes,bytes)\n                sigHash: '12aa3caf',\n                offset: 196, // +/-\n                minReceivedOffset: 228,\n            },\n            {\n                // fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,address)\n                sigHash: '5a099843',\n                offset: 196,\n                minReceivedOffset: 228,\n            },\n            {\n                // unoswapTo(address,address,uint256,uint256,uint256[])\n                sigHash: 'f78dc253',\n                offset: 100,\n                minReceivedOffset: 132,\n            },\n            {\n                // unoswap(address,uint256,uint256,uint256[])\n                sigHash: '0502b1c5',\n                offset: 68,\n                minReceivedOffset: 100,\n            },\n            {\n                // uniswapV3SwapTo(address,uint256,uint256,uint256[])\n                sigHash: 'bc80f1a8',\n                offset: 68,\n                minReceivedOffset: 100,\n            },\n            {\n                // uniswapV3Swap(uint256,uint256,uint256[])\n                sigHash: 'e449022e',\n                offset: 36,\n                minReceivedOffset: 68,\n            },\n        ]\n\n        const sigHash = callData.slice(2, 10)\n\n        const method = methods.find((i) => {\n            return i.sigHash === sigHash\n        })\n\n        if (method === undefined) {\n            throw new OneInchTradeError('Unknown swap method encoded to calldata')\n        }\n        return {\n            amountOffset: method.offset,\n            minReceivedOffset: method.minReceivedOffset,\n        }\n    }\n\n    private async getTradePriceImpact({ tokenAmountIn, tokenAmountOut }: GetTradePriceImpactParams): Promise<Percent> {\n        const chainId = tokenAmountIn.token.chainId\n        const provider = this.symbiosis.getProvider(chainId)\n        const oracleAddress = ONE_INCH_ORACLE_MAP[chainId]\n        if (!oracleAddress) {\n            throw new OneInchTradeError(`Could not find off-chain oracle on chain ${chainId}`)\n        }\n        const oracleInterface = OneInchOracle__factory.createInterface()\n\n        const tokens = [wrappedToken(tokenAmountIn.token), wrappedToken(tokenAmountOut.token)]\n\n        const aggregated = await this.symbiosis.cache.get(\n            ['getOneInchRateToEth', chainId.toString(), ...tokens.map((i) => i.address)],\n            async () => {\n                const calls = tokens.map((token) => ({\n                    target: oracleAddress,\n                    callData: oracleInterface.encodeFunctionData(\n                        'getRateToEth',\n                        [token.address, true] // use wrapper\n                    ),\n                }))\n\n                const multicall = await getMulticall(provider)\n                return multicall.callStatic.tryAggregate(true, calls)\n            },\n            10 * 60 // 10 minutes\n        )\n\n        const denominator = BigNumber.from(10).pow(18) // eth decimals\n\n        const data = aggregated.map(([success, returnData], i): BigNumber | undefined => {\n            if (!success || returnData === '0x') {\n                return\n            }\n            const result = oracleInterface.decodeFunctionResult('getRateToEth', returnData)\n\n            const numerator = BigNumber.from(10).pow(tokens[i].decimals)\n\n            return BigNumber.from(result.weightedRate).mul(numerator).div(denominator)\n        })\n\n        if (!data[0] || !data[1]) {\n            throw new OneInchTradeError('Cannot get rate to ETH from price oracle')\n        }\n        if (data[0].isZero() || data[1]?.isZero()) {\n            return new Percent('0', BIPS_BASE)\n        }\n        const multiplierPow = 18\n        const multiplier = BigNumber.from(10).pow(multiplierPow)\n\n        const spot = data[1].mul(multiplier).div(data[0]) // with e18\n\n        // calc real rate\n        const inBn = BigNumber.from(tokenAmountIn.raw.toString()).mul(\n            BigNumber.from(10).pow(tokenAmountOut.token.decimals)\n        )\n        const outBn = BigNumber.from(tokenAmountOut.raw.toString()).mul(\n            BigNumber.from(10).pow(tokenAmountIn.token.decimals)\n        )\n        const real = inBn.mul(multiplier).div(outBn)\n\n        const impact = real.mul(multiplier).div(spot)\n        const impactNumber = 1 - Number.parseFloat(formatUnits(impact, multiplierPow))\n\n        return new Percent(parseInt(`${impactNumber * JSBI.toNumber(BIPS_BASE)}`).toString(), BIPS_BASE)\n    }\n}\n","import { ChainId, NATIVE_TOKEN_ADDRESS } from '../../constants'\nimport { Percent, TokenAmount } from '../../entities'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport { getMinAmount } from '../chainUtils'\nimport type { Symbiosis } from '../symbiosis'\nimport { BIPS_BASE } from '../constants'\nimport BigNumber from 'bignumber.js'\nimport { AddressZero } from '@ethersproject/constants/lib/addresses'\nimport { OpenOceanTradeError } from '../sdkError'\n\ninterface OpenOceanTradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n}\n\ninterface OpenOceanQuote {\n    to: string\n    inAmount: string\n    outAmount: string\n    data: string\n    price_impact: string\n}\n\ninterface OpenOceanChain {\n    slug: string\n    nativeTokenAddress: string\n}\n\ninterface OpenOceanError {\n    code: number\n    errorMsg: string\n    error?: string\n}\n\nconst OPEN_OCEAN_NETWORKS: Partial<Record<ChainId, OpenOceanChain>> = {\n    // ---  1inch supported chains\n    // [ChainId.ETH_MAINNET]: {\n    //     slug: 'eth',\n    //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    // },\n    // [ChainId.BSC_MAINNET]: {\n    //     slug: 'bsc',\n    //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    // },\n    // [ChainId.MATIC_MAINNET]: {\n    //     slug: 'polygon',\n    //     nativeTokenAddress: '0x0000000000000000000000000000000000001010',\n    // },\n    // [ChainId.OPTIMISM_MAINNET]: {\n    //     slug: 'optimism',\n    //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    // },\n    // [ChainId.ARBITRUM_MAINNET]: {\n    //     slug: 'arbitrum',\n    //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    // },\n    // [ChainId.AVAX_MAINNET]: {\n    //     slug: 'avax',\n    //     nativeTokenAddress: AddressZero,\n    // },\n    // [ChainId.ZKSYNC_MAINNET]: {\n    //     slug: 'zksync',\n    //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    // },\n    // [ChainId.BASE_MAINNET]: {\n    //     slug: 'base',\n    //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    // },\n    // [ChainId.GNOSIS_MAINNET]: {\n    //     slug: 'xdai',\n    //     nativeTokenAddress: AddressZero,\n    // },\n    [ChainId.UNICHAIN_MAINNET]: {\n        slug: 'uni',\n        nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    },\n    [ChainId.LINEA_MAINNET]: {\n        slug: 'linea',\n        nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    },\n    [ChainId.SONIC_MAINNET]: {\n        slug: 'sonic',\n        nativeTokenAddress: AddressZero,\n    },\n    // --- OpenOcean supported only chains\n    [ChainId.KAVA_MAINNET]: {\n        slug: 'kava',\n        nativeTokenAddress: AddressZero,\n    },\n    [ChainId.POLYGON_ZK]: {\n        slug: 'polygon_zkevm',\n        nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    },\n    [ChainId.SCROLL_MAINNET]: {\n        slug: 'scroll',\n        nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    },\n    [ChainId.MANTLE_MAINNET]: {\n        slug: 'mantle',\n        nativeTokenAddress: AddressZero,\n    },\n    [ChainId.MANTA_MAINNET]: {\n        slug: 'manta',\n        nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    },\n    [ChainId.METIS_MAINNET]: {\n        slug: 'metis',\n        nativeTokenAddress: '0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000',\n    },\n    [ChainId.BLAST_MAINNET]: {\n        slug: 'blast',\n        nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    },\n    [ChainId.MODE_MAINNET]: {\n        slug: 'mode',\n        nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    },\n    [ChainId.RSK_MAINNET]: {\n        slug: 'rootstock',\n        nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    },\n    [ChainId.CRONOS_MAINNET]: {\n        slug: 'cronos',\n        nativeTokenAddress: AddressZero,\n    },\n    [ChainId.SEI_EVM_MAINNET]: {\n        slug: 'sei',\n        nativeTokenAddress: AddressZero,\n    },\n    [ChainId.TELOS_MAINNET]: {\n        slug: 'telos',\n        nativeTokenAddress: AddressZero,\n    },\n    [ChainId.GRAVITY_MAINNET]: {\n        slug: 'gravity',\n        nativeTokenAddress: AddressZero,\n    },\n    [ChainId.BERACHAIN_MAINNET]: {\n        slug: 'bera',\n        nativeTokenAddress: AddressZero,\n    },\n    [ChainId.OPBNB_MAINNET]: {\n        slug: 'opbnb',\n        nativeTokenAddress: NATIVE_TOKEN_ADDRESS,\n    },\n    [ChainId.APECHAIN_MAINNET]: {\n        slug: 'ape',\n        nativeTokenAddress: AddressZero,\n    },\n    [ChainId.PLASMA_MAINNET]: {\n        slug: 'plasma',\n        nativeTokenAddress: AddressZero,\n    },\n    [ChainId.HYPERLIQUID_MAINNET]: {\n        slug: 'hyperevm',\n        nativeTokenAddress: AddressZero,\n    },\n}\n\nexport class OpenOceanTrade extends SymbiosisTrade {\n    private readonly chain: OpenOceanChain\n    private readonly endpoint: string\n    private readonly symbiosis: Symbiosis\n\n    static isAvailable(chainId: ChainId): boolean {\n        return Object.keys(OPEN_OCEAN_NETWORKS).includes(chainId.toString())\n    }\n\n    public constructor(params: OpenOceanTradeParams) {\n        super(params)\n\n        const chainId = this.tokenAmountIn.token.chainId\n        const chain = OPEN_OCEAN_NETWORKS[chainId]\n        if (!chain) {\n            throw new OpenOceanTradeError('Unsupported chain')\n        }\n        this.chain = chain\n        this.symbiosis = params.symbiosis\n        this.endpoint = `${params.symbiosis.openOceanConfig.apiUrl}/${chainId}`\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return 'open-ocean'\n    }\n\n    public async init() {\n        let fromTokenAddress = this.tokenAmountIn.token.address\n        if (this.tokenAmountIn.token.isNative) {\n            fromTokenAddress = this.chain.nativeTokenAddress\n        }\n\n        let toTokenAddress = this.tokenOut.address\n        if (this.tokenOut.isNative) {\n            toTokenAddress = this.chain.nativeTokenAddress\n        }\n\n        const apiKeys = this.symbiosis.openOceanConfig.apiKeys\n        const apiKey = apiKeys[Math.floor(Math.random() * apiKeys.length)]\n\n        const gasPrice = await this.getGasPrice(apiKey)\n\n        const url = new URL(`${this.endpoint}/swap`)\n        url.searchParams.set('inTokenAddress', fromTokenAddress)\n        url.searchParams.set('outTokenAddress', toTokenAddress)\n        url.searchParams.set('amountDecimals', this.tokenAmountIn.raw.toString())\n        url.searchParams.set('gasPriceDecimals', gasPrice.toString())\n        url.searchParams.set('slippage', (this.slippage / 100).toString())\n        url.searchParams.set('account', this.to)\n        url.searchParams.set('referrer', '0x3254aE00947e44B7fD03F50b93B9acFEd59F9620')\n        url.searchParams.set('disableRfq', 'true')\n\n        const response = await this.symbiosis.fetch(url.toString(), {\n            headers: {\n                apikey: apiKey,\n                'Content-Type': 'application/json',\n            },\n        })\n\n        if (!response.ok) {\n            let errorText\n            try {\n                const jsonError = JSON.parse(await response.text())\n                errorText = jsonError?.message ?? 'Unknown error'\n            } catch (e) {\n                errorText = await response.text()\n            }\n            throw new OpenOceanTradeError(\n                `Cannot build trade for chain ${this.tokenAmountIn.token.chainId}: Message: ${errorText}`\n            )\n        }\n        const json = await response.json()\n\n        if (json.code !== 200) {\n            const errorJson = json as OpenOceanError\n            throw new OpenOceanTradeError(\n                `Cannot build trade for chain ${this.tokenAmountIn.token.chainId}. Message: ${\n                    errorJson?.error ?? errorJson.errorMsg\n                }`\n            )\n        }\n\n        const { data, outAmount, to, price_impact: priceImpactString } = json.data as OpenOceanQuote\n\n        const { amountOffset, minReceivedOffset } = this.getOffsets(data)\n\n        const amountOut = new TokenAmount(this.tokenOut, outAmount)\n\n        const amountOutMinRaw = getMinAmount(this.slippage, outAmount)\n        const amountOutMin = new TokenAmount(this.tokenOut, amountOutMinRaw)\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            routerAddress: to,\n            route: [this.tokenAmountIn.token, this.tokenOut],\n            callData: data,\n            callDataOffset: amountOffset,\n            minReceivedOffset,\n            priceImpact: this.convertPriceImpact(priceImpactString),\n        }\n\n        return this\n    }\n\n    private getOffsets(callData: string) {\n        const methods = [\n            {\n                // swap\n                sigHash: '90411a32',\n                amountOffset: 260,\n                minReceivedOffset: 292,\n            },\n            {\n                // uniswapV3SwapTo\n                sigHash: 'bc80f1a8',\n                amountOffset: 68,\n                minReceivedOffset: 100,\n            },\n            {\n                // callUniswapTo\n                sigHash: '6b58f2f0',\n                amountOffset: 68,\n                minReceivedOffset: 100,\n            },\n        ]\n\n        const sigHash = callData.slice(2, 10)\n\n        const method = methods.find((i) => {\n            return i.sigHash === sigHash\n        })\n\n        if (method === undefined) {\n            throw new OpenOceanTradeError('Unknown swap method encoded to calldata')\n        }\n\n        return {\n            amountOffset: method.amountOffset,\n            minReceivedOffset: method.minReceivedOffset,\n        }\n    }\n\n    private convertPriceImpact(value?: string) {\n        const zeroPercent = new Percent('0', BIPS_BASE)\n        if (!value) {\n            return zeroPercent\n        }\n\n        const number = new BigNumber(value.split('%')[0])\n        if (number.isNaN()) {\n            return zeroPercent\n        }\n        if (!number.isFinite()) {\n            return zeroPercent\n        }\n\n        return new Percent(number.multipliedBy(100).integerValue().toString(), BIPS_BASE)\n    }\n\n    private async getGasPrice(apiKey: string) {\n        const isMainnet = this.tokenAmountIn.token.chainId === ChainId.ETH_MAINNET\n\n        return this.symbiosis.cache.get(\n            ['openOceanGasPrice', this.endpoint],\n            async () => {\n                const response = await fetch(`${this.endpoint}/gasPrice`, {\n                    headers: {\n                        apiKey,\n                        'Content-Type': 'application/json',\n                    },\n                })\n                if (!response.ok) {\n                    throw new OpenOceanTradeError('Failed to get gas price')\n                }\n                const json = await response.json()\n\n                if (isMainnet) {\n                    return json.data.standard.legacyGasPrice\n                }\n\n                return json.data.standard\n            },\n            600 // 10 minutes\n        )\n    }\n}\n","import BNJS from 'bignumber.js'\nimport { BigNumber } from 'ethers'\nimport { AbiCoder } from 'ethers/lib/utils'\nimport { ChainId } from '../../constants'\nimport { Percent, Token, TokenAmount, wrappedToken } from '../../entities'\nimport { BIPS_BASE } from '../constants'\nimport { IzumiFactory__factory, IzumiPool__factory, IzumiQuoter__factory, IzumiSwap__factory } from '../contracts'\nimport { getMulticall } from '../multicall'\nimport { Symbiosis } from '../symbiosis'\nimport { getMinAmount } from '../chainUtils'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport { Multicall2 } from '../contracts/Multicall'\nimport { IzumiTradeError } from '../sdkError'\n\ninterface IzumiAddresses {\n    factory: string\n    quoter: string\n    swap: string\n    baseTokens: Token[]\n}\n\ninterface IzumiRoute {\n    tokens: Token[]\n    fees: number[]\n    path: string\n}\n\nconst POSSIBLE_FEES = [100, 400, 500, 2000, 3000, 10000]\n\nconst IZUMI_ADDRESSES: Partial<Record<ChainId, IzumiAddresses>> = {\n    [ChainId.MANTLE_MAINNET]: {\n        factory: '0x45e5F26451CDB01B0fA1f8582E0aAD9A6F27C218',\n        quoter: '0x032b241De86a8660f1Ae0691a4760B426EA246d7',\n        swap: '0x25C030116Feb2E7BbA054b9de0915E5F51b03e31',\n        baseTokens: [\n            new Token({\n                chainId: ChainId.MANTLE_MAINNET,\n                address: '0x201eba5cc46d216ce6dc03f6a759e8e766e956ae',\n                decimals: 6,\n                symbol: 'USDT',\n                name: 'USDT',\n            }),\n            new Token({\n                chainId: ChainId.MANTLE_MAINNET,\n                address: '0xdeaddeaddeaddeaddeaddeaddeaddeaddead1111',\n                decimals: 18,\n                symbol: 'WETH',\n                name: 'Wrapped Ether',\n            }),\n            new Token({\n                chainId: ChainId.MANTLE_MAINNET,\n                address: '0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8',\n                decimals: 18,\n                symbol: 'WMNT',\n                name: 'WMNT',\n            }),\n            new Token({\n                chainId: ChainId.MANTLE_MAINNET,\n                address: '0x0a3bb08b3a15a19b4de82f8acfc862606fb69a2d',\n                decimals: 18,\n                symbol: 'iUSD',\n                name: 'iZUMi Bond USD',\n            }),\n        ],\n    },\n    [ChainId.LINEA_MAINNET]: {\n        factory: '0x45e5F26451CDB01B0fA1f8582E0aAD9A6F27C218',\n        quoter: '0xe6805638db944eA605e774e72c6F0D15Fb6a1347',\n        swap: '0x032b241De86a8660f1Ae0691a4760B426EA246d7',\n        baseTokens: [\n            new Token({\n                chainId: ChainId.LINEA_MAINNET,\n                name: 'Wrapped Ether',\n                symbol: 'WETH',\n                address: '0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f',\n                decimals: 18,\n            }),\n            new Token({\n                chainId: ChainId.LINEA_MAINNET,\n                name: 'iZUMi Bond USD',\n                symbol: 'iUSD',\n                address: '0x0a3bb08b3a15a19b4de82f8acfc862606fb69a2d',\n                decimals: 18,\n            }),\n        ],\n    },\n    [ChainId.SCROLL_MAINNET]: {\n        factory: '0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08',\n        quoter: '0x33531bDBFE34fa6Fd5963D0423f7699775AacaaF',\n        swap: '0x2db0AFD0045F3518c77eC6591a542e326Befd3D7',\n        baseTokens: [\n            new Token({\n                chainId: ChainId.SCROLL_MAINNET,\n                name: 'Wrapped Ether',\n                symbol: 'WETH',\n                address: '0x5300000000000000000000000000000000000004',\n                decimals: 18,\n            }),\n            new Token({\n                chainId: ChainId.SCROLL_MAINNET,\n                name: 'USD Coin',\n                symbol: 'USDC',\n                address: '0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4',\n                decimals: 18,\n            }),\n        ],\n    },\n    [ChainId.OKX_X1_TESTNET]: {\n        factory: '0x64c2F1306b4ED3183E7B345158fd01c19C0d8c5E',\n        quoter: '0xF6FFe4f3FdC8BBb7F70FFD48e61f17D1e343dDfD',\n        swap: '0xa9754f0D9055d14EB0D2d196E4C51d8B2Ee6f4d3',\n        baseTokens: [\n            new Token({\n                name: 'WETH',\n                symbol: 'WETH',\n                address: '0xbec7859bc3d0603bec454f7194173e36bf2aa5c8',\n                chainId: ChainId.OKX_X1_TESTNET,\n                decimals: 18,\n                icons: {\n                    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                    small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                },\n            }),\n            new Token({\n                chainId: ChainId.OKX_X1_TESTNET,\n                address: '0x67A1f4A939b477A6b7c5BF94D97E45dE87E608eF',\n                decimals: 18,\n                symbol: 'WOKB',\n                isNative: false,\n                name: 'Wrapped OKB',\n                icons: {\n                    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png',\n                    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png',\n                },\n            }),\n        ],\n    },\n    [ChainId.MERLIN_MAINNET]: {\n        swap: '0x1aFa5D7f89743219576Ef48a9826261bE6378a68',\n        factory: '0xE29a6620DAc789B8a76e9b9eC8fE9B7cf2B663D5',\n        quoter: '0x2569bcE69287618e2cd004f785d016F7DF29232F',\n        baseTokens: [\n            new Token({\n                chainId: ChainId.MERLIN_MAINNET,\n                name: 'Wrapped BTC',\n                symbol: 'WBTC',\n                address: '0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA',\n                decimals: 18,\n            }),\n            new Token({\n                chainId: ChainId.MERLIN_MAINNET,\n                name: 'iZUMi Bond USD',\n                symbol: 'iUSD',\n                address: '0x0A3BB08b3a15A19b4De82F8AcFc862606FB69A2D',\n                decimals: 18,\n            }),\n        ],\n    },\n    [ChainId.ZKLINK_MAINNET]: {\n        swap: '0x377EC7c9ae5a0787F384668788a1654249059dD6',\n        factory: '0x33D9936b7B7BC155493446B5E6dDC0350EB83AEC',\n        quoter: '0x3EC82C07981D6D213DA9bd35A0ba4cd324feA438',\n        baseTokens: [\n            new Token({\n                chainId: ChainId.ZKLINK_MAINNET,\n                name: 'Wrapped ETH',\n                symbol: 'WETH',\n                address: '0x8280a4e7D5B3B658ec4580d3Bc30f5e50454F169',\n                decimals: 18,\n            }),\n            new Token({\n                chainId: ChainId.ZKLINK_MAINNET,\n                name: 'Tether USD (Ethereum)',\n                symbol: 'USDT.Eth',\n                address: '0x0ace5E8e1Be0d3Df778f639d79fa8231b376b9F1',\n                decimals: 6,\n            }),\n            new Token({\n                chainId: ChainId.ZKLINK_MAINNET,\n                name: 'USD Coin (Ethereum)',\n                symbol: 'USDC.Eth',\n                address: '0x220B1C622c8c169a9174f42CEA89a9E2f83B63F6',\n                decimals: 6,\n            }),\n            new Token({\n                chainId: ChainId.ZKLINK_MAINNET,\n                name: 'USD Coin (Arbitrum)',\n                symbol: 'USDC.Arbi',\n                address: '0x7581469cb53E786F39ff26E8aF6Fd750213dAcEd',\n                decimals: 6,\n            }),\n        ],\n    },\n    [ChainId.ZETACHAIN_MAINNET]: {\n        swap: '0x34bc1b87f60e0a30c0e24FD7Abada70436c71406',\n        factory: '0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08',\n        quoter: '0x3F559139C2Fc7B97Ad6FE9B4d1f75149F551DB18',\n        baseTokens: [\n            new Token({\n                chainId: ChainId.ZETACHAIN_MAINNET,\n                name: 'Wrapped ZETA',\n                symbol: 'WZETA',\n                address: '0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf',\n                decimals: 18,\n            }),\n            new Token({\n                chainId: ChainId.ZETACHAIN_MAINNET,\n                name: 'ZetaChain ZRC20 USDT on ETH',\n                symbol: 'USDT.ETH',\n                address: '0x7c8dDa80bbBE1254a7aACf3219EBe1481c6E01d7',\n                decimals: 6,\n            }),\n            new Token({\n                chainId: ChainId.ZETACHAIN_MAINNET,\n                name: 'ZetaChain ZRC20 USDC on ETH',\n                symbol: 'USDC.ETH',\n                address: '0x0cbe0dF132a6c6B4a2974Fa1b7Fb953CF0Cc798a',\n                decimals: 6,\n            }),\n            new Token({\n                chainId: ChainId.ZETACHAIN_MAINNET,\n                name: 'ZetaChain ZRC20 ETH-eth_mainnet',\n                symbol: 'ETH.ETH',\n                address: '0xd97B1de3619ed2c6BEb3860147E30cA8A7dC9891',\n                decimals: 18,\n            }),\n        ],\n    },\n    [ChainId.TAIKO_MAINNET]: {\n        swap: '0x04830cfCED9772b8ACbAF76Cfc7A630Ad82c9148',\n        factory: '0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08',\n        quoter: '0x2C6Df0fDbCE9D2Ded2B52A117126F2Dc991f770f',\n        baseTokens: [],\n    },\n    [ChainId.GRAVITY_MAINNET]: {\n        swap: '0x3EF68D3f7664b2805D4E88381b64868a56f88bC4',\n        factory: '0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08',\n        quoter: '0x33531bDBFE34fa6Fd5963D0423f7699775AacaaF',\n        baseTokens: [],\n    },\n    [ChainId.MORPH_MAINNET]: {\n        swap: '0x3EF68D3f7664b2805D4E88381b64868a56f88bC4',\n        factory: '0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08',\n        quoter: '0x33531bDBFE34fa6Fd5963D0423f7699775AacaaF',\n        baseTokens: [],\n    },\n}\n\ninterface IzumiTradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n    deadline: number\n}\n\nexport class IzumiTrade extends SymbiosisTrade {\n    private readonly symbiosis: Symbiosis\n    private readonly deadline: number\n\n    static isSupported(chainId: ChainId): boolean {\n        return !!IZUMI_ADDRESSES[chainId]\n    }\n\n    public constructor(params: IzumiTradeParams) {\n        super(params)\n\n        const { symbiosis, deadline } = params\n        this.symbiosis = symbiosis\n        this.deadline = deadline\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return 'izumi'\n    }\n\n    public async init() {\n        const addresses = IZUMI_ADDRESSES[this.tokenAmountIn.token.chainId]\n\n        if (!addresses) {\n            throw new IzumiTradeError('Unsupported chain')\n        }\n\n        const { quoter, swap } = addresses\n\n        const allRoutes: IzumiRoute[] = []\n\n        const tokenIn = this.tokenAmountIn.token\n        const tokenOut = this.tokenOut\n\n        POSSIBLE_FEES.forEach((fee) => {\n            const path = getTokenChainPath([tokenIn, tokenOut], [fee])\n            allRoutes.push({ tokens: [tokenIn, tokenOut], path, fees: [fee] })\n        })\n\n        const wrappedTokenIn = wrappedToken(tokenIn)\n        const wrappedTokenOut = wrappedToken(tokenOut)\n\n        for (const baseToken of addresses.baseTokens) {\n            if (baseToken.equals(wrappedTokenIn) || baseToken.equals(wrappedTokenOut)) {\n                continue\n            }\n\n            POSSIBLE_FEES.forEach((firstFee) => {\n                POSSIBLE_FEES.forEach((secondFee) => {\n                    const fees = [firstFee, secondFee]\n\n                    const path = getTokenChainPath([tokenIn, baseToken, tokenOut], fees)\n                    allRoutes.push({ tokens: [tokenIn, baseToken, tokenOut], path, fees })\n                })\n            })\n        }\n\n        const provider = this.symbiosis.getProvider(this.tokenAmountIn.token.chainId)\n\n        const multicall = await getMulticall(provider)\n\n        const quoterInterface = IzumiQuoter__factory.createInterface()\n\n        const calls = allRoutes.map(({ path }) => ({\n            target: quoter,\n            callData: quoterInterface.encodeFunctionData('swapAmount', [this.tokenAmountIn.raw.toString(), path]),\n        }))\n\n        const maxChunkLength = 100\n        const chunks = Math.floor(calls.length / maxChunkLength) + 1\n\n        let results: Multicall2.ResultStructOutput[] = []\n        for (let i = 0; i < chunks; i++) {\n            const from = i * maxChunkLength\n            let to = (i + 1) * maxChunkLength\n            if (to > calls.length) {\n                to = calls.length\n            }\n            const callsPart = calls.slice(from, to)\n            const part = await multicall.callStatic.tryAggregate(false, callsPart)\n            results = [...results, ...part]\n        }\n\n        let bestRoute: IzumiRoute | undefined\n        let bestOutput: BigNumber | undefined\n        for (let i = 0; i < results.length; i++) {\n            const [success, returnData] = results[i]\n            if (!success) {\n                continue\n            }\n\n            const { acquire } = quoterInterface.decodeFunctionResult('swapAmount', returnData)\n            if (!bestOutput || BigNumber.from(acquire).gt(bestOutput)) {\n                bestRoute = allRoutes[i]\n                bestOutput = acquire\n            }\n        }\n\n        if (!bestRoute || !bestOutput) {\n            throw new IzumiTradeError('No path found')\n        }\n\n        const { path, tokens } = bestRoute\n        const pointsBefore = await this.getCurrentPoolPoints(bestRoute)\n        const initDecimalPriceEndByStart = getPriceDecimalEndByStart(bestRoute, pointsBefore)\n        const initDecimalPriceEndByStartTrimmed = new BNJS(initDecimalPriceEndByStart.toFixed(4))\n\n        let priceImpact = new Percent('0', BIPS_BASE)\n\n        if (!initDecimalPriceEndByStartTrimmed.isEqualTo('0')) {\n            const spotPriceBNJS = new BNJS(this.tokenAmountIn.raw.toString())\n                .dividedBy(10 ** this.tokenAmountIn.token.decimals)\n                .dividedBy(initDecimalPriceEndByStart)\n\n            const bestOutputBNJS = new BNJS(bestOutput.toString()).dividedBy(10 ** this.tokenOut.decimals)\n            const impactBNJS = spotPriceBNJS.minus(bestOutputBNJS).div(bestOutputBNJS).negated()\n\n            priceImpact = new Percent(impactBNJS.times(BIPS_BASE.toString()).toFixed(0).toString(), BIPS_BASE)\n        }\n\n        const amountOut = new TokenAmount(this.tokenOut, bestOutput.toString())\n\n        const minAcquired = getMinAmount(this.slippage, bestOutput.toString())\n        const amountOutMin = new TokenAmount(this.tokenOut, minAcquired.toString())\n\n        const outputToken = tokens[tokens.length - 1]\n\n        const finalRecipientAddress = this.to\n        const innerRecipientAddress = outputToken.isNative\n            ? '0x0000000000000000000000000000000000000000'\n            : finalRecipientAddress\n\n        const swapInterface = IzumiSwap__factory.createInterface()\n\n        const swapCalls: string[] = []\n\n        const swapData = swapInterface.encodeFunctionData('swapAmount', [\n            {\n                path,\n                recipient: innerRecipientAddress,\n                amount: this.tokenAmountIn.raw.toString(),\n                minAcquired: minAcquired.toString(),\n                deadline: this.deadline,\n            },\n        ])\n\n        swapCalls.push(swapData)\n        if (outputToken.isNative) {\n            swapCalls.push(swapInterface.encodeFunctionData('unwrapWETH9', ['0', finalRecipientAddress]))\n        }\n\n        let callData: string\n        if (swapCalls.length === 1) {\n            callData = swapCalls[0]\n        } else {\n            callData = swapInterface.encodeFunctionData('multicall', [swapCalls])\n        }\n\n        const abiCoder = new AbiCoder()\n\n        const amountInCallData = abiCoder.encode(['uint128'], [this.tokenAmountIn.raw.toString()]).replace('0x', '')\n        const amountPosition = callData.indexOf(amountInCallData) + amountInCallData.length\n        const callDataOffset = (amountPosition - 2) / 2 // Exclude the 0x from calculating the offset\n\n        const minReceivedCallData = abiCoder.encode(['uint128'], [minAcquired.toString()]).replace('0x', '')\n        const minReceivedPosition = callData.indexOf(minReceivedCallData) + minReceivedCallData.length\n        const minReceivedOffset = (minReceivedPosition - 2) / 2 // Exclude the 0x from calculating the offset\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            routerAddress: swap,\n            route: tokens,\n            callData,\n            callDataOffset,\n            minReceivedOffset,\n            priceImpact,\n        }\n        return this\n    }\n\n    async getCurrentPoolPoints({ fees, tokens }: IzumiRoute) {\n        const addresses = IZUMI_ADDRESSES[this.tokenAmountIn.token.chainId]\n\n        if (!addresses) {\n            throw new IzumiTradeError('Unsupported chain')\n        }\n\n        const provider = this.symbiosis.getProvider(this.tokenAmountIn.token.chainId)\n\n        const multicall = await getMulticall(provider)\n\n        const factoryInterface = IzumiFactory__factory.createInterface()\n\n        const getPoolAddressesCalls: {\n            target: string\n            callData: string\n        }[] = []\n        for (let i = 0; i < fees.length; i++) {\n            getPoolAddressesCalls.push({\n                target: addresses.factory,\n                callData: factoryInterface.encodeFunctionData('pool', [\n                    wrappedToken(tokens[i]).address,\n                    wrappedToken(tokens[i + 1]).address,\n                    fees[i],\n                ]),\n            })\n        }\n\n        const getPoolAddressesResults = await multicall.callStatic.tryAggregate(false, getPoolAddressesCalls)\n        const poolsAddresses: string[] = getPoolAddressesResults.map(\n            ([, returnData]) => factoryInterface.decodeFunctionResult('pool', returnData)[0]\n        )\n\n        const poolInterface = IzumiPool__factory.createInterface()\n\n        const statesResults = await multicall.callStatic.tryAggregate(\n            false,\n            poolsAddresses.map((poolAddress) => ({\n                target: poolAddress,\n                callData: poolInterface.encodeFunctionData('state'),\n            }))\n        )\n\n        const points = statesResults.map(\n            ([, returnData]) => poolInterface.decodeFunctionResult('state', returnData).currentPoint\n        )\n\n        return points\n    }\n}\n\n/**\n * Inner functions from izumi-sdk\n */\nfunction num2Hex(n: number) {\n    if (n < 10) {\n        return String(n)\n    }\n    const str = 'ABCDEF'\n    return str[n - 10]\n}\n\nfunction appendHex(hexString: string, newHexString: string): string {\n    return hexString + newHexString.slice(2)\n}\n\nfunction fee2Hex(fee: number): string {\n    const n0 = fee % 16\n    const n1 = Math.floor(fee / 16) % 16\n    const n2 = Math.floor(fee / 256) % 16\n    const n3 = Math.floor(fee / 4096) % 16\n    const n4 = 0\n    const n5 = 0\n    return '0x' + num2Hex(n5) + num2Hex(n4) + num2Hex(n3) + num2Hex(n2) + num2Hex(n1) + num2Hex(n0)\n}\n\nexport const getTokenChainPath = (tokenChain: Token[], feeChain: number[]): string => {\n    let hexString = wrappedToken(tokenChain[0]).address\n    for (let i = 0; i < feeChain.length; i++) {\n        hexString = appendHex(hexString, fee2Hex(feeChain[i]))\n        hexString = appendHex(hexString, wrappedToken(tokenChain[i + 1]).address)\n    }\n    return hexString\n}\n\nexport const getTokenXYFromToken = (\n    tokenA: Token,\n    tokenB: Token\n): {\n    tokenX: Token\n    tokenY: Token\n} => {\n    const addressA = wrappedToken(tokenA).address\n    const addressB = wrappedToken(tokenB).address\n\n    if (addressA.toLowerCase() < addressB.toLowerCase()) {\n        return { tokenX: tokenA, tokenY: tokenB }\n    }\n\n    return { tokenX: tokenB, tokenY: tokenA }\n}\n\nexport const priceUndecimal2PriceDecimal = (tokenA: Token, tokenB: Token, priceUndecimalAByB: BNJS): number => {\n    // priceUndecimalAByB * amountA = amountB\n    // priceUndecimalAByB * amountADecimal * 10^decimalA = amountBDecimal * 10^decimalB\n    // priceUndecimalAByB * 10^decimalA / 10^decimalB * amountA = amountB\n    return Number(priceUndecimalAByB.times(10 ** tokenA.decimals).div(10 ** tokenB.decimals))\n}\n\nexport const point2PriceDecimal = (tokenA: Token, tokenB: Token, point: number): number => {\n    let priceDecimal = 0\n    let needReverse = false\n    const { tokenX, tokenY } = getTokenXYFromToken(tokenA, tokenB)\n\n    const addressA = wrappedToken(tokenA).address\n    const addressB = wrappedToken(tokenB).address\n\n    if (point > 0) {\n        priceDecimal = priceUndecimal2PriceDecimal(tokenX, tokenY, new BNJS(1.0001 ** point))\n        needReverse = addressA.toLowerCase() > addressB.toLowerCase()\n    } else {\n        priceDecimal = priceUndecimal2PriceDecimal(tokenY, tokenX, new BNJS(1.0001 ** -point))\n        needReverse = addressA.toLowerCase() < addressB.toLowerCase()\n    }\n    if (needReverse) {\n        priceDecimal = 1 / priceDecimal\n    }\n    return priceDecimal\n}\n\nexport function getPriceDecimalEndByStart(route: IzumiRoute, points: number[]): number {\n    const { tokens, fees } = route\n\n    let decimalPriceEndByStart = 1\n    for (let i = 0; i < fees.length; i++) {\n        const decimalPriceBackByFront = point2PriceDecimal(tokens[i + 1], tokens[i], points[i])\n        decimalPriceEndByStart *= decimalPriceBackByFront\n    }\n\n    return decimalPriceEndByStart\n}\n","import { Provider } from '@ethersproject/providers'\nimport JSBI from 'jsbi'\nimport { ChainId } from '../../constants'\nimport { Pair, Percent, Token, TokenAmount, Trade, wrappedToken } from '../../entities'\nimport { Router } from '../../router'\nimport { BIPS_BASE } from '../constants'\nimport {\n    AdaRouter,\n    AdaRouter__factory,\n    AvaxRouter,\n    AvaxRouter__factory,\n    DragonswapRouter,\n    DragonswapRouter__factory,\n    HyperSwapRouter,\n    HyperSwapRouter__factory,\n    KavaRouter,\n    KavaRouter__factory,\n    KimRouter,\n    KimRouter__factory,\n    Pair__factory,\n    UniLikeRouter,\n    UniLikeRouter__factory,\n} from '../contracts'\nimport { getMulticall } from '../multicall'\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown, getAllPairCombinations } from '../chainUtils'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport { getFunctionSelector } from '../chainUtils/tron'\nimport { AddressZero } from '@ethersproject/constants/lib/addresses'\nimport { Symbiosis } from '../symbiosis'\nimport { UniV2TradeError } from '../sdkError'\n\ninterface UniV2TradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n    deadline: number\n}\n\ntype UniV2Router = UniLikeRouter | AvaxRouter | AdaRouter | KavaRouter | KimRouter | DragonswapRouter | HyperSwapRouter\n\nexport class UniV2Trade extends SymbiosisTrade {\n    private router!: UniV2Router\n\n    private readonly symbiosis: Symbiosis\n    private readonly deadline: number\n\n    static isSupported(symbiosis: Symbiosis, chainId: ChainId): boolean {\n        return symbiosis.chainConfig(chainId).router !== AddressZero\n    }\n\n    public constructor(params: UniV2TradeParams) {\n        super(params)\n\n        const { symbiosis, deadline } = params\n        this.symbiosis = symbiosis\n        this.deadline = deadline\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return 'uni-v2'\n    }\n\n    public async init() {\n        const { chainId } = this.tokenAmountIn.token\n\n        let router: UniV2Router = this.uniV2Router(chainId)\n        if (chainId === ChainId.AVAX_MAINNET) {\n            router = this.avaxRouter(chainId)\n        }\n        if ([ChainId.MILKOMEDA_DEVNET, ChainId.MILKOMEDA_MAINNET].includes(chainId)) {\n            router = this.adaRouter(chainId)\n        }\n        if ([ChainId.KAVA_MAINNET].includes(chainId)) {\n            router = this.kavaRouter(chainId)\n        }\n        if ([ChainId.MODE_MAINNET].includes(chainId)) {\n            router = this.kimRouter(chainId)\n        }\n        if ([ChainId.HYPERLIQUID_MAINNET].includes(chainId)) {\n            router = this.hyperSwapRouter(chainId)\n        }\n        if ([ChainId.SEI_EVM_MAINNET].includes(chainId)) {\n            router = this.dragonSwapRouter(chainId)\n        }\n        this.router = router\n\n        const pairs = await this.symbiosis.cache.get(\n            ['getPairs', chainId.toString(), this.tokenAmountIn.token.address, this.tokenOut.address],\n            async () => {\n                return UniV2Trade.getPairs(this.router.provider, this.tokenAmountIn.token, this.tokenOut)\n            },\n            60 // 1 minute\n        )\n\n        let trade\n        try {\n            const [t] = Trade.bestTradeExactIn(pairs, this.tokenAmountIn, this.tokenOut, {\n                maxHops: 3,\n                maxNumResults: 1,\n            })\n            trade = t\n        } catch (e: any) {\n            throw new UniV2TradeError(`bestTradeExactIn failed ${e.message}`)\n        }\n\n        if (!trade) {\n            throw new UniV2TradeError('Cannot create trade')\n        }\n\n        const dexFee = this.symbiosis.dexFee(chainId)\n\n        const priceImpact = computeTradePriceBreakdown(trade, dexFee).priceImpactWithoutFee\n        if (!priceImpact) {\n            throw new UniV2TradeError('Cannot calculate priceImpact')\n        }\n\n        const amountOutMin = computeSlippageAdjustedAmounts(trade, this.slippage).OUTPUT\n        if (!amountOutMin) {\n            throw new UniV2TradeError('Cannot compute amountOutMin')\n        }\n\n        const { data, offset, minReceivedOffset, functionSelector } = this.buildCallData(trade)\n        if (!data) {\n            throw new UniV2TradeError('Cannot build callData')\n        }\n\n        this.out = {\n            amountOut: trade.outputAmount,\n            amountOutMin,\n            routerAddress: this.router.address,\n            route: trade.route.path,\n            callData: data,\n            callDataOffset: offset,\n            minReceivedOffset,\n            priceImpact,\n            functionSelector,\n        }\n        return this\n    }\n\n    private buildCallData(trade: Trade): {\n        data: string\n        offset: number\n        minReceivedOffset: number\n        functionSelector: string\n    } {\n        const { methodName, args, offset, minReceivedOffset } = Router.swapCallParameters(trade, {\n            allowedSlippage: new Percent(JSBI.BigInt(Math.floor(this.slippage)), BIPS_BASE),\n            recipient: this.to,\n            ttl: this.deadline,\n            feeOnTransfer: [ChainId.MODE_MAINNET, ChainId.HYPERLIQUID_MAINNET].includes(\n                trade.inputAmount.token.chainId\n            ),\n        })\n\n        let method = methodName\n        // TODO replace the condition to method mapping\n        if (trade.inputAmount.token.chainId === ChainId.AVAX_MAINNET) {\n            method = methodName.replace('ETH', 'AVAX')\n        } else if ([ChainId.MILKOMEDA_DEVNET, ChainId.MILKOMEDA_MAINNET].includes(trade.inputAmount.token.chainId)) {\n            method = methodName.replace('ETH', 'ADA')\n        } else if ([ChainId.SEI_EVM_MAINNET].includes(trade.inputAmount.token.chainId)) {\n            method = methodName.replace('ETH', 'SEI')\n        }\n\n        const functionAbi = this.router.interface.getFunction(method)\n\n        return {\n            functionSelector: getFunctionSelector(functionAbi),\n            data: this.router.interface.encodeFunctionData(method as any, args as any),\n            offset,\n            minReceivedOffset,\n        }\n    }\n\n    private static async getPairs(provider: Provider, tokenIn: Token, tokenOut: Token): Promise<Pair[]> {\n        const allPairCombinations = getAllPairCombinations(tokenIn, tokenOut)\n        return await UniV2Trade.allPairs(provider, allPairCombinations)\n    }\n\n    private static async allPairs(provider: Provider, tokens: [Token, Token][]): Promise<Pair[]> {\n        const wrappedTokens = tokens.map(([tokenA, tokenB]) => [wrappedToken(tokenA), wrappedToken(tokenB)])\n\n        const multicall = await getMulticall(provider)\n\n        const pairAddresses = wrappedTokens.map(([tokenA, tokenB]) => {\n            if (!tokenA || !tokenB) {\n                throw new UniV2TradeError('tokenA or tokenB is null')\n            }\n            if (tokenA.chainId !== tokenB.chainId) {\n                throw new UniV2TradeError('tokenA and tokenB are not on the same chain')\n            }\n            if (tokenA.equals(tokenB)) {\n                throw new UniV2TradeError('tokenA and tokenB are the same')\n            }\n\n            return Pair.getAddress(tokenA, tokenB)\n        })\n\n        const pairInterface = Pair__factory.createInterface()\n        const getReservesData = pairInterface.encodeFunctionData('getReserves')\n\n        const calls = pairAddresses.map((pairAddress) => ({\n            target: pairAddress,\n            callData: getReservesData,\n        }))\n\n        const aggregateResult = await multicall.callStatic.tryAggregate(false, calls)\n\n        const validPairs: Map<string, Pair> = new Map()\n        aggregateResult.forEach(([success, returnData], i) => {\n            if (!success || returnData === '0x') {\n                return\n            }\n\n            const tokenA = wrappedTokens[i][0]\n            const tokenB = wrappedTokens[i][1]\n\n            if (!tokenA || !tokenB || tokenA.equals(tokenB)) {\n                return\n            }\n\n            const reserve = pairInterface.decodeFunctionResult('getReserves', returnData)\n            const { reserve0, reserve1 } = reserve\n            const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n            const pair = new Pair(\n                new TokenAmount(token0, reserve0.toString()),\n                new TokenAmount(token1, reserve1.toString())\n            )\n\n            validPairs.set(pair.liquidityToken.address, pair)\n        })\n\n        return Array.from(validPairs.values())\n    }\n\n    private uniV2Router(chainId: ChainId): UniLikeRouter {\n        const { address, provider } = this.getRouterConfig(chainId)\n        return UniLikeRouter__factory.connect(address, provider)\n    }\n\n    private avaxRouter(chainId: ChainId): AvaxRouter {\n        const { address, provider } = this.getRouterConfig(chainId)\n        return AvaxRouter__factory.connect(address, provider)\n    }\n\n    private adaRouter(chainId: ChainId): AdaRouter {\n        const { address, provider } = this.getRouterConfig(chainId)\n        return AdaRouter__factory.connect(address, provider)\n    }\n\n    private kavaRouter(chainId: ChainId): KavaRouter {\n        const { address, provider } = this.getRouterConfig(chainId)\n        return KavaRouter__factory.connect(address, provider)\n    }\n\n    private kimRouter(chainId: ChainId): KimRouter {\n        const { address, provider } = this.getRouterConfig(chainId)\n        return KimRouter__factory.connect(address, provider)\n    }\n\n    private hyperSwapRouter(chainId: ChainId): HyperSwapRouter {\n        const { address, provider } = this.getRouterConfig(chainId)\n        return HyperSwapRouter__factory.connect(address, provider)\n    }\n\n    private dragonSwapRouter(chainId: ChainId): DragonswapRouter {\n        const { address, provider } = this.getRouterConfig(chainId)\n        return DragonswapRouter__factory.connect(address, provider)\n    }\n\n    private getRouterConfig(chainId: ChainId) {\n        const address = this.symbiosis.chainConfig(chainId).router\n        const provider = this.symbiosis.getProvider(chainId)\n        return { address, provider }\n    }\n}\n","import { ChainId } from '../../constants'\nimport { Percent, Token, TokenAmount } from '../../entities'\nimport { UniV3Factory__factory, UniV3Quoter__factory, UniV3Router02__factory } from '../contracts'\nimport { Symbiosis } from '../symbiosis'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport {\n    encodeRouteToPath,\n    FeeAmount,\n    MethodParameters,\n    Multicall,\n    Payments,\n    Pool,\n    Route,\n    SelfPermit,\n    SwapOptions,\n    toHex,\n    Trade,\n} from '@uniswap/v3-sdk'\nimport { getPool } from './uniV3Trade/pool'\nimport { Currency, CurrencyAmount, Percent as PercentUni, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { getOutputQuote } from './uniV3Trade/getOutputQuote'\nimport JSBI from 'jsbi'\nimport { toUniCurrency, toUniCurrencyAmount } from './uniV3Trade/toUniTypes'\nimport invariant from 'tiny-invariant'\nimport { UniV3TradeError } from '../sdkError'\nimport { BIPS_BASE } from '../constants'\nimport { getMinAmount } from '../chainUtils'\nimport { IV3SwapRouter } from '../contracts/UniV3Router02'\n\ninterface Deployment {\n    factory: string\n    quoter: string\n    swap02: string\n    initCodeHash?: string\n    baseTokens: Token[]\n}\n\nconst POSSIBLE_FEES = [FeeAmount.LOWEST, FeeAmount.LOW, FeeAmount.MEDIUM, FeeAmount.HIGH]\n\nconst DEPLOYMENT_ADDRESSES: Partial<Record<ChainId, Deployment>> = {\n    [ChainId.UNICHAIN_MAINNET]: {\n        factory: '0x1f98400000000000000000000000000000000003',\n        quoter: '0x385a5cf5f83e99f7bb2852b6a19c3538b9fa7658',\n        swap02: '0x73855d06de49d0fe4a9c42636ba96c62da12ff9c',\n        baseTokens: [\n            new Token({\n                name: 'USD Coin',\n                symbol: 'USDC',\n                address: '0x078D782b760474a361dDA0AF3839290b0EF57AD6',\n                chainId: ChainId.UNICHAIN_MAINNET,\n                decimals: 6,\n            }),\n            new Token({\n                name: 'Wrapped ETH',\n                symbol: 'WETH',\n                address: '0x4200000000000000000000000000000000000006',\n                chainId: ChainId.UNICHAIN_MAINNET,\n                decimals: 18,\n            }),\n        ],\n    },\n    [ChainId.SONEIUM_MAINNET]: {\n        factory: '0x3E4ff8662820E3dec3DACDb66ef1FFad5Dc5Ab83',\n        quoter: '0x715BE426a0c8E0A14aBc0130f08F06aa41B1f218',\n        swap02: '0xd2DdF58Bcc188F335061e41C73ED2A8894c2dD98',\n        baseTokens: [\n            new Token({\n                name: 'ASTR',\n                symbol: 'ASTR',\n                address: '0x2CAE934a1e84F693fbb78CA5ED3B0A6893259441',\n                chainId: ChainId.SONEIUM_MAINNET,\n                decimals: 18,\n            }),\n            new Token({\n                name: 'USD Coin',\n                symbol: 'USDC',\n                address: '0xbA9986D2381edf1DA03B0B9c1f8b00dc4AacC369',\n                chainId: ChainId.SONEIUM_MAINNET,\n                decimals: 6,\n            }),\n            new Token({\n                name: 'Wrapped ETH',\n                symbol: 'WETH',\n                address: '0x4200000000000000000000000000000000000006',\n                chainId: ChainId.SONEIUM_MAINNET,\n                decimals: 18,\n            }),\n        ],\n    },\n    [ChainId.HYPERLIQUID_MAINNET]: {\n        factory: '0xB1c0fa0B789320044A6F623cFe5eBda9562602E3',\n        quoter: '0x03A918028f22D9E1473B7959C927AD7425A45C7C',\n        swap02: '0x6D99e7f6747AF2cDbB5164b6DD50e40D4fDe1e77',\n        initCodeHash: '0xe3572921be1688dba92df30c6781b8770499ff274d20ae9b325f4242634774fb',\n        baseTokens: [\n            new Token({\n                name: 'Wrapped HYPE',\n                symbol: 'WHYPE',\n                address: '0x5555555555555555555555555555555555555555',\n                chainId: ChainId.HYPERLIQUID_MAINNET,\n                decimals: 18,\n            }),\n        ],\n    },\n    [ChainId.BERACHAIN_MAINNET]: {\n        factory: '0xD84CBf0B02636E7f53dB9E5e45A616E05d710990',\n        quoter: '0x644C8D6E501f7C994B74F5ceA96abe65d0BA662B',\n        swap02: '0xe301E48F77963D3F7DbD2a4796962Bd7f3867Fb4',\n        initCodeHash: '0xd8e2091bc519b509176fc39aeb148cc8444418d3ce260820edc44e806c2c2339',\n        baseTokens: [\n            new Token({\n                name: 'Wrapped BERA',\n                symbol: 'WBERA',\n                address: '0x6969696969696969696969696969696969696969',\n                chainId: ChainId.BERACHAIN_MAINNET,\n                decimals: 18,\n            }),\n        ],\n    },\n}\n\ninterface UniV3TradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n    deadline: number\n}\n\nexport class UniV3Trade extends SymbiosisTrade {\n    private readonly symbiosis: Symbiosis\n    private readonly deadline: number\n\n    static isSupported(chainId: ChainId): boolean {\n        return !!DEPLOYMENT_ADDRESSES[chainId]\n    }\n\n    public constructor(params: UniV3TradeParams) {\n        super(params)\n\n        const { symbiosis, deadline } = params\n        this.symbiosis = symbiosis\n        this.deadline = deadline\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return 'uni-v3'\n    }\n\n    public async init() {\n        const chainId = this.tokenAmountIn.token.chainId\n\n        const addresses = DEPLOYMENT_ADDRESSES[chainId]\n        if (!addresses) {\n            throw new UniV3TradeError('Unsupported chain')\n        }\n        const provider = this.symbiosis.getProvider(chainId)\n\n        const { quoter, swap02: routerAddress, factory, initCodeHash, baseTokens } = addresses\n\n        const currencyIn = toUniCurrency(this.tokenAmountIn.token)\n        const currencyOut = toUniCurrency(this.tokenOut)\n\n        const factoryContract = UniV3Factory__factory.connect(factory, provider)\n        const quoterContract = UniV3Quoter__factory.connect(quoter, provider)\n\n        const routePromises = POSSIBLE_FEES.map(async (fee) => {\n            const pool = await getPool(factoryContract, currencyIn.wrapped, currencyOut.wrapped, fee, initCodeHash)\n            return new Route([pool], currencyIn, currencyOut)\n        })\n\n        const extraRoutePromises = baseTokens\n            .map((baseToken) => {\n                const baseCurrency = toUniCurrency(baseToken).wrapped\n                if (baseCurrency.equals(currencyIn.wrapped) || baseCurrency.equals(currencyOut.wrapped)) {\n                    return\n                }\n\n                return POSSIBLE_FEES.map(async (baseFee) => {\n                    const results = await Promise.allSettled([\n                        getPool(factoryContract, currencyIn.wrapped, baseCurrency, baseFee, initCodeHash),\n                        getPool(factoryContract, baseCurrency, currencyOut.wrapped, baseFee, initCodeHash),\n                    ])\n                    const extraPools = results\n                        .map((result) => {\n                            if (result.status === 'rejected') {\n                                return\n                            }\n                            return result.value\n                        })\n                        .filter(Boolean) as Pool[]\n                    if (extraPools.length < 2) {\n                        return\n                    }\n                    return new Route(extraPools, currencyIn, currencyOut)\n                })\n            })\n            .flat()\n\n        const routesResults = await Promise.allSettled([...routePromises, ...extraRoutePromises])\n        const routes = routesResults\n            .map((result) => {\n                if (result.status === 'rejected') {\n                    return\n                }\n                return result.value\n            })\n            .filter(Boolean) as Route<Currency, Currency>[]\n\n        const quotaResults = await Promise.allSettled(\n            routes.map(async (route) => {\n                const quota = await getOutputQuote(quoterContract, toUniCurrencyAmount(this.tokenAmountIn), route)\n                return {\n                    route,\n                    amountOut: JSBI.BigInt(quota.toString()),\n                }\n            })\n        )\n\n        let bestRoute: Route<Currency, Currency> | undefined = undefined\n        let bestAmountOut: JSBI | undefined = undefined\n        const errors: UniV3TradeError[] = []\n        for (const result of quotaResults) {\n            if (result.status === 'rejected') {\n                errors.push(new UniV3TradeError(JSON.stringify(result.reason?.toString())))\n                continue\n            }\n\n            if (!result.value) {\n                continue\n            }\n\n            const { amountOut, route } = result.value\n            if (!bestAmountOut || JSBI.greaterThan(amountOut, bestAmountOut)) {\n                bestAmountOut = amountOut\n                bestRoute = route\n            }\n        }\n        if (!bestAmountOut || !bestRoute) {\n            throw new AggregateError(errors, 'UniV3Route not found')\n        }\n\n        const amountOut = new TokenAmount(this.tokenOut, bestAmountOut.toString())\n\n        const trade = Trade.createUncheckedTrade({\n            route: bestRoute,\n            inputAmount: CurrencyAmount.fromRawAmount(currencyIn, this.tokenAmountIn.raw.toString()),\n            outputAmount: CurrencyAmount.fromRawAmount(currencyOut, bestAmountOut),\n            tradeType: TradeType.EXACT_INPUT,\n        })\n\n        const slippageTolerance = new PercentUni(this.slippage, BIPS_BASE)\n\n        const options: SwapOptions = {\n            slippageTolerance,\n            deadline: this.deadline,\n            recipient: this.to,\n        }\n        const methodParameters = UniV3Trade.swapCallParameters([trade], options, routerAddress)\n\n        const amountOutMinRaw = getMinAmount(this.slippage, bestAmountOut)\n        const amountOutMin = new TokenAmount(this.tokenOut, amountOutMinRaw)\n\n        const priceImpact = new Percent(\n            JSBI.multiply(trade.priceImpact.numerator, JSBI.BigInt('-1')),\n            trade.priceImpact.denominator\n        )\n        const callData = methodParameters.calldata\n        const { amountOffset, minReceivedOffset, minReceivedOffset2 } = UniV3Trade.getOffsets(callData)\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            routerAddress,\n            route: [this.tokenAmountIn.token, this.tokenOut],\n            callData,\n            callDataOffset: amountOffset,\n            minReceivedOffset,\n            minReceivedOffset2,\n            priceImpact,\n        }\n        return this\n    }\n\n    private static getOffsets(callData: string) {\n        const methods = [\n            {\n                // exactInputSingle\n                sigHash: '04e45aaf',\n                offset: 4 + 5 * 32,\n                minReceivedOffset: 4 + 6 * 32,\n                minReceivedOffset2: undefined,\n            },\n            {\n                // exactInput\n                sigHash: 'b858183f',\n                offset: 4 + 4 * 32,\n                minReceivedOffset: 4 + 5 * 32,\n                minReceivedOffset2: undefined,\n            },\n            {\n                // multicall\n                sigHash: 'ac9650d8',\n                offset: 328,\n                minReceivedOffset: 360,\n                minReceivedOffset2: 488,\n            },\n        ]\n\n        const sigHash = callData.slice(2, 10)\n\n        const method = methods.find((i) => {\n            return i.sigHash === sigHash\n        })\n\n        if (method === undefined) {\n            throw new UniV3TradeError('Unknown swap method encoded to calldata')\n        }\n\n        return {\n            amountOffset: method.offset,\n            minReceivedOffset: method.minReceivedOffset,\n            minReceivedOffset2: method.minReceivedOffset2,\n        }\n    }\n\n    public static swapCallParameters(\n        trades: Trade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>[],\n        options: SwapOptions,\n        routerAddress: string\n    ): MethodParameters {\n        if (!Array.isArray(trades)) {\n            trades = [trades]\n        }\n\n        const sampleTrade = trades[0]\n        const tokenIn = sampleTrade.inputAmount.currency.wrapped\n        const tokenOut = sampleTrade.outputAmount.currency.wrapped\n\n        // All trades should have the same starting and ending token.\n        invariant(\n            trades.every((trade) => trade.inputAmount.currency.wrapped.equals(tokenIn)),\n            'TOKEN_IN_DIFF'\n        )\n        invariant(\n            trades.every((trade) => trade.outputAmount.currency.wrapped.equals(tokenOut)),\n            'TOKEN_OUT_DIFF'\n        )\n\n        const calldatas: string[] = []\n\n        const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].inputAmount.currency, 0)\n        const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(trades[0].outputAmount.currency, 0)\n\n        const totalAmountOut: CurrencyAmount<Currency> = trades.reduce(\n            (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n            ZERO_OUT\n        )\n\n        // flag for whether a refund needs to happen\n        const mustRefund = sampleTrade.inputAmount.currency.isNative && sampleTrade.tradeType === TradeType.EXACT_OUTPUT\n        const inputIsNative = sampleTrade.inputAmount.currency.isNative\n        // flags for whether funds should be send first to the router\n        const outputIsNative = sampleTrade.outputAmount.currency.isNative\n        const routerMustCustody = outputIsNative || !!options.fee\n\n        const totalValue: CurrencyAmount<Currency> = inputIsNative\n            ? trades.reduce((sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)), ZERO_IN)\n            : ZERO_IN\n\n        // encode permit if necessary\n        if (options.inputTokenPermit) {\n            invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\n            calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\n        }\n\n        const recipient: string = validateAndParseAddress(options.recipient)\n\n        for (const trade of trades) {\n            for (const { route, inputAmount, outputAmount } of trade.swaps) {\n                const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\n                const amountOut: string = toHex(\n                    trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient\n                )\n\n                // flag for whether the trade is single hop or not\n                const singleHop = route.pools.length === 1\n\n                if (singleHop) {\n                    if (trade.tradeType === TradeType.EXACT_INPUT) {\n                        const exactInputSingleParams: IV3SwapRouter.ExactInputSingleParamsStruct = {\n                            tokenIn: route.tokenPath[0].address,\n                            tokenOut: route.tokenPath[1].address,\n                            fee: route.pools[0].fee,\n                            recipient: routerMustCustody ? routerAddress : recipient,\n                            amountIn,\n                            amountOutMinimum: amountOut,\n                            sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0),\n                        }\n\n                        calldatas.push(\n                            UniV3Router02__factory.createInterface().encodeFunctionData('exactInputSingle', [\n                                exactInputSingleParams,\n                            ])\n                        )\n                    } else {\n                        const exactOutputSingleParams: IV3SwapRouter.ExactOutputSingleParamsStruct = {\n                            tokenIn: route.tokenPath[0].address,\n                            tokenOut: route.tokenPath[1].address,\n                            fee: route.pools[0].fee,\n                            recipient: routerMustCustody ? routerAddress : recipient,\n                            amountOut,\n                            amountInMaximum: amountIn,\n                            sqrtPriceLimitX96: toHex(options.sqrtPriceLimitX96 ?? 0),\n                        }\n\n                        calldatas.push(\n                            UniV3Router02__factory.createInterface().encodeFunctionData('exactOutputSingle', [\n                                exactOutputSingleParams,\n                            ])\n                        )\n                    }\n                } else {\n                    invariant(options.sqrtPriceLimitX96 === undefined, 'MULTIHOP_PRICE_LIMIT')\n\n                    const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\n\n                    if (trade.tradeType === TradeType.EXACT_INPUT) {\n                        const exactInputParams = {\n                            path,\n                            recipient: routerMustCustody ? routerAddress : recipient,\n                            amountIn,\n                            amountOutMinimum: amountOut,\n                        }\n\n                        calldatas.push(\n                            UniV3Router02__factory.createInterface().encodeFunctionData('exactInput', [\n                                exactInputParams,\n                            ])\n                        )\n                    } else {\n                        const exactOutputParams = {\n                            path,\n                            recipient: routerMustCustody ? routerAddress : recipient,\n                            amountOut,\n                            amountInMaximum: amountIn,\n                        }\n\n                        calldatas.push(\n                            UniV3Router02__factory.createInterface().encodeFunctionData('exactOutput', [\n                                exactOutputParams,\n                            ])\n                        )\n                    }\n                }\n            }\n        }\n\n        // unwrap\n        if (routerMustCustody) {\n            if (options.fee) {\n                if (outputIsNative) {\n                    calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient, options.fee))\n                } else {\n                    calldatas.push(\n                        Payments.encodeSweepToken(\n                            sampleTrade.outputAmount.currency.wrapped,\n                            totalAmountOut.quotient,\n                            recipient,\n                            options.fee\n                        )\n                    )\n                }\n            } else {\n                calldatas.push(Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient))\n            }\n        }\n\n        // refund\n        if (mustRefund) {\n            calldatas.push(Payments.encodeRefundETH())\n        }\n\n        return {\n            calldata: Multicall.encodeMulticall(calldatas),\n            value: toHex(totalValue.quotient),\n        }\n    }\n}\n","{\n  \"_format\": \"hh-sol-artifact-1\",\n  \"contractName\": \"IUniswapV3Pool\",\n  \"sourceName\": \"contracts/interfaces/IUniswapV3Pool.sol\",\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"amount\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Burn\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"amount0\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"amount1\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"name\": \"Collect\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"amount0\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"amount1\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"name\": \"CollectProtocol\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"paid0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"paid1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Flash\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint16\",\n          \"name\": \"observationCardinalityNextOld\",\n          \"type\": \"uint16\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint16\",\n          \"name\": \"observationCardinalityNextNew\",\n          \"type\": \"uint16\"\n        }\n      ],\n      \"name\": \"IncreaseObservationCardinalityNext\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int24\",\n          \"name\": \"tick\",\n          \"type\": \"int24\"\n        }\n      ],\n      \"name\": \"Initialize\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"amount\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Mint\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"feeProtocol0Old\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"feeProtocol1Old\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"feeProtocol0New\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"feeProtocol1New\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"SetFeeProtocol\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"amount0\",\n          \"type\": \"int256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int256\",\n          \"name\": \"amount1\",\n          \"type\": \"int256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"int24\",\n          \"name\": \"tick\",\n          \"type\": \"int24\"\n        }\n      ],\n      \"name\": \"Swap\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount0Requested\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount1Requested\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"name\": \"collect\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount0\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount1\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount0Requested\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount1Requested\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"name\": \"collectProtocol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount0\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount1\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"factory\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"fee\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint24\",\n          \"name\": \"\",\n          \"type\": \"uint24\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"feeGrowthGlobal0X128\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"feeGrowthGlobal1X128\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"flash\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint16\",\n          \"name\": \"observationCardinalityNext\",\n          \"type\": \"uint16\"\n        }\n      ],\n      \"name\": \"increaseObservationCardinalityNext\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96\",\n          \"type\": \"uint160\"\n        }\n      ],\n      \"name\": \"initialize\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"liquidity\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"maxLiquidityPerTick\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"amount\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"mint\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount0\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount1\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"observations\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"blockTimestamp\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"int56\",\n          \"name\": \"tickCumulative\",\n          \"type\": \"int56\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"secondsPerLiquidityCumulativeX128\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"initialized\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint32[]\",\n          \"name\": \"secondsAgos\",\n          \"type\": \"uint32[]\"\n        }\n      ],\n      \"name\": \"observe\",\n      \"outputs\": [\n        {\n          \"internalType\": \"int56[]\",\n          \"name\": \"tickCumulatives\",\n          \"type\": \"int56[]\"\n        },\n        {\n          \"internalType\": \"uint160[]\",\n          \"name\": \"secondsPerLiquidityCumulativeX128s\",\n          \"type\": \"uint160[]\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"key\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"positions\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"_liquidity\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeGrowthInside0LastX128\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeGrowthInside1LastX128\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"tokensOwed0\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"tokensOwed1\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"protocolFees\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"token0\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"token1\",\n          \"type\": \"uint128\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"feeProtocol0\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"feeProtocol1\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"setFeeProtocol\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"slot0\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceX96\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tick\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"uint16\",\n          \"name\": \"observationIndex\",\n          \"type\": \"uint16\"\n        },\n        {\n          \"internalType\": \"uint16\",\n          \"name\": \"observationCardinality\",\n          \"type\": \"uint16\"\n        },\n        {\n          \"internalType\": \"uint16\",\n          \"name\": \"observationCardinalityNext\",\n          \"type\": \"uint16\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"feeProtocol\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"unlocked\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickLower\",\n          \"type\": \"int24\"\n        },\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tickUpper\",\n          \"type\": \"int24\"\n        }\n      ],\n      \"name\": \"snapshotCumulativesInside\",\n      \"outputs\": [\n        {\n          \"internalType\": \"int56\",\n          \"name\": \"tickCumulativeInside\",\n          \"type\": \"int56\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"secondsPerLiquidityInsideX128\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"secondsInside\",\n          \"type\": \"uint32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"zeroForOne\",\n          \"type\": \"bool\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amountSpecified\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"sqrtPriceLimitX96\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"data\",\n          \"type\": \"bytes\"\n        }\n      ],\n      \"name\": \"swap\",\n      \"outputs\": [\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount0\",\n          \"type\": \"int256\"\n        },\n        {\n          \"internalType\": \"int256\",\n          \"name\": \"amount1\",\n          \"type\": \"int256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int16\",\n          \"name\": \"wordPosition\",\n          \"type\": \"int16\"\n        }\n      ],\n      \"name\": \"tickBitmap\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"tickSpacing\",\n      \"outputs\": [\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"\",\n          \"type\": \"int24\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"int24\",\n          \"name\": \"tick\",\n          \"type\": \"int24\"\n        }\n      ],\n      \"name\": \"ticks\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint128\",\n          \"name\": \"liquidityGross\",\n          \"type\": \"uint128\"\n        },\n        {\n          \"internalType\": \"int128\",\n          \"name\": \"liquidityNet\",\n          \"type\": \"int128\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeGrowthOutside0X128\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"feeGrowthOutside1X128\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"int56\",\n          \"name\": \"tickCumulativeOutside\",\n          \"type\": \"int56\"\n        },\n        {\n          \"internalType\": \"uint160\",\n          \"name\": \"secondsPerLiquidityOutsideX128\",\n          \"type\": \"uint160\"\n        },\n        {\n          \"internalType\": \"uint32\",\n          \"name\": \"secondsOutside\",\n          \"type\": \"uint32\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"initialized\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"token0\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"token1\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"bytecode\": \"0x\",\n  \"deployedBytecode\": \"0x\",\n  \"linkReferences\": {},\n  \"deployedLinkReferences\": {}\n}\n","import IUniswapV3PoolABI from '@uniswap/v3-core/artifacts/contracts/interfaces/IUniswapV3Pool.sol/IUniswapV3Pool.json'\nimport { computePoolAddress, Pool } from '@uniswap/v3-sdk'\nimport { ethers } from 'ethers'\nimport { FeeAmount } from '@uniswap/v3-sdk/dist/constants'\nimport { Token } from '@uniswap/sdk-core'\nimport { UniV3Factory } from '../../contracts'\n\nexport async function getPool(\n    factory: UniV3Factory,\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    initCodeHash?: string\n): Promise<Pool> {\n    const currentPoolAddress = computePoolAddress({\n        factoryAddress: factory.address,\n        tokenA,\n        tokenB,\n        fee,\n        initCodeHashManualOverride: initCodeHash,\n    })\n\n    const poolContract = new ethers.Contract(currentPoolAddress, IUniswapV3PoolABI.abi, factory.provider)\n    const [token0, token1, liquidity, slot0] = await Promise.all([\n        poolContract.token0(),\n        poolContract.token1(),\n        poolContract.liquidity(),\n        poolContract.slot0(),\n    ])\n    if (liquidity.isZero()) {\n        throw new Error(`Liquidity pool is empty: ${tokenA.address}/${tokenB.address}/${fee}`)\n    }\n    const tokens = {\n        [tokenA.address]: tokenA,\n        [tokenB.address]: tokenB,\n    }\n    return new Pool(\n        new Token(tokens[token0].chainId, token0, tokens[token0].decimals),\n        new Token(tokens[token1].chainId, token1, tokens[token1].decimals),\n        fee,\n        slot0[0].toString(), // sqrtPriceX96\n        liquidity.toString(),\n        slot0[1] // tick\n    )\n}\n","import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Route, SwapQuoter } from '@uniswap/v3-sdk'\nimport { UniV3Quoter } from '../../contracts'\nimport { ethers } from 'ethers'\n\nexport async function getOutputQuote(\n    quoter: UniV3Quoter,\n    currencyAmount: CurrencyAmount<Currency>,\n    route: Route<Currency, Currency>\n) {\n    const { calldata } = await SwapQuoter.quoteCallParameters(route, currencyAmount, TradeType.EXACT_INPUT, {\n        useQuoterV2: true,\n    })\n\n    const quoteCallReturnData = await quoter.provider.call({\n        to: quoter.address,\n        data: calldata,\n    })\n\n    return ethers.utils.defaultAbiCoder.decode(['uint256'], quoteCallReturnData)\n}\n","import { Token as TokenUni, CurrencyAmount, Currency } from '@uniswap/sdk-core'\nimport { Token, TokenAmount } from '../../../entities'\nimport { GasToken } from './gasToken'\n\nexport function toUniToken(token: Token): TokenUni {\n    return new TokenUni(token.chainId, token.address, token.decimals)\n}\n\nexport function toUniCurrency(token: Token): Currency {\n    if (token.isNative) {\n        return GasToken.onChain(token.chainId)\n    }\n    return toUniToken(token)\n}\n\nexport function toUniCurrencyAmount(tokenAmount: TokenAmount): CurrencyAmount<Currency> {\n    const currency = toUniCurrency(tokenAmount.token)\n    return CurrencyAmount.fromRawAmount(currency, tokenAmount.raw.toString())\n}\n","import { Currency, Ether, Token, NativeCurrency } from '@uniswap/sdk-core'\nimport { ChainId } from '../../../constants'\nimport { WETH } from '../../../entities'\nimport invariant from 'tiny-invariant'\nimport { toUniToken } from './toUniTypes'\n\nexport class GasToken extends NativeCurrency {\n    protected constructor(chainId: number) {\n        super(chainId, 18, 'GAS', 'GAS')\n    }\n\n    public get wrapped(): Token {\n        const weth9 = WETH[this.chainId as ChainId]\n        invariant(!!weth9, 'WRAPPED')\n        return toUniToken(weth9)\n    }\n\n    private static _cache: { [chainId: number]: Ether } = {}\n\n    public static onChain(chainId: number): GasToken {\n        return this._cache[chainId] ?? (this._cache[chainId] = new GasToken(chainId))\n    }\n\n    public equals(other: Currency): boolean {\n        return other.isNative && other.chainId === this.chainId\n    }\n}\n","import { Symbiosis } from '../symbiosis'\nimport { OneInchProtocols, OneInchTrade } from './oneInchTrade'\nimport { OpenOceanTrade } from './openOceanTrade'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport { IzumiTrade } from './izumiTrade'\nimport { UniV2Trade } from './uniV2Trade'\nimport { UniV3Trade } from './uniV3Trade'\nimport { Percent, Token, TokenAmount } from '../../entities'\nimport { utils } from 'ethers'\nimport { FeeItem } from '../types'\n\ntype Trade = OneInchTrade | OpenOceanTrade | IzumiTrade | UniV2Trade | UniV3Trade\n\ninterface AggregatorTradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n    from: string\n    clientId: string\n    deadline: number\n    preferOneInchUsage?: boolean\n    oneInchProtocols?: OneInchProtocols\n}\n\nclass TradeNotInitializedError extends Error {\n    constructor(msg?: string) {\n        super(`Trade is not initialized: ${msg}`)\n    }\n}\n\nexport class AggregatorTrade extends SymbiosisTrade {\n    protected trade: Trade | undefined\n    protected preferOneInchUsage: boolean\n\n    constructor(private params: AggregatorTradeParams) {\n        super(params)\n        this.preferOneInchUsage = params.preferOneInchUsage || false\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        this.assertTradeInitialized('tradeType')\n        return this.trade.tradeType\n    }\n\n    public async init() {\n        const { from, slippage, symbiosis, deadline, to, tokenAmountIn, tokenAmountInMin, tokenOut, oneInchProtocols } =\n            this.params\n\n        const trades: (Trade | undefined)[] = []\n        const errors: Error[] = []\n\n        function successTrade(trade: Trade) {\n            trades.push(trade)\n        }\n\n        function failTrade(e: Error) {\n            trades.push(undefined)\n            errors.push(e)\n        }\n\n        const clientId = utils.parseBytes32String(symbiosis.clientId)\n        const isOneInchClient = clientId === '1inch'\n        const isOpenOceanClient = clientId === 'openocean'\n        const isOtherClient = !isOneInchClient && !isOpenOceanClient\n\n        const isOneInchAvailable = OneInchTrade.isAvailable(tokenAmountIn.token.chainId) && !isOpenOceanClient\n        const isOpenOceanAvailable = OpenOceanTrade.isAvailable(tokenAmountIn.token.chainId) && !isOneInchClient\n\n        let isOneInchUsage = isOneInchAvailable\n        let isOpenOceanUsage = isOpenOceanAvailable\n\n        const isSignificantAmount =\n            (tokenAmountIn.token.symbol?.includes('USD') && parseFloat(tokenAmountIn.toSignificant()) >= 10000) ||\n            (tokenAmountIn.token.symbol?.includes('ETH') && parseFloat(tokenAmountIn.toSignificant()) >= 2.5)\n\n        if (this.preferOneInchUsage && isOneInchAvailable) {\n            isOpenOceanUsage = false\n        } else if (!isSignificantAmount) {\n            // select one of them randomly\n            const aggregators: SymbiosisTradeType[] = []\n            if (isOneInchAvailable) {\n                aggregators.push('1inch')\n            }\n            if (isOpenOceanAvailable) {\n                aggregators.push('open-ocean')\n            }\n            const i = Math.floor(Math.random() * aggregators.length)\n\n            isOneInchUsage = aggregators[i] === '1inch'\n            isOpenOceanUsage = aggregators[i] === 'open-ocean'\n        }\n\n        let tradesCount = 0\n        if (isOneInchUsage) {\n            const oneInchTrade = new OneInchTrade({\n                symbiosis,\n                tokenAmountIn,\n                tokenAmountInMin,\n                tokenOut,\n                from,\n                to,\n                slippage,\n                protocols: oneInchProtocols,\n            })\n\n            tradesCount += 1\n            oneInchTrade\n                .init()\n                .then(successTrade)\n                .catch((e: Error) => {\n                    symbiosis.trackAggregatorError({\n                        provider: '1inch',\n                        reason: e.message,\n                        chain_id: String(tokenOut.chain?.id),\n                    })\n                    failTrade(e)\n                })\n        }\n\n        if (isOpenOceanUsage) {\n            const openOceanTrade = new OpenOceanTrade({\n                symbiosis,\n                to,\n                tokenAmountIn,\n                tokenAmountInMin,\n                tokenOut,\n                slippage,\n            })\n\n            tradesCount += 1\n            openOceanTrade\n                .init()\n                .then(successTrade)\n                .catch((e: Error) => {\n                    symbiosis.trackAggregatorError({\n                        provider: 'OpenOcean',\n                        reason: e.message,\n                        chain_id: String(tokenOut.chain?.id),\n                    })\n                    failTrade(e)\n                })\n        }\n\n        if (isOtherClient && IzumiTrade.isSupported(tokenAmountIn.token.chainId)) {\n            const izumiTrade = new IzumiTrade({\n                symbiosis,\n                tokenAmountIn,\n                tokenAmountInMin,\n                tokenOut,\n                slippage,\n                deadline,\n                to,\n            })\n            tradesCount += 1\n            izumiTrade.init().then(successTrade).catch(failTrade)\n        }\n\n        if (isOtherClient && UniV3Trade.isSupported(tokenAmountIn.token.chainId)) {\n            const uniV3Trade = new UniV3Trade({\n                symbiosis,\n                tokenAmountIn,\n                tokenAmountInMin,\n                tokenOut,\n                slippage,\n                deadline,\n                to,\n            })\n            tradesCount += 1\n            uniV3Trade.init().then(successTrade).catch(failTrade)\n        }\n\n        if (isOtherClient && UniV2Trade.isSupported(symbiosis, tokenAmountIn.token.chainId)) {\n            const uniV2Trade = new UniV2Trade({\n                symbiosis,\n                tokenAmountIn,\n                tokenAmountInMin,\n                tokenOut,\n                to,\n                slippage,\n                deadline,\n            })\n\n            tradesCount += 1\n            uniV2Trade.init().then(successTrade).catch(failTrade)\n        }\n\n        this.trade = await new Promise((resolve, reject) => {\n            const startTime = Date.now()\n            const intervalId = setInterval(() => {\n                const diff = Date.now() - startTime\n                const timeout = diff >= 2000\n                const allTradesFinished = trades.length === tradesCount\n                const successTrades: Trade[] = trades.filter(Boolean) as Trade[]\n\n                if (allTradesFinished || timeout) {\n                    const theBestTrade = this.selectTheBestTrade(successTrades)\n                    if (theBestTrade) {\n                        resolve(theBestTrade)\n                    } else {\n                        reject(new AggregateError(errors, 'Aggregator trade failed'))\n                    }\n                    clearInterval(intervalId)\n                    return\n                } else if (diff >= 500) {\n                    const oneInch = successTrades.find((trade) => trade.constructor.name === OneInchTrade.name)\n                    const openOcean = successTrades.find((trade) => trade.constructor.name === OpenOceanTrade.name)\n\n                    if (oneInch || openOcean) {\n                        resolve(this.selectTheBestTrade(successTrades))\n                        clearInterval(intervalId)\n                    }\n                }\n            }, 50)\n        })\n\n        return this\n    }\n\n    private selectTheBestTrade(trades: Trade[]) {\n        let bestTrade: Trade | undefined = undefined\n        for (const trade of trades) {\n            if (!bestTrade) {\n                bestTrade = trade\n                continue\n            }\n\n            if (trade.amountOut.greaterThan(bestTrade.amountOut)) {\n                bestTrade = trade\n            }\n        }\n        return bestTrade\n    }\n\n    get amountOut(): TokenAmount {\n        this.assertTradeInitialized('amountOut')\n        return this.trade.amountOut\n    }\n\n    get amountOutMin(): TokenAmount {\n        this.assertTradeInitialized('amountOutMin')\n        return this.trade.amountOutMin\n    }\n\n    get routerAddress(): string {\n        this.assertTradeInitialized('routerAddress')\n        return this.trade.routerAddress\n    }\n\n    get route(): Token[] {\n        this.assertTradeInitialized('route')\n        return this.trade.route\n    }\n\n    get callData(): string {\n        this.assertTradeInitialized('callData')\n        return this.trade.callData\n    }\n\n    get callDataOffset(): number {\n        this.assertTradeInitialized('callDataOffset')\n        return this.trade.callDataOffset\n    }\n\n    get minReceivedOffset(): number {\n        this.assertTradeInitialized('minReceivedOffset')\n        return this.trade.minReceivedOffset\n    }\n\n    get priceImpact(): Percent {\n        this.assertTradeInitialized('priceImpact')\n        return this.trade.priceImpact\n    }\n\n    get functionSelector(): string | undefined {\n        this.assertTradeInitialized('functionSelector')\n        return this.trade.functionSelector\n    }\n\n    public applyAmountIn(newAmountIn: TokenAmount, newAmountInMin: TokenAmount) {\n        this.assertTradeInitialized('applyAmountIn')\n        this.trade.applyAmountIn(newAmountIn, newAmountInMin)\n    }\n\n    get fees(): FeeItem[] | undefined {\n        this.assertTradeInitialized('fees')\n        return this.trade.fees\n    }\n\n    private assertTradeInitialized(msg?: string): asserts this is {\n        trade: Trade\n    } {\n        if (!this.trade) {\n            throw new TradeNotInitializedError(msg)\n        }\n    }\n}\n","import { TokenAmount } from '../../entities'\nimport { OmniPool__factory } from '../contracts'\nimport { calculatePriceImpact, getMinAmount } from '../chainUtils'\nimport { Symbiosis } from '../symbiosis'\nimport { OmniPoolConfig } from '../types'\nimport { BigNumber } from 'ethers'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\n\ninterface OctoPoolTradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n    deadline: number\n    omniPoolConfig: OmniPoolConfig\n}\n\nexport class OctoPoolTrade extends SymbiosisTrade {\n    public readonly symbiosis: Symbiosis\n    public readonly deadline: number\n    public readonly poolConfig: OmniPoolConfig\n\n    public constructor(params: OctoPoolTradeParams) {\n        super(params)\n\n        const { symbiosis, omniPoolConfig, deadline } = params\n        this.symbiosis = symbiosis\n        this.deadline = deadline\n        this.poolConfig = omniPoolConfig\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return 'octopool'\n    }\n\n    public async init() {\n        const indexIn = this.symbiosis.getOmniPoolTokenIndex(this.poolConfig, this.tokenAmountIn.token)\n        const indexOut = this.symbiosis.getOmniPoolTokenIndex(this.poolConfig, this.tokenOut)\n\n        const amountIn = BigNumber.from(this.tokenAmountIn.raw.toString())\n        const amountInMin = BigNumber.from(this.tokenAmountInMin.raw.toString())\n\n        const quote = await this.quote(indexIn, indexOut, amountIn)\n\n        let quoteMin = quote\n        if (amountInMin.lt(amountIn)) {\n            quoteMin = quote.mul(amountInMin).div(amountIn) // proportionally\n        }\n\n        quoteMin = BigNumber.from(getMinAmount(this.slippage, quoteMin.toString()).toString())\n\n        const callData = OmniPool__factory.createInterface().encodeFunctionData('swap', [\n            indexIn,\n            indexOut,\n            amountIn.toString(),\n            quoteMin.toString(),\n            this.to,\n            this.deadline,\n        ])\n\n        const amountOut = new TokenAmount(this.tokenOut, quote.toString())\n        const amountOutMin = new TokenAmount(this.tokenOut, quoteMin.toString())\n        const priceImpact = calculatePriceImpact(this.tokenAmountIn, amountOut)\n\n        this.symbiosis.trackPriceImpactSwap({\n            name_from: `${this.tokenAmountIn.token.symbol}(${\n                (this.tokenAmountIn.token.chainFrom || this.tokenAmountIn.token.chain)?.name\n            })`,\n            name_to: `${this.tokenOut.symbol}(${(this.tokenOut.chainFrom || this.tokenOut.chain)?.name})`,\n            token_amount: Number(this.tokenAmountIn.toSignificant(4)),\n            price_impact: Math.abs(+priceImpact.toSignificant(2)),\n        })\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            routerAddress: this.poolConfig.address,\n            route: [this.tokenAmountIn.token, this.tokenOut],\n            callData,\n            callDataOffset: 100,\n            minReceivedOffset: 132,\n            priceImpact,\n        }\n\n        return this\n    }\n\n    public async quote(indexIn: number, indexOut: number, amountIn: BigNumber): Promise<BigNumber> {\n        const poolOracle = this.symbiosis.omniPoolOracle(this.poolConfig)\n        const { actualToAmount } = await poolOracle.quoteFrom(indexIn, indexOut, amountIn)\n        return actualToAmount\n    }\n}\n","import { ChainId } from '../../constants'\nimport { Unwrapper__factory, Weth__factory } from '../contracts'\nimport { getFunctionSelector } from '../chainUtils/tron'\nimport { SymbiosisTrade, SymbiosisTradeType } from './symbiosisTrade'\nimport { Percent, Token, TokenAmount, wrappedToken } from '../../entities'\nimport { BIPS_BASE } from '../constants'\nimport { WrapTradeError } from '../sdkError'\n\nconst UNWRAP_ADDRESSES: Partial<Record<ChainId, string>> = {\n    [ChainId.ETH_MAINNET]: '0x5ad095DE83693ba063941f2f2C5A0dF02383B651',\n    [ChainId.MANTA_MAINNET]: '0xf39D9A9ABb98593ceaC395D7A37c572Da48fCfD5',\n    [ChainId.LINEA_MAINNET]: '0xF5b0861e787706195c98E2F0d2D6EFBDAC1D1e08',\n    [ChainId.POLYGON_ZK]: '0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C',\n    [ChainId.BASE_MAINNET]: '0x8e1d36F9da8CFe842bCf8670A12ACd51c26d195D',\n    [ChainId.SCROLL_MAINNET]: '0x42Cd64f48496dDdfEfF8F3704df9175dbe20d325',\n    [ChainId.ARBITRUM_MAINNET]: '0x5Eb4ED9F745531221FAE41906e11d37642B15da6',\n    [ChainId.ARBITRUM_NOVA]: '0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C',\n    [ChainId.OPTIMISM_MAINNET]: '0x88139ad1199e8c78a0804d4bEBF4FbAD89EF9D89',\n    [ChainId.ZKSYNC_MAINNET]: '0x1Cd08E632DfC63998add8840c8B9c97A4cA6DAb4',\n    [ChainId.BOBA_MAINNET]: '0xA257F3FE4E4032291516DC355eDF90664e9eB932',\n    [ChainId.MODE_MAINNET]: '0xE75C7E85FE6ADd07077467064aD15847E6ba9877',\n    [ChainId.BLAST_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.RSK_MAINNET]: '0x5b1bab64961cf72822817ef32950ff7fcab28b62',\n    [ChainId.MERLIN_MAINNET]: '0x8a7F930003BedD63A1ebD99C5917FD6aE7E3dedf',\n    [ChainId.ZKLINK_MAINNET]: '0xd17Ee77a10376Dab561d947F5e5FC5cf6de67441',\n    [ChainId.SCROLL_SEPOLIA]: '0x97A5B271421b443b3F53F3DF485B2716Db85fA4b',\n    [ChainId.SEPOLIA_TESTNET]: '0x97A5B271421b443b3F53F3DF485B2716Db85fA4b',\n    [ChainId.TAIKO_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n    [ChainId.GRAVITY_MAINNET]: '0x1cEaeda3D17936916D0F3E866Aa5Ef861F544840',\n    [ChainId.BSQUARED_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n    [ChainId.MORPH_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n    [ChainId.GOAT_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n    [ChainId.ABSTRACT_MAINNET]: '0xaEab9b650cd1e14b60a147B6F55f313E8d6644D5',\n    [ChainId.UNICHAIN_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n    [ChainId.SONEIUM_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n    [ChainId.BSC_MAINNET]: '0xda5b1347D43C5b8BF4e334C0bB6f01D1F1070994',\n    [ChainId.OPBNB_MAINNET]: '0x45CFd6FB7999328F189aaD2739Fba4Be6C45E5bf',\n    [ChainId.SYMBIOSIS_MAINNET]: '0x1ebE940c8c0E7D628192Ba6253699e8ce4B876b3',\n    [ChainId.KATANA_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.APECHAIN_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n}\n\ninterface WrapTradeParams {\n    tokenAmountIn: TokenAmount\n    tokenAmountInMin: TokenAmount\n    tokenOut: Token\n    to: string\n}\n\nexport class WrapTrade extends SymbiosisTrade {\n    public static isSupported(tokenIn: Token, tokenOut: Token): boolean {\n        const wrappedInToken = wrappedToken(tokenIn)\n        if (tokenIn.isNative && wrappedInToken.equals(tokenOut)) {\n            // wrap\n            return true\n        }\n\n        const unwrapAddress = UNWRAP_ADDRESSES[tokenIn.chainId]\n        const wrappedOutToken = wrappedToken(tokenOut)\n\n        // unwrap\n        return !!unwrapAddress && tokenOut.isNative && wrappedOutToken.equals(tokenIn)\n    }\n\n    public constructor(params: WrapTradeParams) {\n        super({ ...params, slippage: 0 })\n    }\n\n    public get tradeType(): SymbiosisTradeType {\n        return 'wrap'\n    }\n\n    public async init() {\n        const route = [this.tokenAmountIn.token, this.tokenOut]\n        const priceImpact = new Percent('0', BIPS_BASE)\n\n        if (this.tokenAmountIn.token.isNative) {\n            const wethToken = wrappedToken(this.tokenAmountIn.token)\n\n            const amountOut = new TokenAmount(wethToken, this.tokenAmountIn.raw)\n            const amountOutMin = new TokenAmount(wethToken, this.tokenAmountInMin.raw)\n\n            const wethInterface = Weth__factory.createInterface()\n            const callData = wethInterface.encodeFunctionData('deposit')\n            const functionSelector = getFunctionSelector(wethInterface.getFunction('deposit'))\n            this.out = {\n                amountOut,\n                amountOutMin,\n                routerAddress: wethToken.address,\n                route,\n                callData,\n                functionSelector,\n                callDataOffset: 0,\n                minReceivedOffset: 0,\n                priceImpact,\n            }\n            return this\n        }\n\n        const unwrapperAddress = UNWRAP_ADDRESSES[this.tokenAmountIn.token.chainId]\n        if (!unwrapperAddress) {\n            throw new WrapTradeError('Cannot unwrap on this network')\n        }\n\n        const amountOut = new TokenAmount(this.tokenOut, this.tokenAmountIn.raw)\n        const amountOutMin = new TokenAmount(this.tokenOut, this.tokenAmountInMin.raw)\n\n        const unwrapperInterface = Unwrapper__factory.createInterface()\n        const callData = unwrapperInterface.encodeFunctionData('unwrap', [this.tokenAmountIn.raw.toString(), this.to])\n        const functionSelector = getFunctionSelector(unwrapperInterface.getFunction('unwrap'))\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            routerAddress: unwrapperAddress,\n            route,\n            callData,\n            functionSelector,\n            callDataOffset: 4 + 32,\n            minReceivedOffset: 0,\n            priceImpact,\n        }\n        return this\n    }\n}\n","import { PublicKey } from '@solana/web3.js'\nimport { API_URLS, ApiSwapV1Out, parseTokenAccountResp } from '@raydium-io/raydium-sdk-v2'\nimport { NATIVE_MINT, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token'\n\nimport { Percent, TokenAmount } from '../../entities'\nimport { Symbiosis } from '../symbiosis'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport { getSolanaConnection } from '../chainUtils'\nimport { RaydiumTradeError } from '../sdkError'\n\ninterface RaydiumTradeParams extends SymbiosisTradeParams {\n    from: string\n    symbiosis: Symbiosis\n}\n\ninterface PriorityFeeResponse {\n    id: string\n    success: boolean\n    data: {\n        default: {\n            vh: number // very high\n            h: number // high\n            m: number // medium\n        }\n    }\n}\n\ninterface SwapTransactionsResponse {\n    id: string\n    version: string\n    success: boolean\n    data: { transaction: string }[]\n}\n\ninterface BuildSwapInstructionsParams {\n    inputMint: string\n    outputMint: string\n    txVersion: string\n    quoteResponse: ApiSwapV1Out\n}\n\nexport class RaydiumTrade extends SymbiosisTrade {\n    public readonly symbiosis: Symbiosis\n    private solanaToPubkey: PublicKey\n\n    public constructor(params: RaydiumTradeParams) {\n        super(params)\n\n        const { symbiosis, to } = params\n\n        this.symbiosis = symbiosis\n        this.solanaToPubkey = new PublicKey(to)\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return 'raydium'\n    }\n\n    public async init() {\n        const txVersion = 'V0' // could be 'LEGACY' or 'V0'\n\n        const inputMint = this.tokenAmountIn.token.isNative\n            ? NATIVE_MINT.toBase58()\n            : this.tokenAmountIn.token.solAddress\n        const outputMint = this.tokenOut.isNative ? NATIVE_MINT.toBase58() : this.tokenOut.solAddress\n\n        if (!inputMint || !outputMint) {\n            throw new RaydiumTradeError('Solana address not found')\n        }\n\n        // get quote\n        const quoteResponse = (await fetch(\n            `${\n                API_URLS.SWAP_HOST\n            }/compute/swap-base-in?inputMint=${inputMint}&outputMint=${outputMint}&amount=${this.tokenAmountIn.raw.toString()}&slippageBps=${\n                this.slippage\n            }&txVersion=${txVersion}`\n        ).then((res) => res.json())) as ApiSwapV1Out\n\n        if (!quoteResponse.success) {\n            throw new RaydiumTradeError('Failed to get quote')\n        }\n\n        const instructionsResponse = await this.buildInstructions({\n            inputMint,\n            outputMint,\n            txVersion,\n            quoteResponse,\n        })\n\n        const amountOut = new TokenAmount(this.tokenOut, quoteResponse.data.outputAmount)\n        const amountOutMin = new TokenAmount(this.tokenOut, quoteResponse.data.otherAmountThreshold)\n        const priceImpact = new Percent(BigInt(quoteResponse.data.priceImpactPct * -100), BigInt(10000))\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            route: [this.tokenAmountIn.token, this.tokenOut],\n            priceImpact,\n            routerAddress: '',\n            callData: '',\n            callDataOffset: 0,\n            minReceivedOffset: 0,\n            instructions: instructionsResponse[0], // all instructions will be in the first array element\n        }\n\n        return this\n    }\n\n    async buildInstructions({ inputMint, outputMint, txVersion, quoteResponse }: BuildSwapInstructionsParams) {\n        const isInputSol = this.tokenAmountIn.token.isNative\n        const isOutputSol = this.tokenOut.isNative\n\n        const priorityFee = (await fetch(`${API_URLS.BASE_HOST}${API_URLS.PRIORITY_FEE}`).then((res) =>\n            res.json()\n        )) as PriorityFeeResponse\n\n        const { tokenAccounts: tokenAccountsFrom } = await this.fetchTokenAccountData(this.solanaToPubkey)\n\n        const inputTokenAcc = tokenAccountsFrom.find((a) => a.mint.toBase58() === inputMint)?.publicKey\n        const outputTokenAcc = tokenAccountsFrom.find((a) => a.mint.toBase58() === outputMint)?.publicKey\n\n        if (!inputTokenAcc && !isInputSol) {\n            throw new RaydiumTradeError(\n                `Do not have input token account for ${this.tokenAmountIn.token.symbol} ${inputMint}`\n            )\n        }\n\n        try {\n            const swapTransactions = (await fetch(`${API_URLS.SWAP_HOST}/transaction/swap-base-in`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    computeUnitPriceMicroLamports: String(priorityFee.data.default.h),\n                    swapResponse: quoteResponse,\n                    txVersion,\n                    wallet: this.solanaToPubkey,\n                    wrapSol: isInputSol,\n                    unwrapSol: isOutputSol,\n                    inputAccount: isInputSol ? undefined : inputTokenAcc,\n                    outputAccount: isOutputSol ? undefined : outputTokenAcc,\n                }),\n            }).then((res) => res.json())) as SwapTransactionsResponse\n\n            return swapTransactions.data.map((tx) => tx.transaction)\n        } catch (e) {\n            throw new RaydiumTradeError(`Failed to fetch swap transactions`, e)\n        }\n    }\n\n    async fetchTokenAccountData(publicKey: PublicKey) {\n        const connection = getSolanaConnection()\n        const [solAccountResp, tokenAccountResp, token2022Resp] = await Promise.all([\n            connection.getAccountInfo(publicKey),\n            connection.getTokenAccountsByOwner(publicKey, {\n                programId: TOKEN_PROGRAM_ID,\n            }),\n            connection.getTokenAccountsByOwner(publicKey, {\n                programId: TOKEN_2022_PROGRAM_ID,\n            }),\n        ])\n        const tokenAccountData = parseTokenAccountResp({\n            owner: publicKey,\n            solAccountResp,\n            tokenAccountResp: {\n                context: tokenAccountResp.context,\n                value: [...tokenAccountResp.value, ...token2022Resp.value],\n            },\n        })\n        return tokenAccountData\n    }\n}\n","import { dexFactory } from '@ston-fi/sdk'\nimport { RouterInfo, StonApiClient } from '@ston-fi/api'\nimport { OpenedContract, SenderArguments } from '@ton/core'\nimport { TonClient4 } from '@ton/ton'\nimport { BaseRouterV2_1 } from '@ston-fi/sdk/dist/contracts/dex/v2_1/router/BaseRouterV2_1'\n\nimport { Percent, Token, TokenAmount } from '../../entities'\nimport { TON_REFERRAL_ADDRESS, TON_STONFI_PROXY_ADDRESS } from '../chainUtils'\nimport { Symbiosis } from '../symbiosis'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport { StonFiTradeError } from '../sdkError'\n\ninterface StonfiTradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n    deadline: number\n    from: string\n}\n\nexport class StonfiTrade extends SymbiosisTrade {\n    public readonly symbiosis: Symbiosis\n    public readonly deadline: number\n    public readonly from: string\n\n    private readonly stonClient: StonApiClient\n    private tonClient: TonClient4 | null = null\n    private routerMetadata: RouterInfo | null = null\n    private dexContracts: ReturnType<typeof dexFactory> | null = null\n    private router: OpenedContract<BaseRouterV2_1> | null = null\n\n    public constructor(params: StonfiTradeParams) {\n        super(params)\n        this.symbiosis = params.symbiosis\n        this.deadline = params.deadline\n        this.from = params.from\n        this.stonClient = new StonApiClient()\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return 'stonfi'\n    }\n\n    public async init() {\n        this.tonClient = await this.symbiosis.getTonClient()\n        const quote = await this.stonClient.simulateSwap({\n            offerAddress: this.tokenAmountIn.token.isNative\n                ? TON_STONFI_PROXY_ADDRESS\n                : this.tokenAmountIn.token.tonAddress,\n            offerUnits: this.tokenAmountIn.raw.toString(),\n            askAddress: this.tokenOut.isNative ? TON_STONFI_PROXY_ADDRESS : this.tokenOut.tonAddress,\n            slippageTolerance: (this.slippage / 10000).toString(), // 0.01 is 1%\n        })\n        await this.initRouterAndContracts(quote.routerAddress)\n        const txParams = await this.buildCalldata(this.tokenAmountIn, this.tokenOut, quote.minAskUnits)\n\n        if (!txParams) {\n            throw new StonFiTradeError('Failed to build TON swap')\n        }\n\n        const amountOut = new TokenAmount(this.tokenOut, quote.askUnits)\n        const amountOutMin = new TokenAmount(this.tokenOut, quote.minAskUnits)\n\n        const priceImpact = new Percent(BigInt(Math.ceil(-quote.priceImpact * 10000)), '10000')\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            route: [this.tokenAmountIn.token, this.tokenOut],\n            priceImpact,\n            routerAddress: txParams.to.toString(),\n            callData: txParams.body?.toBoc().toString('base64') ?? '',\n            callDataOffset: 0,\n            minReceivedOffset: 0,\n            value: txParams.value,\n            fees: [\n                {\n                    provider: 'stonfi',\n                    description: 'Stonfi fee',\n                    value: new TokenAmount(this.tokenOut, quote.feeUnits),\n                },\n            ],\n        }\n\n        return this\n    }\n\n    private async initRouterAndContracts(routerAddress: string) {\n        const metadata = await this.stonClient.getRouter(routerAddress)\n        this.routerMetadata = metadata\n        this.dexContracts = dexFactory(metadata)\n\n        if (!this.dexContracts) {\n            throw new StonFiTradeError('Failed to get dex contracts')\n        }\n        const routerContract = this.dexContracts.Router.create(metadata.address)\n        this.router = this.tonClient!.open(routerContract) as OpenedContract<BaseRouterV2_1>\n    }\n\n    public async buildCalldata(\n        tokenAmountIn: TokenAmount,\n        tokenOut: Token,\n        minAskUnits: string\n    ): Promise<SenderArguments | null> {\n        if (!this.router || !this.dexContracts || !this.routerMetadata) {\n            throw new StonFiTradeError('Trade is not initialized')\n        }\n\n        const queryId = Math.floor(Math.random() * 100_000)\n        const referralParams = {\n            referralAddress: TON_REFERRAL_ADDRESS,\n            referralValue: 25, // 0.25%\n            queryId,\n        }\n\n        if (tokenAmountIn.token.isNative) {\n            // TON -> jetton\n            return this.router.getSwapTonToJettonTxParams({\n                userWalletAddress: this.from,\n                proxyTon: this.dexContracts.pTON.create(this.routerMetadata.ptonMasterAddress),\n                offerAmount: tokenAmountIn.raw.toString(),\n                askJettonAddress: tokenOut.tonAddress,\n                minAskAmount: minAskUnits,\n                ...referralParams,\n            })\n        } else if (tokenOut.isNative) {\n            // jetton -> TON\n            return this.router.getSwapJettonToTonTxParams({\n                userWalletAddress: this.from,\n                offerJettonAddress: tokenAmountIn.token.tonAddress,\n                offerAmount: tokenAmountIn.raw.toString(),\n                minAskAmount: minAskUnits,\n                proxyTon: this.dexContracts.pTON.create(this.routerMetadata.ptonMasterAddress),\n                ...referralParams,\n            })\n        } else {\n            // jetton -> jetton\n            return this.router.getSwapJettonToJettonTxParams({\n                userWalletAddress: this.from,\n                offerJettonAddress: tokenAmountIn.token.tonAddress,\n                offerAmount: tokenAmountIn.raw.toString(),\n                askJettonAddress: tokenOut.tonAddress,\n                minAskAmount: minAskUnits,\n                ...referralParams,\n            })\n        }\n    }\n}\n","import { Address, beginCell, Cell, OpenedContract, toNano } from '@ton/core'\nimport {\n    Asset,\n    Factory,\n    JettonRoot,\n    JettonWallet,\n    MAINNET_FACTORY_ADDR,\n    Pool,\n    PoolType,\n    ReadinessStatus,\n    VaultJetton,\n    VaultNative,\n} from '@dedust/sdk'\n\nimport { GAS_TOKEN, Percent, Token, TokenAmount } from '../../entities'\nimport { TON_REFERRAL_ADDRESS } from '../chainUtils'\nimport { Symbiosis } from '../symbiosis'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport { getTokenAmountUsd, getTokenPriceUsd } from '../coingecko'\nimport JSBI from 'jsbi'\nimport { BIPS_BASE } from '../constants'\nimport { ChainId } from '../../constants'\nimport { FeeItem } from '../types'\nimport { DedustTradeError } from '../sdkError'\n\ninterface DedustTradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n    tokenAmountInMin: TokenAmount\n    deadline: number\n    from: string\n}\n\ninterface JettonSwapParams {\n    queryId?: number | bigint\n    destination: Address\n    amountIn: bigint\n    responseAddress?: Address | null\n    poolAddress: Address\n    recipientAddress?: Address | null\n    minAmountOut: bigint\n}\n\ninterface MultiHopSwapParams {\n    queryId?: number | bigint\n    destination: Address\n    amountIn: bigint\n    responseAddress?: Address | null\n    poolAddressTonOut: Address\n    poolAddressTonIn: Address\n    minAmountTon: bigint\n    minAmountOut: bigint\n}\n\ninterface TonSwapParams {\n    queryId?: number | bigint\n    poolAddress: Address\n    value: bigint\n    minAmountOut: bigint\n}\n\ninterface CallDataResult {\n    expectedAmountOut: bigint\n    minAmountOut: bigint\n    to: Address\n    body: Cell\n    value: bigint\n    fees: FeeItem[]\n}\n\nexport class DedustTrade extends SymbiosisTrade {\n    public readonly symbiosis: Symbiosis\n    public readonly deadline: number\n    public readonly to: string\n    public readonly from: string\n\n    public constructor(params: DedustTradeParams) {\n        super(params)\n\n        const { symbiosis, deadline, to, from } = params\n\n        this.symbiosis = symbiosis\n        this.deadline = deadline\n        this.to = to\n        this.from = from\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return 'dedust'\n    }\n\n    public async init() {\n        const { expectedAmountOut, minAmountOut, to, body, value, fees } = await this.buildCalldata(\n            this.tokenAmountIn,\n            this.tokenOut\n        )\n\n        const amountOut = new TokenAmount(this.tokenOut, expectedAmountOut)\n        const amountOutMin = new TokenAmount(this.tokenOut, minAmountOut)\n\n        const priceImpact = await this.getPriceImpact(this.tokenAmountIn, amountOut)\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            route: [this.tokenAmountIn.token, this.tokenOut],\n            priceImpact,\n            routerAddress: to.toString() ?? '',\n            callData: body?.toBoc().toString('base64') ?? '',\n            callDataOffset: 0,\n            minReceivedOffset: 0,\n            value,\n            fees,\n        }\n\n        return this\n    }\n\n    private async getTokenPrice(token: Token) {\n        return this.symbiosis.cache.get(\n            ['getTokenPriceUsd', token.chainId.toString(), token.address],\n            () => {\n                return getTokenPriceUsd(token)\n            },\n            600 // 10 minutes\n        )\n    }\n\n    private async getPriceImpact(tokenAmountIn: TokenAmount, tokenAmountOut: TokenAmount): Promise<Percent> {\n        try {\n            const [tokenInPrice, tokenOutPrice] = await Promise.all([\n                this.getTokenPrice(tokenAmountIn.token),\n                this.getTokenPrice(tokenAmountOut.token),\n            ])\n            const tokenAmountInUsd = getTokenAmountUsd(tokenAmountIn, tokenInPrice)\n            const tokenAmountOutUsd = getTokenAmountUsd(tokenAmountOut, tokenOutPrice)\n\n            const impactNumber = -(1 - tokenAmountOutUsd / tokenAmountInUsd)\n\n            return new Percent(parseInt(`${impactNumber * JSBI.toNumber(BIPS_BASE)}`).toString(), BIPS_BASE)\n        } catch {\n            return new Percent('0', BIPS_BASE)\n        }\n    }\n\n    private async findPool(tokenAmountIn: TokenAmount, tokenOut: Token) {\n        const client = await this.symbiosis.getTonClient()\n        const factory = client.open(Factory.createFromAddress(MAINNET_FACTORY_ADDR))\n\n        let pool: OpenedContract<Pool>\n        let secondPool: OpenedContract<Pool> | null = null // only for multihop\n\n        // TON -> jetton\n        if (tokenAmountIn.token.isNative) {\n            const tonVault = client.open(await factory.getNativeVault())\n            const tokenB = Asset.jetton(Address.parse(tokenOut.tonAddress))\n\n            pool = client.open(await factory.getPool(PoolType.VOLATILE, [Asset.native(), tokenB]))\n\n            if ((await tonVault.getReadinessStatus()) !== ReadinessStatus.READY) {\n                throw new DedustTradeError('Vault (TON) Dedust does not exist.')\n            }\n        } else if (tokenOut.isNative) {\n            const tokenA = Asset.jetton(Address.parse(tokenAmountIn.token.tonAddress))\n\n            // jetton -> TON\n            pool = client.open(await factory.getPool(PoolType.VOLATILE, [tokenA, Asset.native()]))\n        } else {\n            const tokenA = Asset.jetton(Address.parse(tokenAmountIn.token.tonAddress))\n            const tokenB = Asset.jetton(Address.parse(tokenOut.tonAddress))\n\n            // jetton -> jetton\n            pool = client.open(await factory.getPool(PoolType.VOLATILE, [tokenA, tokenB]))\n\n            if ((await pool.getReadinessStatus()) !== ReadinessStatus.READY) {\n                // No direct pool. Try jetton -> TON -> jetton\n                const [poolTonOut, poolTonIn] = await Promise.all([\n                    client.open(\n                        await factory.getPool(PoolType.VOLATILE, [\n                            Asset.jetton(Address.parse(tokenAmountIn.token.tonAddress)),\n                            Asset.native(),\n                        ])\n                    ),\n                    client.open(\n                        await factory.getPool(PoolType.VOLATILE, [\n                            Asset.native(),\n                            Asset.jetton(Address.parse(tokenOut.tonAddress)),\n                        ])\n                    ),\n                ])\n\n                if (\n                    (await poolTonIn.getReadinessStatus()) === ReadinessStatus.READY &&\n                    (await poolTonOut.getReadinessStatus()) === ReadinessStatus.READY\n                ) {\n                    pool = poolTonOut\n                    secondPool = poolTonIn\n                } else {\n                    throw new DedustTradeError('Cannot find pool for this trade')\n                }\n            }\n        }\n\n        return { pool, secondPool }\n    }\n\n    public async buildCalldata(tokenAmountIn: TokenAmount, tokenOut: Token): Promise<CallDataResult> {\n        const client = await this.symbiosis.getTonClient()\n        const factory = client.open(Factory.createFromAddress(MAINNET_FACTORY_ADDR))\n        const tonVault = client.open(await factory.getNativeVault())\n        const isTonIn = tokenAmountIn.token.isNative\n\n        const tokenIn = isTonIn ? Asset.native() : Asset.jetton(Address.parse(tokenAmountIn.token.tonAddress))\n\n        const { pool, secondPool } = await this.findPool(tokenAmountIn, tokenOut)\n\n        let expectedAmountOut: bigint\n        let minAmountOut: bigint\n        let minAmountTon: bigint = BigInt(0)\n        const fees: FeeItem[] = []\n\n        // multihop swap jetton -> ton -> jetton\n        if (secondPool) {\n            const {\n                amountOut: tonAmountOut,\n                assetOut: tonOut,\n                tradeFee: firstPoolTradeFee,\n            } = await pool.getEstimatedSwapOut({\n                assetIn: tokenIn,\n                amountIn: BigInt(tokenAmountIn.raw.toString()),\n            })\n\n            minAmountTon = (tonAmountOut * BigInt(10000 - this.slippage / 2)) / BigInt(10000)\n\n            const { amountOut: estimatedAmountOut, tradeFee: secondPoolTradeFee } =\n                await secondPool.getEstimatedSwapOut({\n                    assetIn: tonOut,\n                    amountIn: tonAmountOut,\n                })\n\n            fees.push({\n                provider: 'dedust',\n                value: new TokenAmount(GAS_TOKEN[ChainId.TON_MAINNET], firstPoolTradeFee),\n                description: 'Dedust fee',\n            })\n            fees.push({\n                provider: 'dedust',\n                value: new TokenAmount(tokenOut, secondPoolTradeFee),\n                description: 'Dedust fee',\n            })\n            minAmountOut = (estimatedAmountOut * BigInt(10000 - this.slippage / 2)) / BigInt(10000)\n            expectedAmountOut = estimatedAmountOut\n        } else {\n            // single hop swap\n            const { amountOut: estimatedAmountOut, tradeFee } = await pool.getEstimatedSwapOut({\n                assetIn: tokenIn,\n                amountIn: BigInt(tokenAmountIn.raw.toString()),\n            })\n\n            fees.push({\n                provider: 'dedust',\n                value: new TokenAmount(tokenOut, tradeFee),\n                description: 'Dedust fee',\n            })\n            minAmountOut = (estimatedAmountOut * BigInt(10000 - this.slippage)) / BigInt(10000)\n            expectedAmountOut = estimatedAmountOut\n        }\n\n        let txParams: { body: Cell; value: bigint } | null = null\n        let tokenInWalletAddress: Address | null = null\n\n        // TON -> jetton\n        if (isTonIn) {\n            // Check if vault exits:\n            if ((await tonVault.getReadinessStatus()) !== ReadinessStatus.READY) {\n                throw new DedustTradeError('Vault (TON) does not exist.')\n            }\n\n            txParams = this.buildTonSwapCalldata({\n                queryId: 0,\n                poolAddress: pool.address,\n                value: BigInt(tokenAmountIn.raw.toString()),\n                minAmountOut,\n            })\n        } else if (tokenOut.isNative && tokenIn.address) {\n            const tokenInVault = client.open(await factory.getJettonVault(tokenIn.address))\n            const tokenInRoot = client.open(JettonRoot.createFromAddress(tokenIn.address))\n            tokenInWalletAddress = client.open(await tokenInRoot.getWallet(Address.parse(this.from))).address\n\n            txParams = this.buildJettonSwapCalldata({\n                queryId: 0,\n                poolAddress: pool.address,\n                destination: tokenInVault.address,\n                amountIn: BigInt(tokenAmountIn.raw.toString()),\n                responseAddress: Address.parse(this.from),\n                minAmountOut,\n            })\n        } else if (tokenIn.address) {\n            const tokenInVault = client.open(await factory.getJettonVault(tokenIn.address))\n            const tokenInRoot = client.open(JettonRoot.createFromAddress(tokenIn.address))\n            tokenInWalletAddress = client.open(await tokenInRoot.getWallet(Address.parse(this.from))).address\n\n            // jetton -> jetton\n\n            if (secondPool) {\n                txParams = this.buildMultiHopSwapCalldata({\n                    queryId: 0,\n                    amountIn: BigInt(tokenAmountIn.raw.toString()),\n                    destination: tokenInVault.address,\n                    poolAddressTonOut: pool.address,\n                    poolAddressTonIn: secondPool.address,\n                    responseAddress: Address.parse(this.from),\n                    minAmountTon,\n                    minAmountOut,\n                })\n            } else {\n                txParams = this.buildJettonSwapCalldata({\n                    queryId: 0,\n                    poolAddress: pool.address,\n                    destination: tokenInVault.address,\n                    amountIn: BigInt(tokenAmountIn.raw.toString()),\n                    responseAddress: Address.parse(this.from),\n                    minAmountOut,\n                })\n            }\n        } else {\n            throw new DedustTradeError('Failed to build calldata')\n        }\n\n        if (!txParams) {\n            throw new DedustTradeError(\"Doesn't support this trade\")\n        }\n\n        return {\n            expectedAmountOut,\n            minAmountOut,\n            to: tokenInWalletAddress ? tokenInWalletAddress : tonVault.address,\n            body: txParams?.body,\n            value: txParams?.value,\n            fees,\n        }\n    }\n\n    buildTonSwapCalldata({ queryId, poolAddress, value, minAmountOut }: TonSwapParams) {\n        return {\n            body: beginCell()\n                .storeUint(VaultNative.SWAP, 32)\n                .storeUint(queryId ?? 0, 64)\n                .storeCoins(value)\n                .storeAddress(poolAddress)\n                .storeUint(0, 1)\n                .storeCoins(minAmountOut) // limit\n                .storeMaybeRef(null) // next\n                .storeRef(\n                    beginCell()\n                        .storeUint(0, 32) // deadline\n                        .storeAddress(Address.parse(this.to)) // recipientAddress\n                        .storeAddress(TON_REFERRAL_ADDRESS) // referralAddress\n                        .storeMaybeRef(null) // fulfillPayload\n                        .storeMaybeRef(null) // rejectPayload\n                        .endCell()\n                )\n                .endCell(),\n            value: value + toNano('0.25'),\n        }\n    }\n\n    buildJettonSwapCalldata({\n        queryId,\n        amountIn,\n        destination,\n        responseAddress,\n        poolAddress,\n        minAmountOut,\n    }: JettonSwapParams) {\n        return {\n            value: toNano('0.3'),\n            body: beginCell()\n                .storeUint(JettonWallet.TRANSFER, 32)\n                .storeUint(queryId ?? 0, 64)\n                .storeCoins(amountIn)\n                .storeAddress(destination)\n                .storeAddress(responseAddress)\n                .storeMaybeRef(null)\n                .storeCoins(toNano('0.25')) // forwardAmount\n                .storeMaybeRef(\n                    VaultJetton.createSwapPayload({\n                        poolAddress,\n                        limit: minAmountOut,\n                        swapParams: {\n                            recipientAddress: Address.parse(this.to),\n                            referralAddress: TON_REFERRAL_ADDRESS,\n                        },\n                    })\n                )\n                .endCell(),\n        }\n    }\n\n    buildMultiHopSwapCalldata({\n        queryId,\n        amountIn,\n        destination,\n        responseAddress,\n        poolAddressTonOut,\n        poolAddressTonIn,\n        minAmountTon,\n        minAmountOut,\n    }: MultiHopSwapParams) {\n        return {\n            value: toNano('0.3'),\n            body: beginCell()\n                .storeUint(JettonWallet.TRANSFER, 32)\n                .storeUint(queryId ?? 0, 64)\n                .storeCoins(amountIn)\n                .storeAddress(destination)\n                .storeAddress(responseAddress)\n                .storeMaybeRef(null)\n                .storeCoins(toNano('0.25')) // forwardAmount\n                .storeMaybeRef(\n                    VaultJetton.createSwapPayload({\n                        poolAddress: poolAddressTonOut,\n                        limit: minAmountTon,\n                        swapParams: {\n                            recipientAddress: Address.parse(this.to),\n                            referralAddress: TON_REFERRAL_ADDRESS,\n                        },\n                        next: {\n                            poolAddress: poolAddressTonIn,\n                            limit: minAmountOut,\n                        },\n                    })\n                )\n                .endCell(),\n        }\n    }\n}\n","import { ChainId } from '../../constants'\n\nexport const COINGECKO_PLATFORMS: { [chainId in ChainId]?: string } = {\n    [ChainId.BASE_MAINNET]: 'base',\n    [ChainId.ETH_MAINNET]: 'ethereum',\n    [ChainId.BSC_MAINNET]: 'binance-smart-chain',\n    [ChainId.AVAX_MAINNET]: 'avalanche',\n    [ChainId.MATIC_MAINNET]: 'polygon-pos',\n    [ChainId.TELOS_MAINNET]: 'telos',\n    [ChainId.BOBA_MAINNET]: 'boba',\n    [ChainId.KAVA_MAINNET]: 'kava',\n    [ChainId.ZKSYNC_MAINNET]: 'zksync',\n    [ChainId.ARBITRUM_MAINNET]: 'arbitrum-one',\n    [ChainId.OPTIMISM_MAINNET]: 'optimistic-ethereum',\n    [ChainId.ARBITRUM_NOVA]: 'arbitrum-nova',\n    [ChainId.POLYGON_ZK]: 'polygon-zkevm',\n    [ChainId.LINEA_MAINNET]: 'linea',\n    [ChainId.MANTLE_MAINNET]: 'mantle',\n    [ChainId.SCROLL_MAINNET]: 'scroll',\n    [ChainId.MANTA_MAINNET]: 'manta-pacific',\n    [ChainId.METIS_MAINNET]: 'metis-andromeda',\n    [ChainId.MODE_MAINNET]: 'mode',\n    [ChainId.RSK_MAINNET]: 'rootstock',\n    [ChainId.BLAST_MAINNET]: 'blast',\n    [ChainId.MERLIN_MAINNET]: 'merlin-chain',\n    [ChainId.ZKLINK_MAINNET]: 'zklink-nova',\n    [ChainId.TON_MAINNET]: 'the-open-network',\n    [ChainId.BTC_MAINNET]: 'bitcoin',\n    [ChainId.TRON_MAINNET]: 'tron',\n    [ChainId.TAIKO_MAINNET]: 'taiko',\n    [ChainId.ZETACHAIN_MAINNET]: 'zetachain',\n    [ChainId.CRONOS_MAINNET]: 'cronos',\n    [ChainId.FRAXTAL_MAINNET]: 'fraxtal',\n    [ChainId.GRAVITY_MAINNET]: 'gravity-alpha',\n    [ChainId.BSQUARED_MAINNET]: 'bsquared-network',\n    [ChainId.CRONOS_ZK_MAINNET]: 'cronos-zkevm',\n    [ChainId.MORPH_MAINNET]: 'morph-l2',\n    [ChainId.SOLANA_MAINNET]: 'solana',\n    [ChainId.GNOSIS_MAINNET]: 'xdai',\n    [ChainId.SONIC_MAINNET]: 'sonic',\n    [ChainId.CORE_MAINNET]: 'core',\n    [ChainId.ABSTRACT_MAINNET]: 'abstract',\n    [ChainId.BAHAMUT_MAINNET]: 'bahamut',\n    [ChainId.BERACHAIN_MAINNET]: 'berachain',\n    [ChainId.UNICHAIN_MAINNET]: 'unichain',\n    [ChainId.SONEIUM_MAINNET]: 'soneium',\n    [ChainId.OPBNB_MAINNET]: 'opbnb',\n    [ChainId.HYPERLIQUID_MAINNET]: 'hyperevm',\n    [ChainId.KATANA_MAINNET]: 'katana',\n    [ChainId.APECHAIN_MAINNET]: 'apechain',\n    [ChainId.PLASMA_MAINNET]: 'plasma',\n}\n\nexport const COINGECKO_GAS_TOKEN_IDS: { [chainId in ChainId]?: string } = {\n    [ChainId.BASE_MAINNET]: 'ethereum',\n    [ChainId.ETH_MAINNET]: 'ethereum',\n    [ChainId.BSC_MAINNET]: 'binancecoin',\n    [ChainId.AVAX_MAINNET]: 'avalanche-2',\n    [ChainId.MATIC_MAINNET]: 'matic-network',\n    [ChainId.TELOS_MAINNET]: 'telos',\n    [ChainId.BOBA_MAINNET]: 'ethereum',\n    [ChainId.KAVA_MAINNET]: 'kava',\n    [ChainId.ZKSYNC_MAINNET]: 'ethereum',\n    [ChainId.ARBITRUM_MAINNET]: 'ethereum',\n    [ChainId.OPTIMISM_MAINNET]: 'ethereum',\n    [ChainId.ARBITRUM_NOVA]: 'ethereum',\n    [ChainId.POLYGON_ZK]: 'ethereum',\n    [ChainId.LINEA_MAINNET]: 'ethereum',\n    [ChainId.MANTLE_MAINNET]: 'mantle',\n    [ChainId.SCROLL_MAINNET]: 'ethereum',\n    [ChainId.MANTA_MAINNET]: 'ethereum',\n    [ChainId.METIS_MAINNET]: 'metis-token',\n    [ChainId.MODE_MAINNET]: 'ethereum',\n    [ChainId.RSK_MAINNET]: 'rootstock',\n    [ChainId.BLAST_MAINNET]: 'ethereum',\n    [ChainId.MERLIN_MAINNET]: 'bitcoin',\n    [ChainId.ZKLINK_MAINNET]: 'ethereum',\n    [ChainId.TON_MAINNET]: 'the-open-network',\n    [ChainId.BTC_MAINNET]: 'bitcoin',\n    [ChainId.TRON_MAINNET]: 'tron',\n    [ChainId.TAIKO_MAINNET]: 'ethereum',\n    [ChainId.SEI_EVM_MAINNET]: 'sei-network',\n    [ChainId.ZETACHAIN_MAINNET]: 'zetachain',\n    [ChainId.CRONOS_MAINNET]: 'crypto-com-chain',\n    [ChainId.FRAXTAL_MAINNET]: 'frax-share',\n    [ChainId.GRAVITY_MAINNET]: 'g-token',\n    [ChainId.BSQUARED_MAINNET]: 'bitcoin',\n    [ChainId.CRONOS_ZK_MAINNET]: 'cronos-zkevm-cro',\n    [ChainId.MORPH_MAINNET]: 'weth',\n    [ChainId.SOLANA_MAINNET]: 'solana',\n    [ChainId.GNOSIS_MAINNET]: 'xdai',\n    [ChainId.SONIC_MAINNET]: 'sonic-3',\n    [ChainId.CORE_MAINNET]: 'coredaoorg',\n    [ChainId.ABSTRACT_MAINNET]: 'ethereum',\n    [ChainId.BAHAMUT_MAINNET]: 'fasttoken',\n    [ChainId.BERACHAIN_MAINNET]: 'berachain-bera',\n    [ChainId.UNICHAIN_MAINNET]: 'ethereum',\n    [ChainId.SONEIUM_MAINNET]: 'ethereum',\n    [ChainId.OPBNB_MAINNET]: 'binancecoin',\n    [ChainId.HYPERLIQUID_MAINNET]: 'hyperliquid',\n    [ChainId.KATANA_MAINNET]: 'ethereum',\n    [ChainId.APECHAIN_MAINNET]: 'apecoin',\n    [ChainId.PLASMA_MAINNET]: 'plasma',\n}\n","import TronWeb from 'tronweb'\nimport { COINGECKO_GAS_TOKEN_IDS, COINGECKO_PLATFORMS } from './constants'\nimport { GAS_TOKEN, Token, TokenAmount, WETH } from '../../entities'\nimport { isSolanaChainId, isTonChainId, isTronToken } from '../chainUtils'\nimport { AdvisorError } from '../sdkError'\n\nconst getTokenPriceFromAdvisor = async (token: Token): Promise<number> => {\n    const isWrappedToken = WETH[token.chainId].equals(token)\n    const isGasToken = GAS_TOKEN[token.chainId].equals(token)\n\n    const address = isWrappedToken || isGasToken ? '' : token.address\n    const raw = JSON.stringify([\n        {\n            address,\n            chain_id: token.chainId,\n        },\n    ])\n    const myHeaders = new Headers()\n    myHeaders.append('Content-Type', 'application/json')\n    const response = await fetch(`https://api.symbiosis.finance/calculations/v1/token/price`, {\n        method: 'POST',\n        body: raw,\n        headers: myHeaders,\n    })\n\n    if (!response.ok) {\n        const text = await response.text()\n        const json = JSON.parse(text)\n        throw new AdvisorError(`Failed to get token price: ${json.message ?? text}`)\n    }\n\n    const json = await response.json()\n\n    const price = json[0]['price']\n    if (!price) {\n        throw new AdvisorError(`Unknown price for token ${token.chainId}.${token.address}`)\n    }\n    return price\n}\n\nconst getGasTokenPrice = async (token: Token): Promise<number> => {\n    const { chainId } = token\n    const tokenId = COINGECKO_GAS_TOKEN_IDS[chainId]\n    if (!tokenId) {\n        console.error('CoinGecko: cannot find tokenId')\n        return 0\n    }\n    const vs = 'usd'\n    const API_URL = 'https://api.coingecko.com'\n    const url = new URL(`/api/v3/simple/price`, API_URL)\n    url.searchParams.set('ids', tokenId)\n    url.searchParams.set('vs_currencies', vs)\n\n    const response = await fetch(url.toString())\n\n    if (!response.ok) {\n        console.error('CoinGecko: failed to get gas token price')\n        return 0\n    }\n\n    const json = await response.json()\n\n    if (!json[tokenId]) {\n        console.error('CoinGecko: cannot find address')\n        return 0\n    }\n\n    return parseFloat(json[tokenId][vs])\n}\n\nconst getTokenPrice = async (token: Token, map?: Map<string, string>): Promise<number> => {\n    const newAddress = map?.get(token.address)\n    if (newAddress) {\n        token = new Token({\n            address: newAddress,\n            chainId: token.chainId,\n            decimals: token.decimals,\n        })\n    }\n    const platform = COINGECKO_PLATFORMS[token.chainId]\n    if (!platform) {\n        console.error('CoinGecko: cannot find asset platform')\n        return 0\n    }\n\n    let address = token.address.toLowerCase()\n    if (isTronToken(token)) {\n        address = TronWeb.address.fromHex(address)\n    } else if (isTonChainId(token.chainId)) {\n        address = token.tonAddress\n    } else if (isSolanaChainId(token.chainId)) {\n        address = token.solAddress\n    }\n\n    const vs = 'usd'\n    const API_URL = 'https://api.coingecko.com'\n    const url = new URL(`/api/v3/simple/token_price/${platform}`, API_URL)\n    url.searchParams.set('contract_addresses', address)\n    url.searchParams.set('vs_currencies', vs)\n\n    const response = await fetch(url.toString())\n\n    if (!response.ok) {\n        console.error('CoinGecko: failed to get token price')\n        return 0\n    }\n\n    const json = await response.json()\n\n    if (!json[address]) {\n        console.error('CoinGecko: cannot find address')\n        return 0\n    }\n\n    return parseFloat(json[address][vs])\n}\n\nexport const getTokenPriceUsd = async (token: Token, map?: Map<string, string>) => {\n    try {\n        return await getTokenPriceFromAdvisor(token)\n    } catch (e) {\n        const isWrappedToken = WETH[token.chainId].equals(token)\n        const isGasToken = GAS_TOKEN[token.chainId].equals(token)\n\n        if (isGasToken || isWrappedToken) {\n            return getGasTokenPrice(token)\n        }\n\n        return getTokenPrice(token, map)\n    }\n}\n\nexport const getTokenAmountUsd = (tokenAmount: TokenAmount, price: number): number => {\n    return parseFloat((parseFloat(tokenAmount.toSignificant()) * price).toFixed(2))\n}\n","import { PublicKey } from '@solana/web3.js'\nimport { NATIVE_MINT } from '@solana/spl-token'\n\nimport { Percent, TokenAmount } from '../../entities'\nimport { Symbiosis } from '../symbiosis'\nimport { SymbiosisTrade, SymbiosisTradeParams, SymbiosisTradeType } from './symbiosisTrade'\nimport { JupiterTradeError } from '../sdkError'\n\ninterface JupiterTradeParams extends SymbiosisTradeParams {\n    symbiosis: Symbiosis\n}\n\ninterface JupiterQuoteResponse {\n    inputMint: string\n    inAmount: string\n    outputMint: string\n    outAmount: string\n    otherAmountThreshold: string\n    swapMode: 'ExactIn'\n    slippageBps: number\n    platformFee: null | unknown\n    priceImpactPct: string\n    routePlan: {\n        swapInfo: {\n            ammKey: string\n            label: string\n            inputMint: string\n            outputMint: string\n            inAmount: string\n            outAmount: string\n            feeAmount: string\n            feeMint: string\n        }\n        percent: number\n    }[]\n    contextSlot: number\n    timeTaken: number\n}\n\ninterface JupiterSwapResponse {\n    swapTransaction: string\n    lastValidBlockHeight: number\n    prioritizationFeeLamports: number\n    computeUnitLimit: number\n    prioritizationType: {\n        computeBudget: {\n            microLamports: number\n            estimatedMicroLamports: number\n        }\n    }\n    dynamicSlippageReport: {\n        slippageBps: number\n        otherAmount: number\n        simulatedIncurredSlippageBps: number\n        amplificationRatio: string\n        categoryName: string\n        heuristicMaxSlippageBps: number\n    }\n    simulationError: null | string\n}\n\nconst JUPITER_API_URL = 'https://lite-api.jup.ag/swap/v1'\n\nexport class JupiterTrade extends SymbiosisTrade {\n    public readonly symbiosis: Symbiosis\n    private solanaToPubKey: PublicKey\n\n    public constructor(params: JupiterTradeParams) {\n        super(params)\n\n        const { symbiosis, to } = params\n\n        this.symbiosis = symbiosis\n        this.solanaToPubKey = new PublicKey(to)\n    }\n\n    get tradeType(): SymbiosisTradeType {\n        return 'jupiter'\n    }\n\n    public async init() {\n        const inputMint = this.tokenAmountIn.token.isNative\n            ? NATIVE_MINT.toBase58()\n            : this.tokenAmountIn.token.solAddress\n        const outputMint = this.tokenOut.isNative ? NATIVE_MINT.toBase58() : this.tokenOut.solAddress\n\n        // get quote\n        const quoteResponse = (await fetch(\n            `${JUPITER_API_URL}/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${this.tokenAmountIn.raw.toString()}&slippageBps=${\n                this.slippage\n            }&restrictIntermediateTokens=true`\n        ).then((res) => res.json())) as JupiterQuoteResponse\n\n        if (!quoteResponse?.outAmount) {\n            throw new JupiterTradeError('Failed to get quote')\n        }\n\n        const instructionsResponse = await this.buildInstructions(quoteResponse)\n\n        const amountOut = new TokenAmount(this.tokenOut, quoteResponse.outAmount)\n        const amountOutMin = new TokenAmount(this.tokenOut, quoteResponse.otherAmountThreshold)\n\n        const priceImpact = new Percent(\n            BigInt(+Number(quoteResponse.priceImpactPct).toFixed(4) * -10000),\n            BigInt(10000)\n        )\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            route: [this.tokenAmountIn.token, this.tokenOut],\n            priceImpact,\n            routerAddress: '',\n            callData: '',\n            callDataOffset: 0,\n            minReceivedOffset: 0,\n            instructions: instructionsResponse.swapTransaction,\n        }\n\n        return this\n    }\n\n    async buildInstructions(quoteResponse: JupiterQuoteResponse) {\n        const swapResponse = (await (\n            await fetch(`${JUPITER_API_URL}/swap`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    quoteResponse,\n                    userPublicKey: this.solanaToPubKey.toBase58(),\n\n                    prioritizationFeeLamports: {\n                        priorityLevelWithMaxLamports: {\n                            maxLamports: 10_000_000, // 0.01 SOL\n                            priorityLevel: 'high',\n                        },\n                    },\n                }),\n            })\n        ).json()) as JupiterSwapResponse\n\n        return swapResponse\n    }\n}\n","export const TRON_PORTAL_ABI = [\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_bridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_wrapper',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_whitelistedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IMetaRouter',\n                name: '_metaRouter',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'crossChainID',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'bridgingFee',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'BurnCompleted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'requestId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'clientId',\n                type: 'bytes32',\n            },\n        ],\n        name: 'ClientIdLog',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'MetaRevertRequest',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferStarted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'previousOwner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'OwnershipTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Paused',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n        ],\n        name: 'RevertBurnRequest',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'bridgingFee',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'RevertSynthesizeCompleted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        name: 'SetBalanceOf',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'metaRouter',\n                type: 'address',\n            },\n        ],\n        name: 'SetMetaRouter',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'timelock',\n                type: 'address',\n            },\n        ],\n        name: 'SetTimelock',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'threshold',\n                type: 'uint256',\n            },\n        ],\n        name: 'SetTokenThreshold',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'activate',\n                type: 'bool',\n            },\n        ],\n        name: 'SetWhitelistToken',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'id',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'chainID',\n                type: 'uint256',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'revertableAddress',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'SynthesizeRequest',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'portal',\n                type: 'address',\n            },\n        ],\n        name: 'TokenTransferred',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'Unpaused',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'acceptOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'bridge',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getChainID',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'internalID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'managerChainBridge',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'sourceChainBridge',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'managerChainId',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'sourceChainId',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'router',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'swapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'sourceChainSynthesis',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'burnToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'burnCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'clientID',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaRevertTransaction',\n                name: '_metaRevertTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaRevertRequest',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'metaRouter',\n        outputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'rtoken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'chain2address',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'oppositeBridge',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'syntCaller',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'chainID',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'swapTokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'secondDexRouter',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'secondSwapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'finalReceiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'finalCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'finalOffset',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'revertableAddress',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'clientID',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaSynthesizeTransaction',\n                name: '_metaSynthesizeTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaSynthesize',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_crossChainID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_rToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_finalReceiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_finalCalldata',\n                type: 'bytes',\n            },\n            {\n                internalType: 'uint256',\n                name: '_finalOffset',\n                type: 'uint256',\n            },\n        ],\n        name: 'metaUnsynthesize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'owner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'paused',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pendingOwner',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'renounceOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'requestCount',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'requests',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'chain2address',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'rtoken',\n                type: 'address',\n            },\n            {\n                internalType: 'enum Portal.RequestState',\n                name: 'state',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_internalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainId',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'revertBurnRequest',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'revertSynthesize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address[]',\n                name: '_tokens',\n                type: 'address[]',\n            },\n        ],\n        name: 'setBalanceOf',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IMetaRouter',\n                name: '_metaRouter',\n                type: 'address',\n            },\n        ],\n        name: 'setMetaRouter',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_timelock',\n                type: 'address',\n            },\n        ],\n        name: 'setTimelock',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_threshold',\n                type: 'uint256',\n            },\n        ],\n        name: 'setTokenThreshold',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: '_activate',\n                type: 'bool',\n            },\n        ],\n        name: 'setWhitelistToken',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_chain2address',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_revertableAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'synthesize',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_chain2address',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_oppositeBridge',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_revertableAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_chainID',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_clientID',\n                type: 'bytes32',\n            },\n        ],\n        name: 'synthesizeNative',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'approvalData',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'chain2address',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'receiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'oppositeBridge',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'revertableAddress',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'chainID',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'clientID',\n                        type: 'bytes32',\n                    },\n                ],\n                internalType: 'struct Portal.SynthesizeWithPermitTransaction',\n                name: '_syntWithPermitTx',\n                type: 'tuple',\n            },\n        ],\n        name: 'synthesizeWithPermit',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'timelock',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'tokenThreshold',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        name: 'tokenWhitelist',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_portal',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n        ],\n        name: 'transfer',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'newOwner',\n                type: 'address',\n            },\n        ],\n        name: 'transferOwnership',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: '_stableBridgingFee',\n                type: 'uint256',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_externalID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'bytes32',\n                name: '_crossChainID',\n                type: 'bytes32',\n            },\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n        ],\n        name: 'unsynthesize',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        name: 'unsynthesizeStates',\n        outputs: [\n            {\n                internalType: 'enum Portal.UnsynthesizeState',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'versionRecipient',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'wrapper',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const\n","export const TRON_TRC20_ABI = [\n    {\n        inputs: [],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [\n            { indexed: true, name: 'owner', type: 'address' },\n            { indexed: true, name: 'spender', type: 'address' },\n            { name: 'value', type: 'uint256' },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        inputs: [\n            { indexed: true, name: 'from', type: 'address' },\n            { indexed: true, name: 'to', type: 'address' },\n            { name: 'value', type: 'uint256' },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        outputs: [{ type: 'uint256' }],\n        constant: true,\n        inputs: [\n            { name: 'owner', type: 'address' },\n            { name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        outputs: [{ type: 'bool' }],\n        inputs: [\n            { name: 'spender', type: 'address' },\n            { name: 'value', type: 'uint256' },\n        ],\n        name: 'approve',\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        outputs: [{ type: 'uint256' }],\n        constant: true,\n        inputs: [{ name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        outputs: [{ type: 'uint8' }],\n        inputs: [],\n        constant: true,\n        name: 'decimals',\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        outputs: [{ type: 'bool' }],\n        inputs: [\n            { name: 'spender', type: 'address' },\n            { name: 'subtractedValue', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        outputs: [{ type: 'bool' }],\n        inputs: [\n            { name: 'spender', type: 'address' },\n            { name: 'addedValue', type: 'uint256' },\n        ],\n        name: 'increaseAllowance',\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        outputs: [{ type: 'string' }],\n        constant: true,\n        name: 'name',\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        outputs: [{ type: 'string' }],\n        constant: true,\n        name: 'symbol',\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        outputs: [{ type: 'uint256' }],\n        constant: true,\n        name: 'totalSupply',\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        outputs: [{ type: 'bool' }],\n        inputs: [\n            { name: 'recipient', type: 'address' },\n            { name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        outputs: [{ type: 'bool' }],\n        inputs: [\n            { name: 'sender', type: 'address' },\n            { name: 'recipient', type: 'address' },\n            { name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const\n","export const TRON_METAROUTER_ABI = [\n    {\n        inputs: [],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'TransitTokenSent',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_receiveSide',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_calldata',\n                type: 'bytes',\n            },\n            {\n                internalType: 'uint256',\n                name: '_offset',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_to',\n                type: 'address',\n            },\n        ],\n        name: 'externalCall',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256',\n                        name: 'stableBridgingFee',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'crossChainID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'externalID',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'tokenReal',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'chainID',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'swapTokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'secondDexRouter',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'secondSwapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'finalReceiveSide',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'finalCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'finalOffset',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaMintTransaction',\n                name: '_metaMintTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaMintSwap',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes',\n                        name: 'firstSwapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'secondSwapCalldata',\n                        type: 'bytes',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'approvedTokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'firstDexRouter',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'secondDexRouter',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'nativeIn',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'relayRecipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'otherSideCalldata',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct MetaRouteStructs.MetaRouteTransaction',\n                name: '_metarouteTransaction',\n                type: 'tuple',\n            },\n        ],\n        name: 'metaRoute',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'metaRouterGateway',\n        outputs: [\n            {\n                internalType: 'contract MetaRouterGateway',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: '_token',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: '_amount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: '_router',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_swapCalldata',\n                type: 'bytes',\n            },\n            {\n                internalType: 'address',\n                name: '_burnToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: '_synthesis',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes',\n                name: '_burnCalldata',\n                type: 'bytes',\n            },\n        ],\n        name: 'returnSwap',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const\n","import { AddressZero } from '@ethersproject/constants/lib/addresses'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionRequest } from '@ethersproject/providers'\nimport { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport { Percent, Token, TokenAmount, wrappedToken } from '../entities'\nimport { BIPS_BASE, CROSS_CHAIN_ID } from './constants'\nimport { AmountLessThanFeeError, NoRepresentationFoundError, SdkError } from './sdkError'\nimport type { Symbiosis } from './symbiosis'\nimport { AggregatorTrade, WrapTrade } from './trade'\nimport {\n    buildMetaSynthesize,\n    getExternalId,\n    getInternalId,\n    isTonChainId,\n    isTronChainId,\n    isTronToken,\n    prepareTronTransaction,\n    tronAddressToEvm,\n    TronTransactionData,\n} from './chainUtils'\nimport { MulticallRouter, OmniPool, OmniPoolOracle } from './contracts'\nimport { OmniLiquidity } from './omniLiquidity'\nimport { TRON_METAROUTER_ABI } from './tronAbis'\nimport {\n    OmniPoolConfig,\n    RouteItem,\n    SwapExactInResult,\n    SwapExactInTransactionPayload,\n    TonTransactionData,\n} from './types'\n\ntype ZappingExactInParams = {\n    tokenAmountIn: TokenAmount\n    from: string\n    to: string\n    slippage: number\n    deadline: number\n}\n\nexport class Zapping {\n    protected multicallRouter: MulticallRouter\n\n    private from!: string\n    private to!: string\n    private revertableAddress!: string\n    private tokenAmountIn!: TokenAmount\n    private slippage!: number\n    private deadline!: number\n\n    private tradeA: AggregatorTrade | WrapTrade | undefined\n\n    private synthToken!: Token\n    private transitTokenIn!: Token\n\n    private omniLiquidity!: OmniLiquidity\n    private readonly pool!: OmniPool\n    private readonly poolOracle!: OmniPoolOracle\n\n    public constructor(private readonly symbiosis: Symbiosis, private readonly omniPoolConfig: OmniPoolConfig) {\n        this.pool = this.symbiosis.omniPool(omniPoolConfig)\n        this.poolOracle = this.symbiosis.omniPoolOracle(omniPoolConfig)\n\n        this.multicallRouter = this.symbiosis.multicallRouter(omniPoolConfig.chainId)\n    }\n\n    public async exactIn({\n        tokenAmountIn,\n        from,\n        to,\n        slippage,\n        deadline,\n    }: ZappingExactInParams): Promise<SwapExactInResult> {\n        this.tokenAmountIn = tokenAmountIn\n        this.from = tronAddressToEvm(from)\n        this.to = tronAddressToEvm(to)\n\n        this.slippage = slippage\n        this.deadline = deadline\n\n        if (isTronToken(this.tokenAmountIn.token)) {\n            this.revertableAddress = this.symbiosis.getRevertableAddress(this.omniPoolConfig.chainId)\n        } else if (isTonChainId(this.tokenAmountIn.token.chainId)) {\n            this.revertableAddress = this.symbiosis.getRevertableAddress(this.omniPoolConfig.chainId)\n        } else {\n            this.revertableAddress = this.from\n        }\n\n        const targetPool = this.symbiosis.getOmniPoolByConfig(this.omniPoolConfig)\n        if (!targetPool) {\n            throw new SdkError(`Unknown pool ${this.omniPoolConfig.address}`)\n        }\n        const wrapped = wrappedToken(tokenAmountIn.token)\n        const tokenPool = this.symbiosis.getOmniPoolByToken(wrapped)\n        if (tokenPool?.id === targetPool.id) {\n            this.transitTokenIn = wrapped\n        } else {\n            this.transitTokenIn = this.symbiosis.transitToken(tokenAmountIn.token.chainId, this.omniPoolConfig)\n        }\n\n        if (!this.transitTokenIn.equals(tokenAmountIn.token)) {\n            this.tradeA = this.buildTradeA()\n            await this.tradeA.init()\n        }\n\n        this.synthToken = await this.getSynthToken()\n\n        this.omniLiquidity = this.buildOmniLiquidity()\n        await this.omniLiquidity.init()\n\n        const fee = await this.getFee()\n\n        this.omniLiquidity = this.buildOmniLiquidity(fee)\n        await this.omniLiquidity.init()\n\n        let payload: SwapExactInTransactionPayload\n        if (isTronChainId(this.tokenAmountIn.token.chainId)) {\n            const transactionRequest = this.getTronTransactionRequest(fee)\n            payload = {\n                transactionType: 'tron',\n                transactionRequest,\n            }\n        } else if (isTonChainId(this.tokenAmountIn.token.chainId)) {\n            const transactionRequest = await this.getTonTransactionRequest(fee)\n            payload = {\n                transactionType: 'ton',\n                transactionRequest,\n            }\n        } else {\n            const transactionRequest = this.getEvmTransactionRequest(fee)\n            payload = {\n                transactionType: 'evm',\n                transactionRequest,\n            }\n        }\n\n        const routes: RouteItem[] = []\n        if (this.tradeA) {\n            routes.push({\n                provider: this.tradeA.tradeType,\n                tokens: [this.tradeA.tokenAmountIn.token, this.tradeA.amountOut.token],\n            })\n        }\n        routes.push({\n            provider: 'symbiosis',\n            tokens: [this.getPortalTokenAmountIn().token, this.omniLiquidity.tokenAmountIn.token],\n        })\n\n        return {\n            ...payload,\n            fees: [\n                {\n                    provider: 'symbiosis',\n                    value: fee,\n                },\n            ],\n            routes,\n            kind: 'crosschain-swap',\n            approveTo: this.symbiosis.chainConfig(tokenAmountIn.token.chainId).metaRouterGateway,\n            priceImpact: this.calculatePriceImpact(),\n            amountInUsd: this.getSynthAmount(fee),\n            tokenAmountOut: this.omniLiquidity.amountOut,\n            tokenAmountOutMin: this.omniLiquidity.amountOut,\n        }\n    }\n\n    private async getTonTransactionRequest(fee: TokenAmount): Promise<TonTransactionData> {\n        return buildMetaSynthesize({\n            symbiosis: this.symbiosis,\n            fee,\n            validUntil: this.deadline,\n            from: this.from,\n            to: this.to,\n            revertableAddress: this.revertableAddress,\n            amountIn: this.tokenAmountIn,\n            chainIdOut: this.omniPoolConfig.chainId,\n            secondDexRouter: this.multicallRouter.address,\n            secondSwapCallData: this.getMulticallData(),\n            swapTokens: [this.synthToken.address, this.synthToken.address],\n            finalCallData: '',\n            finalReceiveSide: AddressZero,\n            finalOffset: 0,\n        })\n    }\n\n    private getEvmTransactionRequest(fee: TokenAmount): TransactionRequest {\n        const [relayRecipient, otherSideCalldata] = this.otherSideSynthCallData(fee)\n\n        let firstToken = this.tradeA ? this.tradeA.tokenAmountIn.token.address : this.tokenAmountIn.token.address\n        if (!firstToken) {\n            // AddressZero if first token is GasToken\n            firstToken = AddressZero\n        }\n\n        const approvedTokens = [firstToken, this.getPortalTokenAmountIn().token.address]\n\n        const value =\n            this.tradeA && this.tokenAmountIn.token.isNative\n                ? BigNumber.from(this.tradeA.tokenAmountIn.raw.toString())\n                : undefined\n\n        const params = {\n            firstSwapCalldata: this.tradeA?.callData || [],\n            secondSwapCalldata: [],\n            approvedTokens,\n            firstDexRouter: this.tradeA?.routerAddress || AddressZero,\n            secondDexRouter: AddressZero,\n            amount: this.tokenAmountIn.raw.toString(),\n            nativeIn: this.tokenAmountIn.token.isNative,\n            relayRecipient,\n            otherSideCalldata,\n        }\n\n        const { chainId } = this.tokenAmountIn.token\n        const metaRouter = this.symbiosis.metaRouter(chainId)\n        const data = metaRouter.interface.encodeFunctionData('metaRoute', [params])\n\n        return {\n            chainId,\n            to: metaRouter.address,\n            data,\n            value,\n        }\n    }\n\n    private getTronTransactionRequest(fee: TokenAmount): TronTransactionData {\n        const [relayRecipient, otherSideCalldata] = this.otherSideSynthCallData(fee)\n\n        let firstToken = this.tradeA ? this.tradeA.tokenAmountIn.token.address : this.tokenAmountIn.token.address\n        if (!firstToken) {\n            // AddressZero if first token is GasToken\n            firstToken = AddressZero\n        }\n\n        const approvedTokens = [firstToken, this.getPortalTokenAmountIn().token.address]\n\n        const { chainId } = this.tokenAmountIn.token\n        const metaRouter = this.symbiosis.metaRouter(chainId)\n\n        return prepareTronTransaction({\n            chainId,\n            tronWeb: this.symbiosis.tronWeb(chainId),\n            abi: TRON_METAROUTER_ABI,\n            contractAddress: metaRouter.address,\n            functionName: 'metaRoute',\n            params: [\n                [\n                    this.tradeA?.callData || [],\n                    [],\n                    approvedTokens,\n                    this.tradeA?.routerAddress || AddressZero,\n                    AddressZero,\n                    this.tokenAmountIn.raw.toString(),\n                    this.tokenAmountIn.token.isNative,\n                    relayRecipient,\n                    otherSideCalldata,\n                ],\n            ],\n            ownerAddress: this.from,\n            value: 0,\n        })\n    }\n\n    private calculatePriceImpact(): Percent {\n        const zero = new Percent(JSBI.BigInt(0), BIPS_BASE) // 0%\n        let pi = this.tradeA?.priceImpact || zero\n\n        const max = new Percent(JSBI.BigInt(10000), BIPS_BASE) // 100%\n        if (pi.greaterThan(max)) pi = max\n\n        return new Percent(pi.numerator, pi.denominator)\n    }\n\n    private getPortalTokenAmountIn(): TokenAmount {\n        return this.tradeA ? this.tradeA.amountOut : this.tokenAmountIn\n    }\n\n    private getSynthAmount(fee?: TokenAmount): TokenAmount {\n        let synthAmount = new TokenAmount(this.synthToken, this.getPortalTokenAmountIn().raw)\n\n        if (fee) {\n            if (synthAmount.lessThan(fee) || synthAmount.equalTo(fee)) {\n                throw new AmountLessThanFeeError(\n                    `Amount ${synthAmount.toSignificant()} ${\n                        synthAmount.token.symbol\n                    } less than fee ${fee.toSignificant()} ${fee.token.symbol}`\n                )\n            }\n\n            synthAmount = synthAmount.subtract(fee)\n        }\n\n        return synthAmount\n    }\n\n    private buildTradeA(): AggregatorTrade | WrapTrade {\n        const chainId = this.tokenAmountIn.token.chainId\n        const tokenOut = this.transitTokenIn\n        const from = this.symbiosis.metaRouter(chainId).address\n        const to = from\n\n        if (WrapTrade.isSupported(this.tokenAmountIn.token, tokenOut)) {\n            return new WrapTrade({\n                tokenAmountIn: this.tokenAmountIn,\n                tokenAmountInMin: this.tokenAmountIn, // correct as it is tradeA\n                tokenOut,\n                to: this.to,\n            })\n        }\n\n        return new AggregatorTrade({\n            tokenAmountIn: this.tokenAmountIn,\n            tokenAmountInMin: this.tokenAmountIn,\n            tokenOut,\n            from,\n            to,\n            slippage: this.slippage / 100,\n            symbiosis: this.symbiosis,\n            clientId: this.symbiosis.clientId,\n            deadline: this.deadline,\n        })\n    }\n\n    private buildOmniLiquidity(fee?: TokenAmount): OmniLiquidity {\n        const tokenAmountIn = this.getSynthAmount(fee)\n\n        return new OmniLiquidity(tokenAmountIn, this.to, this.slippage, this.deadline, this.pool, this.poolOracle)\n    }\n\n    private getMulticallData(): string {\n        return this.multicallRouter.interface.encodeFunctionData('multicall', [\n            '0', // amount will be patched\n            [this.omniLiquidity.callData], // _calldata\n            [this.pool.address], // _receiveSides\n            [this.synthToken.address], // _path\n            [this.omniLiquidity.callDataOffset], // _offset\n            this.to, // _to\n        ])\n    }\n\n    private otherSideSynthCallData(fee: TokenAmount): [string, string] {\n        if (!this.tokenAmountIn) {\n            throw new SdkError('Token is not set')\n        }\n\n        const chainIdIn = this.tokenAmountIn.token.chainId\n        const chainIdOut = this.omniPoolConfig.chainId\n        const tokenAmount = this.getPortalTokenAmountIn()\n\n        const portal = this.symbiosis.portal(chainIdIn)\n\n        return [\n            portal.address,\n            portal.interface.encodeFunctionData('metaSynthesize', [\n                {\n                    stableBridgingFee: fee.raw.toString(),\n                    amount: tokenAmount.raw.toString(),\n                    rtoken: tokenAmount.token.address,\n                    chain2address: this.to,\n                    receiveSide: this.symbiosis.synthesis(chainIdOut).address,\n                    oppositeBridge: this.symbiosis.bridge(chainIdOut).address,\n                    syntCaller: this.from,\n                    chainID: chainIdOut,\n                    swapTokens: [this.synthToken.address, this.synthToken.address],\n                    secondDexRouter: this.multicallRouter.address,\n                    secondSwapCalldata: this.getMulticallData(),\n                    finalReceiveSide: AddressZero,\n                    finalCalldata: [],\n                    finalOffset: 0,\n                    revertableAddress: this.revertableAddress,\n                    clientID: this.symbiosis.clientId,\n                },\n            ]),\n        ]\n    }\n\n    private async getSynthToken(): Promise<Token> {\n        const chainIdOut = this.omniPoolConfig.chainId\n        const rep = this.symbiosis.getRepresentation(this.transitTokenIn, chainIdOut)\n\n        if (!rep) {\n            throw new NoRepresentationFoundError(\n                `Representation of ${this.transitTokenIn.symbol} in chain ${chainIdOut} not found`\n            )\n        }\n\n        return rep\n    }\n\n    protected async getFee(): Promise<TokenAmount> {\n        const chainIdIn = this.tokenAmountIn.token.chainId\n        const chainIdOut = this.omniPoolConfig.chainId\n\n        const portal = this.symbiosis.portal(chainIdIn)\n        const synthesis = this.symbiosis.synthesis(chainIdOut)\n\n        const amount = this.getPortalTokenAmountIn()\n\n        const internalId = getInternalId({\n            contractAddress: portal.address,\n            requestCount: MaxUint256,\n            chainId: chainIdIn,\n        })\n\n        const externalId = getExternalId({\n            internalId,\n            contractAddress: synthesis.address,\n            revertableAddress: this.revertableAddress,\n            chainId: chainIdOut,\n        })\n\n        const calldata = synthesis.interface.encodeFunctionData('metaMintSyntheticToken', [\n            {\n                stableBridgingFee: '1',\n                amount: amount.raw.toString(),\n                crossChainID: CROSS_CHAIN_ID,\n                externalID: externalId,\n                tokenReal: amount.token.address,\n                chainID: chainIdIn,\n                to: this.to,\n                swapTokens: [this.synthToken.address, this.synthToken.address],\n                secondDexRouter: this.multicallRouter.address,\n                secondSwapCalldata: this.getMulticallData(),\n                finalReceiveSide: AddressZero,\n                finalCalldata: [],\n                finalOffset: 0,\n            },\n        ])\n\n        const { price: fee } = await this.symbiosis.getBridgeFee({\n            receiveSide: synthesis.address,\n            calldata,\n            chainIdFrom: this.tokenAmountIn.token.chainId,\n            chainIdTo: chainIdOut,\n        })\n\n        return new TokenAmount(this.synthToken, fee)\n    }\n}\n","import { Percent, Token, TokenAmount } from '../entities'\nimport { getMinAmount } from './chainUtils/evm'\nimport { OmniPool, OmniPoolOracle } from './contracts'\n\nexport class OmniLiquidity {\n    public amountOut!: TokenAmount\n    public callData!: string\n    public priceImpact!: Percent\n    public callDataOffset = 4 + 32 * 2\n\n    public constructor(\n        public readonly tokenAmountIn: TokenAmount,\n        private readonly to: string,\n        private readonly slippage: number,\n        private readonly deadline: number,\n        private readonly pool: OmniPool,\n        private readonly poolOracle: OmniPoolOracle\n    ) {}\n\n    public async init() {\n        const network = await this.pool.provider.getNetwork()\n\n        const index = await this.pool.assetToIndex(this.tokenAmountIn.token.address)\n\n        const depositEstimate = await this.poolOracle.quoteDeposit(index, this.tokenAmountIn.raw.toString())\n\n        const lpToken = new Token({\n            address: this.pool.address,\n            decimals: 18,\n            chainId: network.chainId,\n        })\n        this.amountOut = new TokenAmount(lpToken, depositEstimate.lpTokenToMint.toString())\n        const slippageAdjustedAmountOut = getMinAmount(this.slippage, this.amountOut.raw)\n\n        this.callData = this.pool.interface.encodeFunctionData('deposit', [\n            index,\n            this.tokenAmountIn.raw.toString(),\n            slippageAdjustedAmountOut.toString(),\n            this.to,\n            this.deadline,\n        ])\n\n        return this\n    }\n}\n","import { ChainId } from '../../constants'\nimport { Config } from '../types'\nimport { Token } from '../../entities'\n\nexport const config: Config = {\n    advisor: {\n        url: 'https://api.symbiosis.finance/calculations',\n    },\n    limits: [],\n    omniPools: [\n        {\n            // USD\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0xC3255E317481B95A3e61844c274dE8BAF8eDF397',\n            oracle: '0xbBFb7cb70f84fb6fE1Cb13e42A0B71EFDe769428',\n            generalPurpose: true,\n            coinGeckoId: 'usd-coin',\n        },\n        {\n            // ETH\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0x2d877Fe148dBCB056Bf71ED5232E8d580195c0f1',\n            oracle: '0x61ab82B6Cfe17E8b242E024DE7Fc936c10e35327',\n            generalPurpose: true,\n            coinGeckoId: 'weth',\n        },\n        {\n            // BTC\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0xBf084Ee3E5C73129167167Bd5DB9FE8513d8F7e0',\n            oracle: '0x597282d7F75Cf34450395D92a087C71F597024f5',\n            generalPurpose: false,\n            coinGeckoId: 'bitcoin',\n        },\n        {\n            // LADYS\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0xAF8Ba1498e1EddD602Aab9cDe4BC6A3a83400165',\n            oracle: '0x422A0A054Eb5a7424d9E3042862546a3F04e3596',\n            generalPurpose: false,\n            coinGeckoId: 'milady-meme-coin',\n        },\n        {\n            // FRAX\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0x92114294E42A96C9eF3163DA18Ee7eFdbA6cc661',\n            oracle: '0xd29bfF100F5599522D94E7aEDf2d6B65357c7516',\n            generalPurpose: false,\n            coinGeckoId: 'frax',\n        },\n        {\n            // G\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0x20C54Cc697329333fe00DeD49C7dCA8c83dcE65b',\n            oracle: '0xDC636B062AB02C51b79cFaA6C5De7B7fFeAc2717',\n            generalPurpose: false,\n            coinGeckoId: 'g-token',\n        },\n        {\n            // WTON\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0x7E60A78518E7c9267ae0795E9914F19Cd7CdA168',\n            oracle: '0xAa444c22297b0dBd97bBf316dC0b7C64b33aa64C',\n            generalPurpose: false,\n            coinGeckoId: 'wrapped-ton',\n        },\n        {\n            // CATI\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0x53a9dbeA6013B22A8AF3Ae8AAac8Fd31759aD287',\n            oracle: '0x9C15664C49065b8E20EcE570f0818a68b71A00DA',\n            generalPurpose: false,\n            coinGeckoId: 'catizen',\n        },\n        {\n            // UXLINK\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0xcd5a0263DD8e29D9727865dcaD0f9D56C6e1Db93',\n            oracle: '0x8d448bDb0c7a5fFf6A4ddf4b815bD517727E0aE5',\n            generalPurpose: false,\n            coinGeckoId: 'uxlink',\n        },\n        {\n            // PINEYE\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0xb2EF74C1120C662984f907ea08096eDAAD94D54E',\n            oracle: '0x4E73aF5663c997A796FF2cc1AD8C5d406541b4F2',\n            generalPurpose: false,\n            coinGeckoId: 'pineye',\n        },\n        {\n            // WBNB\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0x095B362957B3E3638AE1eb7A957f392cD3Dc3c7C',\n            oracle: '0xCCc50a096E3078508FCb14Ac0B4DF3330C32BD96',\n            generalPurpose: false,\n            coinGeckoId: 'binancecoin',\n        },\n        {\n            // SIS\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0x3E6A3EbbC9D88ACC192221797ad90BF72d391778',\n            oracle: '0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C',\n            generalPurpose: false,\n            coinGeckoId: 'symbiosis-finance',\n        },\n        {\n            // APE\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0x0b01139C59D6bc2C8323FDbb4824e4aa5Ff4DE7C',\n            oracle: '0x258EF63a81bade0c31c7C4ae75d2CD5332034bEE',\n            generalPurpose: false,\n            coinGeckoId: 'apecoin',\n        },\n        {\n            // EVAA\n            chainId: ChainId.SYMBIOSIS_MAINNET,\n            address: '0xd40750043100501ea75cAc2386f23Bcf7554cB9A',\n            oracle: '0x3930C108ae8e85aAdc0d833D2096b8778eaf4432',\n            generalPurpose: false,\n            coinGeckoId: 'evaa-protocol',\n        },\n    ],\n    revertableAddress: {\n        [ChainId.TRON_MAINNET]: '0xd99ac0681b904991169a4f398B9043781ADbe0C3',\n        default: '0xd99ac0681b904991169a4f398B9043781ADbe0C3',\n    },\n    refundAddress: '0xd99ac0681b904991169a4f398B9043781ADbe0C3',\n    btcConfigs: [\n        {\n            btc: new Token({\n                deprecated: true,\n                name: 'Bitcoin',\n                symbol: 'BTC',\n                address: '0xc102C66D4a1e1865Ee962084626Cf4c27D5BFc74',\n                chainId: ChainId.BTC_MAINNET,\n                decimals: 8,\n                icons: {\n                    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                },\n            }),\n            symBtc: {\n                address: '0x49731d3c7234619a74B4c095838AfbC19cC44f28',\n                chainId: ChainId.ZKSYNC_MAINNET,\n            },\n            forwarderUrl: 'https://btc-forwarder.symbiosis.finance/zksync/forwarder/api/v1',\n        },\n        {\n            btc: new Token({\n                name: 'Bitcoin',\n                symbol: 'BTC',\n                address: '0x1dfc1e32d75b3f4cb2f2b1bcecad984e99eeba05',\n                chainId: ChainId.BTC_MAINNET,\n                decimals: 8,\n                icons: {\n                    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                },\n            }),\n            symBtc: {\n                address: '0xa1262496e84a9663b7AB64ed96C152A23d0B7214',\n                chainId: ChainId.BSC_MAINNET,\n            },\n            forwarderUrl: 'https://btc-forwarder.symbiosis.finance/bsc/forwarder/api/v1',\n        },\n        {\n            btc: new Token({\n                name: 'Bitcoin',\n                symbol: 'BTC',\n                address: '0x334524a0adb21425afcf77ac40580d68e30e51d8',\n                chainId: ChainId.BTC_MAINNET,\n                decimals: 8,\n                icons: {\n                    large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                    small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                },\n            }),\n            symBtc: {\n                address: '0xc17d768bf4fdc6f20a4a0d8be8767840d106d077',\n                chainId: ChainId.RSK_MAINNET,\n            },\n            forwarderUrl: 'https://btc-forwarder.symbiosis.finance/rsk/forwarder/api/v1',\n        },\n    ],\n    chains: [\n        {\n            id: ChainId.BTC_MAINNET,\n            rpc: 'https://mempool.space/api',\n            filterBlockOffset: 0,\n            stables: [],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x0000000000000000000000000000000000000000',\n            metaRouterGateway: '0x0000000000000000000000000000000000000000',\n            bridge: '0x0000000000000000000000000000000000000000',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x0000000000000000000000000000000000000000',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x0000000000000000000000000000000000000000',\n        },\n        {\n            id: ChainId.ETH_MAINNET,\n            rpc: 'https://ethereum-rpc.publicnode.com',\n            spareRpcs: ['https://rpc.ankr.com/eth', 'https://eth.llamarpc.com', 'https://eth-pokt.nodies.app'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n                    symbol: 'USDC',\n                    decimals: 6,\n                    chainId: ChainId.ETH_MAINNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Symbiosis',\n                    symbol: 'SIS',\n                    address: '0xd38BB40815d2B0c2d2c866e0c72c5728ffC76dd9',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png',\n                    },\n                },\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'Tether USD',\n                    symbol: 'USDT',\n                    address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                    },\n                },\n                {\n                    deprecated: false,\n                    name: 'Wrapped BTC',\n                    symbol: 'WBTC',\n                    address: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 8,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n                    },\n                },\n                {\n                    name: 'Milady Meme Coin',\n                    symbol: 'LADYS',\n                    address: '0x12970E6868f88f6557B76120662c1B3E50A646bf',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png',\n                    },\n                },\n                {\n                    name: 'pufETH',\n                    symbol: 'pufETH',\n                    address: '0xD9A442856C234a39a81a089C06451EBAa4306a72',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png',\n                    },\n                },\n                {\n                    name: 'Frax',\n                    symbol: 'FRAX',\n                    address: '0x853d955aCEf822Db058eb8505911ED77F175b99e',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png',\n                    },\n                },\n                {\n                    name: 'Gravity',\n                    symbol: 'G',\n                    address: '0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'Wrapped TON',\n                    symbol: 'WTON',\n                    address: '0x582d872A1B094FC48F5DE31D3B73F2D9bE47def1',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 9,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                    },\n                },\n                {\n                    name: 'ApeCoin',\n                    symbol: 'APE',\n                    address: '0x4d224452801ACEd8B2F0aebE155379bb5D594381',\n                    chainId: ChainId.ETH_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xf621Fb08BBE51aF70e7E0F4EA63496894166Ff7F',\n            metaRouterGateway: '0xfCEF2Fe72413b65d3F393d278A714caD87512bcd',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x49d3Fc00f3ACf80FABCb42D7681667B20F60889A',\n        },\n        {\n            id: ChainId.BSC_MAINNET,\n            rpc: 'https://bsc-rpc.publicnode.com',\n            spareRpcs: ['https://rpc.ankr.com/bsc', 'https://binance.llamarpc.com'],\n            filterBlockOffset: 1000,\n            partnerFeeCollector: '0xc6a2C8D42086B13A577e1c300663451Ae405b767',\n            stables: [\n                {\n                    name: 'USD Coin',\n                    address: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n                    symbol: 'USDC',\n                    decimals: 18,\n                    chainId: ChainId.BSC_MAINNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'BUSD Token',\n                    address: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n                    symbol: 'BUSD',\n                    decimals: 18,\n                    chainId: ChainId.BSC_MAINNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png',\n                    },\n                },\n                {\n                    name: 'Ethereum Token',\n                    symbol: 'ETH',\n                    address: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'Binance-Peg BTCB Token',\n                    symbol: 'BTCB',\n                    address: '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4023.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/4023.png',\n                    },\n                },\n                {\n                    name: 'Symbiosis',\n                    symbol: 'SIS',\n                    address: '0xF98b660AdF2ed7d9d9D9dAACC2fb0CAce4F21835',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png',\n                    },\n                },\n                {\n                    name: 'Gravity',\n                    symbol: 'G',\n                    address: '0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'Wrapped TON',\n                    symbol: 'WTON',\n                    address: '0x76A797A59Ba2C17726896976B7B3747BfD1d220f',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 9,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                    },\n                },\n                {\n                    name: 'GPT Wars',\n                    symbol: 'GPTW',\n                    address: '0xB3F4D70C6a18cC0F2D1205dbF3B21cB73e1B0592',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893',\n                        small: 'https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893',\n                    },\n                },\n                {\n                    name: 'Symbiosis BTC',\n                    symbol: 'syBTC',\n                    address: '0xA67c48F86Fc6d0176Dca38883CA8153C76a532c7',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 8,\n                    icons: {\n                        large: 'https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200',\n                        small: 'https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200',\n                    },\n                },\n                {\n                    name: 'PinEye',\n                    symbol: 'PINEYE',\n                    address: '0x4b3a2187648902082db0a44e8235d57F3f23DD10',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png',\n                    },\n                },\n                {\n                    name: 'Wrapped BNB',\n                    symbol: 'WBNB',\n                    address: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n                    },\n                },\n                {\n                    name: 'EVAA',\n                    symbol: 'EVAA',\n                    address: '0xaa036928c9c0Df07d525B55ea8EE690Bb5a628C1',\n                    chainId: ChainId.BSC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png',\n                    },\n                },\n            ],\n            router: '0x10ED43C718714eb63d5aA57B78B54704E256024E',\n            dexFee: 25,\n            metaRouter: '0x44487a445a7595446309464A82244B4bD4e325D5',\n            // metaRouter: '0x5aaaAc8dB525277A821Bf0cE3eD8A7E4b22Bd9e7',\n            metaRouterGateway: '0x5c97D726bf5130AE15408cE32bc764e458320D2f',\n            bridge: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n            synthesis: '0x6B1bbd301782FF636601fC594Cd7Bfe74871bfaA',\n            portal: '0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4',\n            fabric: '0xc17d768Bf4FdC6f20a4A0d8Be8767840D106D077',\n            multicallRouter: '0x44b5d0F16Ad55c4e7113310614745e8771b963bB',\n            // depository: {\n            //     depository: '0x056E5FaBCD478995d6aA7958006cDA042C551656',\n            //     withdrawUnlocker: '0x89d5140C4E0B3a0B42Bb532CFBF9Da378ee7C11C',\n            //     swapUnlocker: '0x37f5ba9F15A2547473F7172e45907F898D72eCCF',\n            //     btcRefundUnlocker: '0xbC405EAf2Ee0420ab5D72774b66330D4712dE4A2',\n            //     branchedUnlocker: '0x3bA0365C6Bd3D106570e192E29BAAc4b70690249',\n            // },\n        },\n        {\n            id: ChainId.AVAX_MAINNET,\n            rpc: 'https://avalanche-c-chain-rpc.publicnode.com',\n            spareRpcs: ['https://rpc.ankr.com/avalanche', 'https://api.avax.network/ext/bc/C/rpc'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    address: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E',\n                    symbol: 'USDC',\n                    decimals: 6,\n                    chainId: ChainId.AVAX_MAINNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'USD Coin',\n                    address: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n                    symbol: 'USDC.e',\n                    decimals: 6,\n                    chainId: ChainId.AVAX_MAINNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n            ],\n            router: '0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106',\n            dexFee: 30,\n            metaRouter: '0x6F0f6393e45fE0E7215906B6f9cfeFf53EA139cf',\n            metaRouterGateway: '0x4cfA66497Fa84D739a0f785FBcEe9196f1C64e4a',\n            bridge: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0xE75C7E85FE6ADd07077467064aD15847E6ba9877',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xDc9a6a26209A450caC415fb78487e907c660cf6a',\n        },\n        {\n            id: ChainId.MATIC_MAINNET,\n            rpc: 'https://polygon-bor-rpc.publicnode.com',\n            spareRpcs: ['https://rpc.ankr.com/polygon', 'https://polygon.llamarpc.com', 'https://polygon.meowrpc.com'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin (PoS) (USDC.e)',\n                    address: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n                    symbol: 'USDC.e',\n                    decimals: 6,\n                    chainId: ChainId.MATIC_MAINNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n                    chainId: ChainId.MATIC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'Frax',\n                    symbol: 'FRAX',\n                    address: '0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89',\n                    chainId: ChainId.MATIC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png',\n                    },\n                },\n            ],\n            router: '0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff',\n            dexFee: 30,\n            metaRouter: '0xa260E3732593E4EcF9DdC144fD6C4c5fe7077978',\n            metaRouterGateway: '0xAb83653fd41511D638b69229afBf998Eb9B0F30c',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xc5B61b9abC3C6229065cAD0e961aF585C5E0135c',\n        },\n        {\n            id: ChainId.TELOS_MAINNET,\n            rpc: 'https://rpc.telos.net',\n            spareRpcs: ['https://rpc.ankr.com/telos'],\n            filterBlockOffset: 3000,\n            stables: [\n                {\n                    name: 'syUSDC',\n                    address: '0xe6E5f3d264117E030C21920356641DbD5B3d660c',\n                    symbol: 'USDC',\n                    decimals: 6,\n                    chainId: ChainId.TELOS_MAINNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n            ],\n            router: '0x9b1adec00a25fffd87a5bb17f61916e1c26f6844',\n            dexFee: 25,\n            metaRouter: '0x8097f0B9f06C27AF9579F75762F971D745bb222F',\n            metaRouterGateway: '0x4949e74094D6F9C06D68e5Ffe388f6542C4b1A34',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8',\n            portal: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n            fabric: '0x8a7F930003BedD63A1ebD99C5917FD6aE7E3dedf',\n            multicallRouter: '0xcB28fbE3E9C0FEA62E0E63ff3f232CECfE555aD4',\n        },\n        {\n            id: ChainId.KAVA_MAINNET,\n            rpc: 'https://rpc.ankr.com/kava_evm',\n            spareRpcs: ['https://kava-evm-rpc.publicnode.com', 'https://evm.kava.io', 'https://evm.kava-rpc.com'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Tether USDt',\n                    symbol: 'USDt',\n                    address: '0x919C1c267BC06a7039e03fcc2eF738525769109c',\n                    chainId: ChainId.KAVA_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                    },\n                },\n            ],\n            router: '0xA7544C409d772944017BB95B99484B6E0d7B6388',\n            dexFee: 30,\n            metaRouter: '0x77Ed285AD9d1c8C0307eA23DcE68B8a5A6AfB39A',\n            metaRouterGateway: '0x0c4313a5dD4990f2fC15c6aA4d287D4602645a05',\n            bridge: '0xda8057acB94905eb6025120cB2c38415Fd81BfEB',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.BOBA_MAINNET,\n            rpc: 'https://lightning-replica.boba.network',\n            spareRpcs: ['https://replica.boba.network', 'https://1rpc.io/boba/eth', 'https://mainnet.boba.network'],\n            filterBlockOffset: 3000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    address: '0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc',\n                    symbol: 'USDC',\n                    decimals: 6,\n                    chainId: ChainId.BOBA_MAINNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n            ],\n            router: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n            dexFee: 30,\n            metaRouter: '0xca506793A420E901BbCa8066be5661E3C52c84c2',\n            metaRouterGateway: '0xd92Ca299F1C2518E78E48C207b64591BA6E9b9a8',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x506803495B1876FE1fA6Cd9dC65fB060057A4Cc3',\n        },\n        {\n            id: ChainId.SYMBIOSIS_MAINNET,\n            rpc: 'https://symbiosis.calderachain.xyz/http',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            partnerFeeCollector: '0x783EE304C54d4658f59EAefb73b32D37ee466e23',\n            stables: [\n                {\n                    chainId: ChainId.SYMBIOSIS_MAINNET,\n                    address: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n                    decimals: 18,\n                    symbol: 'WSIS',\n                    name: 'Wrapped SIS',\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n            metaRouterGateway: '0x13F2C77D83258C3038cF59FD024bD94A95B2A0D8',\n            bridge: '0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8',\n            synthesis: '0x45CFd6FB7999328F189aaD2739Fba4Be6C45E5bf',\n            portal: '0x0000000000000000000000000000000000000000',\n            fabric: '0xf85FC807D05d3Ab2309364226970aAc57b4e1ea4',\n            multicallRouter: '0xBbAD2fe9558e55EbfA04b3B5Bff0b6c4E2ffDD2C',\n        },\n        {\n            id: ChainId.ZKSYNC_MAINNET,\n            rpc: 'https://mainnet.era.zksync.io',\n            spareRpcs: ['https://rpc.ankr.com/zksync_era', 'https://zksync.meowrpc.com', 'https://zksync.drpc.org'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC.e',\n                    address: '0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4',\n                    chainId: ChainId.ZKSYNC_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0x1d17CBcF0D6D143135aE902365D2E5e2A16538D4',\n                    chainId: ChainId.ZKSYNC_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n                    chainId: ChainId.ZKSYNC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'Wrapped BTC',\n                    symbol: 'WBTC',\n                    address: '0xBBeB516fb02a01611cBBE0453Fe3c580D7281011',\n                    chainId: ChainId.ZKSYNC_MAINNET,\n                    decimals: 8,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png',\n                    },\n                },\n                {\n                    name: 'Symbiosis',\n                    symbol: 'SIS',\n                    address: '0xdd9f72afED3631a6C85b5369D84875e6c42f1827',\n                    chainId: ChainId.ZKSYNC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'Symbiosis BTC',\n                    symbol: 'syBTC',\n                    address: '0xED0c95EBe5a3E687cB2224687024FeC6518E683e',\n                    chainId: ChainId.ZKSYNC_MAINNET,\n                    decimals: 8,\n                    icons: {\n                        large: 'https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200',\n                        small: 'https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200',\n                    },\n                },\n            ],\n            router: '0x8B791913eB07C32779a16750e3868aA8495F5964',\n            dexFee: 30,\n            metaRouter: '0x38307CB291Af47Af9847c134a34E9477c939Ca28',\n            metaRouterGateway: '0x8cA239448AdD34b057D1CB5934F12AC899DB66e1',\n            bridge: '0x51eE73BEC8521E88042b426F31864f456f2a866e',\n            synthesis: '0x07bffC25011901CB01a00127518A154b47eB6e80',\n            portal: '0x4f5456d4d0764473DfCA1ffBB8524C151c4F19b9',\n            fabric: '0xa43772bC9EA21625A2B0070B7bf006324B7A7FAE',\n            multicallRouter: '0xe004DE550074856bD64Cc1A89A8B3b56bD3eAf31',\n        },\n        {\n            id: ChainId.ARBITRUM_MAINNET,\n            rpc: 'https://arb1.arbitrum.io/rpc',\n            spareRpcs: ['https://rpc.ankr.com/arbitrum', 'https://arbitrum.llamarpc.com', 'https://1rpc.io/arb'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0xaf88d065e77c8cC2239327C5EDb3A432268e5831',\n                    chainId: ChainId.ARBITRUM_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'USD Coin (Arb1)',\n                    symbol: 'USDC.e',\n                    address: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n                    chainId: ChainId.ARBITRUM_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x82af49447d8a07e3bd95bd0d56f35241523fbab1',\n                    chainId: ChainId.ARBITRUM_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'Symbiosis',\n                    symbol: 'SIS',\n                    address: '0x9E758B8a98a42d612b3D38B66a22074DC03D7370',\n                    chainId: ChainId.ARBITRUM_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png',\n                    },\n                },\n                {\n                    name: 'Milady Meme Coin',\n                    symbol: 'LADYS',\n                    address: '0x3b60FF35D3f7F62d636b067dD0dC0dFdAd670E4E',\n                    chainId: ChainId.ARBITRUM_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png',\n                    },\n                },\n                {\n                    name: 'Frax',\n                    symbol: 'FRAX',\n                    address: '0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F',\n                    chainId: ChainId.ARBITRUM_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png',\n                    },\n                },\n                {\n                    name: 'UXLINK Token',\n                    symbol: 'UXLINK',\n                    address: '0x1A6B3A62391ECcaaa992ade44cd4AFe6bEC8CfF1',\n                    chainId: ChainId.ARBITRUM_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png',\n                    },\n                },\n                {\n                    name: 'ApeCoin',\n                    symbol: 'APE',\n                    address: '0x7f9FBf9bDd3F4105C478b996B648FE6e828a1e98',\n                    chainId: ChainId.ARBITRUM_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png',\n                    },\n                },\n            ],\n            router: '0xD01319f4b65b79124549dE409D36F25e04B3e551',\n            dexFee: 30,\n            metaRouter: '0xf7e96217347667064DEE8f20DB747B1C7df45DDe',\n            metaRouterGateway: '0x80ddDDa846e779cceE463bDC0BCc2Ae296feDaF9',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x326adbE46D7E6C1B3927e9309B96DF478bda6D16',\n            portal: '0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9',\n            fabric: '0x2eE9559387b806E88fd46b9DA160D64A29CE7Da0',\n            multicallRouter: '0xda8057acB94905eb6025120cB2c38415Fd81BfEB',\n        },\n        {\n            id: ChainId.OPTIMISM_MAINNET,\n            rpc: 'https://optimism-rpc.publicnode.com',\n            spareRpcs: ['https://mainnet.optimism.io', 'https://rpc.ankr.com/optimism'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC.e',\n                    address: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\n                    chainId: ChainId.OPTIMISM_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x4200000000000000000000000000000000000006',\n                    chainId: ChainId.OPTIMISM_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x0f91052dc5B4baE53d0FeA5DAe561A117268f5d2',\n            metaRouterGateway: '0x200a0fe876421DC49A26508e3Efd0a1008fD12B5',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.ARBITRUM_NOVA,\n            rpc: 'https://arbitrum-nova-rpc.publicnode.com',\n            spareRpcs: [\n                'https://nova.arbitrum.io/rpc',\n                'https://rpc.ankr.com/arbitrumnova',\n                'https://arbitrum-nova.drpc.org',\n            ],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0x750ba8b76187092B0D1E87E28daaf484d1b5273b',\n                    chainId: ChainId.ARBITRUM_NOVA,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x722e8bdd2ce80a4422e880164f2079488e115365',\n                    chainId: ChainId.ARBITRUM_NOVA,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0xEe01c0CD76354C383B8c7B4e65EA88D00B06f36f',\n            dexFee: 30,\n            metaRouter: '0xca506793A420E901BbCa8066be5661E3C52c84c2',\n            metaRouterGateway: '0xd92Ca299F1C2518E78E48C207b64591BA6E9b9a8',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.POLYGON_ZK,\n            rpc: 'https://rpc.ankr.com/polygon_zkevm',\n            spareRpcs: [\n                'https://polygon-zkevm.drpc.org',\n                'https://zkevm-rpc.com',\n                'https://polygon-zkevm-mainnet.public.blastapi.io',\n            ],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035',\n                    chainId: ChainId.POLYGON_ZK,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'USD Coin',\n                    symbol: 'USDC.e',\n                    address: '0x37eAA0eF3549a5Bb7D431be78a3D99BD360d19e5',\n                    chainId: ChainId.POLYGON_ZK,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9',\n                    chainId: ChainId.POLYGON_ZK,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 30,\n            metaRouter: '0xb91d3060C90aac7c4c706aef2B37997b3b2a1DcF',\n            metaRouterGateway: '0x668961F4923A4FB96b22ad1F18aE215bB2694593',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.LINEA_MAINNET,\n            rpc: 'https://rpc.linea.build',\n            spareRpcs: ['https://1rpc.io/linea', 'https://linea.drpc.org', 'https://linea.decubate.com'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f',\n                    chainId: ChainId.LINEA_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0x176211869cA2b568f2A7D4EE941E073a821EE1ff',\n                    chainId: ChainId.LINEA_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Symbiosis',\n                    symbol: 'SIS',\n                    address: '0x6EF95B6f3b0F39508e3E04054Be96D5eE39eDE0d',\n                    chainId: ChainId.LINEA_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 30,\n            metaRouter: '0x9A31bAC4b3B958C835C243800B474818D04393dd',\n            metaRouterGateway: '0x83f71AabdDBb9F0E3B6462Cc7635b6fFAD0f2f2e',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.MANTLE_MAINNET,\n            rpc: 'https://mantle-rpc.publicnode.com',\n            spareRpcs: ['https://rpc.mantle.xyz', 'https://rpc.ankr.com/mantle'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0x09Bc4E0D864854c6aFB6eB9A9cdF58aC190D0dF9',\n                    chainId: ChainId.MANTLE_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111',\n                    chainId: ChainId.MANTLE_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'Catizen',\n                    symbol: 'CATI',\n                    address: '0x1Bdd8878252DaddD3Af2ba30628813271294eDc0',\n                    chainId: ChainId.MANTLE_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png',\n                    },\n                },\n                {\n                    name: 'UXLINK Token',\n                    symbol: 'UXLINK',\n                    address: '0x482deB2F7B9608a80eA91E71F06380E9891501C6',\n                    chainId: ChainId.MANTLE_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png',\n                    },\n                },\n            ],\n            router: '0xDd0840118bF9CCCc6d67b2944ddDfbdb995955FD',\n            dexFee: 30,\n            metaRouter: '0xca506793A420E901BbCa8066be5661E3C52c84c2',\n            metaRouterGateway: '0xd92Ca299F1C2518E78E48C207b64591BA6E9b9a8',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.BASE_MAINNET,\n            rpc: 'https://mainnet.base.org',\n            spareRpcs: ['https://base-rpc.publicnode.com', 'https://rpc.ankr.com/base'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x4200000000000000000000000000000000000006',\n                    chainId: ChainId.BASE_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'USD Base Coin',\n                    symbol: 'USDbC',\n                    address: '0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA',\n                    chainId: ChainId.BASE_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Gravity',\n                    symbol: 'G',\n                    address: '0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649',\n                    chainId: ChainId.BASE_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png',\n                    },\n                },\n            ],\n            router: '0x327Df1E6de05895d2ab08513aaDD9313Fe505d86',\n            dexFee: 0,\n            metaRouter: '0x691df9C4561d95a4a726313089c8536dd682b946',\n            metaRouterGateway: '0x41Ae964d0F61Bb5F5e253141A462aD6F3b625B92',\n            bridge: '0x8097f0B9f06C27AF9579F75762F971D745bb222F',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0xEE981B2459331AD268cc63CE6167b446AF4161f8',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9',\n        },\n        {\n            id: ChainId.TRON_MAINNET,\n            rpc: 'https://api.trongrid.io',\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Tether USDt',\n                    symbol: 'USDT',\n                    address: '0xa614f803b6fd780986a42c78ec9c7f77e6ded13c',\n                    chainId: ChainId.TRON_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                    },\n                },\n            ],\n            router: '0x6E0617948FE030A7E4970F8389D4AD295F249B7E',\n            dexFee: 30,\n            metaRouter: '0x0863786bbf4561f4a2a8be5a9ddf152afd8ae25c',\n            metaRouterGateway: '0x49e1816a2cf475515e7c80c9f0f0e16ae499198b',\n            bridge: '0xc5a6517050c44ba78295f57f4754bb68f8705321',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0xd83b5752b42856a08087748de6095af0be52d299',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x354ed0e8616678f2829feb2e2e9a0e0869fa82fb',\n        },\n        {\n            id: ChainId.SCROLL_MAINNET,\n            rpc: 'https://rpc.scroll.io',\n            spareRpcs: ['https://scroll-rpc.publicnode.com', 'https://rpc.ankr.com/scroll'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x5300000000000000000000000000000000000004',\n                    chainId: ChainId.SCROLL_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4',\n                    chainId: ChainId.SCROLL_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'Symbiosis',\n                    symbol: 'SIS',\n                    address: '0x1467b62A6AE5CdcB10A6a8173cfe187DD2C5a136',\n                    chainId: ChainId.SCROLL_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png',\n                    },\n                },\n                {\n                    name: 'pufETH',\n                    symbol: 'pufETH',\n                    address: '0xc4d46E8402F476F269c379677C99F18E22Ea030e',\n                    chainId: ChainId.SCROLL_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x624FFe62eBa13e6057878bCA1D7A9E35651E1D9c',\n            metaRouterGateway: '0x49952ff32FcBc3408D447E1E91Da2b44BD2D1AFE',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9',\n        },\n        {\n            id: ChainId.MANTA_MAINNET,\n            rpc: 'https://pacific-rpc.manta.network/http',\n            spareRpcs: ['https://manta-atlantic-rpc.publicnode.com'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x0Dc808adcE2099A9F62AA87D9670745AbA741746',\n                    chainId: ChainId.MANTA_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0xb73603C5d87fA094B7314C74ACE2e64D165016fb',\n                    chainId: ChainId.MANTA_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n                {\n                    name: 'pufETH',\n                    symbol: 'pufETH',\n                    address: '0xA53E005Cecd3D7C89A4AE814617cC14828b6527E',\n                    chainId: ChainId.MANTA_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x318C2B9a03C37702742C3d40C72e4056e430135A',\n            metaRouterGateway: '0x027cc92c6892de323Ba664F0B3bA8B602d4116B6',\n            bridge: '0xda8057acB94905eb6025120cB2c38415Fd81BfEB',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n        },\n        {\n            id: ChainId.METIS_MAINNET,\n            rpc: 'https://andromeda.metis.io/?owner=1088',\n            spareRpcs: [\n                'https://metis.drpc.org',\n                'https://metis-pokt.nodies.app',\n                'https://metis-mainnet.public.blastapi.io',\n            ],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x420000000000000000000000000000000000000A',\n                    chainId: ChainId.METIS_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xf85FC807D05d3Ab2309364226970aAc57b4e1ea4',\n            metaRouterGateway: '0xcd7C056b39DdFB568E451923ABEDb9B6a7Aeb885',\n            bridge: '0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4',\n        },\n        {\n            id: ChainId.BAHAMUT_MAINNET,\n            rpc: 'https://bahamut-eu-1.nodes.guru',\n            spareRpcs: ['https://bahamut-rpc.publicnode.com', 'https://rpc.ankr.com/bahamut'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Tether USD',\n                    symbol: 'USDT',\n                    address: '0xdef886c55a79830c47108eeb9c37e78a49684e41',\n                    chainId: ChainId.BAHAMUT_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0x4237e0A5b55233D5B6D6d1D9BF421723954130D8',\n                    chainId: ChainId.BAHAMUT_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                    },\n                },\n            ],\n            router: '0xF660558a4757Fb5953d269FF32E228Ae3d5f6c68', // silkswap\n            dexFee: 30,\n            metaRouter: '0xf85FC807D05d3Ab2309364226970aAc57b4e1ea4',\n            metaRouterGateway: '0xcd7C056b39DdFB568E451923ABEDb9B6a7Aeb885',\n            bridge: '0x1ac4C50080871D7a24DD705dE9eFe5FF14bC0Ea2',\n            synthesis: '0xB79A4F5828eb55c10D7abF4bFe9a9f5d11aA84e0',\n            portal: '0x318C2B9a03C37702742C3d40C72e4056e430135A',\n            fabric: '0xA257F3FE4E4032291516DC355eDF90664e9eB932',\n            multicallRouter: '0x3E6A3EbbC9D88ACC192221797ad90BF72d391778',\n        },\n        {\n            id: ChainId.MODE_MAINNET,\n            rpc: 'https://mainnet.mode.network',\n            spareRpcs: ['https://1rpc.io/mode', 'https://mode.drpc.org'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0x4200000000000000000000000000000000000006',\n                    chainId: ChainId.MODE_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x5D61c537393cf21893BE619E36fC94cd73C77DD3',\n            dexFee: 30,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.RSK_MAINNET,\n            rpc: 'https://public-node.rsk.co',\n            spareRpcs: ['https://go.getblock.io/a4cf9dc5a3e347aaa1bb46315f2b874d', 'https://mycrypto.rsk.co'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD₮0',\n                    symbol: 'USD₮0',\n                    address: '0x779ded0c9e1022225f8e0630b35a9b54be713736',\n                    chainId: ChainId.RSK_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/825.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'Tether USD',\n                    symbol: 'rUSDT',\n                    address: '0xef213441a85df4d7acbdae0cf78004e1e486bb96',\n                    chainId: ChainId.RSK_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/825.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'Bridged USDC (Stargate)',\n                    symbol: 'USDC.e',\n                    address: '0x74c9f2b00581f1b11aa7ff05aa9f608b7389de67',\n                    chainId: ChainId.RSK_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n                {\n                    name: 'Wrapped RBTC',\n                    symbol: 'WRBTC',\n                    address: '0x542fda317318ebf1d3deaf76e0b632741a7e677d',\n                    chainId: ChainId.RSK_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32702.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/32702.png',\n                    },\n                },\n                {\n                    name: 'Symbiosis BTC',\n                    symbol: 'syBTC',\n                    address: '0xB52E582263c1d0189b3cc1402c1B7205b7F2E9Ba',\n                    chainId: ChainId.RSK_MAINNET,\n                    decimals: 8,\n                    icons: {\n                        large: 'https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200',\n                        small: 'https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x7057ab3fb2bee9c18e0cde4240de4ff7f159e365',\n            metaRouterGateway: '0xfffdb2a69abcbbf55ecb2f6b348e0bd3d0f9f2e1',\n            bridge: '0xda8057acb94905eb6025120cb2c38415fd81bfeb',\n            synthesis: '0xf8504d2ca2f0bbad9d36927e3d32e278abadada0',\n            portal: '0x5aa5f7f84ed0e5db0a4a85c3947ea16b53352fd4',\n            fabric: '0x7775b274f0c3fa919b756b22a4d9674e55927ab8',\n            multicallRouter: '0x01a3c8e513b758ebb011f7afaf6c37616c9c24d9',\n        },\n        {\n            id: ChainId.BLAST_MAINNET,\n            rpc: 'https://blast-rpc.publicnode.com',\n            spareRpcs: ['https://rpc.blast.io', 'https://rpc.ankr.com/blast'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped ETH',\n                    symbol: 'WETH',\n                    address: '0x4300000000000000000000000000000000000004',\n                    chainId: ChainId.BLAST_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x7057aB3fB2BeE9c18e0cDe4240DE4ff7f159E365',\n            metaRouterGateway: '0xa0079829B9F1Edc5DD0DE3eC104f281745C4bD81',\n            bridge: '0xda8057acB94905eb6025120cB2c38415Fd81BfEB',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9',\n        },\n        {\n            id: ChainId.MERLIN_MAINNET,\n            rpc: 'https://rpc.merlinchain.io',\n            spareRpcs: ['https://merlin.blockpi.network/v1/rpc/public'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped BTC',\n                    symbol: 'WBTC',\n                    address: '0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA',\n                    chainId: ChainId.MERLIN_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.ZKLINK_MAINNET,\n            rpc: 'https://rpc.zklink.io',\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped ETH',\n                    symbol: 'WETH',\n                    address: '0x8280a4e7D5B3B658ec4580d3Bc30f5e50454F169',\n                    chainId: ChainId.ZKLINK_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'pufETH',\n                    symbol: 'pufETH',\n                    address: '0x1B49eCf1A8323Db4abf48b2F5EFaA33F7DdAB3FC',\n                    chainId: ChainId.ZKLINK_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xAcb35C2D11FEA8849cd9f5Ff6fBC56bB5296641B',\n            metaRouterGateway: '0xe4E794C74558057E09e9131705f5F92aAfD8Dd31',\n            bridge: '0x2E818E50b913457015E1277B43E469b63AC5D3d7',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x8Dc71561414CDcA6DcA7C1dED1ABd04AF474D189',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x4c398CB4b7D4d31a54D254d8Aed09B9e8353E80E',\n        },\n        {\n            id: ChainId.CORE_MAINNET,\n            rpc: 'https://rpc.coredao.org',\n            spareRpcs: ['https://rpc.ankr.com/core', 'https://1rpc.io/core'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Core Wrapped BTC Token',\n                    symbol: 'coreBTC',\n                    address: '0x8034aB88C3512246Bf7894f57C834DdDBd1De01F',\n                    chainId: ChainId.CORE_MAINNET,\n                    decimals: 8,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1.png',\n                    },\n                },\n            ],\n            router: '0x4ddDD324F205e5989bAF8aD0FFCa41f4E5d9841D',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.TAIKO_MAINNET,\n            rpc: 'https://rpc.mainnet.taiko.xyz',\n            spareRpcs: ['https://taiko-rpc.publicnode.com', 'https://rpc.ankr.com/taiko'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Ether',\n                    symbol: 'WETH',\n                    address: '0xA51894664A773981C6C112C43ce576f315d5b1B6',\n                    chainId: ChainId.TAIKO_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x7057aB3fB2BeE9c18e0cDe4240DE4ff7f159E365',\n            metaRouterGateway: '0xa0079829B9F1Edc5DD0DE3eC104f281745C4bD81',\n            bridge: '0xda8057acB94905eb6025120cB2c38415Fd81BfEB',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9',\n        },\n        {\n            id: ChainId.SEI_EVM_MAINNET,\n            rpc: 'https://evm-rpc.sei-apis.com',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin via Noble',\n                    symbol: 'USDC.n',\n                    address: '0x3894085Ef7Ff0f0aeDf52E2A2704928d1Ec074F1',\n                    chainId: ChainId.SEI_EVM_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n                {\n                    deprecated: true,\n                    name: 'USDT',\n                    symbol: 'USDT',\n                    address: '0xB75D0B03c06A926e488e2659DF1A861F860bD3d1',\n                    chainId: ChainId.SEI_EVM_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/825.png',\n                    },\n                },\n                {\n                    name: 'GPT Wars',\n                    symbol: 'GPTW',\n                    address: '0xcB0DdC112EF317271266c83D7179Bf9186b9C658',\n                    chainId: ChainId.SEI_EVM_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893',\n                        small: 'https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893',\n                    },\n                },\n            ],\n            router: '0xa4cF2F53D1195aDDdE9e4D3aCa54f556895712f2',\n            dexFee: 30,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.ZETACHAIN_MAINNET,\n            rpc: 'https://zetachain-evm.blockpi.network/v1/rpc/public',\n            spareRpcs: ['https://zetachain-mainnet-archive.allthatnode.com:8545'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'pufETH',\n                    symbol: 'pufETH',\n                    address: '0x1e4bF3CaBD7707089138dD5a545B077413FA83Fc',\n                    chainId: ChainId.ZETACHAIN_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png',\n                    },\n                },\n                {\n                    name: 'ZetaChain ZRC20 USDC on ETH',\n                    symbol: 'USDC.ETH',\n                    address: '0x0cbe0dF132a6c6B4a2974Fa1b7Fb953CF0Cc798a',\n                    chainId: ChainId.ZETACHAIN_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n            ],\n            router: '0x2ca7d64A7EFE2D62A725E2B35Cf7230D6677FfEe',\n            dexFee: 0,\n            metaRouter: '0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9',\n            metaRouterGateway: '0xcB341279c0A071bfC14e69450Add47c568c4ddAC',\n            bridge: '0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4',\n            synthesis: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n            portal: '0x8a7F930003BedD63A1ebD99C5917FD6aE7E3dedf',\n            fabric: '0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8',\n            multicallRouter: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n        },\n        {\n            id: ChainId.CRONOS_MAINNET,\n            rpc: 'https://evm.cronos.org',\n            spareRpcs: ['https://rpc.nebkas.ro', 'https://cronos-evm-rpc.publicnode.com'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0xc21223249ca28397b4b6541dffaecc539bff0c59',\n                    chainId: ChainId.CRONOS_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0xE75C7E85FE6ADd07077467064aD15847E6ba9877',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n        },\n        {\n            id: ChainId.FRAXTAL_MAINNET,\n            rpc: 'https://rpc.frax.com',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped ETH',\n                    symbol: 'WETH',\n                    address: '0xA8a59D73388D0c4344a7b0Ba287ddb654227c38a',\n                    chainId: ChainId.FRAXTAL_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'Frax USD',\n                    symbol: 'frxUSD',\n                    address: '0xfc00000000000000000000000000000000000001',\n                    chainId: ChainId.FRAXTAL_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png',\n                    },\n                },\n            ],\n            router: '0x000000008096D9dED037d4dB3fe57764B996BC86',\n            dexFee: 30,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.GRAVITY_MAINNET,\n            rpc: 'https://rpc.gravity.xyz',\n            spareRpcs: ['https://rpc.ankr.com/gravity'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Bridged USDC (Stargate)',\n                    symbol: 'USDC.e',\n                    address: '0xFbDa5F676cB37624f28265A144A48B0d6e87d3b6',\n                    chainId: ChainId.GRAVITY_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n                {\n                    name: 'Gravity',\n                    symbol: 'wG',\n                    address: '0xBB859E225ac8Fb6BE1C7e38D87b767e95Fef0EbD',\n                    chainId: ChainId.GRAVITY_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png',\n                    },\n                },\n            ],\n            router: '0x18E621B64d7808c3C47bccbbD7485d23F257D26f',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.BSQUARED_MAINNET,\n            rpc: 'https://rpc.bsquared.network',\n            spareRpcs: ['https://b2-mainnet.alt.technology'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped BTC',\n                    symbol: 'WBTC',\n                    address: '0x4200000000000000000000000000000000000006',\n                    chainId: ChainId.BSQUARED_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.TON_MAINNET,\n            rpc: 'https://mainnet-v4.tonhubapi.com',\n            filterBlockOffset: 0,\n            stables: [\n                {\n                    name: 'USDt',\n                    symbol: 'USDT',\n                    address: '0x9328Eb759596C38a25f59028B146Fecdc3621Dfe',\n                    chainId: ChainId.TON_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                    },\n                    attributes: {\n                        ton: 'EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs',\n                    },\n                },\n                {\n                    name: 'UXLINK Token',\n                    symbol: 'UXLINK',\n                    address: '0x678F2a82c73C69338a00d1Cf2BA8aB7887BD3293',\n                    chainId: ChainId.TON_MAINNET,\n                    decimals: 9,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png',\n                    },\n                    attributes: {\n                        ton: 'EQBh9XACT0B60U8Q48VnjyqCxzxpM4oA0c8rqKt4h70yk1V5',\n                    },\n                },\n                {\n                    name: 'Catizen',\n                    symbol: 'CATI',\n                    address: '0x73f9a6D3AD10BaB08E6dbC7bEfa5e42b695F5400',\n                    chainId: ChainId.TON_MAINNET,\n                    decimals: 9,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png',\n                    },\n                    attributes: {\n                        ton: 'EQD-cvR0Nz6XAyRBvbhz-abTrRC6sI5tvHvvpeQraV9UAAD7',\n                    },\n                },\n                {\n                    name: 'PinEye',\n                    symbol: 'PINEYE',\n                    address: '0x0d2d353642cFFC051A2694C51B6C00e787EB4590',\n                    chainId: ChainId.TON_MAINNET,\n                    decimals: 9,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png',\n                    },\n                    attributes: {\n                        ton: 'EQDY2MzMJY_9OWm9UyQNLTU2Qs_8BRomlMUbbADnh-tFkLaU',\n                    },\n                },\n                {\n                    name: 'EVAA',\n                    symbol: 'EVAA',\n                    address: '0xB1c95672B453fBFCA2A7cc6BFA274D6419cEf681',\n                    chainId: ChainId.TON_MAINNET,\n                    decimals: 9,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png',\n                    },\n                    attributes: {\n                        ton: 'EQBKMfjX_a_dsOLm-juxyVZytFP7_KKnzGv6J01kGc72gVBp',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x0000000000000000000000000000000000000000',\n            metaRouterGateway: '0x0000000000000000000000000000000000000000',\n            bridge: '0x0000000000000000000000000000000000000000',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x0000000000000000000000000000000000000000',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x0000000000000000000000000000000000000000',\n            tonPortal: 'EQBZh9CpLZyNlwI7am0PHpVy8T8zdJxAhlG3m3xMi0BoVaUh',\n        },\n        {\n            id: ChainId.CRONOS_ZK_MAINNET,\n            rpc: 'https://mainnet.zkevm.cronos.org',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0xaa5b845f8c9c047779bedf64829601d8b264076c',\n                    chainId: ChainId.CRONOS_ZK_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n            ],\n            router: '0x39ad8c3067281e60045df041846ee01c1dd3a853', // H2 Finance\n            dexFee: 30,\n            metaRouter: '0x681BeeF15D68E4abae4d912ACF3Df5D589fe61B9',\n            metaRouterGateway: '0x17D51F08C2044fAbFeFE2C58564Bd89BF2DE1C4d',\n            bridge: '0xe004DE550074856bD64Cc1A89A8B3b56bD3eAf31',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x2E818E50b913457015E1277B43E469b63AC5D3d7',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xAcb35C2D11FEA8849cd9f5Ff6fBC56bB5296641B',\n        },\n        {\n            id: ChainId.MORPH_MAINNET,\n            rpc: 'https://rpc.morphl2.io',\n            spareRpcs: ['https://rpc-quicknode.morphl2.io'],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0xe34c91815d7fc18A9e2148bcD4241d0a5848b693',\n                    chainId: ChainId.MORPH_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n            ],\n            router: '0x81606E6f8aAD6C75c2f383Ea595c2b9f8ce8aE3a', // bulba swap\n            dexFee: 35,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.SOLANA_MAINNET,\n            rpc: 'https://solana-rpc.publicnode.com',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x0000000000000000000000000000000000000000',\n            metaRouterGateway: '0x0000000000000000000000000000000000000000',\n            bridge: '0x0000000000000000000000000000000000000000',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x0000000000000000000000000000000000000000',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x0000000000000000000000000000000000000000',\n        },\n        {\n            id: ChainId.GOAT_MAINNET,\n            rpc: 'https://rpc.goat.network',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Goat BTC',\n                    symbol: 'WGBTC',\n                    address: '0xbC10000000000000000000000000000000000000',\n                    chainId: ChainId.GOAT_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.SONIC_MAINNET,\n            rpc: 'https://rpc.soniclabs.com',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Ethereum',\n                    symbol: 'WETH',\n                    address: '0x50c42dEAcD8Fc9773493ED674b675bE577f2634b',\n                    chainId: ChainId.SONIC_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xda8057acB94905eb6025120cB2c38415Fd81BfEB',\n            metaRouterGateway: '0xb7aF032a0C8d350705eD7E4E3802377731a0cA07',\n            bridge: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0xE75C7E85FE6ADd07077467064aD15847E6ba9877',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n        },\n        {\n            id: ChainId.ABSTRACT_MAINNET,\n            rpc: 'https://api.mainnet.abs.xyz',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped Ethereum',\n                    symbol: 'WETH',\n                    address: '0x3439153eb7af838ad19d56e1571fbd09333c2809',\n                    chainId: ChainId.ABSTRACT_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x2E818E50b913457015E1277B43E469b63AC5D3d7',\n            metaRouterGateway: '0x664376638fE57642342009f49E1Ca4caf74b26D3',\n            bridge: '0xAcb35C2D11FEA8849cd9f5Ff6fBC56bB5296641B',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x8Dc71561414CDcA6DcA7C1dED1ABd04AF474D189',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x4c398CB4b7D4d31a54D254d8Aed09B9e8353E80E',\n        },\n        {\n            id: ChainId.GNOSIS_MAINNET,\n            rpc: 'https://rpc.gnosischain.com',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC.e',\n                    address: '0x2a22f9c3b484c3629090feed35f17ff8f88f76f0',\n                    chainId: ChainId.GNOSIS_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n                {\n                    name: 'Wrapped Ethereum',\n                    symbol: 'WETH',\n                    address: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n                    chainId: ChainId.GNOSIS_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.BERACHAIN_MAINNET,\n            rpc: 'https://rpc.berachain.com',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped ETH',\n                    symbol: 'WETH',\n                    address: '0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590',\n                    chainId: ChainId.BERACHAIN_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0xd91dd58387Ccd9B66B390ae2d7c66dBD46BC6022',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.UNICHAIN_MAINNET,\n            rpc: 'https://unichain-rpc.publicnode.com',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped ETH',\n                    symbol: 'WETH',\n                    address: '0x4200000000000000000000000000000000000006',\n                    chainId: ChainId.UNICHAIN_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x284f11109359a7e1306c3e447ef14d38400063ff',\n            dexFee: 30,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.SONEIUM_MAINNET,\n            rpc: 'https://rpc.soneium.org',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped ETH',\n                    symbol: 'WETH',\n                    address: '0x4200000000000000000000000000000000000006',\n                    chainId: ChainId.SONEIUM_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n            ],\n            router: '0x3c56C7C1Bfd9dbC14Ab04935f409d49D3b7A802E',\n            dexFee: 30,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.OPBNB_MAINNET,\n            rpc: 'https://opbnb-rpc.publicnode.com/',\n            spareRpcs: [],\n            filterBlockOffset: 1000,\n            stables: [\n                {\n                    name: 'Wrapped ETH',\n                    symbol: 'WETH',\n                    address: '0xE7798f023fC62146e8Aa1b36Da45fb70855a77Ea',\n                    chainId: ChainId.OPBNB_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'Wrapped BNB',\n                    symbol: 'WBNB',\n                    address: '0x4200000000000000000000000000000000000006',\n                    chainId: ChainId.OPBNB_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.HYPERLIQUID_MAINNET,\n            rpc: 'https://rpc.hyperliquid.xyz/evm',\n            spareRpcs: [],\n            filterBlockOffset: 500,\n            stables: [\n                {\n                    name: 'Unit ETH',\n                    symbol: 'UETH',\n                    address: '0xbe6727b535545c67d5caa73dea54865b92cf7907',\n                    chainId: ChainId.HYPERLIQUID_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0xb88339CB7199b77E23DB6E890353E22632Ba630f',\n                    chainId: ChainId.HYPERLIQUID_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n                {\n                    name: 'ApeCoin',\n                    symbol: 'APE',\n                    address: '0xab11329560fa9c9c860bb21a9342215a1265bbb0',\n                    chainId: ChainId.HYPERLIQUID_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png',\n                    },\n                },\n            ],\n            router: '0xb4a9C4e6Ea8E2191d2FA5B380452a634Fb21240A',\n            dexFee: 30,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.KATANA_MAINNET,\n            rpc: 'https://rpc.katana.network',\n            spareRpcs: [],\n            filterBlockOffset: 500,\n            stables: [\n                {\n                    deprecated: true,\n                    name: 'Wrapped ETH',\n                    symbol: 'WETH',\n                    address: '0x4200000000000000000000000000000000000006',\n                    chainId: ChainId.KATANA_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'Wrapped ETH',\n                    symbol: 'WETH',\n                    address: '0xEE7D8BCFb72bC1880D0Cf19822eB0A2e6577aB62',\n                    chainId: ChainId.KATANA_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png',\n                    },\n                },\n                {\n                    name: 'USD Coin',\n                    symbol: 'USDC',\n                    address: '0x203A662b0BD271A6ed5a60EdFbd04bFce608FD36',\n                    chainId: ChainId.KATANA_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.APECHAIN_MAINNET,\n            rpc: 'https://rpc.apechain.com',\n            spareRpcs: [],\n            filterBlockOffset: 500,\n            stables: [\n                {\n                    name: 'Wrapped APE',\n                    symbol: 'WAPE',\n                    address: '0x48b62137edfa95a428d35c09e44256a739f6b557',\n                    chainId: ChainId.APECHAIN_MAINNET,\n                    decimals: 18,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n        {\n            id: ChainId.PLASMA_MAINNET,\n            rpc: 'https://rpc.plasma.to',\n            spareRpcs: [],\n            filterBlockOffset: 500,\n            stables: [\n                {\n                    name: 'Tether USD',\n                    symbol: 'USDT0',\n                    address: '0xB8CE59FC3717ada4C02eaDF9682A9e934F625ebb',\n                    chainId: ChainId.PLASMA_MAINNET,\n                    decimals: 6,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C',\n            metaRouterGateway: '0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278',\n            bridge: '0x5523985926Aa12BA58DC5Ad00DDca99678D7227E',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x292fC50e4eB66C3f6514b9E402dBc25961824D62',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8',\n        },\n    ],\n}\n","import { ChainId } from '../../constants'\nimport { Config } from '../types'\nimport { Token } from '../../entities'\n\nexport const config: Config = {\n    advisor: {\n        url: 'https://api.testnet.symbiosis.finance/calculations',\n    },\n    limits: [],\n    omniPools: [\n        {\n            chainId: ChainId.BSC_TESTNET,\n            address: '0xFC385a59b2728cA437057E3cDBA4a2611B75c406', // BTC octopool\n            oracle: '0xfdF3dBF16a7Dc8078FE4E9D0c1ac391dfb8B19aF',\n            generalPurpose: true,\n            coinGeckoId: 'btc-mutiny',\n        },\n        // {\n        //     chainId: ChainId.BSC_TESTNET,\n        //     address: '0x3E524E5dbcEc08C3712D7Ac877Ad83cb8dAfCe8D', // BTC mainnet octopool\n        //     oracle: '0x7a62416f10cd039cb538953953f94316FE1c32FA',\n        //     generalPurpose: true,\n        // },\n        {\n            chainId: ChainId.BSC_TESTNET,\n            address: '0x2826c540065C8eD792d7100ca89628E986f2F42E', // TON octopool\n            oracle: '0xaF123f922b9cAe0F525c2E5A95314D7E8E229413',\n            generalPurpose: true, // maybe in prod false, eth -\\-> ton\n            coinGeckoId: 'wrapped-ton',\n        },\n    ],\n    revertableAddress: {\n        [ChainId.TRON_TESTNET]: '0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5',\n        default: '0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5',\n    },\n    refundAddress: '0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5',\n    btcConfigs: [\n        {\n            btc: new Token({\n                name: 'Bitcoin Mutiny',\n                symbol: 'muBTC',\n                address: '0x41540e95B10383408cfE201974c88E6C3ef9323A',\n                chainId: ChainId.BTC_MUTINY,\n                decimals: 8,\n                icons: {\n                    large: 'https://faucet.mutinynet.com/favicon.svg',\n                    small: 'https://faucet.mutinynet.com/favicon.svg',\n                },\n            }),\n            symBtc: {\n                address: '0xEa3f6885Ef517EcaBB2888b0ef9c6873c97f24d4',\n                chainId: ChainId.SEPOLIA_TESTNET,\n            },\n            forwarderUrl: 'https://relayers.testnet.symbiosis.finance/mutinynet/forwarder/api/v1',\n        },\n    ],\n    chains: [\n        {\n            // NOTE host chain is better to be first in the config\n            id: ChainId.BSC_TESTNET,\n            rpc: 'https://bsc-testnet-rpc.publicnode.com',\n            filterBlockOffset: 2000,\n            stables: [\n                {\n                    name: 'WTON(BSC)',\n                    symbol: 'WTON(BSC)',\n                    address: '0xe015581A4e36eEbf170a3F4a686fa7606d511b13',\n                    chainId: ChainId.BSC_TESTNET,\n                    decimals: 9,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                    },\n                },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0xCc9f8896896c6eF44f2504A6A29e6057aDBfF179',\n            metaRouterGateway: '0xaa067db6103E4b792bbE09540B5a7757F79d582a',\n            bridge: '0xB299eee0Ed46b7a34C01F2a01fc83a0B45aA88AF',\n            synthesis: '0x08f5c28ff0622FeF758c2C3c2a5EAEeb63D60D4c',\n            portal: '0x0000000000000000000000000000000000000000',\n            fabric: '0x9B8D0e0765cDa999910ff31A2204080E1192EfC7',\n            multicallRouter: '0x086D8d30822086941729DF294f0e52E42EdC17F9',\n        },\n        {\n            id: ChainId.BTC_MUTINY,\n            rpc: 'https://mutinynet.com/api',\n            filterBlockOffset: 0,\n            stables: [],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 0,\n            metaRouter: '0x0000000000000000000000000000000000000000',\n            metaRouterGateway: '0x0000000000000000000000000000000000000000',\n            bridge: '0x0000000000000000000000000000000000000000',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x0000000000000000000000000000000000000000',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x0000000000000000000000000000000000000000',\n        },\n        {\n            id: ChainId.SEPOLIA_TESTNET,\n            rpc: 'https://sepolia.gateway.tenderly.co',\n            filterBlockOffset: 2000,\n            stables: [\n                {\n                    name: 'mutSymBtc',\n                    address: '0x41540e95B10383408cfE201974c88E6C3ef9323A',\n                    symbol: 'mutSymBtc',\n                    decimals: 8,\n                    chainId: ChainId.SEPOLIA_TESTNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                    },\n                },\n                {\n                    name: 't4SymBtc',\n                    address: '0x04cd23122a21f6c5F912FC7B9aBC508302899Dfb',\n                    symbol: 't4SymBtc',\n                    decimals: 8,\n                    chainId: ChainId.SEPOLIA_TESTNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                    },\n                },\n                {\n                    name: 'mSymBtc',\n                    address: '0xeD86914A9478a066d82b2bE3E5B99A38BAaE23ce',\n                    symbol: 'mSymBtc',\n                    decimals: 8,\n                    chainId: ChainId.SEPOLIA_TESTNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                    },\n                },\n                {\n                    name: 'TONCOIN',\n                    symbol: 'TONCOIN',\n                    address: '0x331f40cc27aC106e1d5242CE633dc6436626a6F8',\n                    chainId: ChainId.SEPOLIA_TESTNET,\n                    decimals: 9,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                    },\n                },\n            ],\n            router: '0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008',\n            dexFee: 30,\n            metaRouter: '0x8b03ad402ab3f1477bdfa64647718e5c537c0029',\n            metaRouterGateway: '0xc3b59B4a7961EF8FD24C9838731D1f598884F53d',\n            bridge: '0x7dc13B605508F91Fcd3bf7803C2b96B43941B4E8',\n            synthesis: '0x3e6235b91c6734821b4037E6459f861E465D4192',\n            portal: '0xBC4454Ee01EC5B6517333bD716f5135042ca1e38',\n            fabric: '0xb4ADe33Bba3512c8c0B489cbd03aAd3557EC49Ca',\n            multicallRouter: '0xF3Cfa393be621097669BcD2bD4923CEC347E1210',\n        },\n        {\n            id: ChainId.AVAX_TESTNET,\n            rpc: 'https://api.avax-test.network/ext/bc/C/rpc',\n            spareRpcs: [\n                'https://avalanche-fuji-c-chain-rpc.publicnode.com',\n                'https://ava-testnet.public.blastapi.io/ext/bc/C/rpc',\n            ],\n            filterBlockOffset: 2000,\n            stables: [\n                {\n                    name: 'Wrapped BTC',\n                    address: '0x9374Ea7A11c5B185A6631effF22c015E71c67581',\n                    symbol: 'WBTC',\n                    decimals: 8,\n                    chainId: ChainId.AVAX_TESTNET,\n                    icons: {\n                        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                    },\n                },\n                // {\n                //     name: 'Wrapped BTC',\n                //     address: '0xE34EBC0DE48F2947510cFf88a13F1c0B11FD1109',\n                //     symbol: 'WBTC(Mainnet)',\n                //     decimals: 8,\n                //     chainId: ChainId.AVAX_TESTNET,\n                //     icons: {\n                //         large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                //         small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',\n                //     },\n                // },\n                // {\n                //     name: 'WTON',\n                //     address: '0xCc9f8896896c6eF44f2504A6A29e6057aDBfF179',\n                //     symbol: 'WTON(Mainnet)',\n                //     decimals: 9,\n                //     chainId: ChainId.AVAX_TESTNET,\n                //     icons: {\n                //         large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                //         small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',\n                //     },\n                // },\n            ],\n            router: '0x0000000000000000000000000000000000000000',\n            dexFee: 30, // 0.03%\n            metaRouter: '0x0EB4Bb54E1551Db887ADdDAbD2562da13fE57D14',\n            metaRouterGateway: '0xbA2269b1E4b2eb62FdaA2c7D7bbaC052d4FD05cE',\n            bridge: '0xcC0DB081360Eb259bdf6911976c51cAF1B72e845',\n            synthesis: '0x0000000000000000000000000000000000000000',\n            portal: '0x78Bb4D4872121f162BB3e938F0d10cf34E999648',\n            fabric: '0x0000000000000000000000000000000000000000',\n            multicallRouter: '0x8C9D3CE1D59d73259018dBC9859F6eBe62Bbf862',\n        },\n    ],\n}\n","import { ChainId } from '../../constants'\nimport { Config } from '../types'\n\nexport const config: Config = {\n    advisor: {\n        url: 'https://api.dev.symbiosis.finance/calculations',\n    },\n    limits: [],\n    omniPools: [\n        {\n            chainId: 97,\n            address: '0x789001A80a8EdBBEE07876b0dF58c3eAdEE89877',\n            oracle: '0x2cD94CB0F4cBC4a51c3e9c4b88d03B982bE24608',\n            generalPurpose: true,\n            coinGeckoId: 'usd-coin',\n        },\n    ],\n    revertableAddress: {\n        [ChainId.TRON_TESTNET]: '0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5',\n        default: '0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5',\n    },\n    refundAddress: '0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5',\n    btcConfigs: [],\n    chains: [\n        {\n            id: 97,\n            rpc: 'https://bsc-testnet-rpc.publicnode.com',\n            filterBlockOffset: 2000,\n            stables: [],\n            router: '0xD99D1c33F9fC3444f8101754aBC46c52416550D1',\n            dexFee: 30,\n            metaRouter: '0x87BFB71bBd221a57826489DD247EB103a0cc7482',\n            metaRouterGateway: '0x27022ad33b09f49BEE2dCC482F4604FD2560A862',\n            bridge: '0x9708C5b89F9B166c080B8F5BBcDEC27D5Fa92eE8',\n            synthesis: '0xD67940D8414E09F84eBEa85cd021dbc011A94Bc8',\n            portal: '0x0000000000000000000000000000000000000000',\n            fabric: '0x167C52B035D7cfA2D8199A2Af450B3493C51576C',\n            multicallRouter: '0xF77c766DEB09f424228Be0b679E3F8326b9d7741',\n        },\n    ],\n}\n","{\n    \"omniPools\": [\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0xC3255E317481B95A3e61844c274dE8BAF8eDF397\",\n            \"oracle\": \"0xbBFb7cb70f84fb6fE1Cb13e42A0B71EFDe769428\",\n            \"generalPurpose\": true,\n            \"coinGeckoId\": \"usd-coin\",\n            \"id\": 0,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 131 },\n                { \"index\": 1, \"tokenId\": 141 },\n                { \"index\": 2, \"tokenId\": 151 },\n                { \"index\": 3, \"tokenId\": 152 },\n                { \"index\": 4, \"tokenId\": 157 },\n                { \"index\": 5, \"tokenId\": 140 },\n                { \"index\": 6, \"tokenId\": 158 },\n                { \"index\": 7, \"tokenId\": 165 },\n                { \"index\": 8, \"tokenId\": 172 },\n                { \"index\": 9, \"tokenId\": 174 },\n                { \"index\": 10, \"tokenId\": 176 },\n                { \"index\": 11, \"tokenId\": 164 },\n                { \"index\": 12, \"tokenId\": 150 },\n                { \"index\": 13, \"tokenId\": 182 },\n                { \"index\": 14, \"tokenId\": 156 },\n                { \"index\": 15, \"tokenId\": 187 },\n                { \"index\": 16, \"tokenId\": 180 },\n                { \"index\": 17, \"tokenId\": 155 },\n                { \"index\": 18, \"tokenId\": 189 },\n                { \"index\": 19, \"tokenId\": 191 },\n                { \"index\": 20, \"tokenId\": 194 },\n                { \"index\": 21, \"tokenId\": 177 },\n                { \"index\": 22, \"tokenId\": 200 },\n                { \"index\": 23, \"tokenId\": 197 },\n                { \"index\": 24, \"tokenId\": 159 },\n                { \"index\": 25, \"tokenId\": 208 },\n                { \"index\": 26, \"tokenId\": 209 },\n                { \"index\": 27, \"tokenId\": 211 },\n                { \"index\": 28, \"tokenId\": 210 },\n                { \"index\": 29, \"tokenId\": 214 },\n                { \"index\": 30, \"tokenId\": 217 },\n                { \"index\": 31, \"tokenId\": 222 },\n                { \"index\": 32, \"tokenId\": 223 },\n                { \"index\": 33, \"tokenId\": 227 },\n                { \"index\": 34, \"tokenId\": 201 },\n                { \"index\": 35, \"tokenId\": 199 },\n                { \"index\": 36, \"tokenId\": 239 },\n                { \"index\": 37, \"tokenId\": 196 },\n                { \"index\": 38, \"tokenId\": 241 },\n                { \"index\": 39, \"tokenId\": 235 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0x2d877Fe148dBCB056Bf71ED5232E8d580195c0f1\",\n            \"oracle\": \"0x61ab82B6Cfe17E8b242E024DE7Fc936c10e35327\",\n            \"generalPurpose\": true,\n            \"coinGeckoId\": \"weth\",\n            \"id\": 1,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 160 },\n                { \"index\": 1, \"tokenId\": 178 },\n                { \"index\": 2, \"tokenId\": 166 },\n                { \"index\": 3, \"tokenId\": 153 },\n                { \"index\": 4, \"tokenId\": 142 },\n                { \"index\": 5, \"tokenId\": 173 },\n                { \"index\": 6, \"tokenId\": 175 },\n                { \"index\": 7, \"tokenId\": 133 },\n                { \"index\": 8, \"tokenId\": 179 },\n                { \"index\": 9, \"tokenId\": 183 },\n                { \"index\": 10, \"tokenId\": 186 },\n                { \"index\": 11, \"tokenId\": 190 },\n                { \"index\": 12, \"tokenId\": 193 },\n                { \"index\": 13, \"tokenId\": 195 },\n                { \"index\": 14, \"tokenId\": 198 },\n                { \"index\": 15, \"tokenId\": 203 },\n                { \"index\": 16, \"tokenId\": 205 },\n                { \"index\": 17, \"tokenId\": 207 },\n                { \"index\": 18, \"tokenId\": 212 },\n                { \"index\": 19, \"tokenId\": 225 },\n                { \"index\": 20, \"tokenId\": 226 },\n                { \"index\": 21, \"tokenId\": 228 },\n                { \"index\": 22, \"tokenId\": 229 },\n                { \"index\": 23, \"tokenId\": 230 },\n                { \"index\": 24, \"tokenId\": 231 },\n                { \"index\": 25, \"tokenId\": 232 },\n                { \"index\": 26, \"tokenId\": 234 },\n                { \"index\": 27, \"tokenId\": 237 },\n                { \"index\": 28, \"tokenId\": 238 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0xBf084Ee3E5C73129167167Bd5DB9FE8513d8F7e0\",\n            \"oracle\": \"0x597282d7F75Cf34450395D92a087C71F597024f5\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"wrapped-bitcoin\",\n            \"id\": 2,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 134 },\n                { \"index\": 1, \"tokenId\": 143 },\n                { \"index\": 2, \"tokenId\": 161 },\n                { \"index\": 3, \"tokenId\": 202 },\n                { \"index\": 4, \"tokenId\": 204 },\n                { \"index\": 5, \"tokenId\": 206 },\n                { \"index\": 6, \"tokenId\": 163 },\n                { \"index\": 7, \"tokenId\": 216 },\n                { \"index\": 8, \"tokenId\": 224 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0xAF8Ba1498e1EddD602Aab9cDe4BC6A3a83400165\",\n            \"oracle\": \"0x422A0A054Eb5a7424d9E3042862546a3F04e3596\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"milady-meme-coin\",\n            \"id\": 3,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 135 },\n                { \"index\": 1, \"tokenId\": 168 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0x92114294E42A96C9eF3163DA18Ee7eFdbA6cc661\",\n            \"oracle\": \"0xd29bfF100F5599522D94E7aEDf2d6B65357c7516\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"frax\",\n            \"id\": 4,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 136 },\n                { \"index\": 1, \"tokenId\": 154 },\n                { \"index\": 2, \"tokenId\": 169 },\n                { \"index\": 3, \"tokenId\": 213 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0x20C54Cc697329333fe00DeD49C7dCA8c83dcE65b\",\n            \"oracle\": \"0xDC636B062AB02C51b79cFaA6C5De7B7fFeAc2717\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"g-token\",\n            \"id\": 5,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 137 },\n                { \"index\": 1, \"tokenId\": 145 },\n                { \"index\": 2, \"tokenId\": 215 },\n                { \"index\": 3, \"tokenId\": 188 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0x7E60A78518E7c9267ae0795E9914F19Cd7CdA168\",\n            \"oracle\": \"0xAa444c22297b0dBd97bBf316dC0b7C64b33aa64C\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"wrapped-ton\",\n            \"id\": 6,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 138 },\n                { \"index\": 1, \"tokenId\": 146 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0x53a9dbeA6013B22A8AF3Ae8AAac8Fd31759aD287\",\n            \"oracle\": \"0x9C15664C49065b8E20EcE570f0818a68b71A00DA\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"catizen\",\n            \"id\": 7,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 219 },\n                { \"index\": 1, \"tokenId\": 184 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0xcd5a0263DD8e29D9727865dcaD0f9D56C6e1Db93\",\n            \"oracle\": \"0x8d448bDb0c7a5fFf6A4ddf4b815bD517727E0aE5\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"uxlink\",\n            \"id\": 8,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 218 },\n                { \"index\": 1, \"tokenId\": 170 },\n                { \"index\": 2, \"tokenId\": 185 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0xb2EF74C1120C662984f907ea08096eDAAD94D54E\",\n            \"oracle\": \"0x4E73aF5663c997A796FF2cc1AD8C5d406541b4F2\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"pineye\",\n            \"id\": 9,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 147 },\n                { \"index\": 1, \"tokenId\": 220 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0x095B362957B3E3638AE1eb7A957f392cD3Dc3c7C\",\n            \"oracle\": \"0xCCc50a096E3078508FCb14Ac0B4DF3330C32BD96\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"binancecoin\",\n            \"id\": 10,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 148 },\n                { \"index\": 1, \"tokenId\": 233 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0x3E6A3EbbC9D88ACC192221797ad90BF72d391778\",\n            \"oracle\": \"0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"symbiosis-finance\",\n            \"id\": 11,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 132 },\n                { \"index\": 1, \"tokenId\": 167 },\n                { \"index\": 2, \"tokenId\": 144 },\n                { \"index\": 3, \"tokenId\": 162 },\n                { \"index\": 4, \"tokenId\": 181 },\n                { \"index\": 5, \"tokenId\": 192 },\n                { \"index\": 6, \"tokenId\": 31 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0x0b01139C59D6bc2C8323FDbb4824e4aa5Ff4DE7C\",\n            \"oracle\": \"0x258EF63a81bade0c31c7C4ae75d2CD5332034bEE\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"apecoin\",\n            \"id\": 12,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 139 },\n                { \"index\": 1, \"tokenId\": 171 },\n                { \"index\": 2, \"tokenId\": 240 },\n                { \"index\": 3, \"tokenId\": 236 }\n            ]\n        },\n        {\n            \"chainId\": 13863860,\n            \"address\": \"0xd40750043100501ea75cAc2386f23Bcf7554cB9A\",\n            \"oracle\": \"0x3930C108ae8e85aAdc0d833D2096b8778eaf4432\",\n            \"generalPurpose\": false,\n            \"coinGeckoId\": \"evaa-protocol\",\n            \"id\": 13,\n            \"tokens\": [\n                { \"index\": 0, \"tokenId\": 149 },\n                { \"index\": 1, \"tokenId\": 221 }\n            ]\n        }\n    ],\n    \"tokens\": [\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n            \"id\": 0\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"SIS\",\n            \"name\": \"Symbiosis\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xd38BB40815d2B0c2d2c866e0c72c5728ffC76dd9\",\n            \"id\": 1\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n            \"id\": 2\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDT\",\n            \"name\": \"Tether USD\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n            \"id\": 3\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"WBTC\",\n            \"name\": \"Wrapped BTC\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n            \"id\": 4\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"LADYS\",\n            \"name\": \"Milady Meme Coin\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x12970E6868f88f6557B76120662c1B3E50A646bf\",\n            \"id\": 5\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"pufETH\",\n            \"name\": \"pufETH\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xD9A442856C234a39a81a089C06451EBAa4306a72\",\n            \"id\": 6\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"FRAX\",\n            \"name\": \"Frax\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x853d955aCEf822Db058eb8505911ED77F175b99e\",\n            \"id\": 7\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"G\",\n            \"name\": \"Gravity\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649\",\n            \"id\": 8\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"WTON\",\n            \"name\": \"Wrapped TON\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0x582d872A1B094FC48F5DE31D3B73F2D9bE47def1\",\n            \"id\": 9\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"APE\",\n            \"name\": \"ApeCoin\",\n            \"chainId\": 1,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4d224452801ACEd8B2F0aebE155379bb5D594381\",\n            \"id\": 10\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\",\n            \"id\": 11\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"BUSD\",\n            \"name\": \"BUSD Token\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\",\n            \"id\": 12\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"ETH\",\n            \"name\": \"Ethereum Token\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\",\n            \"id\": 13\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"BTCB\",\n            \"name\": \"Binance-Peg BTCB Token\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/4023.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/4023.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c\",\n            \"id\": 14\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"SIS\",\n            \"name\": \"Symbiosis\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xF98b660AdF2ed7d9d9D9dAACC2fb0CAce4F21835\",\n            \"id\": 15\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"G\",\n            \"name\": \"Gravity\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649\",\n            \"id\": 16\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"WTON\",\n            \"name\": \"Wrapped TON\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0x76A797A59Ba2C17726896976B7B3747BfD1d220f\",\n            \"id\": 17\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"GPTW\",\n            \"name\": \"GPT Wars\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893\",\n                \"small\": \"https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xB3F4D70C6a18cC0F2D1205dbF3B21cB73e1B0592\",\n            \"id\": 18\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"syBTC\",\n            \"name\": \"Symbiosis BTC\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200\",\n                \"small\": \"https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xA67c48F86Fc6d0176Dca38883CA8153C76a532c7\",\n            \"id\": 19\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"PINEYE\",\n            \"name\": \"PinEye\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4b3a2187648902082db0a44e8235d57F3f23DD10\",\n            \"id\": 20\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WBNB\",\n            \"name\": \"Wrapped BNB\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n            \"id\": 21\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"EVAA\",\n            \"name\": \"EVAA\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xaa036928c9c0Df07d525B55ea8EE690Bb5a628C1\",\n            \"id\": 22\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 43114,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n            \"id\": 23\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.e\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 43114,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664\",\n            \"id\": 24\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.e\",\n            \"name\": \"USD Coin (PoS) (USDC.e)\",\n            \"chainId\": 137,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n            \"id\": 25\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 137,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\n            \"id\": 26\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"FRAX\",\n            \"name\": \"Frax\",\n            \"chainId\": 137,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89\",\n            \"id\": 27\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"syUSDC\",\n            \"chainId\": 40,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xe6E5f3d264117E030C21920356641DbD5B3d660c\",\n            \"id\": 28\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDt\",\n            \"name\": \"Tether USDt\",\n            \"chainId\": 2222,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x919C1c267BC06a7039e03fcc2eF738525769109c\",\n            \"id\": 29\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 288,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc\",\n            \"id\": 30\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WSIS\",\n            \"name\": \"Wrapped SIS\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xd8db4fb1fEf63045A443202d506Bcf30ef404160\",\n            \"id\": 31\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.e\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 324,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4\",\n            \"id\": 32\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 324,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0x1d17CBcF0D6D143135aE902365D2E5e2A16538D4\",\n            \"id\": 33\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 324,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91\",\n            \"id\": 34\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"WBTC\",\n            \"name\": \"Wrapped BTC\",\n            \"chainId\": 324,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0xBBeB516fb02a01611cBBE0453Fe3c580D7281011\",\n            \"id\": 35\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"SIS\",\n            \"name\": \"Symbiosis\",\n            \"chainId\": 324,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xdd9f72afED3631a6C85b5369D84875e6c42f1827\",\n            \"id\": 36\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"syBTC\",\n            \"name\": \"Symbiosis BTC\",\n            \"chainId\": 324,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200\",\n                \"small\": \"https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0xED0c95EBe5a3E687cB2224687024FeC6518E683e\",\n            \"id\": 37\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 42161,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xaf88d065e77c8cC2239327C5EDb3A432268e5831\",\n            \"id\": 38\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.e\",\n            \"name\": \"USD Coin (Arb1)\",\n            \"chainId\": 42161,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8\",\n            \"id\": 39\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 42161,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\",\n            \"id\": 40\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"SIS\",\n            \"name\": \"Symbiosis\",\n            \"chainId\": 42161,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x9E758B8a98a42d612b3D38B66a22074DC03D7370\",\n            \"id\": 41\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"LADYS\",\n            \"name\": \"Milady Meme Coin\",\n            \"chainId\": 42161,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x3b60FF35D3f7F62d636b067dD0dC0dFdAd670E4E\",\n            \"id\": 42\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"FRAX\",\n            \"name\": \"Frax\",\n            \"chainId\": 42161,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F\",\n            \"id\": 43\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"UXLINK\",\n            \"name\": \"UXLINK Token\",\n            \"chainId\": 42161,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x1A6B3A62391ECcaaa992ade44cd4AFe6bEC8CfF1\",\n            \"id\": 44\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"APE\",\n            \"name\": \"ApeCoin\",\n            \"chainId\": 42161,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x7f9FBf9bDd3F4105C478b996B648FE6e828a1e98\",\n            \"id\": 45\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.e\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 10,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x7F5c764cBc14f9669B88837ca1490cCa17c31607\",\n            \"id\": 46\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 10,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4200000000000000000000000000000000000006\",\n            \"id\": 47\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 42170,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x750ba8b76187092B0D1E87E28daaf484d1b5273b\",\n            \"id\": 48\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 42170,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x722E8BdD2ce80A4422E880164f2079488e115365\",\n            \"id\": 49\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 1101,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035\",\n            \"id\": 50\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.e\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 1101,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0x37eAA0eF3549a5Bb7D431be78a3D99BD360d19e5\",\n            \"id\": 51\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 1101,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9\",\n            \"id\": 52\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 59144,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f\",\n            \"id\": 53\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 59144,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x176211869cA2b568f2A7D4EE941E073a821EE1ff\",\n            \"id\": 54\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"SIS\",\n            \"name\": \"Symbiosis\",\n            \"chainId\": 59144,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x6EF95B6f3b0F39508e3E04054Be96D5eE39eDE0d\",\n            \"id\": 55\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 5000,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x09Bc4E0D864854c6aFB6eB9A9cdF58aC190D0dF9\",\n            \"id\": 56\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 5000,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\",\n            \"id\": 57\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"CATI\",\n            \"name\": \"Catizen\",\n            \"chainId\": 5000,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x1Bdd8878252DaddD3Af2ba30628813271294eDc0\",\n            \"id\": 58\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"UXLINK\",\n            \"name\": \"UXLINK Token\",\n            \"chainId\": 5000,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x482deB2F7B9608a80eA91E71F06380E9891501C6\",\n            \"id\": 59\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 8453,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4200000000000000000000000000000000000006\",\n            \"id\": 60\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDbC\",\n            \"name\": \"USD Base Coin\",\n            \"chainId\": 8453,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA\",\n            \"id\": 61\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"G\",\n            \"name\": \"Gravity\",\n            \"chainId\": 8453,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649\",\n            \"id\": 62\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDT\",\n            \"name\": \"Tether USDt\",\n            \"chainId\": 728126428,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xa614f803b6fd780986a42c78ec9c7f77e6ded13c\",\n            \"id\": 63\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 534352,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x5300000000000000000000000000000000000004\",\n            \"id\": 64\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 534352,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4\",\n            \"id\": 65\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"SIS\",\n            \"name\": \"Symbiosis\",\n            \"chainId\": 534352,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x1467b62A6AE5CdcB10A6a8173cfe187DD2C5a136\",\n            \"id\": 66\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"pufETH\",\n            \"name\": \"pufETH\",\n            \"chainId\": 534352,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xc4d46E8402F476F269c379677C99F18E22Ea030e\",\n            \"id\": 67\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 169,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x0Dc808adcE2099A9F62AA87D9670745AbA741746\",\n            \"id\": 68\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 169,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xb73603C5d87fA094B7314C74ACE2e64D165016fb\",\n            \"id\": 69\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"pufETH\",\n            \"name\": \"pufETH\",\n            \"chainId\": 169,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xA53E005Cecd3D7C89A4AE814617cC14828b6527E\",\n            \"id\": 70\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 1088,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x420000000000000000000000000000000000000A\",\n            \"id\": 71\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDT\",\n            \"name\": \"Tether USD\",\n            \"chainId\": 5165,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xDeF886C55a79830C47108eeb9c37e78a49684e41\",\n            \"id\": 72\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 5165,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0x4237e0A5b55233D5B6D6d1D9BF421723954130D8\",\n            \"id\": 73\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 34443,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4200000000000000000000000000000000000006\",\n            \"id\": 74\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USD₮0\",\n            \"name\": \"USD₮0\",\n            \"chainId\": 30,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/825.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x779Ded0c9e1022225f8E0630b35a9b54bE713736\",\n            \"id\": 75\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"rUSDT\",\n            \"name\": \"Tether USD\",\n            \"chainId\": 30,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/825.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0xef213441A85dF4d7ACbDaE0Cf78004e1E486bB96\",\n            \"id\": 76\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.e\",\n            \"name\": \"Bridged USDC (Stargate)\",\n            \"chainId\": 30,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0x74c9f2b00581F1B11AA7ff05aa9F608B7389De67\",\n            \"id\": 77\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WRBTC\",\n            \"name\": \"Wrapped RBTC\",\n            \"chainId\": 30,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32702.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32702.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x542fDA317318eBF1d3DEAf76E0b632741A7e677d\",\n            \"id\": 78\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"syBTC\",\n            \"name\": \"Symbiosis BTC\",\n            \"chainId\": 30,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200\",\n                \"small\": \"https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xB52E582263c1d0189b3cc1402c1B7205b7F2E9Ba\",\n            \"id\": 79\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped ETH\",\n            \"chainId\": 81457,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4300000000000000000000000000000000000004\",\n            \"id\": 80\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WBTC\",\n            \"name\": \"Wrapped BTC\",\n            \"chainId\": 4200,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA\",\n            \"id\": 81\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped ETH\",\n            \"chainId\": 810180,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x8280a4e7D5B3B658ec4580d3Bc30f5e50454F169\",\n            \"id\": 82\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"pufETH\",\n            \"name\": \"pufETH\",\n            \"chainId\": 810180,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x1B49eCf1A8323Db4abf48b2F5EFaA33F7DdAB3FC\",\n            \"id\": 83\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"coreBTC\",\n            \"name\": \"Core Wrapped BTC Token\",\n            \"chainId\": 1116,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x8034aB88C3512246Bf7894f57C834DdDBd1De01F\",\n            \"id\": 84\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 167000,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xA51894664A773981C6C112C43ce576f315d5b1B6\",\n            \"id\": 85\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.n\",\n            \"name\": \"USD Coin via Noble\",\n            \"chainId\": 1329,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x3894085Ef7Ff0f0aeDf52E2A2704928d1Ec074F1\",\n            \"id\": 86\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDT\",\n            \"name\": \"USDT\",\n            \"chainId\": 1329,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/825.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0xB75D0B03c06A926e488e2659DF1A861F860bD3d1\",\n            \"id\": 87\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"GPTW\",\n            \"name\": \"GPT Wars\",\n            \"chainId\": 1329,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893\",\n                \"small\": \"https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xcB0DdC112EF317271266c83D7179Bf9186b9C658\",\n            \"id\": 88\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"pufETH\",\n            \"name\": \"pufETH\",\n            \"chainId\": 7000,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x1e4bF3CaBD7707089138dD5a545B077413FA83Fc\",\n            \"id\": 89\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.ETH\",\n            \"name\": \"ZetaChain ZRC20 USDC on ETH\",\n            \"chainId\": 7000,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x0cbe0dF132a6c6B4a2974Fa1b7Fb953CF0Cc798a\",\n            \"id\": 90\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 25,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xc21223249CA28397B4B6541dfFaEcC539BfF0c59\",\n            \"id\": 91\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped ETH\",\n            \"chainId\": 252,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xA8a59D73388D0c4344a7b0Ba287ddb654227c38a\",\n            \"id\": 92\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"frxUSD\",\n            \"name\": \"Frax USD\",\n            \"chainId\": 252,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xFc00000000000000000000000000000000000001\",\n            \"id\": 93\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.e\",\n            \"name\": \"Bridged USDC (Stargate)\",\n            \"chainId\": 1625,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xFbDa5F676cB37624f28265A144A48B0d6e87d3b6\",\n            \"id\": 94\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"wG\",\n            \"name\": \"Gravity\",\n            \"chainId\": 1625,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xBB859E225ac8Fb6BE1C7e38D87b767e95Fef0EbD\",\n            \"id\": 95\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WBTC\",\n            \"name\": \"Wrapped BTC\",\n            \"chainId\": 223,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4200000000000000000000000000000000000006\",\n            \"id\": 96\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDT\",\n            \"name\": \"USDt\",\n            \"chainId\": 85918,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\" },\n            \"address\": \"0x9328Eb759596C38a25f59028B146Fecdc3621Dfe\",\n            \"id\": 97\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"UXLINK\",\n            \"name\": \"UXLINK Token\",\n            \"chainId\": 85918,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\"\n            },\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQBh9XACT0B60U8Q48VnjyqCxzxpM4oA0c8rqKt4h70yk1V5\" },\n            \"address\": \"0x678F2a82c73C69338a00d1Cf2BA8aB7887BD3293\",\n            \"id\": 98\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"CATI\",\n            \"name\": \"Catizen\",\n            \"chainId\": 85918,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png\"\n            },\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQD-cvR0Nz6XAyRBvbhz-abTrRC6sI5tvHvvpeQraV9UAAD7\" },\n            \"address\": \"0x73f9a6D3AD10BaB08E6dbC7bEfa5e42b695F5400\",\n            \"id\": 99\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"PINEYE\",\n            \"name\": \"PinEye\",\n            \"chainId\": 85918,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png\"\n            },\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQDY2MzMJY_9OWm9UyQNLTU2Qs_8BRomlMUbbADnh-tFkLaU\" },\n            \"address\": \"0x0d2d353642cFFC051A2694C51B6C00e787EB4590\",\n            \"id\": 100\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"EVAA\",\n            \"name\": \"EVAA\",\n            \"chainId\": 85918,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png\"\n            },\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQBKMfjX_a_dsOLm-juxyVZytFP7_KKnzGv6J01kGc72gVBp\" },\n            \"address\": \"0xB1c95672B453fBFCA2A7cc6BFA274D6419cEf681\",\n            \"id\": 101\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 388,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xaa5b845F8C9c047779bEDf64829601d8B264076c\",\n            \"id\": 102\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 2818,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xe34c91815d7fc18A9e2148bcD4241d0a5848b693\",\n            \"id\": 103\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WGBTC\",\n            \"name\": \"Wrapped Goat BTC\",\n            \"chainId\": 2345,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xbC10000000000000000000000000000000000000\",\n            \"id\": 104\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ethereum\",\n            \"chainId\": 146,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x50c42dEAcD8Fc9773493ED674b675bE577f2634b\",\n            \"id\": 105\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ethereum\",\n            \"chainId\": 2741,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x3439153EB7AF838Ad19d56E1571FBD09333C2809\",\n            \"id\": 106\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC.e\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 100,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x2a22f9c3b484c3629090FeED35F17Ff8F88f76F0\",\n            \"id\": 107\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ethereum\",\n            \"chainId\": 100,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1\",\n            \"id\": 108\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped ETH\",\n            \"chainId\": 80094,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590\",\n            \"id\": 109\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped ETH\",\n            \"chainId\": 130,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4200000000000000000000000000000000000006\",\n            \"id\": 110\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped ETH\",\n            \"chainId\": 1868,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4200000000000000000000000000000000000006\",\n            \"id\": 111\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped ETH\",\n            \"chainId\": 204,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xE7798f023fC62146e8Aa1b36Da45fb70855a77Ea\",\n            \"id\": 112\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WBNB\",\n            \"name\": \"Wrapped BNB\",\n            \"chainId\": 204,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x4200000000000000000000000000000000000006\",\n            \"id\": 113\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"UETH\",\n            \"name\": \"Unit ETH\",\n            \"chainId\": 999,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xBe6727B535545C67d5cAa73dEa54865B92CF7907\",\n            \"id\": 114\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 999,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xb88339CB7199b77E23DB6E890353E22632Ba630f\",\n            \"id\": 115\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"APE\",\n            \"name\": \"ApeCoin\",\n            \"chainId\": 999,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xab11329560Fa9C9c860Bb21A9342215a1265BBB0\",\n            \"id\": 116\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped ETH\",\n            \"chainId\": 747474,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0x4200000000000000000000000000000000000006\",\n            \"id\": 117\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped ETH\",\n            \"chainId\": 747474,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xEE7D8BCFb72bC1880D0Cf19822eB0A2e6577aB62\",\n            \"id\": 118\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 747474,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x203A662b0BD271A6ed5a60EdFbd04bFce608FD36\",\n            \"id\": 119\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WAPE\",\n            \"name\": \"Wrapped APE\",\n            \"chainId\": 33139,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x48b62137EdfA95a428D35C09E44256a739F6B557\",\n            \"id\": 120\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDT0\",\n            \"name\": \"Tether USD\",\n            \"chainId\": 9745,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xB8CE59FC3717ada4C02eaDF9682A9e934F625ebb\",\n            \"id\": 121\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"BTC\",\n            \"name\": \"Bitcoin\",\n            \"chainId\": 3652501241,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"deprecated\": true,\n            \"address\": \"0xc102C66D4a1e1865Ee962084626Cf4c27D5BFc74\",\n            \"id\": 122\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"BTC\",\n            \"name\": \"Bitcoin\",\n            \"chainId\": 3652501241,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x1DfC1e32d75b3f4Cb2F2B1BCEcAD984E99eeba05\",\n            \"id\": 123\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"BTC\",\n            \"name\": \"Bitcoin\",\n            \"chainId\": 3652501241,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x334524A0ADB21425afCF77aC40580D68e30E51d8\",\n            \"id\": 124\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"SIS\",\n            \"name\": \"Symbiosis\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0xF98b660AdF2ed7d9d9D9dAACC2fb0CAce4F21835\",\n            \"id\": 125,\n            \"originalId\": 1\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"GPTW\",\n            \"name\": \"GPT Wars\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893\",\n                \"small\": \"https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893\"\n            },\n            \"chainFromId\": 1329,\n            \"deprecated\": false,\n            \"address\": \"0xB3F4D70C6a18cC0F2D1205dbF3B21cB73e1B0592\",\n            \"id\": 126,\n            \"originalId\": 88\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"syBTC\",\n            \"name\": \"syBTC\",\n            \"chainId\": 56,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"chainFromId\": 3652501241,\n            \"deprecated\": false,\n            \"address\": \"0xA67c48F86Fc6d0176Dca38883CA8153C76a532c7\",\n            \"id\": 127,\n            \"originalId\": 123\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"syUSDC\",\n            \"chainId\": 40,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0xe6E5f3d264117E030C21920356641DbD5B3d660c\",\n            \"id\": 128,\n            \"originalId\": 0\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"syWETH\",\n            \"chainId\": 40,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0x63d71E79AdF0886c989A23b04a0E86F1489b6BC3\",\n            \"id\": 129,\n            \"originalId\": 2\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDT\",\n            \"name\": \"syUSDT\",\n            \"chainId\": 40,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0x7bD3ffe9f0C9CF08FD60e102FEa455A6EA580276\",\n            \"id\": 130,\n            \"originalId\": 3\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin from Ethereum\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0xFAEb87361cB1925aFdd1967BD896F0c8FeacB890\",\n            \"id\": 131,\n            \"originalId\": 0\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sSIS\",\n            \"name\": \"Synthetic SIS token from Ethereum\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0xcd7C056b39DdFB568E451923ABEDb9B6a7Aeb885\",\n            \"id\": 132,\n            \"originalId\": 1\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Ethereum)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0x7477490b64b64d9d014D4003AfB053cBf62689e1\",\n            \"id\": 133,\n            \"originalId\": 2\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"sWBTC\",\n            \"name\": \"Synthetic WBTC From Ethereum\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0xDBe47ce2c0d1Fd3793D29ac6cCb928C306E10a80\",\n            \"id\": 134,\n            \"originalId\": 4\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sLADYS\",\n            \"name\": \"Synthetic Milady Coin (Ethereum)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0x7c53c182534f585B48BC7759e94E2606C87A5703\",\n            \"id\": 135,\n            \"originalId\": 5\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sFRAX\",\n            \"name\": \"Synthetic Frax (Ethereum)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0xb7F32D4B660B040d4407f3d3cccc3Abf44d5a087\",\n            \"id\": 136,\n            \"originalId\": 7\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sG\",\n            \"name\": \"Synthetic G (Ethereum)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0x5e92d4082027aCE6202049D3c1C2607DE137F942\",\n            \"id\": 137,\n            \"originalId\": 8\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"sWTON\",\n            \"name\": \"Synthetic WTON From Ethereum\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": true,\n            \"address\": \"0x31EE88E4d61C5452893fCEF729dFb026a9e9B897\",\n            \"id\": 138,\n            \"originalId\": 9\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sAPE\",\n            \"name\": \"Synthetic APE (Ethereum)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0x844E02f164Ac1AB59493867a4e07BbB7b2C78f97\",\n            \"id\": 139,\n            \"originalId\": 10\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic Binance-Peg USD Coin from BSC\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": false,\n            \"address\": \"0x076Cb7BEee7D1507DE7B964c29cbC849acaD5022\",\n            \"id\": 140,\n            \"originalId\": 11\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sBUSD\",\n            \"name\": \"Synthetic Binance-Peg BUSD Token from BSC\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": true,\n            \"address\": \"0x33BB09Ec59AAd4CC7F16892E7dD4892EAB1925F4\",\n            \"id\": 141,\n            \"originalId\": 12\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Binance)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": false,\n            \"address\": \"0x3c4454B723C0144f9E30eF7cc2F419cc88051D45\",\n            \"id\": 142,\n            \"originalId\": 13\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWBTC\",\n            \"name\": \"Synthetic WBTC From BSC\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/4023.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/4023.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": false,\n            \"address\": \"0x62107978F7942650e1d78598c32228D1f4885a30\",\n            \"id\": 143,\n            \"originalId\": 14\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sSIS\",\n            \"name\": \"Synthetic SIS token from Binance\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": false,\n            \"address\": \"0xd747F3c877Eb2736c06DD9A852480058A24e01Ce\",\n            \"id\": 144,\n            \"originalId\": 15\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sG\",\n            \"name\": \"Synthetic G (BNB)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": false,\n            \"address\": \"0xe83427C242897B98441aCE3DFab8A549039B9cba\",\n            \"id\": 145,\n            \"originalId\": 16\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"sWTON\",\n            \"name\": \"Synthetic WTON From BNB\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": true,\n            \"address\": \"0x33A269e3F826af65c644Bf77c00556143F737F7a\",\n            \"id\": 146,\n            \"originalId\": 17\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sPINEYE\",\n            \"name\": \"Synthetic PINEYE (BSC)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": false,\n            \"address\": \"0xF11cBDEf4b47B264cB372E5e80eD44ea37f7e382\",\n            \"id\": 147,\n            \"originalId\": 20\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWBNB\",\n            \"name\": \"Synthetic WBNB (BNB)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": false,\n            \"address\": \"0x1b93c5FFd926F84F48F31d19AB88E6FD0B5acF19\",\n            \"id\": 148,\n            \"originalId\": 21\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sEVAA\",\n            \"name\": \"Synthetic EVAA From BSC\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": false,\n            \"address\": \"0x6259bd4433f5461D4CCAbf3067DF4e7e7914a89d\",\n            \"id\": 149,\n            \"originalId\": 22\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin From Avalanche\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 43114,\n            \"deprecated\": false,\n            \"address\": \"0xD67c69aBAE457729fE2c03649A7F83a2DD8eb885\",\n            \"id\": 150,\n            \"originalId\": 23\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC.e\",\n            \"name\": \"Synthetic USD Coin from Avalanche\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 43114,\n            \"deprecated\": true,\n            \"address\": \"0x3F63925f40d29AC80302D7D359254f9451D62C52\",\n            \"id\": 151,\n            \"originalId\": 24\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin from Polygon\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 137,\n            \"deprecated\": false,\n            \"address\": \"0xAf11A323741fc0670a6De095794f61eE9c52B622\",\n            \"id\": 152,\n            \"originalId\": 25\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Arbitrum Nova)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 137,\n            \"deprecated\": false,\n            \"address\": \"0xb1691B61e8369B79e4d9fd6deC55AC31E34009ba\",\n            \"id\": 153,\n            \"originalId\": 26\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sFRAX\",\n            \"name\": \"Synthetic Frax (Polygon)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png\"\n            },\n            \"chainFromId\": 137,\n            \"deprecated\": false,\n            \"address\": \"0x9049d84152F59D72b67bAD30638eDd80D623a997\",\n            \"id\": 154,\n            \"originalId\": 27\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic syUSDC From Telos\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 40,\n            \"deprecated\": false,\n            \"address\": \"0x66281EE570B0E59715eEb198C0921b0728459d09\",\n            \"id\": 155,\n            \"originalId\": 28\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDT\",\n            \"name\": \"Synthetic USDT From Kava\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"chainFromId\": 2222,\n            \"deprecated\": false,\n            \"address\": \"0xF08F72715f85b768C8d77A0D7f09F74238F7933A\",\n            \"id\": 156,\n            \"originalId\": 29\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin from Boba ETH\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 288,\n            \"deprecated\": false,\n            \"address\": \"0xc12670ddC913eC6d551afc8cDf186B9E4eBAa832\",\n            \"id\": 157,\n            \"originalId\": 30\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin From ZkSync Era Mainnet\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 324,\n            \"deprecated\": false,\n            \"address\": \"0x1Ac827DBaA75b2Ac5c32b746748B73a0f7B0aF7E\",\n            \"id\": 158,\n            \"originalId\": 32\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDC token from zkSync\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 324,\n            \"deprecated\": true,\n            \"address\": \"0x2C4e1C5B08A6d154Bd5F0e9E0De323b5570Fb501\",\n            \"id\": 159,\n            \"originalId\": 33\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (zkSync Era)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 324,\n            \"deprecated\": false,\n            \"address\": \"0xce5CaFcf82fDb326e03378750c272efabAfb1D7f\",\n            \"id\": 160,\n            \"originalId\": 34\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"sWBTC\",\n            \"name\": \"Synthetic WBTC From zkSync\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png\"\n            },\n            \"chainFromId\": 324,\n            \"deprecated\": true,\n            \"address\": \"0xfB64E541C7ededc97ed0652405444aa47b91C1C1\",\n            \"id\": 161,\n            \"originalId\": 35\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sSIS\",\n            \"name\": \"Synthetic SIS token from zkSync Era\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"chainFromId\": 324,\n            \"deprecated\": false,\n            \"address\": \"0x05157cbb1BB7bF1F982F72acCC97DCB22214fA1B\",\n            \"id\": 162,\n            \"originalId\": 36\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"ssyBTC\",\n            \"name\": \"Synthetic syBTC (zkSync)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200\",\n                \"small\": \"https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200\"\n            },\n            \"chainFromId\": 324,\n            \"deprecated\": true,\n            \"address\": \"0x1Aac380230382D6382c8a7FfEe3E24A26ab917cf\",\n            \"id\": 163,\n            \"originalId\": 37\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin From Arbitrum One\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 42161,\n            \"deprecated\": false,\n            \"address\": \"0xc317169a336b484f65B0AB4A794bBe66a7491E83\",\n            \"id\": 164,\n            \"originalId\": 38\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin From Arbitrum One\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 42161,\n            \"deprecated\": true,\n            \"address\": \"0x1a8a88e24Fa680cC596d233A2c86a88DFE0EB45a\",\n            \"id\": 165,\n            \"originalId\": 39\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Arbitrum One)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 42161,\n            \"deprecated\": false,\n            \"address\": \"0xb8d63Ff43B72C481c8cCD77d5c03092B63C81B34\",\n            \"id\": 166,\n            \"originalId\": 40\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sSIS\",\n            \"name\": \"Synthetic SIS token from Arbitrum One\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"chainFromId\": 42161,\n            \"deprecated\": false,\n            \"address\": \"0xB0424444f1C5Ab2D7A1cbd422cBE1CA0cF425aE4\",\n            \"id\": 167,\n            \"originalId\": 41\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sLADYS\",\n            \"name\": \"Synthetic Milady Coin (Arbitrum)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png\"\n            },\n            \"chainFromId\": 42161,\n            \"deprecated\": false,\n            \"address\": \"0xAD87744e87344306BBcfa23F6ae36c69B968e0A4\",\n            \"id\": 168,\n            \"originalId\": 42\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sFRAX\",\n            \"name\": \"Synthetic Frax (Arbitrum One)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png\"\n            },\n            \"chainFromId\": 42161,\n            \"deprecated\": false,\n            \"address\": \"0x72c12938e7b8a4c2f18Ae1b4948E32D64F52a68B\",\n            \"id\": 169,\n            \"originalId\": 43\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sUXLINK\",\n            \"name\": \"Synthetic UXLINK (Arbitrum)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\"\n            },\n            \"chainFromId\": 42161,\n            \"deprecated\": false,\n            \"address\": \"0xF909804F4aE12b37c39F8916f84D0629461F0F76\",\n            \"id\": 170,\n            \"originalId\": 44\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sAPE\",\n            \"name\": \"Synthetic APE (Arbitrum)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\"\n            },\n            \"chainFromId\": 42161,\n            \"deprecated\": false,\n            \"address\": \"0x3a0aB171629c940797777c9dC9691C09130F7d55\",\n            \"id\": 171,\n            \"originalId\": 45\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin From Optimism\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 10,\n            \"deprecated\": false,\n            \"address\": \"0xf17b21B78C1422afaC2cA88886463b4C28d3D520\",\n            \"id\": 172,\n            \"originalId\": 46\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Optimism)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 10,\n            \"deprecated\": false,\n            \"address\": \"0x7a74C122831E1221b32162569f95Ff1d01e099dE\",\n            \"id\": 173,\n            \"originalId\": 47\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin From Arbitrum Nova\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 42170,\n            \"deprecated\": false,\n            \"address\": \"0xf84d80134ff1566502801dB28a62d1888C3F80a7\",\n            \"id\": 174,\n            \"originalId\": 48\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Arbitrum Nova)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 42170,\n            \"deprecated\": false,\n            \"address\": \"0x06A0c3d0Cf4b12412F48E1746bd440842a14375a\",\n            \"id\": 175,\n            \"originalId\": 49\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin From Polygon zkEVM\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 1101,\n            \"deprecated\": false,\n            \"address\": \"0x39d3625D07FE1b9267ef7F7891D27f3c9D39Dd2E\",\n            \"id\": 176,\n            \"originalId\": 50\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDC From Polygon zkEVM\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 1101,\n            \"deprecated\": true,\n            \"address\": \"0x41E1525F93b3A9C70a7824E6C16Ca6B944180A6a\",\n            \"id\": 177,\n            \"originalId\": 51\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Polygon zkEVM)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 1101,\n            \"deprecated\": false,\n            \"address\": \"0xd687ff0122669ce5A0bE89143a9B926BA9a72Df3\",\n            \"id\": 178,\n            \"originalId\": 52\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Linea)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 59144,\n            \"deprecated\": false,\n            \"address\": \"0x840531DA82E31B4Ff535Bc8F3A16f6f0C48B3861\",\n            \"id\": 179,\n            \"originalId\": 53\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin From Linea\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 59144,\n            \"deprecated\": false,\n            \"address\": \"0x6e8AE8b7735Ff7eb4145Ad881087Dc14fB494d45\",\n            \"id\": 180,\n            \"originalId\": 54\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sSIS\",\n            \"name\": \"Synthetic SIS token from Linea\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"chainFromId\": 59144,\n            \"deprecated\": false,\n            \"address\": \"0x923db084ce63aBbc581b5c9b3b0DA1c40B10d387\",\n            \"id\": 181,\n            \"originalId\": 55\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USD Coin From Mantle\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 5000,\n            \"deprecated\": false,\n            \"address\": \"0xf87516b6665553D700E67a158d68bc627408Dc08\",\n            \"id\": 182,\n            \"originalId\": 56\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Mantle)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 5000,\n            \"deprecated\": false,\n            \"address\": \"0x0C16952C588f859e797C7c9497304db0F5239c51\",\n            \"id\": 183,\n            \"originalId\": 57\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sCATI\",\n            \"name\": \"Synthetic CATI (Mantle)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png\"\n            },\n            \"chainFromId\": 5000,\n            \"deprecated\": false,\n            \"address\": \"0x4c5A6c3fDc33BEF6a84acD42bF77a2F1f2e6AB9E\",\n            \"id\": 184,\n            \"originalId\": 58\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sUXLINK\",\n            \"name\": \"Synthetic UXLINK (Mantle)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\"\n            },\n            \"chainFromId\": 5000,\n            \"deprecated\": false,\n            \"address\": \"0xaC159831FFD470dfeB11359433076800DA2bA01D\",\n            \"id\": 185,\n            \"originalId\": 59\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Base)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 8453,\n            \"deprecated\": false,\n            \"address\": \"0x7B7aD875f336ffD27A3872b243c025E60A028732\",\n            \"id\": 186,\n            \"originalId\": 60\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDbC\",\n            \"name\": \"Synthetic USDbC From Base\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 8453,\n            \"deprecated\": false,\n            \"address\": \"0xFBe80e8C3FbFf0bC314b33d1C6185230aC319309\",\n            \"id\": 187,\n            \"originalId\": 61\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sG\",\n            \"name\": \"Synthetic G (Base)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png\"\n            },\n            \"chainFromId\": 8453,\n            \"deprecated\": false,\n            \"address\": \"0x47FFc26a7A452df343F68Cc1A66353a2e8541AC0\",\n            \"id\": 188,\n            \"originalId\": 62\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDT\",\n            \"name\": \"Synthetic USDT From Tron\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"chainFromId\": 728126428,\n            \"deprecated\": false,\n            \"address\": \"0x4e7498c4db259065b73d21c81A5b41cadbEc7d4D\",\n            \"id\": 189,\n            \"originalId\": 63\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Scroll)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 534352,\n            \"deprecated\": false,\n            \"address\": \"0x7792FC1975f324fd3A4Cc4Ca8186087D73ffB9fc\",\n            \"id\": 190,\n            \"originalId\": 64\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDC From Scroll\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 534352,\n            \"deprecated\": false,\n            \"address\": \"0x23A8a10664068012C5046F32925083B5aC25aAc3\",\n            \"id\": 191,\n            \"originalId\": 65\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sSIS\",\n            \"name\": \"Synthetic SIS token from Scroll\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"chainFromId\": 534352,\n            \"deprecated\": false,\n            \"address\": \"0xD1E42b4Fdd2559e93B761c51Bb8ce644a688a78b\",\n            \"id\": 192,\n            \"originalId\": 66\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Manta)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 169,\n            \"deprecated\": false,\n            \"address\": \"0x4C9edbc90e9006ac909ae7090C51c69ddE1B7C3b\",\n            \"id\": 193,\n            \"originalId\": 68\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDC From Manta\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 169,\n            \"deprecated\": false,\n            \"address\": \"0x55519D93513dD0271dd041CEe49389a1A6c7e881\",\n            \"id\": 194,\n            \"originalId\": 69\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Metis)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 1088,\n            \"deprecated\": false,\n            \"address\": \"0x7520d0D46D2027745E3837103E9Eb2bb372A869D\",\n            \"id\": 195,\n            \"originalId\": 71\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDT\",\n            \"name\": \"Synthetic USDT From Bahamut\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"chainFromId\": 5165,\n            \"deprecated\": false,\n            \"address\": \"0x20E4aE4922ef5c464C23D5CD08B507BC13890397\",\n            \"id\": 196,\n            \"originalId\": 72\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDС From Bahamut\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 5165,\n            \"deprecated\": true,\n            \"address\": \"0x8b1B60b23153aD184Cde4241F9B604e233D04fcb\",\n            \"id\": 197,\n            \"originalId\": 73\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Mode)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 34443,\n            \"deprecated\": false,\n            \"address\": \"0xE7671eC0E57322D254159e0595c2F6b179038203\",\n            \"id\": 198,\n            \"originalId\": 74\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDT\",\n            \"name\": \"Synthetic USDT From Rootstock\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/825.png\"\n            },\n            \"chainFromId\": 30,\n            \"deprecated\": false,\n            \"address\": \"0x7a4CC805464b69C077daBadD48841E91134B988D\",\n            \"id\": 199,\n            \"originalId\": 75\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sUSDT\",\n            \"name\": \"Synthetic rUSDT From RSK\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/825.png\"\n            },\n            \"chainFromId\": 30,\n            \"deprecated\": true,\n            \"address\": \"0xB30caE10bC040D2Ab365351D35a7Dcbf0e922b54\",\n            \"id\": 200,\n            \"originalId\": 76\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDС.e From Rootstock\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 30,\n            \"deprecated\": true,\n            \"address\": \"0xd5b73579D1f190Ad443f80b6160A49FE5C2Cda69\",\n            \"id\": 201,\n            \"originalId\": 77\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWRBTC\",\n            \"name\": \"Synthetic Wrapped RBTC (Rootstock)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32702.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32702.png\"\n            },\n            \"chainFromId\": 30,\n            \"deprecated\": false,\n            \"address\": \"0x4d58c7C43F16D7E562030DC6f7fBebC5C59c3430\",\n            \"id\": 202,\n            \"originalId\": 78\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Blast)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 81457,\n            \"deprecated\": false,\n            \"address\": \"0x5DE7bb0E90E4D3860762B1E90758B839b056130F\",\n            \"id\": 203,\n            \"originalId\": 80\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWBTC\",\n            \"name\": \"Synthetic Wrapped BTC (Merlin)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png\"\n            },\n            \"chainFromId\": 4200,\n            \"deprecated\": false,\n            \"address\": \"0x25BaD96fc7c70d1A22F99bC768db8f2B6fbfDa92\",\n            \"id\": 204,\n            \"originalId\": 81\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped ETH (zkLink)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 810180,\n            \"deprecated\": false,\n            \"address\": \"0x8bbEaa343Ee881A85758595648aA67A41e661C6d\",\n            \"id\": 205,\n            \"originalId\": 82\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"sWBTC\",\n            \"name\": \"Synthetic Wrapped BTC (Core)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1.png\"\n            },\n            \"chainFromId\": 1116,\n            \"deprecated\": false,\n            \"address\": \"0xA8Cd384E4B10c9Ec05c5436E005BD8b64569796a\",\n            \"id\": 206,\n            \"originalId\": 84\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Taiko)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 167000,\n            \"deprecated\": false,\n            \"address\": \"0xf834AD6385c3CfACee18593BBdE4E65A0f29ea32\",\n            \"id\": 207,\n            \"originalId\": 85\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDС From Sei\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 1329,\n            \"deprecated\": false,\n            \"address\": \"0x90CaF0F3FE4Ae3282F8F97A2aA691b0CB8d48c13\",\n            \"id\": 208,\n            \"originalId\": 86\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDT\",\n            \"name\": \"Synthetic USDT From Sei\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/825.png\"\n            },\n            \"chainFromId\": 1329,\n            \"deprecated\": true,\n            \"address\": \"0x7649EeeA77e9464019392D5Ab40d4862435B3bD2\",\n            \"id\": 209,\n            \"originalId\": 87\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC.ETH\",\n            \"name\": \"Synthetic USDС.ETH (Zetachain)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 7000,\n            \"deprecated\": false,\n            \"address\": \"0x82f331A1740A0d1AE4549d9d571396b25B6c33bc\",\n            \"id\": 210,\n            \"originalId\": 90\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDС From Cronos\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 25,\n            \"deprecated\": false,\n            \"address\": \"0xB84f68Bfa9Ba0d1Ab8C6Ffe7429951629eC9ed1c\",\n            \"id\": 211,\n            \"originalId\": 91\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Fraxtal)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 252,\n            \"deprecated\": false,\n            \"address\": \"0xBe535CC7270864e30851578ca0A24AA15795d35C\",\n            \"id\": 212,\n            \"originalId\": 92\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sFRAX\",\n            \"name\": \"Synthetic Frax (Fraxtal)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png\"\n            },\n            \"chainFromId\": 252,\n            \"deprecated\": false,\n            \"address\": \"0x4B61bD8180F16124AEc1b875401D4c51a9A7DDbF\",\n            \"id\": 213,\n            \"originalId\": 93\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDС From Gravity\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 1625,\n            \"deprecated\": false,\n            \"address\": \"0x73e5a4d03b25b79A6a00eba696c59DFc94c822D8\",\n            \"id\": 214,\n            \"originalId\": 94\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"swG\",\n            \"name\": \"Synthetic wG (Gravity)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png\"\n            },\n            \"chainFromId\": 1625,\n            \"deprecated\": false,\n            \"address\": \"0x5037A5c6961a19baaA90314c3f6B9B72849ceB9a\",\n            \"id\": 215,\n            \"originalId\": 95\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWBTC\",\n            \"name\": \"Synthetic WBTC (bsquared)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png\"\n            },\n            \"chainFromId\": 223,\n            \"deprecated\": false,\n            \"address\": \"0xae0d8173B888757889Ba125A7f0b43CA30DF98dC\",\n            \"id\": 216,\n            \"originalId\": 96\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDT\",\n            \"name\": \"Synthetic USDT From TON\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"chainFromId\": 85918,\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\" },\n            \"address\": \"0x8D8Ce7Bf0C7f7a368Bb92087Fc9D474d2DffC072\",\n            \"id\": 217,\n            \"originalId\": 97\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"sUXLINK\",\n            \"name\": \"Synthetic UXLINK (TON)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png\"\n            },\n            \"chainFromId\": 85918,\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQBh9XACT0B60U8Q48VnjyqCxzxpM4oA0c8rqKt4h70yk1V5\" },\n            \"address\": \"0xd3aa3C34A322DBeD3b9EcA30ade18F5F0E1A5280\",\n            \"id\": 218,\n            \"originalId\": 98\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"sCATI\",\n            \"name\": \"Synthetic CATI (TON)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png\"\n            },\n            \"chainFromId\": 85918,\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQD-cvR0Nz6XAyRBvbhz-abTrRC6sI5tvHvvpeQraV9UAAD7\" },\n            \"address\": \"0x639F17BEDaADa19Dd6e83f36552a3168CD683Fcd\",\n            \"id\": 219,\n            \"originalId\": 99\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"sPINEYE\",\n            \"name\": \"Synthetic PINEYE (TON)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png\"\n            },\n            \"chainFromId\": 85918,\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQDY2MzMJY_9OWm9UyQNLTU2Qs_8BRomlMUbbADnh-tFkLaU\" },\n            \"address\": \"0x91Ddc82b6C1841570B7c1277Ead216df204aa323\",\n            \"id\": 220,\n            \"originalId\": 100\n        },\n        {\n            \"decimals\": 9,\n            \"symbol\": \"sEVAA\",\n            \"name\": \"Synthetic EVAA From TON\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png\"\n            },\n            \"chainFromId\": 85918,\n            \"deprecated\": false,\n            \"attributes\": { \"ton\": \"EQBKMfjX_a_dsOLm-juxyVZytFP7_KKnzGv6J01kGc72gVBp\" },\n            \"address\": \"0x2F67Edc00CA81F4D087a1f2D041428aF6c691630\",\n            \"id\": 221,\n            \"originalId\": 101\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDС From Cronos zkEVM\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 388,\n            \"deprecated\": false,\n            \"address\": \"0x9D3Dbda42C15de4cF60aD3Eec78A0AA239399b1e\",\n            \"id\": 222,\n            \"originalId\": 102\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDС From Morph\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 2818,\n            \"deprecated\": false,\n            \"address\": \"0xd518ff6A6122D1ed4f193CefD7C361f52B5A6Cb6\",\n            \"id\": 223,\n            \"originalId\": 103\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sBTC\",\n            \"name\": \"Synthetic Wrapped BTC (GOAT)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1.png\"\n            },\n            \"chainFromId\": 2345,\n            \"deprecated\": false,\n            \"address\": \"0xFD638c0965B008A39A36f561a8e69388115F8F9d\",\n            \"id\": 224,\n            \"originalId\": 104\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Sonic)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 146,\n            \"deprecated\": false,\n            \"address\": \"0x9F2f60BaDE978BbEA32E4e2f282C86C0c2874fF5\",\n            \"id\": 225,\n            \"originalId\": 105\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Abstract)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 2741,\n            \"deprecated\": false,\n            \"address\": \"0xE1FF01476d1693881c85a23c65F9522579eB8398\",\n            \"id\": 226,\n            \"originalId\": 106\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDС From Gnosis\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 100,\n            \"deprecated\": false,\n            \"address\": \"0xcfe415238cb13029B9D574BdF635D7d7D6571e63\",\n            \"id\": 227,\n            \"originalId\": 107\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Gnosis)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 100,\n            \"deprecated\": false,\n            \"address\": \"0x97B1c455D59373059f8fa92DEa00e7399FF3F5cC\",\n            \"id\": 228,\n            \"originalId\": 108\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Berachain)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 80094,\n            \"deprecated\": false,\n            \"address\": \"0x3c210C8b287CFdbc71c1CcF06Ee84c7926276835\",\n            \"id\": 229,\n            \"originalId\": 109\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Unichain)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 130,\n            \"deprecated\": false,\n            \"address\": \"0x73Bbd1031ac1265eb1b2Db33372d58444B6F63e3\",\n            \"id\": 230,\n            \"originalId\": 110\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (Soneium)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 1868,\n            \"deprecated\": false,\n            \"address\": \"0x3BbdE4396811f8643A3C1e98fb4CFFC74Ae01FB0\",\n            \"id\": 231,\n            \"originalId\": 111\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether (opBNB)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 204,\n            \"deprecated\": false,\n            \"address\": \"0xCE1b5b011ec7Ae1A410FEf94b0A721CDbE990f8e\",\n            \"id\": 232,\n            \"originalId\": 112\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWBNB\",\n            \"name\": \"Synthetic WBNB (opBNB)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png\"\n            },\n            \"chainFromId\": 204,\n            \"deprecated\": false,\n            \"address\": \"0x59D786c1eC521E522Dbd33753Ef984eF2232F4d2\",\n            \"id\": 233,\n            \"originalId\": 113\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sETH\",\n            \"name\": \"Synthetic Unit Ethereum (Hyperliquid)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 999,\n            \"deprecated\": false,\n            \"address\": \"0x3D0c6c3F1fC9A8a434f2e9f35Eaf04FEACd959ED\",\n            \"id\": 234,\n            \"originalId\": 114\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDC From HyperEVM\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 999,\n            \"deprecated\": false,\n            \"address\": \"0x872b42a47519Fb1d39c2a1bf98151B85E7F73bD4\",\n            \"id\": 235,\n            \"originalId\": 115\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sAPE\",\n            \"name\": \"Synthetic APE From HyperEVM\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png\"\n            },\n            \"chainFromId\": 999,\n            \"deprecated\": false,\n            \"address\": \"0xd288E185671ac16ad23834e3344760AeF91b3fC2\",\n            \"id\": 236,\n            \"originalId\": 116\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic Wrapped Ether\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 747474,\n            \"deprecated\": true,\n            \"address\": \"0x590500bc694654FeF4Ba396f998e48AD4A131171\",\n            \"id\": 237,\n            \"originalId\": 117\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWETH\",\n            \"name\": \"Synthetic WETH From Katana\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 747474,\n            \"deprecated\": false,\n            \"address\": \"0x3D20098E8Ed873E04f19731d96AaafFA2aC2e760\",\n            \"id\": 238,\n            \"originalId\": 118\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic USDC From Katana\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png\"\n            },\n            \"chainFromId\": 747474,\n            \"deprecated\": false,\n            \"address\": \"0x95716Ec1002Cd8999169febfCD41D647E5c2FFFf\",\n            \"id\": 239,\n            \"originalId\": 119\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sWAPE\",\n            \"name\": \"Synthetic Wrapped APE (ApeChain)\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png\"\n            },\n            \"chainFromId\": 33139,\n            \"deprecated\": false,\n            \"address\": \"0xcF463CaF51b2e30b2d253b5F10FE533C17B80331\",\n            \"id\": 240,\n            \"originalId\": 120\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDT0\",\n            \"name\": \"Synthetic USDT0 From Plasma\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"chainFromId\": 9745,\n            \"deprecated\": false,\n            \"address\": \"0xEB24dCb196ac5B93E1600e2dE66d07Eec13Ed243\",\n            \"id\": 241,\n            \"originalId\": 121\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"sSIS\",\n            \"name\": \"Synthetic SIS token from Binance\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png\"\n            },\n            \"chainFromId\": 56,\n            \"deprecated\": false,\n            \"address\": \"0xd747F3c877Eb2736c06DD9A852480058A24e01Ce\",\n            \"id\": 242,\n            \"originalId\": 125\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"sUSDC\",\n            \"name\": \"Synthetic syUSDC From Telos\",\n            \"chainId\": 13863860,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 40,\n            \"deprecated\": false,\n            \"address\": \"0x66281EE570B0E59715eEb198C0921b0728459d09\",\n            \"id\": 243,\n            \"originalId\": 128\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"syBTC\",\n            \"name\": \"syBTC\",\n            \"chainId\": 324,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"chainFromId\": 3652501241,\n            \"deprecated\": true,\n            \"address\": \"0xED0c95EBe5a3E687cB2224687024FeC6518E683e\",\n            \"id\": 244,\n            \"originalId\": 122\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDC\",\n            \"name\": \"USD Coin\",\n            \"chainId\": 5165,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0x4237e0A5b55233D5B6D6d1D9BF421723954130D8\",\n            \"id\": 245,\n            \"originalId\": 0\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"WETH\",\n            \"name\": \"Wrapped Ether\",\n            \"chainId\": 5165,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0xE5b3562A0fa9eC3e718C96FfE349e1280D2Be591\",\n            \"id\": 246,\n            \"originalId\": 2\n        },\n        {\n            \"decimals\": 6,\n            \"symbol\": \"USDT\",\n            \"name\": \"Tether USD\",\n            \"chainId\": 5165,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/825.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0xDeF886C55a79830C47108eeb9c37e78a49684e41\",\n            \"id\": 247,\n            \"originalId\": 3\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"WBTC\",\n            \"name\": \"Wrapped BTC\",\n            \"chainId\": 5165,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0x6B6301dcBA742E2320dD083A8d8fDbaB9527484B\",\n            \"id\": 248,\n            \"originalId\": 4\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"syBTC\",\n            \"name\": \"syBTC\",\n            \"chainId\": 30,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"chainFromId\": 3652501241,\n            \"deprecated\": false,\n            \"address\": \"0xB52E582263c1d0189b3cc1402c1B7205b7F2E9Ba\",\n            \"id\": 249,\n            \"originalId\": 124\n        },\n        {\n            \"decimals\": 18,\n            \"symbol\": \"pufETH\",\n            \"name\": \"pufETH\",\n            \"chainId\": 7000,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png\"\n            },\n            \"chainFromId\": 1,\n            \"deprecated\": false,\n            \"address\": \"0x1e4bF3CaBD7707089138dD5a545B077413FA83Fc\",\n            \"id\": 250,\n            \"originalId\": 6\n        }\n    ]\n}\n","{\n    \"omniPools\": [\n        {\n            \"chainId\": 97,\n            \"address\": \"0xFC385a59b2728cA437057E3cDBA4a2611B75c406\",\n            \"oracle\": \"0xfdF3dBF16a7Dc8078FE4E9D0c1ac391dfb8B19aF\",\n            \"generalPurpose\": true,\n            \"coinGeckoId\": \"wrapped-ton\",\n            \"id\": 0,\n            \"tokens\": [\n                { \"index\": 1, \"tokenId\": 9 },\n                { \"index\": 2, \"tokenId\": 7 },\n                { \"index\": 3, \"tokenId\": 6 }\n            ]\n        }\n    ],\n    \"tokens\": [\n        {\n            \"decimals\": 9,\n            \"symbol\": \"WTON(BSC)\",\n            \"name\": \"WTON(BSC)\",\n            \"chainId\": 97,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xe015581A4e36eEbf170a3F4a686fa7606d511b13\",\n            \"id\": 0\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"mutSymBtc\",\n            \"name\": \"mutSymBtc\",\n            \"chainId\": 11155111,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x41540e95B10383408cfE201974c88E6C3ef9323A\",\n            \"id\": 1\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"t4SymBtc\",\n            \"name\": \"t4SymBtc\",\n            \"chainId\": 11155111,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x04cd23122a21f6c5F912FC7B9aBC508302899Dfb\",\n            \"id\": 2\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"mSymBtc\",\n            \"name\": \"mSymBtc\",\n            \"chainId\": 11155111,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0xeD86914A9478a066d82b2bE3E5B99A38BAaE23ce\",\n            \"id\": 3\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"WBTC\",\n            \"name\": \"Wrapped BTC\",\n            \"chainId\": 43113,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x9374Ea7A11c5B185A6631effF22c015E71c67581\",\n            \"id\": 4\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"muBTC\",\n            \"name\": \"Bitcoin Mutiny\",\n            \"chainId\": 2782866891,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://faucet.mutinynet.com/favicon.svg\",\n                \"small\": \"https://faucet.mutinynet.com/favicon.svg\"\n            },\n            \"deprecated\": false,\n            \"address\": \"0x41540e95B10383408cfE201974c88E6C3ef9323A\",\n            \"id\": 5\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"sMutSymBtc\",\n            \"name\": \"synthetic sBTC from Sepolia Mutinynet\",\n            \"chainId\": 97,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"chainFromId\": 11155111,\n            \"deprecated\": false,\n            \"address\": \"0x742175079E67dAD92CA5a315f5C37CF26e207615\",\n            \"id\": 6,\n            \"originalId\": 1\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"st4SymBtc\",\n            \"name\": \"st4SymBtc from Sepolia\",\n            \"chainId\": 97,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"chainFromId\": 11155111,\n            \"deprecated\": false,\n            \"address\": \"0xD8D16bab99BDA6c0aE108Def47a47048fa49F427\",\n            \"id\": 7,\n            \"originalId\": 2\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"sBTC\",\n            \"name\": \"sBTC\",\n            \"chainId\": 97,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"chainFromId\": 11155111,\n            \"deprecated\": false,\n            \"address\": \"0xf945220F1A99a3B207277eBad23490DBd6F5433f\",\n            \"id\": 8,\n            \"originalId\": 3\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"sBTC\",\n            \"name\": \"Synthetic BTC from Fuji\",\n            \"chainId\": 97,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"chainFromId\": 43113,\n            \"deprecated\": false,\n            \"address\": \"0xD2347db16c570495Af15a859800e86541D046c2e\",\n            \"id\": 9,\n            \"originalId\": 4\n        },\n        {\n            \"decimals\": 8,\n            \"symbol\": \"sBTC\",\n            \"name\": \"Synthetic BTC\",\n            \"chainId\": 11155111,\n            \"isNative\": false,\n            \"icons\": {\n                \"large\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\",\n                \"small\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/1.png\"\n            },\n            \"chainFromId\": 43113,\n            \"deprecated\": false,\n            \"address\": \"0xD058A1425301a400C4e901E78006655CB07F325A\",\n            \"id\": 10,\n            \"originalId\": 4\n        }\n    ]\n}\n","{\n    \"omniPools\": [\n        {\n            \"chainId\": 97,\n            \"address\": \"0x789001A80a8EdBBEE07876b0dF58c3eAdEE89877\",\n            \"oracle\": \"0x2cD94CB0F4cBC4a51c3e9c4b88d03B982bE24608\",\n            \"generalPurpose\": true,\n            \"coinGeckoId\": \"usd-coin\",\n            \"id\": 0,\n            \"tokens\": []\n        }\n    ],\n    \"tokens\": []\n}\n","import type { ConfigName } from '../../symbiosis'\nimport mainnet from './mainnet.json'\nimport testnet from './testnet.json'\nimport dev from './dev.json'\nimport { NoTransitTokenError, SdkError } from '../../sdkError'\nimport { ConfigCacheData, Id, OmniPoolInfo, TokenInfo } from './builder'\nimport { ChainId } from '../../../constants'\nimport { Token, wrappedToken } from '../../../entities'\nimport { OmniPoolConfig } from '../../types'\n\nexport class ConfigCache {\n    private readonly data: ConfigCacheData\n\n    public constructor(configName: ConfigName | ConfigCacheData) {\n        if (configName === 'mainnet') {\n            this.data = mainnet\n        } else if (configName === 'testnet') {\n            this.data = testnet\n        } else if (configName === 'dev') {\n            this.data = dev\n        } else if (Object.prototype.hasOwnProperty.call(configName, 'tokens')) {\n            this.data = configName\n        } else {\n            throw new SdkError('Unknown config name')\n        }\n    }\n\n    public tokens(): Token[] {\n        return this.data.tokens.map((attributes) => {\n            return new Token(attributes)\n        })\n    }\n\n    public getRepresentation(token: Token, chainId: ChainId): Token | undefined {\n        if (token.isSynthetic) {\n            const original = this.getOriginalToken(token)\n            if (original?.chainId !== chainId) {\n                return\n            }\n            return original\n        }\n\n        return this.getSynthTokens(token).find((i) => i.chainId === chainId)\n    }\n\n    public getOmniPoolByConfig(omniPoolConfig: OmniPoolConfig): OmniPoolInfo | undefined {\n        return this.data.omniPools.find((i) => {\n            return (\n                i.address.toLowerCase() === omniPoolConfig.address.toLowerCase() && i.chainId === omniPoolConfig.chainId\n            )\n        })\n    }\n\n    public getOmniPoolById(id: Id): OmniPoolInfo | undefined {\n        return this.data.omniPools.find((i) => i.id === id)\n    }\n\n    // It works correctly if the `token` in ONE pool ONLY\n    // If there are more than one pool then FIRST pool will be selected\n    public getOmniPoolByToken(token: Token): OmniPoolInfo | undefined {\n        let synths: Token[]\n        if (token.isSynthetic) {\n            synths = [token]\n        } else {\n            synths = this.getSynthTokens(token)\n        }\n        if (synths.length === 0) {\n            synths = [token]\n        }\n\n        const ids = synths.map((i) => {\n            return this.getTokenInfoByToken(i).id\n        })\n\n        return this.data.omniPools.find((pool) => {\n            return pool.tokens.find((i) => {\n                return ids.includes(i.tokenId)\n            })\n        })\n    }\n\n    public getOmniPoolTokenIndex(omniPoolConfig: OmniPoolConfig, token: Token): number {\n        const omniPool = this.getOmniPoolByConfig(omniPoolConfig)\n        if (!omniPool) {\n            throw new SdkError(`getOmniPoolIndex: cannot find omniPoolByConfig ${omniPoolConfig}`)\n        }\n\n        const tokenInfo = this.getTokenInfoByToken(token)\n\n        const found = omniPool.tokens.find((pool) => {\n            return pool.tokenId === tokenInfo.id\n        })\n\n        if (found === undefined) {\n            throw new NoTransitTokenError(`There is no token ${tokenInfo.address} in omniPool ${omniPool.address}`)\n        }\n\n        return found.index\n    }\n\n    public getOmniPoolTokens(omniPoolConfig: OmniPoolConfig): Token[] {\n        const pool = this.getOmniPoolByConfig(omniPoolConfig)\n        if (!pool) {\n            throw new SdkError('Cannot find omniPool')\n        }\n        return pool.tokens.map((i) => {\n            const tokenInfo = this.getTokenInfoById(i.tokenId)\n            return new Token(tokenInfo)\n        })\n    }\n\n    public getTokenInfoById(id: Id): TokenInfo {\n        const tokenInfo = this.data.tokens.find((i) => i.id === id)\n\n        if (!tokenInfo) {\n            throw new SdkError(`Can't get tokenInfo for id ${id}`)\n        }\n\n        return tokenInfo\n    }\n\n    // --- PRIVATE ---\n\n    private getTokenInfoByToken(token: Token): TokenInfo {\n        const found = this.data.tokens.find((i) => {\n            return (\n                i.address.toLowerCase() === token.address.toLowerCase() &&\n                i.chainId === token.chainId &&\n                i.chainFromId === token.chainFromId\n            )\n        })\n\n        if (!found) {\n            throw new SdkError(`Can't get tokenInfo by token ${token.address} ${token.chainId}`)\n        }\n\n        return found\n    }\n\n    private getOriginalToken(token: Token): Token | undefined {\n        if (!token.isSynthetic) {\n            return\n        }\n        const tokenInfo = this.getTokenInfoByToken(token)\n        if (tokenInfo.originalId === undefined) {\n            return\n        }\n        const original = this.getTokenInfoById(tokenInfo.originalId)\n        return new Token(original)\n    }\n\n    private getSynthTokens(token: Token): Token[] {\n        if (token.isSynthetic) {\n            return []\n        }\n        const wrapped = wrappedToken(token)\n        const tokenInfo = this.getTokenInfoByToken(wrapped)\n        return this.data.tokens\n            .filter((i) => {\n                return i.originalId === tokenInfo.id\n            })\n            .map((i) => {\n                return new Token(i)\n            })\n    }\n}\n","export const POLLING_INTERVAL = 1000 * 10 // 10 seconds\nexport const DEFAULT_EXCEED_DELAY = 1000 * 60 * 20 // 20 minutes\n\nexport class TxNotFound extends Error {\n    constructor(txId: string) {\n        super(`Transaction ${txId} not found`)\n        this.name = 'TxNotFound'\n    }\n}\n","import { DEFAULT_EXCEED_DELAY, POLLING_INTERVAL } from './constants'\n\nexport const fetchData = async (url: URL) => {\n    const response = await fetch(url)\n    if (!response.ok) {\n        const text = await response.text()\n        const json = JSON.parse(text)\n        throw new Error(json.message ?? text)\n    }\n\n    const data = await response.json()\n\n    return data\n}\n\ninterface LongPollingParams<T> {\n    pollingInterval?: number\n    exceedDelay?: number\n    pollingFunction: () => Promise<T | undefined>\n    successCondition: (result: T) => boolean\n    error?: Error\n}\n\nexport async function longPolling<T>({\n    pollingInterval = POLLING_INTERVAL,\n    exceedDelay = DEFAULT_EXCEED_DELAY,\n    pollingFunction,\n    successCondition,\n    error,\n}: LongPollingParams<T>): Promise<T> {\n    return new Promise((resolve, reject) => {\n        let pastTime = 0\n        let result: T | undefined\n\n        const func = async () => {\n            pastTime += pollingInterval\n            if (pastTime > exceedDelay) {\n                clearInterval(interval)\n                reject(error ?? new Error(`Long polling exceed time`))\n                return\n            }\n\n            try {\n                result = await pollingFunction()\n            } catch (error) {\n                // suppress error and try again until timeout\n                console.error('Long Polling function error', error)\n            } finally {\n                if (result && successCondition(result)) {\n                    resolve(result)\n                    clearInterval(interval)\n                }\n            }\n        }\n\n        func()\n        const interval = setInterval(func, pollingInterval)\n    })\n}\n","import { Address, Cell, Transaction } from '@ton/core'\nimport { Maybe } from '@ton/ton/dist/utils/maybe'\nimport { solidityKeccak256 } from 'ethers/lib/utils'\n\nimport { ChainId } from '../../constants'\nimport { longPolling } from './utils'\nimport { Symbiosis } from '../symbiosis'\nimport { AddressZero } from '@ethersproject/constants'\n\n// The event is defined by its opcode, i.e. first 32 bits of the body\nconst BURN_COMPLETED_OPCODE = 0x62e558c2\n\ninterface BurnCompletedEvent {\n    externalId: Buffer\n    crossChainId: Buffer\n    receiver: Address\n    amount: bigint\n    fee: bigint\n    tokenAddr: Address\n}\n\nfunction parseBurnCompletedBody(msgBody: Cell): Maybe<BurnCompletedEvent> {\n    const bodySlice = msgBody.beginParse()\n\n    const opcode = bodySlice.loadUint(32)\n    if (opcode === BURN_COMPLETED_OPCODE) {\n        // The payload of 'burn_completed' event is split into 2 child cells\n        // because it doesn't fit the cell size (1023 bits).\n        const burnCompletedData1 = bodySlice.loadRef().beginParse()\n        const burnCompletedData2 = bodySlice.loadRef().beginParse()\n\n        const externalId = burnCompletedData1.loadBuffer(32)\n        const crossChainId = burnCompletedData1.loadBuffer(32)\n        const receiver = burnCompletedData1.loadAddress()\n\n        const amount = burnCompletedData2.loadCoins()\n        const fee = burnCompletedData2.loadCoins()\n        const tokenAddr = burnCompletedData2.loadAddress()\n\n        return {\n            externalId,\n            crossChainId,\n            receiver,\n            amount,\n            fee,\n            tokenAddr,\n        }\n    } else {\n        return null\n    }\n}\n\n//Synthesis.sol --> bytes32 externalID = keccak256(abi.encodePacked(internalID, _receiveSide, _chainID));\nfunction _getExternalIdTon({\n    internalId,\n    receiveSide,\n    chainId,\n}: {\n    internalId: string\n    receiveSide: string\n    chainId: ChainId\n}) {\n    return solidityKeccak256(['bytes32', 'address', 'uint256'], [internalId, receiveSide, chainId])\n}\n\nclass WaitForTonTxCompleteError extends Error {\n    constructor(message: string) {\n        super(message)\n        this.name = 'WaitForTonTxCompleteError'\n    }\n}\n\nexport async function waitForTonTxComplete(symbiosis: Symbiosis, internalId: string, chainId: ChainId) {\n    const tonChainConfig = symbiosis.config.chains.find((chain) => chain.id === chainId)\n    if (!tonChainConfig) {\n        throw new Error('Ton chain config not found')\n    }\n\n    const tonPortal = tonChainConfig.tonPortal\n    if (!tonPortal) {\n        throw new Error(`Ton portal not found for chain ${chainId}`)\n    }\n\n    const externalId = _getExternalIdTon({ internalId, receiveSide: AddressZero, chainId })\n\n    const client = await symbiosis.getTonClient()\n\n    const txRaw = await longPolling<{\n        block: {\n            workchain: number\n            seqno: number\n            shard: string\n            rootHash: string\n            fileHash: string\n        }\n        tx: Transaction\n    }>({\n        pollingFunction: async () => {\n            const lastBlock = await client.getLastBlock()\n            const accountInfo = await client.getAccount(lastBlock.last.seqno, Address.parse(tonPortal))\n\n            if (!accountInfo.account.last) {\n                return undefined\n            }\n\n            const txsRaw = await client.getAccountTransactions(\n                Address.parse(tonPortal),\n                BigInt(accountInfo.account.last.lt),\n                Buffer.from(accountInfo.account.last.hash, 'base64')\n            )\n\n            return txsRaw.find(({ tx }) => {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                return Array.from(tx.outMessages).find(([_, msg]) => {\n                    if (msg.info.type !== 'external-out') {\n                        return false\n                    }\n                    const burnCompletedEvent = parseBurnCompletedBody(msg.body)\n                    if (!burnCompletedEvent) {\n                        return false\n                    }\n\n                    return burnCompletedEvent.externalId.equals(Buffer.from(externalId.slice(2), 'hex'))\n                })\n            })\n        },\n        successCondition: (tx) => {\n            return tx !== undefined\n        },\n        error: new WaitForTonTxCompleteError('Ton transaction not found on TON chain'),\n    })\n\n    return txRaw.tx.hash().toString('hex')\n}\n","import { ChainId } from '../../constants'\nimport { Symbiosis } from '../symbiosis'\nimport { TxNotFound } from './constants'\nimport { fetchData, longPolling } from './utils'\nimport { TransactionReceipt } from '@ethersproject/providers'\nimport { Synthesis__factory } from '../contracts'\nimport { BigNumber } from 'ethers'\nimport { LogDescription } from '@ethersproject/abi'\nimport { waitForTonTxComplete } from './waitForTonDepositTxMined'\nimport { SwapSDK, SwapStatusResponseV2 } from '@chainflip/sdk/swap'\nimport { BtcConfig } from '../types'\n\ninterface ThorStatusResponse {\n    observed_tx: {\n        tx: {\n            id: string\n        }\n        out_hashes?: string[]\n        status?: string\n    }\n}\n\ntype ExtraStep = 'thorChain' | 'burnRequestBtc' | 'burnRequestTon' | 'swapEthToTon' | 'chainFlip'\n\nexport async function tryToFindExtraStepsAndWait(\n    symbiosis: Symbiosis,\n    chainId: ChainId,\n    txHash: string\n): Promise<{ extraStep?: ExtraStep; outHash: string }> {\n    const provider = symbiosis.getProvider(chainId)\n    const receipt = await provider.getTransactionReceipt(txHash)\n    if (!receipt) {\n        throw new TxNotFound(txHash)\n    }\n\n    const isThorChainDeposit = await findThorChainDeposit(receipt)\n    if (isThorChainDeposit) {\n        const outHash = await waitForThorChainTx(txHash)\n        return {\n            extraStep: 'thorChain',\n            outHash,\n        }\n    }\n\n    const burnRequestBtc = await findBurnRequestBtc(receipt)\n    if (burnRequestBtc) {\n        const { burnSerial, rtoken } = burnRequestBtc\n        const btc = symbiosis.tokens().find((t) => t.address.toLowerCase() === rtoken.toLowerCase())\n        if (!btc) {\n            throw new Error('BTC token not found')\n        }\n        const btcConfig = symbiosis.getBtcConfig(btc)\n        const outHash = await waitUnwrapBtcTxComplete(btcConfig, burnSerial)\n\n        return {\n            extraStep: 'burnRequestBtc',\n            outHash,\n        }\n    }\n\n    const burnRequestTon = await findBurnRequestTON(receipt)\n    if (burnRequestTon) {\n        const { internalId, chainId } = burnRequestTon\n\n        const outHash = await waitForTonTxComplete(symbiosis, internalId, +chainId)\n        return {\n            extraStep: 'burnRequestTon',\n            outHash,\n        }\n    }\n    const chainFlipSwap = await findChainFlipSwap(receipt)\n    if (chainFlipSwap) {\n        const outHash = await waitForChainFlipSwap(receipt.transactionHash)\n        return {\n            extraStep: 'chainFlip',\n            outHash,\n        }\n    }\n\n    return {\n        outHash: txHash,\n    }\n}\n\nexport async function findChainFlipSwap(receipt: TransactionReceipt) {\n    const swapTokenTopic0 = '0x834b524d9f8ccbd31b00b671c896697b96eb4398c0f56e9386a21f5df61e3ce3'\n    const log = receipt.logs.find((log) => {\n        if (log.topics.length === 0) {\n            return false\n        }\n        return log.topics[0] === swapTokenTopic0\n    })\n\n    return !!log\n}\n\nexport async function waitForChainFlipSwap(txHash: string): Promise<string> {\n    const chainFlipSdk = new SwapSDK({\n        network: 'mainnet',\n    })\n    const response = await longPolling({\n        pollingFunction: async (): Promise<SwapStatusResponseV2> => {\n            return chainFlipSdk.getStatusV2({ id: txHash })\n        },\n        successCondition: (response) => {\n            return response.state === 'COMPLETED' || response.state === 'SENT'\n        },\n        error: new TxNotFound(txHash),\n        exceedDelay: 3_600_000, // 1 hour\n        pollingInterval: 10 * 1000, // 10 seconds\n    })\n\n    if (response.state !== 'COMPLETED' && response.state !== 'SENT') {\n        throw new TxNotFound(txHash)\n    }\n    if (!response.swapEgress?.txRef) {\n        throw new TxNotFound(txHash)\n    }\n\n    return response.swapEgress.txRef\n}\n\nexport async function findThorChainDeposit(receipt: TransactionReceipt) {\n    const thorChainDepositTopic0 = '0xef519b7eb82aaf6ac376a6df2d793843ebfd593de5f1a0601d3cc6ab49ebb395'\n    const log = receipt.logs.find((log) => {\n        if (log.topics.length === 0) {\n            return false\n        }\n        return log.topics[0] === thorChainDepositTopic0\n    })\n\n    return !!log\n}\n\nexport async function waitForThorChainTx(txHash: string): Promise<string> {\n    const txHashCleaned = txHash.startsWith('0x') ? txHash.slice(2) : txHash\n    const thorUrl = new URL(`https://thornode.ninerealms.com/thorchain/tx/${txHashCleaned}`)\n\n    return longPolling({\n        pollingFunction: async () => {\n            const result: ThorStatusResponse = await fetchData(thorUrl)\n\n            const { status, out_hashes } = result.observed_tx\n            if (status === 'done' && out_hashes && out_hashes.length > 0) {\n                return out_hashes.find((outHash) => {\n                    return outHash !== '0000000000000000000000000000000000000000000000000000000000000000'\n                })\n            }\n\n            return\n        },\n        successCondition: (btcHash) => !!btcHash,\n        error: new TxNotFound(txHash),\n        exceedDelay: 3_600_000, // 1 hour\n        pollingInterval: 60_000, // 1 minute\n    })\n}\n\nasync function findBurnRequestBtc(receipt: TransactionReceipt): Promise<\n    | {\n          burnSerial: BigNumber\n          rtoken: string\n      }\n    | undefined\n> {\n    const synthesisInterface = Synthesis__factory.createInterface()\n    const topic0 = synthesisInterface.getEventTopic('BurnRequestBTC')\n    const log = receipt.logs.find((log) => {\n        if (log.topics.length === 0) {\n            return false\n        }\n        return log.topics[0] === topic0\n    })\n    if (!log) {\n        return\n    }\n    const data: LogDescription = synthesisInterface.parseLog(log)\n\n    const { burnSerial, rtoken } = data.args\n\n    return { burnSerial, rtoken }\n}\n\nasync function findBurnRequestTON(receipt: TransactionReceipt): Promise<\n    | {\n          internalId: string\n          chainId: string\n      }\n    | undefined\n> {\n    const synthesisInterface = Synthesis__factory.createInterface()\n    const burnRequestTonTopic = synthesisInterface.getEventTopic('BurnRequestTON')\n    const log = receipt.logs.find((log) => {\n        if (log.topics.length === 0) {\n            return false\n        }\n        return log.topics[0] === burnRequestTonTopic\n    })\n\n    if (!log) {\n        return\n    }\n    const data: LogDescription = synthesisInterface.parseLog(log)\n\n    const { id, chainID } = data.args\n\n    return { internalId: id, chainId: chainID.toString() }\n}\n\ninterface UnwrapSerialBTCResponse {\n    serial: number\n    to: string\n    tx: string\n    value: number\n    outputIdx: string\n}\n\nasync function waitUnwrapBtcTxComplete(btcConfig: BtcConfig, burnSerialBtc: BigNumber): Promise<string> {\n    const { forwarderUrl } = btcConfig\n    const unwrapInfoUrl = new URL(`${forwarderUrl}/unwrap?serial=${burnSerialBtc.toString()}`)\n\n    const result = await longPolling<UnwrapSerialBTCResponse>({\n        pollingFunction: async (): Promise<UnwrapSerialBTCResponse> => {\n            return fetchData(unwrapInfoUrl)\n        },\n        successCondition: (result) => !!result.outputIdx,\n        error: new TxNotFound(burnSerialBtc.toString()),\n        exceedDelay: 3_600_000, // 1 hour\n        pollingInterval: 10_000, // 10 seconds\n    })\n\n    return result.tx\n}\n","import { Cell, Slice, Transaction } from '@ton/core'\nimport { ChainId } from '../../constants'\nimport { BridgeTxInfo } from './types'\n\n// The event is defined by its opcode, i.e. first 32 bits of the body\nconst ORACLE_REQUEST_OPCODE = 0x7b425851\n\nconst META_SYNTHESIZE_SELECTOR = 'c29a91bc' // metaMintSyntheticToken(...)\nconst SYNTHESIZE_SELECTOR = 'a83e754b' // mintSyntheticToken(...)\n\ninterface OracleRequestEvent {\n    externalId: string\n    internalId: string\n    externalChainId: number\n}\n\n// [TODO]: Do all logic via tx hash only\nexport function getTxTonBridgeInfo(tx: Transaction): BridgeTxInfo {\n    let internalId: string | undefined\n    let externalId: string | undefined\n    let externalChainId: ChainId | undefined\n\n    for (const outMsg of tx.outMessages.values()) {\n        if (outMsg?.info.type !== 'external-out') {\n            continue\n        }\n        const parsedOracleRequest = parseOracleRequestBody(outMsg.body)\n        internalId = parsedOracleRequest?.internalId\n        externalId = parsedOracleRequest?.externalId\n        externalChainId = parsedOracleRequest?.externalChainId\n        break\n    }\n    if (!internalId || !externalId || !externalChainId) {\n        throw new Error('Invalid oracle request body')\n    }\n\n    return {\n        internalId,\n        externalId,\n        externalChainId,\n        requestType: 'SynthesizeRequest',\n    }\n}\n\nfunction loadHexBytes(slice: Slice, bytesCount: number): string {\n    return slice.loadBuffer(bytesCount).toString('hex')\n}\n\nfunction parseOracleRequestBody(msgBody: Cell): OracleRequestEvent | undefined {\n    const bodySlice = msgBody.beginParse()\n\n    const opcode = bodySlice.loadUint(32)\n    if (opcode !== ORACLE_REQUEST_OPCODE) {\n        return\n    }\n\n    const refCalldata = bodySlice.loadRef().beginParse()\n\n    bodySlice.loadInt(8) // wc\n    bodySlice.loadBuffer(32) // addr hash\n    bodySlice.loadBuffer(20) // receive_side\n    bodySlice.loadBuffer(20) // opposite_bridge\n    const externalChainId = bodySlice.loadUint(256) // external_chain_id\n\n    const ref1 = refCalldata.loadRef().beginParse()\n    const ref2 = refCalldata.loadRef().beginParse()\n    const functionSelector = loadHexBytes(ref1, 4) // function selector\n\n    let internalId, externalId\n\n    if (functionSelector === META_SYNTHESIZE_SELECTOR) {\n        ref1.loadBuffer(64) // stable_bridging_fee, amount\n        internalId = loadHexBytes(ref1, 32) // internal_id\n        externalId = loadHexBytes(ref2, 32) // external_id\n    } else if (functionSelector === SYNTHESIZE_SELECTOR) {\n        ref1.loadBuffer(32) // stable_bridging_fee\n        externalId = loadHexBytes(ref1, 32) // external_id\n        internalId = loadHexBytes(ref1, 32) // internal_id\n    }\n\n    if (!internalId || !externalId) {\n        throw new Error('Invalid oracle request body')\n    }\n\n    return {\n        internalId: '0x' + internalId,\n        externalId: '0x' + externalId,\n        externalChainId,\n    }\n}\n","import { Contract, EventFilter } from 'ethers'\nimport { ChainId } from '../../constants'\nimport { Symbiosis } from '../symbiosis'\nimport { TxNotFound } from './constants'\nimport { getExternalId, getLogWithTimeout } from '../chainUtils/evm'\nimport { tronAddressToEvm } from '../chainUtils/tron'\nimport { tryToFindExtraStepsAndWait } from './tryToFindExtraStepsAndWait'\nimport { isTonChainId } from '../chainUtils'\n\nimport { BridgeRequestType, BridgeTxInfo } from './types'\nimport { getTxTonBridgeInfo } from './getTxTonBridgeInfo'\nimport { Transaction } from '@ton/core'\n\nexport interface WaitForCompleteParams {\n    symbiosis: Symbiosis\n    chainId: ChainId\n    txId: string\n    txTon?: Transaction\n}\n\n/**\n * @param symbiosis - context class\n * @param chainId - chain evm id to check event\n * @param txId - transaction hash to check\n * @param txTon - optional, TON tx on bridge\n * @returns Transaction hash from portal contract in bitcoin network to user's wallet\n */\nexport async function waitForComplete({ symbiosis, chainId, txId, txTon }: WaitForCompleteParams): Promise<string> {\n    const txIdWithPrefix = txId.startsWith('0x') ? txId : `0x${txId}`\n\n    let aBridgeInfo\n    if (isTonChainId(chainId) && txTon) {\n        aBridgeInfo = getTxTonBridgeInfo(txTon)\n    } else {\n        aBridgeInfo = await getTxBridgeInfo(symbiosis, chainId, txIdWithPrefix) // first part of the bridge on EVM chain\n    }\n\n    if (!aBridgeInfo) {\n        const { outHash, extraStep } = await tryToFindExtraStepsAndWait(symbiosis, chainId, txId)\n        if (!extraStep) {\n            throw new Error(`Transaction ${txId} is not a bridge request`)\n        }\n\n        return outHash\n    }\n\n    const bTxId = await waitOtherSideTx(symbiosis, aBridgeInfo)\n\n    const bBridgeInfo = await getTxBridgeInfo(symbiosis, aBridgeInfo.externalChainId, bTxId)\n\n    // if b-chain is final destination\n    if (!bBridgeInfo) {\n        const { outHash } = await tryToFindExtraStepsAndWait(symbiosis, aBridgeInfo.externalChainId, bTxId)\n        return outHash\n    }\n\n    const cTxId = await waitOtherSideTx(symbiosis, bBridgeInfo)\n\n    const { outHash } = await tryToFindExtraStepsAndWait(symbiosis, bBridgeInfo.externalChainId, cTxId)\n    return outHash\n}\n\nasync function getTxBridgeInfo(symbiosis: Symbiosis, chainId: ChainId, txId: string): Promise<BridgeTxInfo | null> {\n    const provider = symbiosis.getProvider(chainId)\n\n    const receipt = await provider.getTransactionReceipt(txId)\n\n    if (!receipt) {\n        throw new TxNotFound(txId)\n    }\n\n    const portal = symbiosis.portal(chainId)\n    const synthesis = symbiosis.synthesis(chainId)\n\n    const revertBurnRequestTopic = portal.interface.getEventTopic('RevertBurnRequest')\n    const revertSynthesizeRequestTopic = synthesis.interface.getEventTopic('RevertSynthesizeRequest')\n    const metaRevertRequestTopic = portal.interface.getEventTopic('MetaRevertRequest')\n\n    let revertLog = receipt.logs.find((log) => {\n        return !!log.topics.find((topic) => {\n            return topic === revertBurnRequestTopic || topic === revertSynthesizeRequestTopic\n        })\n    })\n    let isMetaRevertRequest = false\n    if (!revertLog) {\n        revertLog = receipt.logs.find((log) => {\n            return !!log.topics.find((topic) => {\n                return topic === metaRevertRequestTopic\n            })\n        })\n        isMetaRevertRequest = !!revertLog\n    }\n    if (revertLog) {\n        const address = revertLog.address.toLowerCase()\n        if (address !== portal.address.toLowerCase() && address !== synthesis.address.toLowerCase()) {\n            throw new Error(`Transaction ${txId} is not a from synthesis or portal contract`)\n        }\n\n        const bridge = symbiosis.bridge(chainId)\n        const oracleRequestTopic = bridge.interface.getEventTopic('OracleRequest')\n        const oracleRequestLog = receipt.logs.find((log) => log.topics.includes(oracleRequestTopic))\n        if (!oracleRequestLog) {\n            throw new Error(`Transaction ${txId} have a OracleRequest call not from bridge contract`)\n        }\n\n        const { chainId: oracleRequestChainId } = bridge.interface.parseLog(oracleRequestLog).args\n\n        let contract: Contract\n        let requestType: BridgeRequestType\n        if (revertLog.address.toLowerCase() === portal.address.toLowerCase()) {\n            contract = portal\n            if (isMetaRevertRequest) {\n                requestType = 'RevertSynthesizeRequest'\n            } else {\n                requestType = 'RevertBurnCompleted'\n            }\n        } else {\n            contract = synthesis\n            requestType = 'RevertSynthesizeCompleted'\n        }\n\n        const { id: internalId, to: revertableAddress } = contract.interface.parseLog(revertLog).args\n\n        const externalChainId: number = oracleRequestChainId.toNumber()\n\n        const externalId = getExternalId({\n            internalId,\n            contractAddress: contract.address,\n            revertableAddress: tronAddressToEvm(revertableAddress),\n            chainId,\n        })\n\n        return { internalId, externalId, externalChainId, requestType }\n    }\n\n    const synthesizeRequestTopic = portal.interface.getEventTopic('SynthesizeRequest')\n    const burnRequestTopic = synthesis.interface.getEventTopic('BurnRequest')\n\n    const log = receipt.logs.find((log) => {\n        return !!log.topics.find((topic) => topic === synthesizeRequestTopic || topic === burnRequestTopic)\n    })\n\n    if (!log) {\n        return null\n    }\n\n    if (\n        log.address.toLowerCase() !== portal.address.toLowerCase() &&\n        log.address.toLowerCase() !== synthesis.address.toLowerCase()\n    ) {\n        throw new Error(`Transaction ${txId} is not a from synthesis or portal contract`)\n    }\n\n    let contract: Contract\n    let requestType: BridgeRequestType\n    if (log.address.toLowerCase() === portal.address.toLowerCase()) {\n        contract = portal\n        requestType = 'SynthesizeRequest'\n    } else {\n        contract = synthesis\n        requestType = 'BurnRequest'\n    }\n\n    const { id: internalId, chainID, revertableAddress } = contract.interface.parseLog(log).args\n\n    const externalChainId = chainID.toNumber()\n\n    const contractAddress =\n        requestType === 'SynthesizeRequest'\n            ? symbiosis.chainConfig(externalChainId).synthesis\n            : symbiosis.chainConfig(externalChainId).portal\n\n    const externalId = getExternalId({\n        internalId,\n        contractAddress: tronAddressToEvm(contractAddress),\n        revertableAddress: tronAddressToEvm(revertableAddress),\n        chainId: externalChainId,\n    })\n\n    return { internalId, externalId, externalChainId, requestType }\n}\n\nasync function waitOtherSideTx(symbiosis: Symbiosis, bridgeInfo: BridgeTxInfo): Promise<string> {\n    const { requestType, externalChainId, externalId, internalId } = bridgeInfo\n\n    let filter: EventFilter\n    switch (requestType) {\n        case 'SynthesizeRequest': {\n            const synthesis = symbiosis.synthesis(externalChainId)\n            filter = synthesis.filters.SynthesizeCompleted(externalId)\n            break\n        }\n\n        case 'BurnRequest': {\n            const portal = symbiosis.portal(externalChainId)\n            filter = portal.filters.BurnCompleted(externalId)\n            break\n        }\n\n        case 'RevertSynthesizeRequest': {\n            const synthesis = symbiosis.synthesis(externalChainId)\n            filter = synthesis.filters.RevertSynthesizeRequest(internalId)\n            break\n        }\n\n        case 'RevertSynthesizeCompleted': {\n            const portal = symbiosis.portal(externalChainId)\n            filter = portal.filters.RevertSynthesizeCompleted(externalId)\n            break\n        }\n\n        case 'RevertBurnCompleted': {\n            const synthesis = symbiosis.synthesis(externalChainId)\n            filter = synthesis.filters.RevertBurnCompleted(externalId)\n            break\n        }\n    }\n\n    const log = await getLogWithTimeout({ symbiosis, chainId: externalChainId, filter })\n\n    return log.transactionHash\n}\n","import { fetchData, longPolling } from './utils'\nimport { BtcDepositAcceptedResult } from './types'\nimport { BtcConfig } from '../types'\n\ninterface WrapTx {\n    feeLimit: number\n    info: {\n        fee: number\n        op: number\n        sbfee: number\n        tail: string\n        to: string\n    }\n}\n\ninterface AddressInfo {\n    legacyAddress: string\n    revealAddress: string\n    validUntil: string\n    wrap: WrapTx\n}\n\ninterface TransactionBtcInfo {\n    commitOutputIdx: number\n    commitTx: string\n    incomeOutputIdx: number\n    incomeTx: string\n    revealTx: string\n}\n\ninterface BtcAddressResponse {\n    addressInfo: AddressInfo\n    transactions: TransactionBtcInfo[]\n}\n\nexport class WaitWrapBtcTxToCompleteError extends Error {\n    constructor(message: string) {\n        super(message)\n        this.name = 'WaitWrapBtcTxToCompleteError'\n    }\n}\n\nexport async function waitForBtcDepositAccepted(\n    btcConfig: BtcConfig,\n    depositAddress: string\n): Promise<BtcDepositAcceptedResult | undefined> {\n    const { forwarderUrl } = btcConfig\n    const addressInfoUrl = new URL(`${forwarderUrl}/address?address=${depositAddress}`)\n    return longPolling<BtcDepositAcceptedResult | undefined>({\n        pollingFunction: async () => {\n            const addressResponse: BtcAddressResponse = await fetchData(addressInfoUrl)\n            if (addressResponse.transactions.length === 0) {\n                return\n            }\n            const { commitTx } = addressResponse.transactions[0]\n            return {\n                commitTx,\n                btcConfig,\n            }\n        },\n        successCondition: (txInfo) => !!txInfo,\n        error: new WaitWrapBtcTxToCompleteError('getting TransactionBtcInfo timeout exceed'),\n    })\n}\n","import { fetchData, longPolling } from './utils'\nimport { BtcConfig } from '../types'\n\ninterface WrapTx {\n    feeLimit: number\n    info: {\n        fee: number\n        op: number\n        sbfee: number\n        tail: string\n        to: string\n    }\n}\n\ninterface AddressInfo {\n    legacyAddress: string\n    revealAddress: string\n    validUntil: string\n    wrap: WrapTx\n}\n\ninterface TransactionBtcInfo {\n    commitOutputIdx: number\n    commitTx: string\n    incomeOutputIdx: number\n    incomeTx: string\n    revealTx: string\n}\n\ninterface Block {\n    blockHash: string\n    blockTime: number\n    blockHeight: number\n    confirmations: number\n}\n\ninterface WrapOperation {\n    btcFee: number\n    revealInputIdx: number\n    revealTx: string\n    serial: number\n    stableBridgingFee: number\n    tail: string\n    to: string\n    value: number\n}\n\ninterface TxResponse {\n    addressInfo: AddressInfo\n    block: Block\n    txInfo: TransactionBtcInfo\n    wrap: WrapOperation\n}\n\nclass WaitForCommitBtcTxError extends Error {\n    constructor(message: string) {\n        super(message)\n        this.name = 'WaitForCommitBtcTxError'\n    }\n}\n\ninterface WaitForBtcCommitTxMinedParams {\n    btcConfig: BtcConfig\n    commitTx: string\n}\n\nexport async function waitForBtcCommitTxMined({\n    btcConfig,\n    commitTx,\n}: WaitForBtcCommitTxMinedParams): Promise<{ blockHeight: number; revealTx: string } | undefined> {\n    const { forwarderUrl } = btcConfig\n    const txInfoUrl = new URL(`${forwarderUrl}/tx`)\n    txInfoUrl.searchParams.append('txid', commitTx)\n\n    const txResponse = await longPolling<TxResponse>({\n        pollingFunction: async () => {\n            return fetchData(txInfoUrl)\n        },\n        successCondition: (response) => {\n            return (response?.block?.confirmations || 0) > 0\n        },\n        error: new WaitForCommitBtcTxError('getting TxResponse timeout exceed'),\n    })\n\n    if (!txResponse || !txResponse.block || !txResponse.txInfo.revealTx) {\n        return\n    }\n\n    return {\n        blockHeight: txResponse.block.blockHeight,\n        revealTx: txResponse.txInfo.revealTx,\n    }\n}\n","import { Symbiosis } from '../symbiosis'\nimport { getLogWithTimeout } from '../chainUtils'\nimport { SymBtc__factory } from '../contracts'\nimport { BtcConfig } from '../types'\n\nexport async function waitForBtcEvmTxIssued(\n    symbiosis: Symbiosis,\n    revealTx: string,\n    btcConfig: BtcConfig\n): Promise<string> {\n    const { symBtc } = btcConfig\n\n    const symBtcContract = SymBtc__factory.connect(symBtc.address, symbiosis.getProvider(symBtc.chainId))\n    const synthesis = symbiosis.synthesis(symBtc.chainId)\n\n    const externalId = await symBtcContract.getBTCExternalID(\n        `0x${Buffer.from(revealTx, 'hex').reverse().toString('hex')}`,\n        0,\n        synthesis.address\n    )\n    const filter = synthesis.filters.BTCSynthesizeCompleted(externalId)\n\n    const timeout = 1000 * 60 * 60 * 2 // 2h\n    const log = await getLogWithTimeout({ symbiosis, chainId: symBtc.chainId, filter, exceedDelay: timeout })\n\n    return log.transactionHash\n}\n","import { Address, Transaction } from '@ton/core'\n\nimport { longPolling } from './utils'\nimport { Symbiosis } from '../symbiosis'\n\nclass waitFromTonTxCompleteError extends Error {\n    constructor(message: string) {\n        super(message)\n        this.name = 'WaitForTonTxCompleteError'\n    }\n}\n\nconst TRANSFER_NOTIFICATION_OPCODE = 0x7362d09c\n\nexport interface WaitFromTonTxMinedParams {\n    symbiosis: Symbiosis\n    address: string\n    contractAddress: string\n}\n\nexport async function waitFromTonTxMined({\n    symbiosis,\n    address,\n    contractAddress,\n}: WaitFromTonTxMinedParams): Promise<Transaction | undefined> {\n    const client = await symbiosis.getTonClient()\n\n    const now = Math.floor(Date.now() / 1000)\n\n    return await longPolling<Transaction | undefined>({\n        pollingFunction: async () => {\n            const lastBlock = await client.getLastBlock()\n            const accountInfo = await client.getAccount(lastBlock.last.seqno, Address.parse(contractAddress))\n\n            if (!accountInfo.account.last) {\n                return undefined\n            }\n\n            const txsRaw = await client.getAccountTransactions(\n                Address.parse(contractAddress),\n                BigInt(accountInfo.account.last.lt),\n                Buffer.from(accountInfo.account.last.hash, 'base64')\n            )\n\n            const filtered = txsRaw.filter((txRaw) => {\n                if (txRaw.tx.now < now) {\n                    return false\n                }\n\n                if (!txRaw.tx.inMessage?.body) {\n                    return false\n                }\n\n                // 1. case for jetton transfer\n                const bodyInMsg = txRaw.tx.inMessage.body\n\n                if (bodyInMsg) {\n                    const body = bodyInMsg.beginParse()\n                    const opcode = body.loadUint(32)\n\n                    if (opcode === TRANSFER_NOTIFICATION_OPCODE) {\n                        body.loadUint(64) // query id skip\n                        body.loadCoins() // amount skip\n                        const senderAddress = body.loadAddress()\n                        if (senderAddress.equals(Address.parse(address))) {\n                            return true\n                        }\n                    }\n                }\n\n                // 2. case for TON transfer\n                const messageInfo = txRaw.tx.inMessage?.info\n\n                if (!messageInfo || messageInfo.type !== 'internal') {\n                    return false\n                }\n\n                const senderAddress = messageInfo.src\n\n                if (!Address.isAddress(senderAddress)) {\n                    return false\n                }\n\n                return Address.parse(address).equals(senderAddress)\n            })\n            return filtered.length > 0 ? filtered[0].tx : undefined // is no reliable logic, we take just last sent tx\n        },\n        successCondition: (tx) => {\n            return tx !== undefined\n        },\n        error: new waitFromTonTxCompleteError('Ton transaction not found on TON chain'),\n    })\n}\n","export class Cache {\n    private data = new Map<string, any>()\n\n    async get<T>(key: string[], func: () => Promise<T>, ttl?: number): Promise<T> {\n        return this.fromCache(\n            key,\n            () => {\n                return func()\n            },\n            ttl\n        )\n    }\n\n    private async fromCache<T>(key: (number | string)[], func: () => Promise<T>, ttl?: number): Promise<T> {\n        const stringKey = key.join('-')\n        const now = Math.floor(Date.now() / 1000)\n        const cached = this.data.get(stringKey)\n        if (cached) {\n            const { value, expiresAt } = cached\n            if (expiresAt === null || now < expiresAt) {\n                return value\n            }\n        }\n\n        const newValue = await func()\n\n        this.data.set(stringKey, {\n            value: newValue,\n            expiresAt: ttl ? now + ttl : null,\n        })\n\n        return newValue\n    }\n}\n","import { AddressZero, MaxUint256 } from '@ethersproject/constants'\nimport { TransactionRequest } from '@ethersproject/providers'\nimport JSBI from 'jsbi'\nimport { Percent, Profiler, Token, TokenAmount, wrappedToken } from '../../entities'\nimport { BIPS_BASE, CROSS_CHAIN_ID } from '../constants'\nimport { Portal__factory, Synthesis, Synthesis__factory } from '../contracts'\nimport type { Symbiosis } from '../symbiosis'\nimport { AggregatorTrade, WrapTrade } from '../trade'\nimport { Transit } from '../transit'\nimport { SdkError } from '../sdkError'\nimport { SymbiosisTrade } from '../trade/symbiosisTrade'\nimport { OneInchProtocols } from '../trade/oneInchTrade'\nimport {\n    buildMetaSynthesize,\n    DetailedSlippage,\n    getExternalId,\n    getInternalId,\n    isEvmChainId,\n    isTonChainId,\n    isTronChainId,\n    isTronToken,\n    prepareTronTransaction,\n    splitSlippage,\n    tronAddressToEvm,\n    TronTransactionData,\n} from '../chainUtils'\nimport { TRON_METAROUTER_ABI } from '../tronAbis'\nimport {\n    FeeItem,\n    OmniPoolConfig,\n    RouteItem,\n    SwapExactInParams,\n    SwapExactInResult,\n    SwapExactInTransactionPayload,\n    TonTransactionData,\n    TradeAContext,\n} from '../types'\nimport { createFakeAmount } from '../../utils'\nimport { ChainId } from '../../constants'\nimport { isUseOneInchOnly } from '../utils'\n\ntype MetaRouteParams = {\n    amount: string\n    nativeIn: boolean\n    approvedTokens: string[]\n    firstDexRouter: string\n    firstSwapCalldata: string | []\n    secondDexRouter: string\n    secondSwapCalldata: string | []\n    relayRecipient: string\n    otherSideCalldata: string\n}\n\nexport abstract class BaseSwapping {\n    // TODO rename to `transitAmount`\n    public amountInUsd: TokenAmount | undefined\n\n    protected from!: string\n    protected to!: string\n    protected tokenAmountIn!: TokenAmount\n    protected tokenOut!: Token\n    protected slippage!: DetailedSlippage\n    protected deadline!: number\n    protected revertableAddresses!: { AB: string; BC: string }\n\n    protected tradeA: SymbiosisTrade | undefined\n    protected transit!: Transit\n    protected tradeC: SymbiosisTrade | undefined\n\n    protected readonly symbiosis: Symbiosis\n    protected synthesisV2!: Synthesis\n\n    protected transitTokenIn!: Token\n    protected transitTokenOut!: Token\n\n    protected omniPoolConfig: OmniPoolConfig\n    protected oneInchProtocols?: OneInchProtocols\n    protected partnerAddress?: string\n\n    private profiler: Profiler\n\n    public constructor(symbiosis: Symbiosis, omniPoolConfig: OmniPoolConfig) {\n        this.omniPoolConfig = omniPoolConfig\n        this.symbiosis = symbiosis\n        this.profiler = new Profiler()\n    }\n\n    async doExactIn({\n        tokenAmountIn,\n        tokenOut,\n        from,\n        to,\n        slippage,\n        deadline,\n        oneInchProtocols,\n        transitTokenIn,\n        transitTokenOut,\n        revertableAddresses,\n        tradeAContext,\n        partnerAddress,\n    }: Omit<SwapExactInParams, 'symbiosis'>): Promise<SwapExactInResult> {\n        const routes: RouteItem[] = []\n        const routeType: string[] = []\n\n        this.partnerAddress = partnerAddress\n        this.oneInchProtocols = oneInchProtocols\n        this.tokenAmountIn = tokenAmountIn\n        this.tokenOut = tokenOut\n        this.transitTokenIn =\n            transitTokenIn || this.symbiosis.transitToken(this.tokenAmountIn.token.chainId, this.omniPoolConfig)\n\n        this.transitTokenOut =\n            transitTokenOut || this.symbiosis.transitToken(this.tokenOut.chainId, this.omniPoolConfig)\n\n        this.from = tronAddressToEvm(from)\n        this.to = tronAddressToEvm(to)\n        this.slippage = this.buildDetailedSlippage(slippage)\n        this.deadline = deadline\n        this.synthesisV2 = this.symbiosis.synthesis(this.omniPoolConfig.chainId)\n\n        if (isTronToken(this.tokenAmountIn.token) || isTronToken(this.tokenOut)) {\n            this.revertableAddresses = {\n                AB: this.symbiosis.getRevertableAddress(this.tokenAmountIn.token.chainId),\n                BC: this.symbiosis.getRevertableAddress(this.tokenOut.chainId),\n            }\n        } else if (\n            this.tokenAmountIn.token.chainId === ChainId.ABSTRACT_MAINNET ||\n            this.tokenOut.chainId === ChainId.ABSTRACT_MAINNET\n        ) {\n            this.revertableAddresses = {\n                AB: this.symbiosis.getRevertableAddress(this.tokenAmountIn.token.chainId),\n                BC: this.symbiosis.getRevertableAddress(this.tokenOut.chainId),\n            }\n        } else if (isTonChainId(this.tokenAmountIn.token.chainId) || isTonChainId(this.tokenOut.chainId)) {\n            this.revertableAddresses = {\n                AB: this.symbiosis.getRevertableAddress(this.tokenAmountIn.token.chainId),\n                BC: this.symbiosis.getRevertableAddress(this.tokenOut.chainId),\n            }\n        } else if (revertableAddresses) {\n            const AB = revertableAddresses.find((ra) => ra.chainId === this.tokenAmountIn.token.chainId)\n            if (!AB) {\n                throw new SdkError(`Revertable address for chain ${this.tokenAmountIn.token.chainId} was not specified`)\n            }\n            const BC = revertableAddresses.find((ra) => ra.chainId === this.tokenOut.chainId)\n            if (!BC) {\n                throw new SdkError(`Revertable address for chain ${this.tokenOut.chainId} was not specified`)\n            }\n            this.revertableAddresses = { AB: AB.address, BC: BC.address }\n        } else {\n            this.revertableAddresses = {\n                AB: this.symbiosis.getRevertableAddress(this.tokenAmountIn.token.chainId),\n                BC: this.from,\n            }\n        }\n\n        if (!this.transitTokenIn.equals(tokenAmountIn.token)) {\n            this.tradeA = this.buildTradeA(tradeAContext)\n            const endTimerTradeA = this.symbiosis.createMetricTimer()\n            await this.tradeA.init()\n            endTimerTradeA?.({\n                operation: 'tradeA',\n                kind: 'crosschain-swap',\n                tokenIn: this.tokenAmountIn.token,\n                tokenOut: this.transitTokenIn,\n            })\n            this.profiler.tick('A')\n            routes.push({\n                provider: this.tradeA.tradeType,\n                tokens: [this.tradeA.tokenAmountIn.token, this.tradeA.amountOut.token],\n            })\n            if (this.tradeA.tradeType !== 'wrap') {\n                routeType.push('ANY')\n            }\n        }\n\n        const transitAmountIn = this.tradeA ? this.tradeA.amountOut : this.tokenAmountIn\n        const transitAmountInMin = this.tradeA ? this.tradeA.amountOutMin : this.tokenAmountIn\n\n        const promises = []\n        promises.push(this.buildTransit(transitAmountIn, transitAmountInMin).init())\n        routes.push({\n            provider: 'symbiosis',\n            tokens: [this.transitTokenIn, this.transitTokenOut],\n        })\n        routeType.push('TRANSIT')\n\n        promises.push(\n            (async () => {\n                if (this.transitTokenOut.equals(tokenOut)) {\n                    return\n                }\n                // NOTE actually amountInMin == amountIn, because we don't know the correct amounts\n                const fakeTradeCAmountIn = createFakeAmount(transitAmountIn, this.transitTokenOut)\n                const fakeTradeCAmountInMin = createFakeAmount(transitAmountInMin, this.transitTokenOut)\n\n                return this.buildTradeC(fakeTradeCAmountIn, fakeTradeCAmountInMin).init()\n            })()\n        )\n\n        const endTimerTransit = this.symbiosis.createMetricTimer()\n        const [transit, tradeC] = await Promise.all(promises)\n        endTimerTransit?.({\n            kind: 'crosschain-swap',\n            operation: tradeC ? 'transit + c' : 'transit',\n            tokenIn: this.transitTokenIn,\n            tokenOut: this.transitTokenOut,\n        })\n        this.profiler.tick(tradeC ? 'TRANSIT + C' : 'TRANSIT')\n        this.transit = transit as Transit\n        // this call is necessary because buildMulticall depends on the result of doPostTransitAction\n        await this.doPostTransitAction()\n        this.profiler.tick('POST_TRANSIT_1')\n        this.tradeC = tradeC as SymbiosisTrade | undefined\n\n        if (this.tradeC) {\n            routes.push({\n                provider: this.tradeC.tradeType,\n                tokens: [this.tradeC.tokenAmountIn.token, this.tradeC.amountOut.token],\n            })\n            if (this.tradeC.tradeType !== 'wrap') {\n                routeType.push('ANY')\n            }\n        }\n        this.amountInUsd = this.transit.getBridgeAmountIn()\n\n        const endTimerAdvisor = this.symbiosis.createMetricTimer()\n        const { fee1Raw, fee2Raw } = await this.getAdvisorFees()\n        endTimerAdvisor?.({\n            kind: 'crosschain-swap',\n            operation: 'advisor',\n        })\n        this.profiler.tick('ADVISOR')\n\n        const fee1 = fee1Raw!.fee\n        const save1 = fee1Raw!.save\n        const fee2 = fee2Raw?.fee\n        const save2 = fee2Raw?.save\n\n        await this.transit.applyFees(fee1, fee2)\n        if (this.tradeC) {\n            this.tradeC.applyAmountIn(this.transit.amountOut, this.transit.amountOutMin)\n        }\n        this.profiler.tick('PATCHING')\n\n        await this.doPostTransitAction()\n        this.profiler.tick('POST_TRANSIT_2')\n\n        const tokenAmountOut = this.tradeC ? this.tradeC.amountOut : this.transit.amountOut\n        const tokenAmountOutMin = this.tradeC ? this.tradeC.amountOutMin : this.transit.amountOutMin\n\n        let payload: SwapExactInTransactionPayload\n\n        if (isEvmChainId(this.tokenAmountIn.token.chainId)) {\n            const metaRouteParams = this.getMetaRouteParams(fee1, fee2)\n            const transactionRequest = this.getEvmTransactionRequest(metaRouteParams)\n            payload = {\n                transactionType: 'evm',\n                transactionRequest,\n            }\n        } else if (isTronChainId(this.tokenAmountIn.token.chainId)) {\n            const metaRouteParams = this.getMetaRouteParams(fee1, fee2)\n            const transactionRequest = this.getTronTransactionRequest(metaRouteParams)\n            payload = {\n                transactionType: 'tron',\n                transactionRequest,\n            }\n        } else if (isTonChainId(this.tokenAmountIn.token.chainId)) {\n            const transactionRequest = await this.getTonTransactionRequest(fee1, fee2)\n            payload = {\n                transactionType: 'ton',\n                transactionRequest,\n            }\n        } else {\n            throw new SdkError(`Unsupported chain type: ${this.tokenAmountIn.token.chainId}`)\n        }\n\n        this.profiler.tick('TRANSACTION_REQUEST')\n\n        const fees: FeeItem[] = [\n            {\n                provider: 'symbiosis',\n                value: fee1,\n                description: 'Cross-chain fee',\n                save: save1,\n            },\n        ]\n        if (fee2) {\n            fees.push({\n                provider: 'symbiosis',\n                value: fee2,\n                description: 'Cross-chain fee',\n                save: save2,\n            })\n        }\n\n        if (this.transit.partnerFeeCall) {\n            fees.push(...this.transit.partnerFeeCall.fees)\n        }\n        if (this.transit.volumeFeeCall) {\n            fees.push(...this.transit.volumeFeeCall.fees)\n        }\n\n        return {\n            ...payload,\n            kind: 'crosschain-swap',\n            tokenAmountOut,\n            tokenAmountOutMin,\n            priceImpact: this.calculatePriceImpact(),\n            approveTo: this.approveTo(),\n            routes,\n            fees,\n            amountInUsd: this.amountInUsd,\n            timeLog: this.profiler.toString(),\n            routeType: routeType.join('-'),\n            poolAddress: this.omniPoolConfig.address,\n            tradeA: this.tradeA,\n            tradeC: this.tradeC,\n        }\n    }\n\n    protected async getAdvisorFees() {\n        const feePromises = []\n\n        let feeToken1 = this.transit.feeToken1\n        if (feeToken1.chainFromId) {\n            const original = this.symbiosis.getRepresentation(feeToken1, feeToken1.chainFromId)\n            if (original) {\n                feeToken1 = original\n            }\n        }\n        const fee1Config = this.symbiosis.feesConfig?.find((i) => i.token.equals(feeToken1))\n        if (fee1Config) {\n            feePromises.push({\n                fee: new TokenAmount(this.transit.feeToken1, fee1Config.value),\n                save: new TokenAmount(this.transit.feeToken1, '0'),\n            })\n        } else {\n            feePromises.push(this.getFee(this.transit.feeToken1))\n        }\n\n        let feeToken2 = this.transit.feeToken2\n        if (feeToken2) {\n            if (feeToken2.chainFromId) {\n                const original = this.symbiosis.getRepresentation(feeToken2, feeToken2.chainFromId)\n                if (original) {\n                    feeToken2 = original\n                }\n            }\n            const fee2Config = this.symbiosis.feesConfig?.find((i) => i.token.equals(feeToken2!))\n            if (fee2Config) {\n                feePromises.push({\n                    fee: new TokenAmount(this.transit.feeToken2!, fee2Config.value),\n                    save: new TokenAmount(this.transit.feeToken2!, '0'),\n                })\n            } else {\n                feePromises.push(this.getFeeV2(this.transit.feeToken2!))\n            }\n        } else {\n            feePromises.push(undefined)\n        }\n\n        const [fee1Raw, fee2Raw] = await Promise.all(feePromises)\n\n        return {\n            fee1Raw,\n            fee2Raw,\n        }\n    }\n\n    protected getRevertableAddress(side: 'AB' | 'BC'): string {\n        return this.revertableAddresses[side]\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    protected async doPostTransitAction() {}\n\n    protected buildDetailedSlippage(totalSlippage: number): DetailedSlippage {\n        const hasTradeA = !this.transitTokenIn.equals(wrappedToken(this.tokenAmountIn.token))\n        const hasTradeC = !this.transitTokenOut.equals(wrappedToken(this.tokenOut))\n\n        return splitSlippage(totalSlippage, hasTradeA, hasTradeC)\n    }\n\n    protected approveTo(): string {\n        return this.symbiosis.chainConfig(this.tokenAmountIn.token.chainId).metaRouterGateway\n    }\n\n    protected getValue() {\n        return this.tokenAmountIn.token.isNative ? this.tokenAmountIn.raw.toString() : '0'\n    }\n\n    protected getMetaRouteParams(fee: TokenAmount, feeV2: TokenAmount | undefined): MetaRouteParams {\n        const [relayRecipient, otherSideCalldata] = this.otherSideData(fee, feeV2)\n\n        const amount = this.tradeA ? this.tradeA.tokenAmountIn : this.tokenAmountIn\n        return {\n            amount: amount.raw.toString(),\n            nativeIn: amount.token.isNative,\n            approvedTokens: this.approvedTokens().map(tronAddressToEvm),\n            firstDexRouter: tronAddressToEvm(this.firstDexRouter()),\n            firstSwapCalldata: this.firstSwapCalldata(),\n            secondDexRouter: tronAddressToEvm(this.secondDexRouter()),\n            secondSwapCalldata: this.transit.direction === 'burn' ? this.secondSwapCalldata() : [],\n            relayRecipient,\n            otherSideCalldata,\n        }\n    }\n\n    protected getEvmTransactionRequest(params: MetaRouteParams): TransactionRequest {\n        const chainId = this.tokenAmountIn.token.chainId\n        const metaRouter = this.symbiosis.metaRouter(chainId)\n        const data = metaRouter.interface.encodeFunctionData('metaRoute', [params])\n\n        return {\n            chainId,\n            to: metaRouter.address,\n            data,\n            value: this.getValue(),\n        }\n    }\n\n    protected getTronTransactionRequest(params: MetaRouteParams): TronTransactionData {\n        const { chainId } = this.tokenAmountIn.token\n        const { metaRouter } = this.symbiosis.chainConfig(chainId)\n\n        const tronWeb = this.symbiosis.tronWeb(chainId)\n\n        return prepareTronTransaction({\n            chainId,\n            tronWeb,\n            abi: TRON_METAROUTER_ABI,\n            contractAddress: metaRouter,\n            functionName: 'metaRoute',\n            params: [\n                [\n                    params.firstSwapCalldata,\n                    params.secondSwapCalldata,\n                    params.approvedTokens,\n                    params.firstDexRouter,\n                    params.secondDexRouter,\n                    params.amount,\n                    params.nativeIn,\n                    params.relayRecipient,\n                    params.otherSideCalldata,\n                ],\n            ],\n            ownerAddress: this.from,\n            value: this.getValue(),\n        })\n    }\n\n    protected async getTonTransactionRequest(\n        fee: TokenAmount,\n        feeV2: TokenAmount | undefined\n    ): Promise<TonTransactionData> {\n        let secondSwapCallData = this.secondSwapCalldata()\n        if (secondSwapCallData.length === 0) {\n            secondSwapCallData = ''\n        }\n        return buildMetaSynthesize({\n            symbiosis: this.symbiosis,\n            fee,\n            amountIn: this.transit.getBridgeAmountIn(),\n            secondDexRouter: this.secondDexRouter(),\n            secondSwapCallData: secondSwapCallData as string,\n            swapTokens: this.swapTokens().map(tronAddressToEvm),\n            from: this.from,\n            to: this.to,\n            revertableAddress: this.getRevertableAddress('AB'),\n            chainIdOut: this.omniPoolConfig.chainId,\n            validUntil: this.deadline,\n            finalReceiveSide: tronAddressToEvm(this.transit.isV2() ? this.finalReceiveSideV2() : AddressZero),\n            finalCallData: this.transit.isV2() ? this.finalCalldataV2(feeV2) : '',\n            finalOffset: this.transit.isV2() ? this.finalOffsetV2() : 0,\n        })\n    }\n\n    protected calculatePriceImpact(): Percent {\n        const zero = new Percent(JSBI.BigInt(0), BIPS_BASE) // 0%\n        const pia = this.tradeA?.priceImpact || zero\n        const pib = this.transit.trade.priceImpact || zero\n        const pic = this.tradeC?.priceImpact || zero\n\n        let pi = pia.add(pib).add(pic)\n\n        const max = new Percent(JSBI.BigInt(10000), BIPS_BASE) // 100%\n        if (pi.greaterThan(max)) pi = max\n\n        return new Percent(pi.numerator, pi.denominator)\n    }\n\n    protected buildTradeA(tradeAContext?: TradeAContext): SymbiosisTrade {\n        const tokenOut = this.transitTokenIn\n\n        if (WrapTrade.isSupported(this.tokenAmountIn.token, tokenOut)) {\n            return new WrapTrade({\n                tokenAmountIn: this.tokenAmountIn,\n                tokenAmountInMin: this.tokenAmountIn, // correct because it is tradeA\n                tokenOut,\n                to: this.to,\n            })\n        }\n\n        const chainId = this.tokenAmountIn.token.chainId\n\n        let from = this.symbiosis.chainConfig(chainId).metaRouter\n        if (tradeAContext === 'multicallRouter') {\n            from = this.symbiosis.chainConfig(chainId).multicallRouter\n        }\n        const to = from\n\n        return new AggregatorTrade({\n            tokenAmountIn: this.tokenAmountIn,\n            tokenAmountInMin: this.tokenAmountIn, // correct because it is tradeA\n            tokenOut,\n            from,\n            to,\n            slippage: this.slippage['A'],\n            symbiosis: this.symbiosis,\n            clientId: this.symbiosis.clientId,\n            deadline: this.deadline,\n            oneInchProtocols: this.oneInchProtocols,\n            preferOneInchUsage: isUseOneInchOnly(this.tokenAmountIn.token, this.tokenOut),\n        })\n    }\n\n    protected buildTransit(amountIn: TokenAmount, amountInMin: TokenAmount): Transit {\n        this.symbiosis.validateLimits(amountIn)\n\n        return new Transit({\n            symbiosis: this.symbiosis,\n            amountIn,\n            amountInMin,\n            tokenOut: this.transitTokenOut,\n            slippage: this.slippage['B'],\n            deadline: this.deadline,\n            omniPoolConfig: this.omniPoolConfig,\n            partnerAddress: this.partnerAddress,\n        })\n    }\n\n    protected tradeCTo() {\n        return this.to\n    }\n\n    protected buildTradeC(amountIn: TokenAmount, amountInMin: TokenAmount) {\n        if (WrapTrade.isSupported(amountIn.token, this.tokenOut)) {\n            return new WrapTrade({\n                tokenAmountIn: amountIn,\n                tokenAmountInMin: amountInMin,\n                tokenOut: this.tokenOut,\n                to: this.to,\n            })\n        }\n\n        return new AggregatorTrade({\n            tokenAmountIn: amountIn,\n            tokenAmountInMin: amountInMin,\n            tokenOut: this.tokenOut,\n            from: this.symbiosis.chainConfig(this.tokenOut.chainId).metaRouter,\n            to: this.tradeCTo(),\n            slippage: this.slippage['C'],\n            symbiosis: this.symbiosis,\n            clientId: this.symbiosis.clientId,\n            deadline: this.deadline,\n            oneInchProtocols: this.oneInchProtocols,\n            preferOneInchUsage: isUseOneInchOnly(this.tokenAmountIn.token, this.tokenOut),\n        })\n    }\n\n    protected metaBurnSyntheticToken(fee1: TokenAmount): [string, string] {\n        const synthesis = this.symbiosis.synthesis(this.tokenAmountIn.token.chainId)\n        const amount = this.transit.getBridgeAmountIn()\n\n        return [\n            synthesis.address,\n            synthesis.interface.encodeFunctionData('metaBurnSyntheticToken', [\n                {\n                    stableBridgingFee: fee1.raw.toString(),\n                    amount: amount.raw.toString(),\n                    syntCaller: tronAddressToEvm(this.from),\n                    crossChainID: CROSS_CHAIN_ID,\n                    finalReceiveSide: tronAddressToEvm(this.finalReceiveSide()),\n                    sToken: tronAddressToEvm(amount.token.address),\n                    finalCallData: this.finalCalldata(),\n                    finalOffset: this.finalOffset(),\n                    chain2address: tronAddressToEvm(this.to),\n                    receiveSide: tronAddressToEvm(this.symbiosis.portal(this.tokenOut.chainId).address),\n                    oppositeBridge: tronAddressToEvm(this.symbiosis.bridge(this.tokenOut.chainId).address),\n                    revertableAddress: this.getRevertableAddress('BC'),\n                    chainID: this.tokenOut.chainId,\n                    clientID: this.symbiosis.clientId,\n                },\n            ]),\n        ]\n    }\n\n    protected metaSynthesize(fee1: TokenAmount, fee2: TokenAmount | undefined): [string, string] {\n        const chainIdIn = this.tokenAmountIn.token.chainId\n        const chainIdOut = this.transit.isV2() ? this.omniPoolConfig.chainId : this.tokenOut.chainId\n        const tokenAmount = this.transit.getBridgeAmountIn()\n\n        const portal = this.symbiosis.portal(chainIdIn)\n\n        return [\n            portal.address,\n            portal.interface.encodeFunctionData('metaSynthesize', [\n                {\n                    stableBridgingFee: fee1.raw.toString(),\n                    amount: tokenAmount.raw.toString(),\n                    rtoken: tronAddressToEvm(tokenAmount.token.address),\n                    chain2address: this.to,\n                    receiveSide: tronAddressToEvm(this.symbiosis.synthesis(chainIdOut).address),\n                    oppositeBridge: tronAddressToEvm(this.symbiosis.bridge(chainIdOut).address),\n                    syntCaller: tronAddressToEvm(this.from),\n                    chainID: chainIdOut,\n                    swapTokens: this.swapTokens().map(tronAddressToEvm),\n                    secondDexRouter: tronAddressToEvm(this.secondDexRouter()),\n                    secondSwapCalldata: this.secondSwapCalldata(),\n                    finalReceiveSide: tronAddressToEvm(this.transit.isV2() ? this.finalReceiveSideV2() : AddressZero),\n                    finalCalldata: this.transit.isV2() ? this.finalCalldataV2(fee2) : [],\n                    finalOffset: this.transit.isV2() ? this.finalOffsetV2() : 0,\n                    revertableAddress: this.getRevertableAddress('AB'),\n                    clientID: this.symbiosis.clientId,\n                },\n            ]),\n        ]\n    }\n\n    protected otherSideData(fee1: TokenAmount, fee2: TokenAmount | undefined): [string, string] {\n        return this.transit.direction === 'burn' ? this.metaBurnSyntheticToken(fee1) : this.metaSynthesize(fee1, fee2) // mint or v2\n    }\n\n    protected feeMintCallData(): [string, string] {\n        const chainIdIn = this.tokenAmountIn.token.chainId\n        const chainIdOut = this.transit.isV2() ? this.omniPoolConfig.chainId : this.tokenOut.chainId\n\n        const portalAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdIn).portal)\n        const synthesisAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdOut).synthesis)\n\n        const internalId = getInternalId({\n            contractAddress: portalAddress,\n            requestCount: MaxUint256,\n            chainId: chainIdIn,\n        })\n\n        const externalId = getExternalId({\n            internalId,\n            contractAddress: synthesisAddress,\n            revertableAddress: this.getRevertableAddress('AB'),\n            chainId: chainIdOut,\n        })\n\n        const amount = this.transit.getBridgeAmountIn()\n\n        const synthesisInterface = Synthesis__factory.createInterface()\n\n        const callData = synthesisInterface.encodeFunctionData('metaMintSyntheticToken', [\n            {\n                stableBridgingFee: '0',\n                amount: amount.raw.toString(),\n                crossChainID: CROSS_CHAIN_ID,\n                externalID: externalId,\n                tokenReal: tronAddressToEvm(amount.token.address),\n                chainID: chainIdIn,\n                to: tronAddressToEvm(this.to),\n                swapTokens: this.swapTokens().map(tronAddressToEvm),\n                secondDexRouter: tronAddressToEvm(this.secondDexRouter()),\n                secondSwapCalldata: this.secondSwapCalldata(),\n                finalReceiveSide: tronAddressToEvm(this.transit.isV2() ? this.finalReceiveSideV2() : AddressZero),\n                finalCalldata: this.transit.isV2() ? this.finalCalldataV2() : [],\n                finalOffset: this.transit.isV2() ? this.finalOffsetV2() : 0,\n            },\n        ])\n\n        return [synthesisAddress, callData]\n    }\n\n    protected feeBurnCallData(): [string, string] {\n        const chainIdIn = this.tokenAmountIn.token.chainId\n        const chainIdOut = this.tokenOut.chainId\n\n        const synthesisAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdIn).synthesis)\n        const portalAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdOut).portal)\n\n        const internalId = getInternalId({\n            contractAddress: synthesisAddress,\n            requestCount: MaxUint256,\n            chainId: chainIdIn,\n        })\n\n        const externalId = getExternalId({\n            internalId,\n            contractAddress: portalAddress,\n            revertableAddress: this.getRevertableAddress('AB'),\n            chainId: chainIdOut,\n        })\n\n        const amount = this.transit.amountOut\n\n        const portalInterface = Portal__factory.createInterface()\n\n        const calldata = portalInterface.encodeFunctionData('metaUnsynthesize', [\n            '0', // _stableBridgingFee\n            CROSS_CHAIN_ID, // crossChainID\n            externalId, // _externalID,\n            tronAddressToEvm(this.to), // _to\n            amount.raw.toString(), // _amount\n            tronAddressToEvm(amount.token.address), // _rToken\n            tronAddressToEvm(this.finalReceiveSide()), // _finalReceiveSide\n            this.finalCalldata(), // _finalCalldata\n            this.finalOffset(), // _finalOffset\n        ])\n\n        return [portalAddress, calldata]\n    }\n\n    protected feeBurnCallDataV2(): [string, string] {\n        const chainIdIn = this.omniPoolConfig.chainId\n        const chainIdOut = this.tokenOut.chainId\n\n        const synthesisAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdIn).synthesis)\n        const portalAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdOut).portal)\n\n        const internalId = getInternalId({\n            contractAddress: synthesisAddress,\n            requestCount: MaxUint256,\n            chainId: chainIdIn,\n        })\n\n        const externalId = getExternalId({\n            internalId,\n            contractAddress: portalAddress,\n            revertableAddress: this.getRevertableAddress('BC'),\n            chainId: chainIdOut,\n        })\n\n        const portalInterface = Portal__factory.createInterface()\n\n        const calldata = portalInterface.encodeFunctionData('metaUnsynthesize', [\n            '0', // _stableBridgingFee\n            CROSS_CHAIN_ID, // crossChainID\n            externalId, // _externalID,\n            tronAddressToEvm(this.to), // _to\n            this.transit.amountOut.raw.toString(), // _amount\n            tronAddressToEvm(this.transitTokenOut.address), // _rToken\n            tronAddressToEvm(this.finalReceiveSide()), // _finalReceiveSide\n            this.finalCalldata(), // _finalCalldata\n            this.finalOffset(), // _finalOffset\n        ])\n\n        return [portalAddress, calldata]\n    }\n\n    protected async getFee(feeToken: Token): Promise<{ fee: TokenAmount; save: TokenAmount }> {\n        const chainIdFrom = this.tokenAmountIn.token.chainId\n        const chainIdTo = this.transit.isV2() ? this.omniPoolConfig.chainId : this.tokenOut.chainId\n        const [receiveSide, calldata] =\n            this.transit.direction === 'burn' ? this.feeBurnCallData() : this.feeMintCallData() // mint or v2\n        const { price: fee, save } = await this.symbiosis.getBridgeFee({\n            receiveSide,\n            calldata,\n            chainIdFrom,\n            chainIdTo,\n        })\n\n        return {\n            fee: new TokenAmount(feeToken, fee),\n            save: new TokenAmount(feeToken, save),\n        }\n    }\n\n    protected async getFeeV2(feeToken: Token): Promise<{ fee: TokenAmount; save: TokenAmount }> {\n        const [receiveSide, calldata] = this.feeBurnCallDataV2()\n\n        const { price: fee, save } = await this.symbiosis.getBridgeFee({\n            receiveSide,\n            calldata,\n            chainIdFrom: this.omniPoolConfig.chainId,\n            chainIdTo: this.tokenOut.chainId,\n        })\n        return {\n            fee: new TokenAmount(feeToken, fee),\n            save: new TokenAmount(feeToken, save),\n        }\n    }\n\n    protected approvedTokens(): string[] {\n        let firstToken = this.tradeA ? this.tradeA.tokenAmountIn.token.address : this.tokenAmountIn.token.address\n        if (!firstToken) {\n            firstToken = AddressZero // AddressZero if first token is GasToken\n        }\n\n        let tokens: string[]\n        if (this.transit.direction === 'burn') {\n            tokens = [firstToken, ...this.transit.trade.route.map((i) => i.address)]\n        } else {\n            tokens = [firstToken, this.tradeA ? this.tradeA.amountOut.token.address : this.tokenAmountIn.token.address]\n        }\n        return tokens\n    }\n\n    protected firstDexRouter(): string {\n        return this.tradeA?.routerAddress || AddressZero\n    }\n\n    protected firstSwapCalldata(): string | [] {\n        return this.tradeA?.callData || []\n    }\n\n    protected secondDexRouter(): string {\n        const multicallRouter = this.symbiosis.multicallRouter(this.omniPoolConfig.chainId)\n        return multicallRouter.address\n    }\n\n    protected secondSwapCalldata(): string | [] {\n        const calls = this.transit.calls()\n        if (!calls) {\n            return []\n        }\n\n        const { calldatas, receiveSides, paths, offsets } = calls\n\n        // this flow when there is swap on host chain, for example, USDC -> BOBA\n        if (this.transit.direction === 'mint' && this.tradeC) {\n            calldatas.push(this.finalCalldata() as string)\n            receiveSides.push(this.finalReceiveSide())\n            paths.push(wrappedToken(this.tradeC.amountOut.token).address)\n            offsets.push(this.finalOffset())\n        }\n\n        const multicallRouter = this.symbiosis.multicallRouter(this.omniPoolConfig.chainId)\n        return multicallRouter.interface.encodeFunctionData('multicall', [\n            this.transit.amountIn.raw.toString(),\n            calldatas,\n            receiveSides,\n            paths,\n            offsets,\n            this.symbiosis.metaRouter(this.omniPoolConfig.chainId).address,\n        ])\n    }\n\n    protected finalReceiveSide(): string {\n        return this.tradeC?.routerAddress || AddressZero\n    }\n\n    protected finalCalldata(): string | [] {\n        return this.tradeC?.callData || []\n    }\n\n    protected finalOffset(): number {\n        return this.tradeC?.callDataOffset || 0\n    }\n\n    protected finalReceiveSideV2(): string {\n        return this.synthesisV2.address\n    }\n\n    protected finalCalldataV2(fee2?: TokenAmount | undefined): string {\n        const amount = this.transit.trade.amountOut\n        return this.synthesisV2.interface.encodeFunctionData('metaBurnSyntheticToken', [\n            {\n                stableBridgingFee: fee2 ? fee2?.raw.toString() : '0',\n                amount: amount.raw.toString(),\n                syntCaller: tronAddressToEvm(this.symbiosis.metaRouter(this.omniPoolConfig.chainId).address),\n                crossChainID: CROSS_CHAIN_ID,\n                finalReceiveSide: tronAddressToEvm(this.finalReceiveSide()),\n                sToken: tronAddressToEvm(amount.token.address),\n                finalCallData: this.finalCalldata(),\n                finalOffset: this.finalOffset(),\n                chain2address: tronAddressToEvm(this.to),\n                receiveSide: tronAddressToEvm(this.symbiosis.portal(this.tokenOut.chainId).address),\n                oppositeBridge: tronAddressToEvm(this.symbiosis.bridge(this.tokenOut.chainId).address),\n                revertableAddress: this.getRevertableAddress('BC'),\n                chainID: this.tokenOut.chainId,\n                clientID: this.symbiosis.clientId,\n            },\n        ])\n    }\n\n    protected finalOffsetV2(): number {\n        return 100\n    }\n\n    protected swapTokens(): string[] {\n        if (this.transit.trade.route.length === 0) {\n            return []\n        }\n\n        const tokens = [\n            this.transit.trade.route[0].address,\n            this.transit.trade.route[this.transit.trade.route.length - 1].address,\n        ]\n\n        if (this.transit.isV2()) {\n            return tokens\n        }\n\n        if (this.tradeC) {\n            tokens.push(wrappedToken(this.tradeC.amountOut.token).address)\n        } else {\n            tokens.push(...this.extraSwapTokens())\n        }\n        return tokens\n    }\n\n    protected extraSwapTokens(): string[] {\n        return []\n    }\n}\n","import { Symbiosis } from '../symbiosis'\nimport { Percent, Token, TokenAmount } from '../../entities'\nimport { MultiCallItem, PartnerFeeCallParams } from '../types'\nimport { PartnerFeeCollector__factory } from '../contracts'\nimport { BigNumber } from 'ethers'\nimport { BIPS_BASE } from '../constants'\n\nasync function getPartnerFeeCallParams({\n    symbiosis,\n    partnerAddress,\n    token,\n}: {\n    symbiosis: Symbiosis\n    partnerAddress: string\n    token: Token\n}): Promise<PartnerFeeCallParams | undefined> {\n    const { chainId } = token\n    const partnerFeeCollectorAddress = symbiosis.chainConfig(chainId).partnerFeeCollector\n    if (!partnerFeeCollectorAddress) {\n        return\n    }\n    const partnerFeeCollector = PartnerFeeCollector__factory.connect(\n        partnerFeeCollectorAddress,\n        symbiosis.getProvider(chainId)\n    )\n    const { isActive, feeRate } = await symbiosis.cache.get(\n        ['partnerFeeCollector', partnerFeeCollectorAddress, chainId.toString(), partnerAddress],\n        () => partnerFeeCollector.callStatic.partners(partnerAddress),\n        24 * 60 * 60 // 24 hours\n    )\n    if (!isActive) {\n        return\n    }\n    const fixedFee = await symbiosis.cache.get(\n        ['partnerFeeCollector', partnerFeeCollectorAddress, chainId.toString(), partnerAddress, token.address],\n        () => partnerFeeCollector.callStatic.fixedFee(partnerAddress, token.address),\n        24 * 60 * 60 // 24 hours\n    )\n\n    return {\n        partnerAddress,\n        partnerFeeCollector,\n        feeRate,\n        fixedFee,\n    }\n}\n\nfunction getPartnerFeeCallItem({\n    partnerFeeCallParams,\n    amountIn,\n    amountInMin,\n}: {\n    partnerFeeCallParams: PartnerFeeCallParams\n    amountIn: TokenAmount\n    amountInMin?: TokenAmount\n}): MultiCallItem {\n    const { partnerAddress, partnerFeeCollector, feeRate, fixedFee } = partnerFeeCallParams\n\n    const WAD = BigNumber.from(10).pow(18)\n    // amountOut\n    const amountInBn = BigNumber.from(amountIn.raw.toString())\n    const percentageFee = amountInBn.mul(feeRate).div(WAD)\n    const totalFee = percentageFee.add(fixedFee)\n    const fee = new TokenAmount(amountIn.token, totalFee.toString())\n    const amountOut = new TokenAmount(amountIn.token, amountInBn.sub(totalFee).toString())\n\n    // min amountOut\n    let amountOutMin = amountOut\n    if (amountInMin) {\n        const amountInMinBn = BigNumber.from(amountInMin.raw.toString())\n        const percentageFeeMin = amountInMinBn.mul(feeRate).div(WAD)\n        const totalFeeMin = percentageFeeMin.add(fixedFee)\n        amountOutMin = new TokenAmount(amountIn.token, amountInMinBn.sub(totalFeeMin).toString())\n    }\n\n    const data = partnerFeeCollector.interface.encodeFunctionData('collectFee', [\n        amountIn.raw.toString(),\n        amountIn.token.address,\n        partnerAddress,\n    ])\n\n    return {\n        priceImpact: new Percent('0', BIPS_BASE),\n        amountIn,\n        amountOut,\n        amountOutMin,\n        to: partnerFeeCollector.address,\n        data,\n        value: '0',\n        offset: 36,\n        fees: [\n            {\n                provider: 'symbiosis',\n                description: 'Partner fee',\n                value: fee,\n            },\n        ],\n        routes: [],\n    }\n}\n\nexport async function getPartnerFeeCall({\n    symbiosis,\n    amountIn,\n    amountInMin,\n    partnerAddress,\n}: {\n    symbiosis: Symbiosis\n    amountIn: TokenAmount\n    amountInMin?: TokenAmount\n    partnerAddress?: string\n}): Promise<MultiCallItem | undefined> {\n    if (!partnerAddress) {\n        return\n    }\n    const { token } = amountIn\n    const partnerFeeCallParams = await getPartnerFeeCallParams({\n        symbiosis,\n        partnerAddress,\n        token,\n    })\n    if (!partnerFeeCallParams) {\n        return\n    }\n\n    return getPartnerFeeCallItem({\n        partnerFeeCallParams,\n        amountIn,\n        amountInMin,\n    })\n}\n","import { Percent, TokenAmount } from '../../entities'\nimport { MultiCallItem, VolumeFeeCollector } from '../types'\nimport { OctoPoolFeeCollector__factory } from '../contracts'\nimport { BIPS_BASE } from '../constants'\nimport { BigNumber } from 'ethers'\n\nexport function getVolumeFeeCall({\n    feeCollector,\n    amountIn,\n    amountInMin,\n}: {\n    feeCollector: VolumeFeeCollector\n    amountIn: TokenAmount\n    amountInMin?: TokenAmount\n}): MultiCallItem {\n    const WAD = BigNumber.from(10).pow(18)\n    // amountOut\n    const amountInBn = BigNumber.from(amountIn.raw.toString())\n    const feeBn = amountInBn.mul(feeCollector.feeRate).div(WAD)\n    const fee = new TokenAmount(amountIn.token, feeBn.toString())\n    const amountOut = new TokenAmount(amountIn.token, amountInBn.sub(feeBn).toString())\n\n    // amountOutMin\n    let amountOutMin = amountOut\n    if (amountInMin) {\n        const amountInMinBn = BigNumber.from(amountInMin.raw.toString())\n        const feeMinBn = amountInMinBn.mul(feeCollector.feeRate).div(WAD)\n        amountOutMin = new TokenAmount(amountInMin.token, amountInMinBn.sub(feeMinBn).toString())\n    }\n    const data = OctoPoolFeeCollector__factory.createInterface().encodeFunctionData('collectFee', [\n        amountIn.raw.toString(),\n        amountIn.token.address,\n    ])\n\n    return {\n        priceImpact: new Percent('0', BIPS_BASE),\n        amountIn,\n        amountOut,\n        amountOutMin,\n        to: feeCollector.address,\n        data,\n        value: '0',\n        offset: 36,\n        fees: [\n            {\n                provider: 'symbiosis',\n                description: 'Volume fee',\n                value: fee,\n            },\n        ],\n        routes: [],\n    }\n}\n","import { Symbiosis } from './symbiosis'\nimport { chains, Token, TokenAmount } from '../entities'\nimport { ChainId } from '../constants'\nimport { AmountLessThanFeeError, NoRepresentationFoundError, SdkError } from './sdkError'\nimport { BridgeDirection, MultiCallItem, OmniPoolConfig } from './types'\nimport { OctoPoolTrade } from './trade'\nimport { getPartnerFeeCall } from './feeCall/getPartnerFeeCall'\nimport { getVolumeFeeCall } from './feeCall/getVolumeFeeCall'\n\ninterface CreateOctoPoolTradeParams {\n    tokenAmountIn: TokenAmount\n    tokenAmountInMin: TokenAmount\n    tokenOut: Token\n    to: string\n}\n\nexport interface TransitOutResult {\n    trade: OctoPoolTrade\n    amountOut: TokenAmount\n    amountOutMin: TokenAmount\n    volumeFeeCall?: MultiCallItem\n    partnerFeeCall?: MultiCallItem\n}\n\nclass OutNotInitializedError extends Error {\n    constructor(msg?: string) {\n        super(`Out is not initialized: ${msg}`)\n    }\n}\n\ntype TransitParams = {\n    symbiosis: Symbiosis\n    amountIn: TokenAmount\n    amountInMin: TokenAmount\n    tokenOut: Token\n    slippage: number\n    deadline: number\n    omniPoolConfig: OmniPoolConfig\n    fee1?: TokenAmount\n    fee2?: TokenAmount\n    partnerAddress?: string\n}\n\nexport class Transit {\n    public symbiosis: Symbiosis\n    public amountIn: TokenAmount\n    public amountInMin: TokenAmount\n    public tokenOut: Token\n    public slippage: number\n    public deadline: number\n    public omniPoolConfig: OmniPoolConfig\n    public fee1?: TokenAmount\n    public fee2?: TokenAmount\n    public partnerAddress?: string\n    public direction: BridgeDirection\n    public feeToken1: Token\n    public feeToken2: Token | undefined\n\n    protected out?: TransitOutResult\n\n    public constructor({\n        symbiosis,\n        amountIn,\n        amountInMin,\n        tokenOut,\n        slippage,\n        deadline,\n        omniPoolConfig,\n        fee1,\n        fee2,\n        partnerAddress,\n    }: TransitParams) {\n        this.symbiosis = symbiosis\n        this.amountIn = amountIn\n        this.amountInMin = amountInMin\n        this.tokenOut = tokenOut\n        this.slippage = slippage\n        this.deadline = deadline\n        this.omniPoolConfig = omniPoolConfig\n        this.fee1 = fee1\n        this.fee2 = fee2\n        this.partnerAddress = partnerAddress\n        this.direction = Transit.getDirection(amountIn.token.chainId, tokenOut.chainId, omniPoolConfig.chainId)\n\n        this.feeToken1 = this.getFeeToken1()\n        this.feeToken2 = this.getFeeToken2()\n\n        if (fee1 && !this.feeToken1.equals(fee1.token)) {\n            throw new SdkError('Incorrect fee1 token set')\n        }\n        if (fee2 && this.feeToken2 && !this.feeToken2.equals(fee2.token)) {\n            throw new SdkError('Incorrect fee2 token set')\n        }\n    }\n\n    get amountOut(): TokenAmount {\n        this.assertOutInitialized('amountOut')\n        return this.out.amountOut\n    }\n\n    get amountOutMin(): TokenAmount {\n        this.assertOutInitialized('amountOutMin')\n        return this.out.amountOutMin\n    }\n\n    get trade(): OctoPoolTrade {\n        this.assertOutInitialized('trade')\n        return this.out.trade\n    }\n\n    get volumeFeeCall(): MultiCallItem | undefined {\n        this.assertOutInitialized('volumeFeeCall')\n        return this.out.volumeFeeCall\n    }\n\n    get partnerFeeCall(): MultiCallItem | undefined {\n        this.assertOutInitialized('partnerFeeCall')\n        return this.out.partnerFeeCall\n    }\n\n    public async init(): Promise<Transit> {\n        const { tradeAmountIn, tradeAmountInMin } = this.getTradeAmountsIn(this.amountIn, this.amountInMin)\n        const tradeTokenOut = this.getTradeTokenOut()\n\n        const to = this.symbiosis.multicallRouter(this.omniPoolConfig.chainId).address\n\n        const trade = await this.createOctoPoolTrade({\n            tokenAmountIn: tradeAmountIn,\n            tokenAmountInMin: tradeAmountInMin,\n            tokenOut: tradeTokenOut,\n            to,\n        })\n\n        const { amountOut, amountOutMin, volumeFeeCall, partnerFeeCall } = await this.getAmountsOut(trade)\n\n        this.out = {\n            amountOut,\n            amountOutMin,\n            trade,\n            volumeFeeCall,\n            partnerFeeCall,\n        }\n        return this\n    }\n\n    public isV2() {\n        return this.direction === 'v2'\n    }\n\n    public calls() {\n        this.assertOutInitialized('calls')\n\n        const calldatas = []\n        const receiveSides = []\n        const paths = []\n        const offsets = []\n\n        // octopool swap\n        calldatas.push(this.trade.callData)\n        receiveSides.push(this.trade.routerAddress)\n        paths.push(...[this.trade.tokenAmountIn.token.address, this.trade.amountOut.token.address])\n        offsets.push(this.trade.callDataOffset)\n\n        if (this.volumeFeeCall) {\n            calldatas.push(this.volumeFeeCall.data)\n            receiveSides.push(this.volumeFeeCall.to)\n            paths.push(this.volumeFeeCall.amountIn.token.address)\n            offsets.push(this.volumeFeeCall.offset)\n        }\n\n        if (this.partnerFeeCall) {\n            calldatas.push(this.partnerFeeCall.data)\n            receiveSides.push(this.partnerFeeCall.to)\n            paths.push(this.partnerFeeCall.amountIn.token.address)\n            offsets.push(this.partnerFeeCall.offset)\n        }\n\n        return {\n            calldatas,\n            receiveSides,\n            paths,\n            offsets,\n        }\n    }\n\n    public getBridgeAmountIn(): TokenAmount {\n        this.assertOutInitialized('getBridgeAmountIn')\n\n        if (this.direction === 'burn') {\n            return this.trade.amountOut\n        }\n\n        return this.amountIn\n    }\n\n    public async applyFees(fee1: TokenAmount, fee2?: TokenAmount) {\n        this.assertOutInitialized('applyFees')\n\n        if (!fee1.token.equals(this.feeToken1)) {\n            throw new SdkError('Incorrect fee1 token')\n        }\n        this.fee1 = fee1\n\n        if (this.isV2()) {\n            if (!fee2) {\n                throw new SdkError('fee2 should be passed')\n            }\n            if (!this.feeToken2) {\n                throw new SdkError('feeToken2 should have been initialized')\n            }\n            if (!fee2.token.equals(this.feeToken2)) {\n                throw new SdkError('Incorrect fee2 token')\n            }\n            this.fee2 = fee2\n        }\n\n        const { tradeAmountIn: newAmountIn, tradeAmountInMin: newAmountInMin } = this.getTradeAmountsIn(\n            this.amountIn,\n            this.amountInMin\n        )\n        this.trade.applyAmountIn(newAmountIn, newAmountInMin)\n\n        const { amountOut, amountOutMin, volumeFeeCall, partnerFeeCall } = await this.getAmountsOut(this.trade)\n\n        this.out = {\n            trade: this.trade,\n            volumeFeeCall,\n            partnerFeeCall,\n            amountOut,\n            amountOutMin,\n        }\n    }\n\n    public async createOctoPoolTrade(params: CreateOctoPoolTradeParams) {\n        const trade = new OctoPoolTrade({\n            ...params,\n            slippage: this.slippage,\n            deadline: this.deadline,\n            symbiosis: this.symbiosis,\n            omniPoolConfig: this.omniPoolConfig,\n        })\n        await trade.init()\n\n        return trade\n    }\n\n    // PRIVATE\n\n    private getFeeToken1(): Token {\n        if (this.direction === 'burn') {\n            return this.tokenOut\n        }\n\n        const tokenIn = this.amountIn.token\n        const sTokenChainId = this.isV2() ? this.omniPoolConfig.chainId : this.tokenOut.chainId\n        const sToken = this.symbiosis.getRepresentation(tokenIn, sTokenChainId)\n        if (!sToken) {\n            throw new NoRepresentationFoundError(\n                `Representation of ${tokenIn.chainId}:${tokenIn.symbol} in chain ${sTokenChainId} not found`\n            )\n        }\n        return sToken\n    }\n\n    private getFeeToken2(): Token | undefined {\n        if (!this.isV2()) {\n            return\n        }\n\n        return this.tokenOut\n    }\n\n    private async getAmountsOut(trade: OctoPoolTrade): Promise<{\n        amountOut: TokenAmount\n        amountOutMin: TokenAmount\n        volumeFeeCall: MultiCallItem | undefined\n        partnerFeeCall: MultiCallItem | undefined\n    }> {\n        const { tokenAmountIn: tradeAmountIn, amountOut: tradeAmountOut, amountOutMin: tradeAmountOutMin } = trade\n        let volumeFeeCall: MultiCallItem | undefined = undefined\n\n        let amountOut = tradeAmountOut\n        let amountOutMin = tradeAmountOutMin\n\n        const involvedChainIds = [tradeAmountIn.token.chainId, tradeAmountOut.token.chainId]\n        if (tradeAmountIn.token.chainFromId) {\n            involvedChainIds.push(tradeAmountIn.token.chainFromId)\n        }\n        if (tradeAmountOut.token.chainFromId) {\n            involvedChainIds.push(tradeAmountOut.token.chainFromId)\n        }\n        const volumeFeeCollector = this.symbiosis.getVolumeFeeCollector(tradeAmountIn.token.chainId, involvedChainIds)\n        if (volumeFeeCollector && this.omniPoolConfig.coinGeckoId !== 'usd-coin') {\n            volumeFeeCall = getVolumeFeeCall({\n                feeCollector: volumeFeeCollector,\n                amountIn: amountOut,\n                amountInMin: amountOutMin,\n            })\n            amountOut = volumeFeeCall.amountOut\n            amountOutMin = volumeFeeCall.amountOutMin\n        }\n\n        const partnerFeeCall = await getPartnerFeeCall({\n            symbiosis: this.symbiosis,\n            amountIn: amountOut,\n            amountInMin: amountOutMin,\n            partnerAddress: this.partnerAddress,\n        })\n        if (partnerFeeCall) {\n            amountOut = partnerFeeCall.amountOut\n            amountOutMin = partnerFeeCall.amountOutMin\n        }\n\n        if (this.direction === 'mint') {\n            return {\n                volumeFeeCall,\n                partnerFeeCall,\n                amountOut,\n                amountOutMin,\n            }\n        }\n\n        // replace synthetic token by real token\n        amountOut = new TokenAmount(this.tokenOut, amountOut.raw)\n        amountOutMin = new TokenAmount(this.tokenOut, amountOutMin.raw)\n\n        let fee = this.fee1\n        if (this.isV2()) {\n            fee = this.fee2\n        }\n        if (fee) {\n            if (amountOutMin.lessThan(fee) || amountOutMin.equalTo(fee)) {\n                throw new AmountLessThanFeeError(\n                    `Amount ${amountOutMin.toSignificant()} ${\n                        amountOutMin.token.symbol\n                    } less than fee ${fee.toSignificant()} ${fee.token.symbol}`\n                )\n            }\n            amountOut = amountOut.subtract(fee)\n            amountOutMin = amountOutMin.subtract(fee)\n        }\n\n        return {\n            volumeFeeCall,\n            partnerFeeCall,\n            amountOut,\n            amountOutMin,\n        }\n    }\n\n    private getTradeAmountsIn(\n        amountIn: TokenAmount,\n        amountInMin: TokenAmount\n    ): {\n        tradeAmountIn: TokenAmount\n        tradeAmountInMin: TokenAmount\n    } {\n        if (this.direction === 'burn') {\n            return {\n                tradeAmountIn: amountIn,\n                tradeAmountInMin: amountInMin,\n            }\n        }\n\n        let tradeAmountIn = new TokenAmount(this.feeToken1, amountIn.raw)\n        let tradeAmountInMin = new TokenAmount(this.feeToken1, amountInMin.raw)\n        if (this.fee1) {\n            if (tradeAmountInMin.lessThan(this.fee1) || tradeAmountInMin.equalTo(this.fee1)) {\n                throw new AmountLessThanFeeError(\n                    `Amount ${tradeAmountInMin.toSignificant()} ${\n                        tradeAmountInMin.token.symbol\n                    } less than fee ${this.fee1.toSignificant()} ${this.fee1.token.symbol}`\n                )\n            }\n            tradeAmountIn = tradeAmountIn.subtract(this.fee1)\n            tradeAmountInMin = tradeAmountInMin.subtract(this.fee1)\n        }\n\n        return {\n            tradeAmountIn,\n            tradeAmountInMin,\n        }\n    }\n\n    private getTradeTokenOut(): Token {\n        if (this.direction === 'mint') {\n            return this.tokenOut\n        }\n\n        const sTokenChainId = this.isV2() ? this.omniPoolConfig.chainId : this.amountIn.token.chainId\n        const sToken = this.symbiosis.getRepresentation(this.tokenOut, sTokenChainId)\n        if (!sToken) {\n            throw new NoRepresentationFoundError(\n                `Representation of ${this.tokenOut.symbol} in chain ${sTokenChainId} not found`\n            )\n        }\n        return sToken\n    }\n\n    private static getDirection(chainIdIn: ChainId, chainIdOut: ChainId, hostChainId: ChainId): BridgeDirection {\n        const withHostChain = chainIdIn === hostChainId || chainIdOut === hostChainId\n        if (!withHostChain) {\n            return 'v2'\n        }\n\n        const chainsExceptHostChain = chains.map((chain) => chain.id).filter((chainId) => chainId !== hostChainId)\n        const chainsWithHostChain = [...chainsExceptHostChain, hostChainId]\n\n        const indexIn = chainsWithHostChain.indexOf(chainIdIn)\n        if (indexIn === -1) {\n            throw new SdkError(`Chain ${chainIdIn} not found in chains priority`)\n        }\n        const indexOut = chainsWithHostChain.indexOf(chainIdOut)\n        if (indexOut === -1) {\n            throw new SdkError(`Chain ${chainIdOut} not found in chains priority`)\n        }\n\n        return indexIn > indexOut ? 'burn' : 'mint'\n    }\n\n    private assertOutInitialized(msg?: string): asserts this is {\n        out: TransitOutResult\n    } {\n        if (!this.out) {\n            throw new OutNotInitializedError(msg)\n        }\n    }\n}\n","import { ChainId } from '../constants'\nimport { Token } from '../entities'\n\nexport function isUseOneInchOnly(tokenIn: Token, tokenOut: Token): boolean {\n    return [tokenIn.chainId, tokenOut.chainId].some((i) => i === ChainId.TRON_MAINNET)\n}\n","import { BaseSwapping } from './baseSwapping'\nimport { SwapExactInParams, SwapExactInResult } from '../types'\n\nexport class Swapping extends BaseSwapping {\n    public async exactIn(params: Omit<SwapExactInParams, 'symbiosis'>): Promise<SwapExactInResult> {\n        return this.doExactIn(params)\n    }\n}\n","import { Address } from '@ton/core'\nimport { AddressZero } from '@ethersproject/constants'\n\nimport { BaseSwapping } from './baseSwapping'\nimport { Token, TokenAmount } from '../../entities'\nimport { CROSS_CHAIN_ID } from '../constants'\n\nimport { SwapExactInParams, SwapExactInResult } from '../types'\nimport { tonAdvisorMock } from '../chainUtils'\n\nexport class SwappingToTon extends BaseSwapping {\n    protected userAddress!: string\n\n    public async exactIn(params: Omit<SwapExactInParams, 'symbiosis'>): Promise<SwapExactInResult> {\n        this.userAddress = params.to\n\n        return this.doExactIn({\n            ...params,\n            to: params.from,\n        })\n    }\n\n    // TODO: remove when advisor is ready\n    protected async getFee(feeToken: Token): Promise<{ fee: TokenAmount; save: TokenAmount }> {\n        return tonAdvisorMock(feeToken)\n    }\n\n    // TODO: remove when advisor is ready\n    protected async getFeeV2(feeToken: Token): Promise<{ fee: TokenAmount; save: TokenAmount }> {\n        return tonAdvisorMock(feeToken)\n    }\n\n    protected metaBurnSyntheticToken(fee: TokenAmount): [string, string] {\n        const synthesis = this.symbiosis.synthesis(this.tokenAmountIn.token.chainId)\n        const amount = this.transit.trade.amountOut\n        const { workChain, hash } = Address.parse(this.userAddress)\n        const tonAddress = {\n            workchain: workChain,\n            address_hash: `0x${hash.toString('hex')}`,\n        }\n\n        return [\n            synthesis.address,\n            synthesis.interface.encodeFunctionData('burnSyntheticTokenTON', [\n                fee.raw.toString(),\n                amount.token.address,\n                amount.raw.toString(),\n                CROSS_CHAIN_ID,\n                tonAddress,\n                AddressZero, // any arbtitary data, this addresses passed from relayer\n                AddressZero, // any arbtitary data, this addresses passed from relayer\n                this.from,\n                this.tokenOut.chainId,\n                this.symbiosis.clientId,\n            ]),\n        ]\n    }\n\n    protected finalOffsetV2(): number {\n        return 100\n    }\n\n    protected finalCalldataV2(feeV2?: TokenAmount | undefined): string {\n        const amount = this.transit.trade.amountOut\n        const { workChain, hash } = Address.parse(this.userAddress)\n        const tonAddress = {\n            workchain: workChain,\n            address_hash: `0x${hash.toString('hex')}`,\n        }\n\n        return this.synthesisV2.interface.encodeFunctionData('burnSyntheticTokenTON', [\n            feeV2 ? feeV2?.raw.toString() : '0', // uint256 stableBridgingFee;\n            amount.token.address,\n            amount.raw.toString(),\n            CROSS_CHAIN_ID,\n            tonAddress,\n            AddressZero,\n            AddressZero,\n            this.from,\n            this.tokenOut.chainId,\n            this.symbiosis.clientId,\n        ])\n    }\n}\n","import { BaseSwapping } from './baseSwapping'\nimport { Swapping } from './swapping'\nimport { SwapExactInParams, SwapExactInResult } from '../types'\n\nexport class SwappingMiddleware extends BaseSwapping {\n    protected middlewareAddress!: string\n    protected middlewareData!: string\n    protected middlewareOffset!: number\n\n    public async exactIn(params: Omit<SwapExactInParams, 'symbiosis'>): Promise<SwapExactInResult> {\n        const { middlewareCall } = params\n        if (!middlewareCall) {\n            const { symbiosis, omniPoolConfig } = this\n            const swapping = new Swapping(symbiosis, omniPoolConfig)\n            return swapping.doExactIn(params)\n        }\n\n        const { address, data, offset } = middlewareCall\n\n        this.middlewareAddress = address\n        this.middlewareData = data\n        this.middlewareOffset = offset\n\n        return this.doExactIn(params)\n    }\n\n    protected finalReceiveSide(): string {\n        return this.middlewareAddress\n    }\n\n    protected finalCalldata(): string | [] {\n        return this.middlewareData\n    }\n\n    protected finalOffset(): number {\n        return this.middlewareOffset\n    }\n}\n","import { GAS_TOKEN, Token, TokenAmount } from '../../entities'\nimport { BaseSwapping } from './baseSwapping'\nimport { MulticallRouter, Synthesis } from '../contracts'\nimport { OneInchProtocols } from '../trade/oneInchTrade'\nimport { initEccLib } from 'bitcoinjs-lib'\nimport ecc from '@bitcoinerlab/secp256k1'\nimport { getPkScript, getThreshold, getToBtcFee } from '../chainUtils/btc'\nimport { FeeItem, MultiCallItem, SwapExactInResult } from '../types'\nimport { isEvmChainId } from '../chainUtils'\nimport { getPartnerFeeCall } from '../feeCall/getPartnerFeeCall'\nimport { BytesLike } from 'ethers'\nimport { getVolumeFeeCall } from '../feeCall/getVolumeFeeCall'\nimport { ChainId } from '../../constants'\nimport { AmountLessThanFeeError, AmountTooLowError, SdkError } from '../sdkError'\n\ninitEccLib(ecc)\n\ninterface ZappingBtcExactInParams {\n    tokenAmountIn: TokenAmount\n    syBtc: Token\n    from: string\n    to: string\n    slippage: number\n    deadline: number\n    oneInchProtocols?: OneInchProtocols\n    transitTokenIn: Token\n    transitTokenOut: Token\n    partnerAddress?: string\n}\n\nexport class ZappingBtc extends BaseSwapping {\n    protected multicallRouter!: MulticallRouter\n    protected bitcoinAddress!: Buffer\n\n    protected syBtc!: Token\n    protected minBtcFee!: TokenAmount\n    protected threshold!: TokenAmount\n    protected synthesis!: Synthesis\n    protected evmTo!: string\n    protected partnerFeeCall?: MultiCallItem\n    protected volumeFeeCall?: MultiCallItem\n\n    protected async doPostTransitAction(): Promise<void> {\n        const amount = this.tradeC ? this.tradeC.amountOut : this.transit.amountOut\n        const amountMin = this.tradeC ? this.tradeC.amountOutMin : this.transit.amountOutMin\n\n        const [minBtcFee, threshold] = await Promise.all([\n            getToBtcFee(amount, this.synthesis, this.symbiosis.cache),\n            getThreshold(amount, this.synthesis, this.symbiosis.cache),\n        ])\n        this.minBtcFee = minBtcFee\n        this.threshold = threshold\n\n        this.partnerFeeCall = await getPartnerFeeCall({\n            symbiosis: this.symbiosis,\n            amountIn: amount,\n            amountInMin: amountMin,\n            partnerAddress: undefined, // do not charge partnerFee twice\n        })\n\n        const volumeFeeCollector = this.symbiosis.getVolumeFeeCollector(amount.token.chainId, [ChainId.BTC_MAINNET])\n        if (volumeFeeCollector) {\n            this.volumeFeeCall = getVolumeFeeCall({\n                feeCollector: volumeFeeCollector,\n                amountIn: amount,\n                amountInMin: amountMin,\n            })\n        }\n    }\n\n    public async exactIn({\n        tokenAmountIn,\n        syBtc,\n        from,\n        to,\n        slippage,\n        deadline,\n        transitTokenIn,\n        transitTokenOut,\n        partnerAddress,\n    }: ZappingBtcExactInParams): Promise<SwapExactInResult> {\n        if (!syBtc.chainFromId) {\n            throw new SdkError('syBtc is not synthetic')\n        }\n        const btc = GAS_TOKEN[syBtc.chainFromId]\n\n        this.bitcoinAddress = getPkScript(to, syBtc.chainFromId)\n        this.syBtc = syBtc\n\n        const chainId = syBtc.chainId\n\n        this.multicallRouter = this.symbiosis.multicallRouter(chainId)\n        this.synthesis = this.symbiosis.synthesis(chainId)\n\n        this.evmTo = from\n        if (!isEvmChainId(tokenAmountIn.token.chainId)) {\n            this.evmTo = this.symbiosis.config.refundAddress\n        }\n        const result = await this.doExactIn({\n            tokenAmountIn,\n            tokenOut: syBtc,\n            from,\n            to: this.evmTo,\n            slippage,\n            deadline,\n            transitTokenIn,\n            transitTokenOut,\n            partnerAddress,\n        })\n\n        let amountOut = result.tokenAmountOut\n        let amountOutMin = result.tokenAmountOutMin\n        let partnerFee = new TokenAmount(syBtc, '0')\n        if (this.partnerFeeCall) {\n            amountOut = this.partnerFeeCall.amountOut\n            amountOutMin = this.partnerFeeCall.amountOutMin\n            if (this.partnerFeeCall.fees.length > 0) {\n                partnerFee = this.partnerFeeCall.fees[0].value\n            }\n        }\n        let volumeFee = new TokenAmount(syBtc, '0')\n        if (this.volumeFeeCall) {\n            amountOut = this.volumeFeeCall.amountOut\n            amountOutMin = this.volumeFeeCall.amountOutMin\n            if (this.volumeFeeCall.fees.length > 0) {\n                volumeFee = this.volumeFeeCall.fees[0].value\n            }\n        }\n\n        if (amountOut.lessThan(this.minBtcFee) || amountOutMin.lessThan(this.minBtcFee)) {\n            throw new AmountLessThanFeeError(\n                `Min amount: ${this.minBtcFee.toSignificant()} ${this.minBtcFee.token.symbol}`\n            )\n        }\n        if (amountOut.lessThan(this.threshold) || amountOutMin.lessThan(this.threshold)) {\n            throw new AmountTooLowError(\n                `Amount is too low. Min amount: ${this.threshold.toSignificant()} ${this.threshold.token.symbol}`\n            )\n        }\n\n        const tokenAmountOut = new TokenAmount(btc, amountOut.subtract(this.minBtcFee).raw)\n        const tokenAmountOutMin = new TokenAmount(btc, amountOutMin.subtract(this.minBtcFee).raw)\n\n        await this.symbiosis.checkDustLimit(tokenAmountOutMin)\n\n        const fees = [\n            ...result.fees,\n            {\n                provider: 'symbiosis',\n                description: 'BTC fee',\n                value: this.minBtcFee,\n            } as FeeItem,\n        ]\n\n        if (partnerFee) {\n            fees.push({\n                provider: 'symbiosis',\n                description: 'Partner fee',\n                value: partnerFee,\n            } as FeeItem)\n        }\n\n        if (volumeFee) {\n            fees.push({\n                provider: 'symbiosis',\n                description: 'Volume fee',\n                value: volumeFee,\n            } as FeeItem)\n        }\n\n        return {\n            ...result,\n            tokenAmountOut,\n            tokenAmountOutMin,\n            fees,\n            routes: [\n                ...result.routes,\n                {\n                    provider: 'symbiosis',\n                    tokens: [syBtc, btc],\n                },\n            ],\n        }\n    }\n\n    protected tradeCTo(): string {\n        return this.multicallRouter.address\n    }\n\n    protected finalReceiveSide(): string {\n        return this.multicallRouter.address\n    }\n\n    protected finalCalldata(): string | [] {\n        return this.buildMulticall()\n    }\n\n    protected finalOffset(): number {\n        return 36\n    }\n\n    private buildMulticall() {\n        const callDatas: BytesLike[] = []\n        const receiveSides = []\n        const path = []\n        const offsets = []\n        const amount = this.transit.amountOut\n\n        if (this.tradeC) {\n            callDatas.push(this.tradeC.callData)\n            receiveSides.push(this.tradeC.routerAddress)\n            path.push(this.tradeC.tokenAmountIn.token.address)\n            offsets.push(this.tradeC.callDataOffset!)\n        }\n\n        if (this.partnerFeeCall) {\n            callDatas.push(this.partnerFeeCall.data)\n            receiveSides.push(this.partnerFeeCall.to)\n            path.push(this.partnerFeeCall.amountIn.token.address)\n            offsets.push(this.partnerFeeCall.offset)\n        }\n\n        if (this.volumeFeeCall) {\n            callDatas.push(this.volumeFeeCall.data)\n            receiveSides.push(this.volumeFeeCall.to)\n            path.push(this.volumeFeeCall.amountIn.token.address)\n            offsets.push(this.volumeFeeCall.offset)\n        }\n\n        const burnCalldata = this.synthesis.interface.encodeFunctionData('burnSyntheticTokenBTC', [\n            this.minBtcFee.raw.toString(), // _stableBridgingFee must be >= minBtcFee\n            '0', // _amount will be patched\n            this.bitcoinAddress, // _to\n            this.syBtc.address, // _stoken\n            this.symbiosis.clientId, // _clientID\n        ])\n\n        callDatas.push(burnCalldata)\n        receiveSides.push(this.synthesis.address)\n        path.push(this.syBtc.address)\n        offsets.push(68)\n\n        return this.multicallRouter.interface.encodeFunctionData('multicall', [\n            amount.raw.toString(),\n            callDatas,\n            receiveSides,\n            path,\n            offsets,\n            this.evmTo,\n        ])\n    }\n}\n","import { ChainId } from '../../constants'\nimport { GAS_TOKEN, Token, TokenAmount } from '../../entities'\nimport { BaseSwapping } from './baseSwapping'\nimport { MulticallRouter, ThorRouter__factory } from '../contracts'\nimport fetch from 'isomorphic-unfetch'\nimport { OneInchProtocols } from '../trade/oneInchTrade'\nimport { ThorChainError } from '../sdkError'\nimport { BigNumber } from 'ethers'\nimport { getMinAmount, isEvmChainId } from '../chainUtils'\nimport { AddressType, getAddressInfo, validate } from 'bitcoin-address-validation'\nimport { SwapExactInResult } from '../types'\n\nexport interface ZappingThorExactInParams {\n    tokenAmountIn: TokenAmount\n    thorTokenIn: Token\n    from: string\n    to: string\n    slippage: number\n    deadline: number\n    partnerAddress?: string\n    oneInchProtocols?: OneInchProtocols\n}\n\ntype ThorQuote = {\n    memo: string\n    amountOut: TokenAmount\n    amountOutMin: TokenAmount\n    router: string\n    expiry: string\n    fees: {\n        asset: string\n        total: string\n    }\n}\n\nconst BTC = GAS_TOKEN[ChainId.BTC_MAINNET]\n\nconst thorApiUrl = 'https://thornode.ninerealms.com'\n\ntype ThorPool = {\n    asset: string\n    status: 'Available' | 'Staged'\n    pending_inbound_asset: string\n    pending_inbound_rune: string\n    balance_asset: string\n    balance_rune: string\n    pool_units: string\n    LP_units: string\n    synth_units: string\n    synth_supply: string\n    savers_depth: string\n    savers_units: string\n    synth_mint_paused: false\n    synth_supply_remaining: string\n    loan_collateral: string\n    loan_cr: string\n    derived_depth_bps: string\n}\n\nfunction toThorToken(token: Token): string {\n    const chain = toThorChain(token.chainId)\n    return `${chain}.${token.symbol}-${token.address.toUpperCase()}`\n}\n\nfunction toThorChain(chainId: ChainId): string {\n    let chain\n    if (chainId === ChainId.AVAX_MAINNET) {\n        chain = 'AVAX'\n    } else if (chainId === ChainId.ETH_MAINNET) {\n        chain = 'ETH'\n    } else if (chainId === ChainId.BSC_MAINNET) {\n        chain = 'BSC'\n    } else {\n        throw new ThorChainError(`Unknown chain: ${chainId}`)\n    }\n    return chain\n}\n\nfunction toThorAmount(tokenAmount: TokenAmount): BigNumber {\n    const tokenDecimals = BigNumber.from(10).pow(tokenAmount.token.decimals)\n    const thorDecimals = BigNumber.from(10).pow(8)\n    return BigNumber.from(tokenAmount.raw.toString()).mul(thorDecimals).div(tokenDecimals)\n}\n\nconst MIN_AMOUNT_IN = 100\n\nexport class ZappingThor extends BaseSwapping {\n    protected multicallRouter!: MulticallRouter\n    protected bitcoinAddress!: string\n\n    protected thorTokenIn!: Token\n    protected thorTokenOut = 'BTC.BTC'\n    protected thorVault!: string\n    protected thorQuote!: ThorQuote\n    protected evmTo!: string\n\n    protected async doPostTransitAction() {\n        const amountIn = parseFloat(this.transit.amountIn.toSignificant())\n        if (amountIn < MIN_AMOUNT_IN) {\n            throw new ThorChainError(`The min swap amount towards Bitcoin is $${MIN_AMOUNT_IN}`)\n        }\n        this.thorQuote = await this.getThorQuote(this.transit.amountOut)\n    }\n\n    public async exactIn({\n        tokenAmountIn,\n        thorTokenIn,\n        from,\n        to,\n        slippage,\n        deadline,\n        partnerAddress,\n    }: ZappingThorExactInParams): Promise<SwapExactInResult> {\n        const isAddressValid = validate(to)\n        if (!isAddressValid) {\n            throw new ThorChainError('Bitcoin address is not valid')\n        }\n        const addressInfo = getAddressInfo(to)\n        if (addressInfo.type === AddressType.p2tr) {\n            throw new ThorChainError(`ThorChain doesn't support taproot addresses`)\n        }\n        this.bitcoinAddress = to\n        this.thorTokenIn = thorTokenIn\n\n        this.evmTo = from\n        if (!isEvmChainId(tokenAmountIn.token.chainId)) {\n            this.evmTo = this.symbiosis.config.refundAddress\n        }\n\n        // check if there is \"Available\" ThorChain pool at the moment\n        await ZappingThor.getThorPools(thorTokenIn)\n\n        this.multicallRouter = this.symbiosis.multicallRouter(thorTokenIn.chainId)\n        this.thorVault = await ZappingThor.getThorVault(thorTokenIn)\n\n        const transitTokenIn = this.symbiosis.transitToken(tokenAmountIn.token.chainId, this.omniPoolConfig)\n        const transitTokenOut = this.symbiosis.transitToken(thorTokenIn.chainId, this.omniPoolConfig)\n        if (transitTokenIn.equals(transitTokenOut)) {\n            throw new ThorChainError('Same transit token')\n        }\n\n        const result = await this.doExactIn({\n            tokenAmountIn,\n            tokenOut: thorTokenIn,\n            from,\n            to: this.evmTo,\n            slippage,\n            deadline,\n            transitTokenIn,\n            transitTokenOut,\n            partnerAddress,\n        })\n\n        return {\n            ...result,\n            tokenAmountOut: this.thorQuote.amountOut,\n            tokenAmountOutMin: this.thorQuote.amountOutMin,\n            routes: [\n                ...result.routes,\n                {\n                    provider: 'thorchain-bridge',\n                    tokens: [thorTokenIn, BTC],\n                },\n            ],\n            fees: [\n                ...result.fees,\n                {\n                    provider: 'thorchain-bridge',\n                    description: 'THORChain fee',\n                    value: new TokenAmount(BTC, this.thorQuote.fees.total),\n                },\n            ],\n        }\n    }\n\n    protected static async getThorPools(token: Token): Promise<ThorPool> {\n        const url = new URL('/thorchain/pools', thorApiUrl)\n        const response = await fetch(url.toString(), {\n            headers: {\n                'x-client-id': 'symbiosis',\n            },\n        })\n\n        const json = (await response.json()) as ThorPool[]\n\n        const found = json.find((i: ThorPool) => {\n            return i.asset === toThorToken(token)\n        })\n        if (!found) {\n            throw new ThorChainError('Thor pool not found')\n        }\n        if (found.status !== 'Available') {\n            throw new ThorChainError('Thor pool is not available')\n        }\n        return found\n    }\n\n    protected static async getThorVault(token: Token): Promise<string> {\n        const url = new URL('/thorchain/inbound_addresses', thorApiUrl)\n        const response = await fetch(url.toString(), {\n            headers: {\n                'x-client-id': 'symbiosis',\n            },\n        })\n\n        const json = await response.json()\n\n        if (json.error) {\n            throw new ThorChainError(json.error)\n        }\n\n        const found = json.find((i: any) => {\n            return i.chain === toThorChain(token.chainId)\n        })\n        if (!found) {\n            throw new ThorChainError('Thor vault not found')\n        }\n        return found.address\n    }\n\n    protected async getThorQuote(amount: TokenAmount): Promise<ThorQuote> {\n        const url = new URL('/thorchain/quote/swap', thorApiUrl)\n\n        url.searchParams.set('from_asset', toThorToken(this.thorTokenIn))\n        url.searchParams.set('to_asset', this.thorTokenOut)\n        url.searchParams.set('refund_address', this.evmTo)\n        url.searchParams.set('amount', toThorAmount(amount).toString())\n        url.searchParams.set('destination', this.bitcoinAddress)\n        url.searchParams.set('streaming_interval', '1')\n        url.searchParams.set('streaming_quantity', '0')\n        url.searchParams.set('affiliate', 'sy')\n        url.searchParams.set('affiliate_bps', '20')\n\n        const response = await fetch(url.toString(), {\n            headers: {\n                'x-client-id': 'symbiosis',\n            },\n        })\n\n        const json = await response.json()\n\n        if (json.error) {\n            throw new ThorChainError(json.error)\n        }\n        const { memo, expected_amount_out: expectedAmountOut, router, expiry, fees } = json\n\n        const defaultSlippage = 300 // 3%\n        const expectedAmountOutWithSlippage = getMinAmount(defaultSlippage, expectedAmountOut)\n        const patchedMemo = memo.replace('0/1/0', `${expectedAmountOutWithSlippage.toString()}/1/0`)\n\n        return {\n            memo: patchedMemo,\n            amountOut: new TokenAmount(BTC, expectedAmountOut),\n            amountOutMin: new TokenAmount(BTC, expectedAmountOutWithSlippage),\n            router,\n            expiry,\n            fees,\n        }\n    }\n\n    protected tradeCTo(): string {\n        return this.multicallRouter.address\n    }\n\n    protected finalReceiveSide(): string {\n        return this.multicallRouter.address\n    }\n\n    protected finalCalldata(): string | [] {\n        return this.buildMulticall()\n    }\n\n    protected finalOffset(): number {\n        return 36\n    }\n\n    private buildMulticall() {\n        const callDatas = []\n        const receiveSides = []\n        const path = []\n        const offsets = []\n        const amount = this.transit.amountOut\n\n        if (this.tradeC) {\n            callDatas.push(this.tradeC.callData)\n            receiveSides.push(this.tradeC.routerAddress)\n            path.push(this.tradeC.tokenAmountIn.token.address)\n            offsets.push(this.tradeC.callDataOffset!)\n        }\n\n        const expiry = Math.floor(Date.now() / 1000) + 60 * 60 // + 1h\n        const burnCalldata = ThorRouter__factory.createInterface().encodeFunctionData('depositWithExpiry', [\n            this.thorVault,\n            this.thorTokenIn.address,\n            '0', // will be patched\n            this.thorQuote.memo,\n            expiry,\n        ])\n\n        callDatas.push(burnCalldata)\n        receiveSides.push(this.thorQuote.router)\n        path.push(this.thorTokenIn.address)\n        offsets.push(100)\n\n        return this.multicallRouter.interface.encodeFunctionData('multicall', [\n            amount.raw.toString(),\n            callDatas,\n            receiveSides,\n            path,\n            offsets,\n            this.evmTo,\n        ])\n    }\n}\n","import { Percent, TokenAmount, wrappedToken } from '../../entities'\nimport { SwapExactInParams, SwapExactInResult, SwapExactInTransactionPayload, TonTransactionData } from '../types'\nimport { AddressZero, MaxUint256 } from '@ethersproject/constants'\nimport { AmountLessThanFeeError, SdkError } from '../sdkError'\nimport {\n    buildSynthesize,\n    getExternalId,\n    getInternalId,\n    isEvmChainId,\n    isTonChainId,\n    isTronChainId,\n    prepareTronTransaction,\n    tonAdvisorMock,\n    TronTransactionData,\n} from '../chainUtils'\nimport { TRON_PORTAL_ABI } from '../tronAbis'\nimport { TransactionRequest } from '@ethersproject/providers'\nimport { Portal__factory, Synthesis__factory } from '../contracts'\nimport { BIPS_BASE, CROSS_CHAIN_ID } from '../constants'\nimport { Address } from '@ton/core'\n\nexport function isBridgeSupported(context: SwapExactInParams): boolean {\n    const { tokenAmountIn, tokenOut, symbiosis } = context\n\n    const wrappedInToken = wrappedToken(tokenAmountIn.token)\n    const wrappedOutToken = wrappedToken(tokenOut)\n\n    if (wrappedInToken.chainId === wrappedOutToken.chainId) {\n        return false\n    }\n\n    // one of the tokens should be synthetic\n    if (!wrappedInToken.isSynthetic && !wrappedOutToken.isSynthetic) {\n        return false\n    }\n\n    try {\n        const representation = symbiosis.getRepresentation(wrappedInToken, wrappedOutToken.chainId)\n        return !!representation && representation.equals(wrappedOutToken)\n    } catch {\n        return false\n    }\n}\n\ntype Direction = 'mint' | 'burn'\n\nexport async function bridge(context: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn, tokenOut } = context\n\n    const direction = getDirection(context)\n    const revertableAddress = getRevertableAddress(context)\n    const fee = await getFee(context, direction)\n    const amountOut = getAmountOut(context, fee)\n    const payload = await getTransactionPayload(context, fee, revertableAddress, direction)\n\n    let approveTo = ''\n    if (payload.transactionType === 'tron') {\n        approveTo = payload.transactionRequest.contract_address\n    } else if (payload.transactionType === 'evm') {\n        approveTo = payload.transactionRequest.to as string\n    }\n    return {\n        ...payload,\n        kind: 'bridge',\n        tokenAmountOut: amountOut,\n        tokenAmountOutMin: amountOut,\n        priceImpact: new Percent('0', BIPS_BASE),\n        approveTo,\n        fees: [\n            {\n                provider: 'symbiosis',\n                description: 'Bridge fee',\n                value: fee,\n            },\n        ],\n        routes: [\n            {\n                provider: 'symbiosis',\n                tokens: [tokenAmountIn.token, tokenOut],\n            },\n        ],\n    }\n}\n\nfunction getDirection(context: SwapExactInParams): Direction {\n    const { tokenAmountIn } = context\n    if (tokenAmountIn.token.isSynthetic) {\n        return 'burn'\n    }\n    return 'mint'\n}\n\nfunction getRevertableAddress(context: SwapExactInParams): string {\n    const { from, tokenAmountIn, tokenOut, symbiosis } = context\n\n    const chainIdIn = tokenAmountIn.token.chainId\n    const chainIdOut = tokenOut.chainId\n\n    let address = from\n    if (isTronChainId(chainIdIn) || isTronChainId(chainIdOut)) {\n        address = symbiosis.getRevertableAddress(chainIdOut)\n    } else if (isTonChainId(chainIdIn) || isTonChainId(chainIdOut)) {\n        address = symbiosis.getRevertableAddress(chainIdOut)\n    }\n\n    return address\n}\n\nasync function getFee(context: SwapExactInParams, direction: Direction): Promise<TokenAmount> {\n    if (direction === 'burn') {\n        return getBurnFee(context)\n    }\n    return getMintFee(context)\n}\n\nasync function getMintFee(context: SwapExactInParams): Promise<TokenAmount> {\n    const { symbiosis, tokenAmountIn, tokenOut, to } = context\n\n    const chainIdIn = tokenAmountIn.token.chainId\n    const chainIdOut = tokenOut.chainId\n\n    const internalId = getInternalId({\n        contractAddress: symbiosis.chainConfig(chainIdIn).portal,\n        requestCount: MaxUint256, // we must use last possible request count because it is always free\n        chainId: chainIdIn,\n    })\n\n    const synthesisAddress = symbiosis.chainConfig(chainIdOut).synthesis\n\n    const externalId = getExternalId({\n        internalId,\n        contractAddress: synthesisAddress,\n        revertableAddress: AddressZero, // doesn't matter which address is\n        chainId: chainIdOut,\n    })\n\n    const token = wrappedToken(tokenAmountIn.token)\n\n    const synthesisInterface = Synthesis__factory.createInterface()\n    const calldata = synthesisInterface.encodeFunctionData('mintSyntheticToken', [\n        '1', // stableBridgingFee,\n        externalId, // externalID,\n        CROSS_CHAIN_ID,\n        token.address, // tokenReal,\n        chainIdIn, // chainId\n        tokenAmountIn.raw.toString(), // amount,\n        to,\n    ])\n\n    const { price: fee } = await symbiosis.getBridgeFee({\n        receiveSide: synthesisAddress,\n        calldata,\n        chainIdFrom: tokenAmountIn.token.chainId,\n        chainIdTo: tokenOut.chainId,\n    })\n\n    return new TokenAmount(tokenOut, fee)\n}\n\nasync function getBurnFee(context: SwapExactInParams): Promise<TokenAmount> {\n    const { symbiosis, tokenAmountIn, tokenOut, to } = context\n    const chainIdIn = tokenAmountIn.token.chainId\n    const chainIdOut = tokenOut.chainId\n\n    // TODO remove after advisor is implemented\n    if (isTonChainId(chainIdOut)) {\n        return tonAdvisorMock(tokenOut).fee\n    }\n\n    const internalId = getInternalId({\n        contractAddress: symbiosis.chainConfig(chainIdIn).synthesis,\n        requestCount: MaxUint256, // we must use last possible request count because it is always free\n        chainId: chainIdIn,\n    })\n\n    const portalAddress = symbiosis.chainConfig(chainIdOut).portal\n\n    const externalId = getExternalId({\n        internalId,\n        contractAddress: portalAddress,\n        revertableAddress: AddressZero, // doesn't matter which address is\n        chainId: chainIdOut,\n    })\n\n    const portalInterface = Portal__factory.createInterface()\n    const calldata = portalInterface.encodeFunctionData('unsynthesize', [\n        '1', // Bridging fee\n        externalId,\n        CROSS_CHAIN_ID,\n        tokenOut.address, // The address of the token to unsynthesize\n        tokenAmountIn.raw.toString(), // Number of tokens to unsynthesize\n        to, // The address to receive tokens\n    ])\n\n    const { price: fee } = await symbiosis.getBridgeFee({\n        receiveSide: portalAddress,\n        calldata,\n        chainIdFrom: chainIdIn,\n        chainIdTo: chainIdOut,\n    })\n\n    return new TokenAmount(tokenOut, fee)\n}\n\nfunction getAmountOut(context: SwapExactInParams, fee: TokenAmount) {\n    const { tokenAmountIn, tokenOut } = context\n    const amountOut = new TokenAmount(tokenOut, tokenAmountIn.raw)\n    if (amountOut.lessThan(fee)) {\n        throw new AmountLessThanFeeError(\n            `Amount ${amountOut.toSignificant()} ${amountOut.token.symbol} less than fee ${fee.toSignificant()} ${\n                fee.token.symbol\n            }`\n        )\n    }\n    return amountOut.subtract(fee)\n}\n\nasync function getTransactionPayload(\n    context: SwapExactInParams,\n    fee: TokenAmount,\n    revertableAddress: string,\n    direction: Direction\n): Promise<SwapExactInTransactionPayload> {\n    const { tokenAmountIn } = context\n    const chainIdIn = tokenAmountIn.token.chainId\n    if (isTronChainId(chainIdIn)) {\n        const transactionRequest = getTronTransactionRequest(context, fee, revertableAddress, direction)\n\n        return {\n            transactionType: 'tron',\n            transactionRequest,\n        }\n    }\n\n    if (isTonChainId(chainIdIn)) {\n        const transactionRequest = await getTonTransactionRequest(context, fee, revertableAddress, direction)\n\n        return {\n            transactionType: 'ton',\n            transactionRequest,\n        }\n    }\n\n    if (isEvmChainId(chainIdIn)) {\n        const transactionRequest = getEvmTransactionRequest(context, fee, revertableAddress, direction)\n\n        return {\n            transactionType: 'evm',\n            transactionRequest,\n        }\n    }\n\n    throw new SdkError(`Transaction payload can't be built. Unknown chainId type`)\n}\n\nfunction getTronTransactionRequest(\n    context: SwapExactInParams,\n    fee: TokenAmount,\n    revertableAddress: string,\n    direction: Direction\n): TronTransactionData {\n    const { symbiosis, tokenAmountIn, tokenOut, to, from } = context\n\n    const chainIdIn = tokenAmountIn.token.chainId\n    const chainIdOut = tokenOut.chainId\n\n    if (direction === 'burn') {\n        throw new SdkError('Burn is not supported on Tron')\n    }\n\n    return prepareTronTransaction({\n        chainId: chainIdIn,\n        abi: TRON_PORTAL_ABI,\n        ownerAddress: from,\n        contractAddress: symbiosis.chainConfig(chainIdIn).portal,\n        functionName: 'synthesize',\n        params: [\n            fee.raw.toString(),\n            tokenAmountIn.token.address,\n            tokenAmountIn.raw.toString(),\n            to,\n            symbiosis.chainConfig(chainIdOut).synthesis,\n            symbiosis.chainConfig(chainIdOut).bridge,\n            revertableAddress,\n            chainIdOut.toString(),\n            symbiosis.clientId,\n        ],\n        tronWeb: symbiosis.tronWeb(chainIdIn),\n    })\n}\n\nasync function getTonTransactionRequest(\n    context: SwapExactInParams,\n    fee: TokenAmount,\n    revertableAddress: string,\n    direction: Direction\n): Promise<TonTransactionData> {\n    if (direction === 'burn') {\n        throw new SdkError('Burn is not supported on Tron')\n    }\n\n    const { symbiosis, tokenAmountIn, tokenOut, to, from, deadline } = context\n\n    return buildSynthesize({\n        symbiosis,\n        fee,\n        amountIn: tokenAmountIn,\n        chainIdOut: tokenOut.chainId,\n        from,\n        to,\n        revertableAddress,\n        validUntil: deadline,\n    })\n}\n\nfunction getEvmTransactionRequest(\n    context: SwapExactInParams,\n    fee: TokenAmount,\n    revertableAddress: string,\n    direction: Direction\n): TransactionRequest {\n    const { symbiosis, tokenAmountIn, tokenOut, to } = context\n    const chainIdIn = tokenAmountIn.token.chainId\n    const chainIdOut = tokenOut.chainId\n\n    if (direction === 'burn') {\n        const synthesis = symbiosis.synthesis(chainIdIn)\n\n        if (isTonChainId(chainIdOut)) {\n            const { workChain, hash } = Address.parse(to)\n\n            const tonAddress = {\n                workchain: workChain,\n                address_hash: `0x${hash.toString('hex')}`,\n            }\n\n            const data = synthesis.interface.encodeFunctionData('burnSyntheticTokenTON', [\n                fee.raw.toString(),\n                tokenAmountIn.token.address,\n                tokenAmountIn.raw.toString(),\n                CROSS_CHAIN_ID,\n                tonAddress,\n                AddressZero, // any arbitrary data, this addresses passed from relayer\n                AddressZero, // any arbitrary data, this addresses passed from relayer\n                revertableAddress,\n                chainIdOut,\n                symbiosis.clientId,\n            ])\n            return {\n                chainId: chainIdIn,\n                to: synthesis.address,\n                data,\n            }\n        }\n\n        const data = synthesis.interface.encodeFunctionData('burnSyntheticToken', [\n            fee.raw.toString(),\n            tokenAmountIn.token.address,\n            tokenAmountIn.raw.toString(),\n            to,\n            symbiosis.chainConfig(chainIdOut).portal,\n            symbiosis.chainConfig(chainIdOut).bridge,\n            revertableAddress,\n            chainIdOut,\n            symbiosis.clientId,\n        ])\n\n        return {\n            chainId: chainIdIn,\n            to: synthesis.address,\n            data,\n        }\n    }\n\n    const portal = symbiosis.portal(chainIdIn)\n\n    return {\n        chainId: chainIdIn,\n        to: portal.address,\n        data: portal.interface.encodeFunctionData('synthesize', [\n            fee.raw.toString(),\n            tokenAmountIn.token.address,\n            tokenAmountIn.raw.toString(),\n            to,\n            symbiosis.chainConfig(chainIdOut).synthesis,\n            symbiosis.chainConfig(chainIdOut).bridge,\n            revertableAddress,\n            chainIdOut,\n            symbiosis.clientId,\n        ]),\n    }\n}\n","import { SelectMode, SwapExactInResult } from '../types'\nimport { SdkError } from '../sdkError'\n\nexport async function theBest(promises: Promise<SwapExactInResult>[], mode?: SelectMode) {\n    if (mode === 'fastest') {\n        return Promise.any(promises)\n    }\n\n    // best_return mode\n    const results = await Promise.allSettled(promises)\n\n    let result: SwapExactInResult | undefined\n    const errors: SdkError[] = []\n    for (const item of results) {\n        if (item.status !== 'fulfilled') {\n            errors.push(item.reason)\n            continue\n        }\n\n        const { value } = item\n\n        if (result && result.tokenAmountOut.greaterThan(value.tokenAmountOut)) {\n            continue\n        }\n\n        result = value\n    }\n\n    if (!result) {\n        throw new AggregateError(errors, 'Build route error')\n    }\n\n    return result\n}\n","import { Token, wrappedToken } from '../../../entities'\nimport type { OmniPoolConfig, SwapExactInParams, SwapExactInResult } from '../../types'\nimport { Symbiosis } from '../../symbiosis'\nimport { theBest } from '../utils'\n\nexport interface Route {\n    poolConfig: OmniPoolConfig\n    transitTokenIn: Token\n    transitTokenOut: Token\n    optimal: boolean\n}\n\n// Swapping wrapper what select the best pool for swapping\nexport async function bestPoolSwapping(params: SwapExactInParams): Promise<SwapExactInResult> {\n    const { symbiosis, tokenAmountIn, tokenOut, selectMode, disableSrcChainRouting, disableDstChainRouting } = params\n\n    const routes = getRoutes({\n        symbiosis,\n        tokenIn: tokenAmountIn.token,\n        tokenOut,\n        disableSrcChainRouting,\n        disableDstChainRouting,\n    })\n\n    const promises = routes.map((route) => tryRoute(symbiosis, route, params))\n\n    return theBest(promises, selectMode)\n}\n\nfunction tryRoute(symbiosis: Symbiosis, route: Route, params: SwapExactInParams): Promise<SwapExactInResult> {\n    const { transitTokenIn, transitTokenOut, poolConfig } = route\n    return symbiosis.newSwapping(poolConfig).exactIn({\n        ...params,\n        transitTokenIn,\n        transitTokenOut,\n    })\n}\n\nexport function getRoutes({\n    symbiosis,\n    tokenIn,\n    tokenOut,\n    disableSrcChainRouting,\n    disableDstChainRouting,\n}: {\n    symbiosis: Symbiosis\n    tokenIn: Token\n    tokenOut: Token\n    disableSrcChainRouting?: boolean\n    disableDstChainRouting?: boolean\n}): Route[] {\n    const optimalRoute = getOptimalRoute({\n        symbiosis,\n        tokenIn,\n        tokenOut,\n        disableSrcChainRouting,\n        disableDstChainRouting,\n    })\n    if (optimalRoute) {\n        return [optimalRoute]\n    }\n\n    const routes: Route[] = []\n    const generalPurposePools = symbiosis.config.omniPools.filter((poolConfig) => poolConfig.generalPurpose)\n    for (const poolConfig of generalPurposePools) {\n        const transitCombinations = symbiosis.getTransitCombinations({\n            poolConfig,\n            tokenIn,\n            tokenOut,\n            disableSrcChainRouting,\n            disableDstChainRouting,\n        })\n        for (const { transitTokenIn, transitTokenOut } of transitCombinations) {\n            routes.push({\n                transitTokenIn,\n                transitTokenOut,\n                poolConfig,\n                optimal: false,\n            })\n        }\n    }\n    return routes\n}\n\nfunction getOptimalRoute({\n    symbiosis,\n    tokenIn,\n    tokenOut,\n    disableSrcChainRouting,\n    disableDstChainRouting,\n}: {\n    symbiosis: Symbiosis\n    tokenIn: Token\n    tokenOut: Token\n    disableSrcChainRouting?: boolean\n    disableDstChainRouting?: boolean\n}): Route | undefined {\n    const { omniPools } = symbiosis.config\n\n    let optimal: Route | undefined\n\n    // direct route\n    for (const poolConfig of omniPools) {\n        const transitTokenIn = symbiosis.transitTokens(tokenIn.chainId, poolConfig).find((transitToken) => {\n            return transitToken.equals(wrappedToken(tokenIn))\n        })\n        const transitTokenOut = symbiosis.transitTokens(tokenOut.chainId, poolConfig).find((transitToken) => {\n            return transitToken.equals(wrappedToken(tokenOut))\n        })\n\n        if (transitTokenIn && transitTokenOut) {\n            optimal = {\n                transitTokenIn,\n                transitTokenOut,\n                poolConfig,\n                optimal: true,\n            }\n            break\n        }\n    }\n\n    if (optimal) {\n        return optimal\n    }\n\n    // if source chain routing is allowed\n    if (!disableSrcChainRouting) {\n        for (const poolConfig of omniPools) {\n            try {\n                const transitTokenIn = symbiosis.transitToken(tokenIn.chainId, poolConfig)\n                const transitTokenOut = symbiosis.transitTokens(tokenOut.chainId, poolConfig).find((transitToken) => {\n                    return transitToken.equals(wrappedToken(tokenOut))\n                })\n\n                if (transitTokenOut) {\n                    optimal = {\n                        transitTokenIn,\n                        transitTokenOut,\n                        poolConfig,\n                        optimal: true,\n                    }\n                    break\n                }\n            } catch {\n                // next\n            }\n        }\n\n        if (optimal) {\n            return optimal\n        }\n    }\n\n    // if destination chain routing is allowed\n    if (!disableDstChainRouting) {\n        for (const poolConfig of omniPools) {\n            try {\n                const transitTokenIn = symbiosis.transitTokens(tokenIn.chainId, poolConfig).find((transitToken) => {\n                    return transitToken.equals(wrappedToken(tokenIn))\n                })\n                const transitTokenOut = symbiosis.transitToken(tokenOut.chainId, poolConfig)\n\n                if (transitTokenIn) {\n                    optimal = {\n                        transitTokenIn,\n                        transitTokenOut,\n                        poolConfig,\n                        optimal: true,\n                    }\n                    break\n                }\n            } catch {\n                // next\n            }\n        }\n\n        if (optimal) {\n            return optimal\n        }\n    }\n\n    // select a route from the list if there is only one\n    const possibleRoutes: Route[] = []\n    for (const poolConfig of omniPools) {\n        try {\n            const transitTokenIn = symbiosis.transitToken(tokenIn.chainId, poolConfig)\n            if (disableSrcChainRouting && !transitTokenIn.equals(wrappedToken(tokenIn))) {\n                continue\n            }\n            const transitTokenOut = symbiosis.transitToken(tokenOut.chainId, poolConfig)\n            if (disableDstChainRouting && !transitTokenIn.equals(wrappedToken(tokenOut))) {\n                continue\n            }\n\n            if (transitTokenIn && transitTokenOut) {\n                possibleRoutes.push({\n                    transitTokenIn,\n                    transitTokenOut,\n                    poolConfig,\n                    optimal: true,\n                })\n            }\n        } catch {\n            // next\n        }\n    }\n\n    if (possibleRoutes.length === 1) {\n        return possibleRoutes[0]\n    }\n\n    return undefined\n}\n","import { SwapExactInParams, SwapExactInResult } from '../../types'\nimport { bestPoolSwapping } from './bestPoolSwapping'\n\nexport async function crosschainSwap(params: SwapExactInParams): Promise<SwapExactInResult> {\n    return bestPoolSwapping(params)\n}\n","import { AddressZero } from '@ethersproject/constants'\nimport { BigNumber, BytesLike, utils } from 'ethers'\nimport { ChainId } from '../../constants'\nimport { GAS_TOKEN, TokenAmount } from '../../entities'\nimport { onchainSwap } from './onchainSwap'\nimport { SwapExactInParams, SwapExactInResult } from '../types'\nimport { FeeCollector__factory } from '../contracts'\nimport { preparePayload } from './preparePayload'\nimport { getFunctionSelector, tronAddressToEvm } from '../chainUtils/tron'\nimport { AmountLessThanFeeError, SdkError } from '../sdkError'\n\nexport const ZERO_FEE_COLLECTOR_ADDRESSES: Partial<Record<ChainId, string>> = {\n    [ChainId.ZKSYNC_MAINNET]: '0x35e3dc1f3383bD348EC651EdD73fE1d7a7dA5AAa',\n    [ChainId.BSC_MAINNET]: '0x628613064b1902a1A422825cf11B687C6f17961E',\n    [ChainId.RSK_MAINNET]: '0xa257f3fe4e4032291516dc355edf90664e9eb932',\n}\n\nexport const FEE_COLLECTOR_ADDRESSES: Partial<Record<ChainId, string>> = {\n    [ChainId.ETH_MAINNET]: '0xff9b21c3bfa4bce9b20b55fed56d102ced48b0f6',\n    [ChainId.BSC_MAINNET]: '0x0425841529882628880fBD228AC90606e0c2e09A',\n    [ChainId.AVAX_MAINNET]: '0xA257F3FE4E4032291516DC355eDF90664e9eB932',\n    [ChainId.MATIC_MAINNET]: '0x9d74807B8fA79d49bb95CF988Af3c25Fb1437B4f',\n    [ChainId.MANTLE_MAINNET]: '0x7B4E28E7273aA8CB64C56fF191ebF43b64f409F9',\n    [ChainId.LINEA_MAINNET]: '0x0f91052dc5B4baE53d0FeA5DAe561A117268f5d2',\n    [ChainId.POLYGON_ZK]: '0xB79A4F5828eb55c10D7abF4bFe9a9f5d11aA84e0',\n    [ChainId.BASE_MAINNET]: '0xF951789c6A356BfbC3033648AA10b5Dd3e9d88C0',\n    [ChainId.ARBITRUM_MAINNET]: '0x4FDA0599b78a49d289577a8DF2046459abC04d82',\n    [ChainId.ARBITRUM_NOVA]: '0x7B4E28E7273aA8CB64C56fF191ebF43b64f409F9',\n    [ChainId.OPTIMISM_MAINNET]: '0x7775b274f0C3fA919B756b22A4d9674e55927ab8',\n    [ChainId.TELOS_MAINNET]: '0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C',\n    [ChainId.ZKSYNC_MAINNET]: '0x56C343E7cE75e53e58Ed2f3743C6f137c13D2013',\n    [ChainId.BOBA_MAINNET]: '0xB79A4F5828eb55c10D7abF4bFe9a9f5d11aA84e0',\n    [ChainId.KAVA_MAINNET]: '0xca506793A420E901BbCa8066be5661E3C52c84c2',\n    [ChainId.TRON_MAINNET]: '0x5112ac3d77551b9f670eb34ef75984246164e38d',\n    [ChainId.SCROLL_MAINNET]: '0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C',\n    [ChainId.MANTA_MAINNET]: '0xf85FC807D05d3Ab2309364226970aAc57b4e1ea4',\n    [ChainId.METIS_MAINNET]: '0x81aB74A9f9d7457fF47dfD102e78A340cF72EC39',\n    [ChainId.BAHAMUT_MAINNET]: '0x70A16EB2B39A5573A8138b18582111bBA480fb8F',\n    [ChainId.MODE_MAINNET]: '0xd8db4fb1fEf63045A443202d506Bcf30ef404160',\n    [ChainId.RSK_MAINNET]: '0x2b7aa8bdc40b6d3d19d0de7480c4db8d5b6495e2',\n    [ChainId.BLAST_MAINNET]: '0xf1C374D065719Ce1Fdc63E2c5C13146813c0A83b',\n    [ChainId.MERLIN_MAINNET]: '0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8',\n    [ChainId.ZKLINK_MAINNET]: '0x9C64162e1614E10f833aFc2a0BdF173324f36Dd5',\n    [ChainId.CORE_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.TAIKO_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.SEI_EVM_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.ZETACHAIN_MAINNET]: '0x6148FD6C649866596C3d8a971fC313E5eCE84882',\n    [ChainId.CRONOS_MAINNET]: '0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8',\n    [ChainId.FRAXTAL_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.GRAVITY_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n    [ChainId.BSQUARED_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.CRONOS_ZK_MAINNET]: '0xBf63C7944B1635c79a0f0eE7e07b1702837AD1F9',\n    [ChainId.MORPH_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.SONIC_MAINNET]: '0x1cEaeda3D17936916D0F3E866Aa5Ef861F544840',\n    [ChainId.ABSTRACT_MAINNET]: '0x9C64162e1614E10f833aFc2a0BdF173324f36Dd5',\n    [ChainId.GNOSIS_MAINNET]: '0xf1C374D065719Ce1Fdc63E2c5C13146813c0A83b',\n    [ChainId.BERACHAIN_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.UNICHAIN_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.SONEIUM_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.OPBNB_MAINNET]: '0x1cEaeda3D17936916D0F3E866Aa5Ef861F544840',\n    [ChainId.HYPERLIQUID_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n    [ChainId.KATANA_MAINNET]: '0xf1C374D065719Ce1Fdc63E2c5C13146813c0A83b',\n    [ChainId.APECHAIN_MAINNET]: '0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2',\n    [ChainId.PLASMA_MAINNET]: '0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab',\n}\n\nexport function isFeeCollectorSwapSupported(params: SwapExactInParams): boolean {\n    const inChainId = params.tokenAmountIn.token.chainId\n    const outChainId = params.tokenOut.chainId\n\n    return inChainId === outChainId && FEE_COLLECTOR_ADDRESSES[inChainId] !== undefined\n}\n\nexport async function feeCollectorSwap(params: SwapExactInParams): Promise<SwapExactInResult> {\n    const { symbiosis } = params\n\n    const inChainId = params.tokenAmountIn.token.chainId\n\n    const feeCollectorAddress = FEE_COLLECTOR_ADDRESSES[inChainId]\n    if (!feeCollectorAddress) {\n        throw new SdkError(`Fee collector not found for chain ${inChainId}`)\n    }\n\n    const provider = symbiosis.getProvider(inChainId)\n    const contract = FeeCollector__factory.connect(feeCollectorAddress, provider)\n\n    const [fee, approveAddress] = await Promise.all([contract.callStatic.fee(), contract.callStatic.onchainGateway()])\n\n    const feeToken = GAS_TOKEN[inChainId]\n    const feeTokenAmount = new TokenAmount(feeToken, fee.toString())\n\n    let inTokenAmount = params.tokenAmountIn\n    if (inTokenAmount.token.equals(feeToken)) {\n        if (inTokenAmount.lessThan(feeTokenAmount) || inTokenAmount.equalTo(feeTokenAmount)) {\n            throw new AmountLessThanFeeError(`Min amount: ${feeTokenAmount.toSignificant()}`)\n        }\n\n        inTokenAmount = inTokenAmount.subtract(feeTokenAmount)\n    }\n\n    // Get onchain swap transaction what will be executed by fee collector\n    const result = await onchainSwap({ ...params, tokenAmountIn: inTokenAmount, from: feeCollectorAddress })\n\n    let value: string = ''\n    let callData: BytesLike = ''\n    let routerAddress: string = ''\n    if (result.transactionType === 'tron') {\n        value = result.transactionRequest.call_value.toString()\n        const method = utils.id(result.transactionRequest.function_selector).slice(0, 10)\n        callData = method + result.transactionRequest.raw_parameter\n        routerAddress = tronAddressToEvm(result.transactionRequest.contract_address)\n    } else if (result.transactionType === 'evm') {\n        value = result.transactionRequest.value?.toString() as string\n        callData = result.transactionRequest.data as BytesLike\n        routerAddress = result.transactionRequest.to as string\n    }\n\n    if (inTokenAmount.token.isNative) {\n        /**\n         * To maintain consistency with any potential fees charged by the aggregator,\n         * we calculate the total value by adding the fee to the value obtained from the aggregator.\n         */\n        value = BigNumber.from(value).add(fee).toString()\n    } else {\n        value = fee.toString()\n    }\n\n    callData = contract.interface.encodeFunctionData('onswap', [\n        inTokenAmount.token.isNative ? AddressZero : inTokenAmount.token.address,\n        inTokenAmount.raw.toString(),\n        routerAddress,\n        inTokenAmount.token.isNative ? AddressZero : result.approveTo,\n        callData,\n    ])\n\n    const functionSelector = getFunctionSelector(contract.interface.getFunction('onswap'))\n\n    const payload = preparePayload({\n        functionSelector,\n        chainId: inChainId,\n        from: params.from,\n        to: feeCollectorAddress,\n        value,\n        callData,\n    })\n\n    return {\n        ...result,\n        ...payload,\n        approveTo: approveAddress,\n        fees: [\n            {\n                provider: 'symbiosis',\n                value: feeTokenAmount,\n                description: 'Symbiosis on-chain fee',\n            },\n            ...result.fees,\n        ],\n    }\n}\n","import TronWeb from 'tronweb'\nimport { ChainId } from '../../constants'\nimport { isTronChainId } from '../chainUtils/tron'\nimport { SwapExactInTransactionPayload } from '../types'\n\ninterface PreparePayloadParams {\n    chainId: ChainId\n    from: string\n    to: string\n    value?: string\n    callData: string\n    functionSelector?: string\n}\n\n// Prepare payload for evm or tron transaction\nexport function preparePayload({\n    chainId,\n    from,\n    to,\n    callData,\n    value = '0',\n    functionSelector,\n}: PreparePayloadParams): SwapExactInTransactionPayload {\n    if (isTronChainId(chainId)) {\n        if (!functionSelector) {\n            throw new Error('This method is not supported for tron chain')\n        }\n\n        const rawParameter = callData.replace(/^(0x)/, '').slice(8)\n\n        return {\n            transactionType: 'tron',\n            transactionRequest: {\n                function_selector: functionSelector,\n                call_value: value,\n                chain_id: chainId,\n                contract_address: TronWeb.address.fromHex(to),\n                owner_address: TronWeb.address.fromHex(from),\n                raw_parameter: rawParameter,\n                fee_limit: 150000000, // Default fee limit - 150 TRX\n            },\n        }\n    }\n\n    return {\n        transactionType: 'evm',\n        transactionRequest: {\n            chainId,\n            from,\n            to,\n            value,\n            data: callData,\n        },\n    }\n}\n","import { AggregatorTrade } from '../trade'\nimport { preparePayload } from './preparePayload'\nimport { SwapExactInParams, SwapExactInResult } from '../types'\n\nexport async function aggregatorsSwap({\n    symbiosis,\n    deadline,\n    to,\n    from,\n    slippage,\n    tokenAmountIn,\n    tokenOut,\n    oneInchProtocols,\n}: SwapExactInParams): Promise<SwapExactInResult> {\n    const aggregatorTrade = new AggregatorTrade({\n        symbiosis,\n        to,\n        from,\n        clientId: symbiosis.clientId,\n        slippage,\n        tokenAmountIn,\n        tokenAmountInMin: tokenAmountIn, // correct as aggregatorsSwap is used for onchain swaps only\n        tokenOut,\n        deadline,\n        oneInchProtocols,\n    })\n\n    const endTimer = symbiosis.createMetricTimer()\n    await aggregatorTrade.init()\n    endTimer?.({\n        kind: `onchain-swap`,\n        operation: `${aggregatorTrade.tradeType}-onchain-swap`,\n        tokenIn: tokenAmountIn.token,\n        tokenOut: tokenOut,\n    })\n\n    const { amountOut, amountOutMin, callData, priceImpact, route, routerAddress, tradeType, functionSelector } =\n        aggregatorTrade\n\n    const value = tokenAmountIn.token.isNative ? tokenAmountIn.raw.toString() : '0'\n\n    const payload = preparePayload({\n        functionSelector,\n        chainId: tokenAmountIn.token.chainId,\n        from,\n        to: routerAddress,\n        value,\n        callData,\n    })\n\n    return {\n        ...payload,\n        kind: 'onchain-swap',\n        approveTo: routerAddress,\n        tokenAmountOut: amountOut,\n        tokenAmountOutMin: amountOutMin,\n        priceImpact,\n        fees: [],\n        routes: [\n            {\n                provider: tradeType,\n                tokens: route,\n            },\n        ],\n    }\n}\n","import { SwapExactInParams, SwapExactInResult } from '../types'\nimport { OctoPoolTrade } from '../trade'\n\nexport function isOctoPoolSwapSupported(context: SwapExactInParams): boolean {\n    const { tokenAmountIn, tokenOut, symbiosis } = context\n\n    if (!tokenAmountIn.token.isSynthetic || !tokenOut.isSynthetic) {\n        return false\n    }\n\n    const tokenInPool = symbiosis.getOmniPoolByToken(tokenAmountIn.token)\n    const tokenOutPool = symbiosis.getOmniPoolByToken(tokenOut)\n    if (!tokenInPool || !tokenOutPool) {\n        return false\n    }\n\n    return tokenInPool.id === tokenOutPool.id\n}\n\nexport async function octoPoolSwap({\n    symbiosis,\n    tokenAmountIn,\n    tokenOut,\n    to,\n    slippage,\n    deadline,\n}: SwapExactInParams): Promise<SwapExactInResult> {\n    const tokenInPool = symbiosis.getOmniPoolByToken(tokenAmountIn.token)\n    const tokenOutPool = symbiosis.getOmniPoolByToken(tokenOut)\n    if (!tokenInPool || !tokenOutPool) {\n        throw new Error('Incorrect tokens for octoPoolSwap')\n    }\n\n    const trade = new OctoPoolTrade({\n        symbiosis,\n        tokenAmountIn,\n        tokenAmountInMin: tokenAmountIn,\n        tokenOut,\n        omniPoolConfig: tokenInPool,\n        to,\n        slippage,\n        deadline,\n    })\n\n    await trade.init()\n\n    return {\n        kind: 'onchain-swap',\n        tokenAmountOut: trade.amountOut,\n        tokenAmountOutMin: trade.amountOutMin,\n        approveTo: trade.routerAddress,\n        priceImpact: trade.priceImpact,\n        transactionType: 'evm',\n        transactionRequest: {\n            to: trade.routerAddress,\n            data: trade.callData,\n            value: tokenAmountIn.token.isNative ? tokenAmountIn.raw.toString() : undefined,\n        },\n        fees: [],\n        routes: [\n            {\n                provider: 'octopool',\n                tokens: [tokenAmountIn.token, tokenOut],\n            },\n        ],\n    }\n}\n","import { SwapExactInParams, SwapExactInResult } from '../types'\nimport { isTonChainId } from '../chainUtils'\nimport { DedustTrade } from '../trade'\n\nexport function isDedustSwapSupported(context: SwapExactInParams): boolean {\n    const { tokenAmountIn, tokenOut } = context\n\n    return isTonChainId(tokenAmountIn.token.chainId) && isTonChainId(tokenOut.chainId)\n}\n\nexport async function dedustSwap(params: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn, tokenOut, symbiosis } = params\n    const trade = new DedustTrade({\n        ...params,\n        tokenAmountInMin: tokenAmountIn,\n    })\n\n    await trade.init().catch((e) => {\n        symbiosis.trackAggregatorError({\n            provider: 'dedust',\n            reason: e.message,\n            chain_id: String(tokenOut.chain?.id),\n        })\n        throw e\n    })\n\n    return {\n        kind: 'onchain-swap',\n        tokenAmountOut: trade.amountOut,\n        tokenAmountOutMin: trade.amountOutMin,\n        priceImpact: trade.priceImpact,\n        transactionType: 'ton',\n        approveTo: '0x0000000000000000000000000000000000000000',\n        transactionRequest: {\n            validUntil: trade.deadline,\n            messages: [\n                {\n                    address: trade.routerAddress,\n                    amount: trade.value?.toString() ?? '0',\n                    payload: trade.callData,\n                },\n            ],\n        },\n        fees: trade.fees ?? [],\n        routes: [\n            {\n                provider: 'dedust',\n                tokens: [tokenAmountIn.token, tokenOut],\n            },\n        ],\n    }\n}\n","import { SwapExactInParams, SwapExactInResult } from '../types'\nimport { StonfiTrade } from '../trade'\nimport { isTonChainId } from '../chainUtils'\n\nexport function isStonfiSwapSupported(context: SwapExactInParams): boolean {\n    const { tokenAmountIn, tokenOut } = context\n\n    return isTonChainId(tokenAmountIn.token.chainId) && isTonChainId(tokenOut.chainId)\n}\n\nexport async function stonfiSwap({\n    symbiosis,\n    tokenAmountIn,\n    tokenOut,\n    from,\n    to,\n    slippage,\n    deadline,\n}: SwapExactInParams): Promise<SwapExactInResult> {\n    const trade = new StonfiTrade({\n        symbiosis,\n        tokenAmountIn,\n        tokenAmountInMin: tokenAmountIn,\n        tokenOut,\n        from,\n        to,\n        slippage,\n        deadline,\n    })\n\n    await trade.init().catch((e) => {\n        symbiosis.trackAggregatorError({\n            provider: 'stonfi',\n            reason: e.message,\n            chain_id: String(tokenOut.chain?.id),\n        })\n        throw e\n    })\n\n    return {\n        kind: 'onchain-swap',\n        tokenAmountOut: trade.amountOut,\n        tokenAmountOutMin: trade.amountOutMin,\n        priceImpact: trade.priceImpact,\n        transactionType: 'ton',\n        approveTo: '0x0000000000000000000000000000000000000000',\n        transactionRequest: {\n            validUntil: trade.deadline,\n            messages: [\n                {\n                    address: trade.routerAddress,\n                    amount: trade.value?.toString() ?? '0',\n                    payload: trade.callData,\n                },\n            ],\n        },\n        fees: trade.fees ?? [],\n        routes: [\n            {\n                provider: 'stonfi',\n                tokens: [tokenAmountIn.token, tokenOut],\n            },\n        ],\n    }\n}\n","import { SwapExactInParams, SwapExactInResult } from '../../types'\nimport { addSolanaFee, isSolanaChainId } from '../../chainUtils'\nimport { JupiterTrade, RaydiumTrade } from '../../trade'\n\nexport function isOnChainSolanaSwapSupported(context: SwapExactInParams): boolean {\n    const { tokenAmountIn, tokenOut } = context\n\n    return isSolanaChainId(tokenAmountIn.token.chainId) && isSolanaChainId(tokenOut.chainId)\n}\n\nexport function onChainSolanaSwap({\n    symbiosis,\n    tokenAmountIn,\n    tokenOut,\n    from,\n    to,\n    slippage,\n}: SwapExactInParams): Promise<SwapExactInResult>[] {\n    const raydiumTradeInstance = new RaydiumTrade({\n        symbiosis,\n        tokenAmountIn,\n        tokenAmountInMin: tokenAmountIn,\n        tokenOut,\n        from,\n        to,\n        slippage,\n    })\n\n    const jupiterTradeInstance = new JupiterTrade({\n        symbiosis,\n        tokenAmountIn,\n        tokenAmountInMin: tokenAmountIn,\n        tokenOut,\n        to,\n        slippage,\n    })\n\n    const tradeInstances = [raydiumTradeInstance, jupiterTradeInstance]\n\n    return tradeInstances.map(async (instance) => {\n        const trade = await instance.init().catch((e) => {\n            symbiosis.trackAggregatorError({\n                provider: instance.tradeType,\n                reason: e.message,\n                chain_id: String(tokenOut.chain?.id),\n            })\n            throw e\n        })\n\n        const { instructions, fee } = await addSolanaFee(from, trade.instructions)\n\n        return {\n            kind: 'onchain-swap',\n            tokenAmountOut: trade.amountOut,\n            tokenAmountOutMin: trade.amountOutMin,\n            priceImpact: trade.priceImpact,\n            transactionType: 'solana',\n            approveTo: '0x0000000000000000000000000000000000000000',\n            transactionRequest: {\n                instructions,\n            },\n            fees: fee\n                ? [\n                      {\n                          provider: 'symbiosis',\n                          value: fee,\n                          description: 'Symbiosis on-chain fee',\n                      },\n                  ]\n                : [],\n            routes: [\n                {\n                    provider: trade.tradeType,\n                    tokens: [tokenAmountIn.token, tokenOut],\n                },\n            ],\n        } as SwapExactInResult\n    })\n}\n","import { aggregatorsSwap } from './aggregatorsSwap'\nimport { SwapExactInParams, SwapExactInResult } from '../types'\nimport { theBest } from './utils'\nimport { isOctoPoolSwapSupported, octoPoolSwap } from './octoPoolSwap'\nimport { dedustSwap, isDedustSwapSupported } from './dedustSwap'\nimport { isStonfiSwapSupported, stonfiSwap } from './stonfiSwap'\nimport { isOnChainSolanaSwapSupported, onChainSolanaSwap } from './onChainSolanaSwap'\n\nexport function isOnchainSwapSupported(params: SwapExactInParams): boolean {\n    const { tokenAmountIn, tokenOut } = params\n\n    return tokenAmountIn.token.chainId === tokenOut.chainId\n}\n\nexport async function onchainSwap(params: SwapExactInParams): Promise<SwapExactInResult> {\n    const { selectMode } = params\n\n    const promises: Promise<SwapExactInResult>[] = [aggregatorsSwap(params)]\n\n    if (isOctoPoolSwapSupported(params)) {\n        promises.push(octoPoolSwap(params))\n    }\n\n    if (isOnChainSolanaSwapSupported(params)) {\n        promises.push(...onChainSolanaSwap(params))\n    }\n\n    if (isStonfiSwapSupported(params)) {\n        promises.push(stonfiSwap(params))\n    }\n\n    if (isDedustSwapSupported(params)) {\n        promises.push(dedustSwap(params))\n    }\n\n    return theBest(promises, selectMode)\n}\n","import { Percent, TokenAmount, WETH } from '../../entities'\nimport { Weth__factory } from '../contracts'\nimport { getFunctionSelector } from '../chainUtils/tron'\nimport { preparePayload } from './preparePayload'\nimport { SwapExactInParams, SwapExactInResult } from '../types'\nimport { AddressZero } from '@ethersproject/constants/lib/addresses'\nimport { BIPS_BASE } from '../constants'\n\nexport function isUnwrapSupported(params: SwapExactInParams): boolean {\n    const { tokenAmountIn, tokenOut, from, to } = params\n\n    if (from.toLowerCase() !== to.toLowerCase()) {\n        return false\n    }\n\n    const chainIdIn = tokenAmountIn.token.chainId\n    const chainIdOut = tokenOut.chainId\n\n    const weth = WETH[chainIdIn]\n\n    return chainIdIn === chainIdOut && tokenOut.isNative && weth && weth.equals(tokenAmountIn.token)\n}\n\nexport async function unwrap(params: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn, tokenOut, from } = params\n    const wethInterface = Weth__factory.createInterface()\n\n    const amountOut = new TokenAmount(tokenOut, tokenAmountIn.raw)\n\n    const callData = wethInterface.encodeFunctionData('withdraw', [tokenAmountIn.raw.toString()])\n\n    const functionSelector = getFunctionSelector(wethInterface.getFunction('withdraw'))\n\n    const payload = preparePayload({\n        functionSelector,\n        chainId: tokenAmountIn.token.chainId,\n        from,\n        to: tokenAmountIn.token.address,\n        callData,\n    })\n\n    let approveTo = AddressZero\n    if (payload.transactionType === 'tron') {\n        approveTo = payload.transactionRequest.contract_address\n    } else if (payload.transactionType === 'evm') {\n        approveTo = payload.transactionRequest.to as string\n    }\n\n    return {\n        ...payload,\n        kind: 'unwrap',\n        tokenAmountOut: amountOut,\n        tokenAmountOutMin: amountOut,\n        priceImpact: new Percent('0', BIPS_BASE),\n        approveTo,\n        fees: [],\n        routes: [\n            {\n                provider: 'wrap',\n                tokens: [params.tokenAmountIn.token, params.tokenOut],\n            },\n        ],\n    }\n}\n","import { Percent, TokenAmount, WETH } from '../../entities'\nimport { Weth__factory } from '../contracts'\nimport { getFunctionSelector } from '../chainUtils/tron'\nimport { preparePayload } from './preparePayload'\nimport { SwapExactInParams, SwapExactInResult } from '../types'\nimport { AddressZero } from '@ethersproject/constants/lib/addresses'\nimport { BIPS_BASE } from '../constants'\n\nexport function isWrapSupported(params: SwapExactInParams): boolean {\n    const { tokenAmountIn, tokenOut, from, to } = params\n\n    if (from.toLowerCase() !== to.toLowerCase()) {\n        return false\n    }\n\n    const chainIdIn = tokenAmountIn.token.chainId\n    const chainIdOut = tokenOut.chainId\n\n    const weth = WETH[chainIdIn]\n\n    return chainIdIn === chainIdOut && tokenAmountIn.token.isNative && weth && weth.equals(tokenOut)\n}\n\nexport async function wrap(params: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn } = params\n\n    const { chainId } = tokenAmountIn.token\n\n    const weth = WETH[chainId]\n\n    if (!weth) {\n        throw new Error(`Wrap token not found for chain ${chainId}`)\n    }\n\n    const wethInterface = Weth__factory.createInterface()\n\n    const amountOut = new TokenAmount(weth, tokenAmountIn.raw)\n\n    const callData = wethInterface.encodeFunctionData('deposit')\n\n    const functionSelector = getFunctionSelector(wethInterface.getFunction('deposit'))\n\n    const payload = preparePayload({\n        functionSelector,\n        chainId,\n        from: params.from,\n        to: weth.address,\n        value: tokenAmountIn.raw.toString(),\n        callData,\n    })\n\n    let approveTo: string = AddressZero\n    if (payload.transactionType === 'tron') {\n        approveTo = payload.transactionRequest.contract_address\n    } else if (payload.transactionType === 'evm') {\n        approveTo = payload.transactionRequest.to as string\n    }\n    return {\n        ...payload,\n        kind: 'wrap',\n        tokenAmountOut: amountOut,\n        tokenAmountOutMin: amountOut,\n        priceImpact: new Percent('0', BIPS_BASE),\n        approveTo,\n        fees: [],\n        routes: [\n            {\n                provider: 'wrap',\n                tokens: [tokenAmountIn.token, weth],\n            },\n        ],\n    }\n}\n","import { SwapExactInParams, SwapExactInResult } from '../types'\nimport { theBest } from './utils'\nimport { SwappingToTon } from '../swapping'\n\n// Symbiosis bridge\nfunction symbiosisBridgeToTon(context: SwapExactInParams): Promise<SwapExactInResult>[] {\n    const { symbiosis, tokenAmountIn, tokenOut, disableSrcChainRouting, disableDstChainRouting } = context\n\n    const promises: Promise<SwapExactInResult>[] = []\n\n    symbiosis.config.omniPools.forEach((poolConfig) => {\n        const combinations = symbiosis.getTransitCombinations({\n            poolConfig,\n            tokenIn: tokenAmountIn.token,\n            tokenOut,\n            disableSrcChainRouting,\n            disableDstChainRouting,\n        })\n        const poolPromises = combinations.map(({ transitTokenIn, transitTokenOut }) => {\n            const swappingToTon = new SwappingToTon(symbiosis, poolConfig)\n            return swappingToTon.exactIn({ ...context, transitTokenIn, transitTokenOut })\n        })\n        promises.push(...poolPromises)\n    })\n\n    return promises\n}\n\nexport async function toTonSwap(context: SwapExactInParams): Promise<SwapExactInResult> {\n    const { selectMode } = context\n\n    const promises = []\n\n    promises.push(...symbiosisBridgeToTon(context))\n\n    return theBest(promises, selectMode)\n}\n","import { SwapSDK, VaultSwapResponse } from '@chainflip/sdk/swap'\nimport { AddressZero } from '@ethersproject/constants/lib/addresses'\nimport { BigNumber, BytesLike, utils } from 'ethers'\n\nimport { FEE_COLLECTOR_ADDRESSES } from '../feeCollectorSwap'\nimport { Percent, TokenAmount } from '../../../entities'\nimport { onchainSwap } from '../onchainSwap'\nimport { isEvmChainId, tronAddressToEvm } from '../../chainUtils'\nimport { AmountLessThanFeeError, ChainFlipError, SdkError } from '../../sdkError'\nimport { FeeCollector__factory, MulticallRouterV2__factory } from '../../contracts'\nimport { BIPS_BASE, MULTICALL_ROUTER_V2 } from '../../constants'\nimport { FeeItem, RouteItem, SwapExactInParams, SwapExactInResult } from '../../types'\n\nimport { ChainFlipBrokerAccount, ChainFlipBrokerFeeBps, checkMinAmount, getChainFlipFee } from './utils'\nimport { ChainFlipConfig } from './types'\n\ntype MulticallItem = {\n    data: BytesLike\n    to: string\n    path: string\n    offset: number\n    isNative: boolean\n}\n\nexport async function ZappingOnChainChainFlip(\n    params: SwapExactInParams,\n    config: ChainFlipConfig\n): Promise<SwapExactInResult> {\n    const { symbiosis, to, from, tokenAmountIn } = params\n\n    const chainId = params.tokenAmountIn.token.chainId\n\n    let evmTo = from\n    if (!isEvmChainId(chainId)) {\n        evmTo = symbiosis.config.refundAddress\n    }\n\n    const feeCollectorAddress = FEE_COLLECTOR_ADDRESSES[chainId]\n    if (!feeCollectorAddress) {\n        throw new SdkError(`Fee collector not found for chain ${chainId}`)\n    }\n    const multicallRouterAddress = MULTICALL_ROUTER_V2[chainId]\n    if (!multicallRouterAddress) {\n        throw new SdkError(`MulticallRouterV2 not found for chain ${chainId}`)\n    }\n\n    const provider = symbiosis.getProvider(chainId)\n    const multicallRouter = MulticallRouterV2__factory.connect(multicallRouterAddress, provider)\n    const feeCollector = FeeCollector__factory.connect(feeCollectorAddress, provider)\n\n    const [fee, approveAddress] = await symbiosis.cache.get(\n        ['feeCollector.fee', 'feeCollector.onchainGateway', chainId.toString()],\n        () => {\n            return Promise.all([feeCollector.callStatic.fee(), feeCollector.callStatic.onchainGateway()])\n        },\n        60 * 60 // 1 hour\n    )\n\n    let inTokenAmount = params.tokenAmountIn\n    if (inTokenAmount.token.isNative) {\n        const feeTokenAmount = new TokenAmount(inTokenAmount.token, fee.toString())\n        if (inTokenAmount.lessThan(feeTokenAmount) || inTokenAmount.equalTo(feeTokenAmount)) {\n            throw new AmountLessThanFeeError(`Min amount: ${feeTokenAmount.toSignificant()}`)\n        }\n\n        inTokenAmount = inTokenAmount.subtract(feeTokenAmount)\n    }\n\n    const multicallItems: MulticallItem[] = []\n    let value = fee.toString()\n    let depositAmount = tokenAmountIn\n    let priceImpact = new Percent('0', BIPS_BASE)\n\n    const fees: FeeItem[] = []\n    const routes: RouteItem[] = []\n    let swapCall: SwapCall | undefined = undefined\n    const swapCallRequired = !tokenAmountIn.token.equals(config.tokenIn)\n    if (swapCallRequired) {\n        swapCall = await getSwapCall({\n            ...params,\n            tokenOut: config.tokenIn,\n            from: multicallRouterAddress,\n            to: multicallRouterAddress,\n        })\n\n        if (swapCall.amountIn.token.isNative) {\n            /**\n             * To maintain consistency with any potential fees charged by the aggregator,\n             * we calculate the total value by adding the fee to the value obtained from the aggregator.\n             */\n            value = BigNumber.from(swapCall.value).add(fee).toString()\n        }\n        fees.push(...swapCall.fees)\n        routes.push(...swapCall.routes)\n        priceImpact = swapCall.priceImpact\n        depositAmount = swapCall.amountOut\n        multicallItems.push({\n            data: swapCall.data,\n            to: swapCall.to,\n            path: swapCall.amountIn.token.isNative ? AddressZero : swapCall.amountIn.token.address,\n            offset: swapCall.offset,\n            isNative: swapCall.amountIn.token.isNative,\n        })\n    }\n\n    const depositCall = await getDepositCall({\n        amountIn: depositAmount,\n        config,\n        receiverAddress: to,\n        refundAddress: evmTo,\n    })\n    fees.push(...depositCall.fees)\n    routes.push(...depositCall.routes)\n    multicallItems.push({\n        data: depositCall.data,\n        to: depositCall.to,\n        path: depositCall.amountIn.token.address,\n        offset: depositCall.offset,\n        isNative: depositCall.amountIn.token.isNative,\n    })\n\n    const multicallCalldata = multicallRouter.interface.encodeFunctionData('multicall', [\n        inTokenAmount.raw.toString(),\n        multicallItems.map((i) => i.data),\n        multicallItems.map((i) => i.to),\n        multicallItems.map((i) => i.path),\n        multicallItems.map((i) => i.offset),\n        multicallItems.map((i) => i.isNative),\n        evmTo,\n    ])\n\n    const data = feeCollector.interface.encodeFunctionData('onswap', [\n        inTokenAmount.token.isNative ? AddressZero : inTokenAmount.token.address,\n        inTokenAmount.raw.toString(),\n        multicallRouter.address,\n        multicallRouter.address,\n        multicallCalldata,\n    ])\n\n    const tokenAmountOut = depositCall.amountOut\n    return {\n        tokenAmountOut,\n        tokenAmountOutMin: tokenAmountOut,\n        priceImpact: priceImpact,\n        amountInUsd: depositAmount,\n        approveTo: approveAddress,\n        routes,\n        fees,\n        kind: 'crosschain-swap',\n        transactionType: 'evm',\n        transactionRequest: {\n            chainId,\n            to: feeCollectorAddress,\n            data,\n            value,\n        },\n    }\n}\n\ntype Call = {\n    amountIn: TokenAmount\n    amountOut: TokenAmount\n    to: string\n    data: BytesLike\n    value: string\n    offset: number\n    fees: FeeItem[]\n    routes: RouteItem[]\n}\n\ntype SwapCall = Call & SwapExactInResult\n\nasync function getSwapCall(params: SwapExactInParams): Promise<SwapCall> {\n    // Get onchain swap transaction what will be executed by fee collector\n    const result = await onchainSwap(params)\n\n    let value: string\n    let data: BytesLike\n    let routerAddress: string\n    if (result.transactionType === 'tron') {\n        value = result.transactionRequest.call_value.toString()\n        const method = utils.id(result.transactionRequest.function_selector).slice(0, 10)\n        data = method + result.transactionRequest.raw_parameter\n        routerAddress = tronAddressToEvm(result.transactionRequest.contract_address)\n    } else if (result.transactionType === 'evm') {\n        value = result.transactionRequest.value?.toString() as string\n        data = result.transactionRequest.data as BytesLike\n        routerAddress = result.transactionRequest.to as string\n    } else {\n        // BTC\n        value = ''\n        data = ''\n        routerAddress = ''\n    }\n\n    return {\n        ...result,\n        priceImpact: result.priceImpact || new Percent('0', BIPS_BASE),\n        amountInUsd: result.amountInUsd || params.tokenAmountIn,\n        // Call type params\n        amountIn: params.tokenAmountIn,\n        amountOut: result.tokenAmountOut,\n        to: routerAddress,\n        data,\n        value,\n        offset: 0,\n    }\n}\n\nasync function getDepositCall({\n    amountIn,\n    config,\n    receiverAddress,\n    refundAddress,\n}: {\n    amountIn: TokenAmount\n    config: ChainFlipConfig\n    receiverAddress: string\n    refundAddress: string\n}): Promise<Call> {\n    const { src, dest, tokenOut } = config\n    const chainFlipSdk = new SwapSDK({\n        network: 'mainnet',\n        enabledFeatures: { dca: true },\n    })\n\n    checkMinAmount(amountIn)\n\n    let quote\n    try {\n        const { quotes } = await chainFlipSdk.getQuoteV2({\n            amount: amountIn.raw.toString(),\n            srcChain: src.chain,\n            srcAsset: src.asset,\n            destChain: dest.chain,\n            destAsset: dest.asset,\n            isVaultSwap: true,\n            brokerCommissionBps: ChainFlipBrokerFeeBps,\n        })\n        quote = quotes.find((quote) => quote.type === 'REGULAR')\n    } catch (e) {\n        throw new ChainFlipError('getQuoteV2 error', e)\n    }\n\n    if (!quote) {\n        throw new ChainFlipError('There is no REGULAR quote found')\n    }\n\n    let vaultSwapData: VaultSwapResponse\n    try {\n        vaultSwapData = await chainFlipSdk.encodeVaultSwapData({\n            quote,\n            destAddress: receiverAddress,\n            fillOrKillParams: {\n                slippageTolerancePercent: quote.recommendedSlippageTolerancePercent,\n                refundAddress,\n                retryDurationBlocks: 100,\n            },\n            brokerAccount: ChainFlipBrokerAccount,\n            brokerCommissionBps: ChainFlipBrokerFeeBps,\n        })\n    } catch (e) {\n        throw new ChainFlipError('encodeVaultSwapData error', e)\n    }\n\n    const { chain } = vaultSwapData\n    if (chain !== 'Arbitrum' && chain !== 'Ethereum') {\n        throw new ChainFlipError(`Incorrect source chain: ${chain}`)\n    }\n    const { calldata, to } = vaultSwapData\n\n    const { egressAmount } = quote\n\n    const { usdcFeeToken, solFeeToken, btcFeeToken } = getChainFlipFee(quote)\n\n    return {\n        amountIn,\n        amountOut: new TokenAmount(tokenOut, egressAmount),\n        to,\n        data: calldata,\n        value: '0',\n        offset: 164,\n        fees: [\n            {\n                provider: 'chainflip-bridge',\n                description: 'ChainFlip fee',\n                value: usdcFeeToken,\n            },\n            {\n                provider: 'chainflip-bridge',\n                description: 'ChainFlip fee',\n                value: solFeeToken,\n            },\n            {\n                provider: 'chainflip-bridge',\n                description: 'ChainFlip fee',\n                value: btcFeeToken,\n            },\n        ],\n        routes: [\n            {\n                provider: 'chainflip-bridge',\n                tokens: [amountIn.token, tokenOut],\n            },\n        ],\n    }\n}\n","import { Quote } from '@chainflip/sdk/swap'\n\nimport { ChainId } from '../../../constants'\nimport { GAS_TOKEN, Token, TokenAmount } from '../../../entities'\nimport { ChainFlipAssetId, ChainFlipChainId, ChainFlipToken } from './types'\n\nexport const ChainFlipBrokerAccount = 'cFJZvt5AiEGwUiFFNxhDuLRcgC1WBR6tE7gaQQfe8dqbzoYkx'\nexport const ChainFlipBrokerFeeBps = 20\n\nexport const ARB_USDC = new Token({\n    address: '0xaf88d065e77c8cC2239327C5EDb3A432268e5831',\n    chainId: ChainId.ARBITRUM_MAINNET,\n    decimals: 6,\n    name: 'USDC',\n    symbol: 'USDC',\n    icons: {\n        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n    },\n})\n\nexport const ETH_USDC = new Token({\n    address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    chainId: ChainId.ETH_MAINNET,\n    decimals: 6,\n    name: 'USDC',\n    symbol: 'USDC',\n    icons: {\n        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n    },\n})\n\nexport const CF_ARB_USDC: ChainFlipToken = {\n    chainId: ChainFlipChainId.Arbitrum,\n    assetId: ChainFlipAssetId.USDC,\n    chain: 'Arbitrum',\n    asset: 'USDC',\n}\n\nexport const CF_ETH_USDC: ChainFlipToken = {\n    chainId: ChainFlipChainId.Ethereum,\n    assetId: ChainFlipAssetId.USDC,\n    chain: 'Ethereum',\n    asset: 'USDC',\n}\n\nexport function checkMinAmount(amountIn: TokenAmount) {\n    let minThreshold: TokenAmount | undefined = undefined\n    if (amountIn.token.equals(ARB_USDC)) {\n        minThreshold = new TokenAmount(ARB_USDC, '15000000') //  15 USDC\n    } else if (amountIn.token.equals(ETH_USDC)) {\n        minThreshold = new TokenAmount(ARB_USDC, '25000000') //  25 USDC\n    }\n\n    if (minThreshold && amountIn.lessThan(minThreshold)) {\n        throw new Error(`Amount should be greater than ${minThreshold.toSignificant()} ${minThreshold.token.symbol}`)\n    }\n}\n\nexport function getChainFlipFee(quote: Quote) {\n    const SOL = GAS_TOKEN[ChainId.SOLANA_MAINNET]\n    const BTC = GAS_TOKEN[ChainId.BTC_MAINNET]\n\n    let usdcFee = 0\n    let solFee = 0\n    let btcFee = 0\n\n    quote.includedFees.forEach(({ asset, amount }) => {\n        if (asset === 'USDC') {\n            usdcFee += parseInt(amount)\n        }\n        if (asset === 'SOL') {\n            solFee += parseInt(amount)\n        }\n        if (asset === 'BTC') {\n            btcFee += parseInt(amount)\n        }\n    })\n\n    return {\n        usdcFeeToken: new TokenAmount(ARB_USDC, usdcFee.toString()),\n        solFeeToken: new TokenAmount(SOL, solFee.toString()),\n        btcFeeToken: new TokenAmount(BTC, btcFee.toString()),\n    }\n}\n","import { Quote, RegularQuote, SwapSDK, VaultSwapResponse } from '@chainflip/sdk/swap'\n\nimport { TokenAmount } from '../../../entities'\nimport { BaseSwapping } from '../../swapping'\nimport { MulticallRouter } from '../../contracts'\nimport { OneInchProtocols } from '../../trade/oneInchTrade'\nimport { ChainFlipError } from '../../sdkError'\nimport { OmniPoolConfig, SwapExactInParams, SwapExactInResult } from '../../types'\nimport { isEvmChainId } from '../../chainUtils'\n\nimport { ChainFlipBrokerAccount, ChainFlipBrokerFeeBps, checkMinAmount, getChainFlipFee } from './utils'\nimport { ChainFlipConfig } from './types'\n\nexport interface ZappingChainFlipExactInParams {\n    tokenAmountIn: TokenAmount\n    config: ChainFlipConfig\n    from: string\n    to: string\n    slippage: number\n    deadline: number\n    oneInchProtocols?: OneInchProtocols\n}\n\nexport class ZappingCrossChainChainFlip extends BaseSwapping {\n    protected multicallRouter!: MulticallRouter\n    protected chainFlipSdk: SwapSDK\n    protected chainFlipQuote!: Quote\n    protected chainFlipVaultSwapResponse!: VaultSwapResponse\n    protected config!: ChainFlipConfig\n    protected evmTo!: string\n    protected dstAddress: string\n\n    public constructor(context: SwapExactInParams, omniPoolConfig: OmniPoolConfig) {\n        const { symbiosis, to, partnerAddress } = context\n        super(symbiosis, omniPoolConfig)\n\n        this.dstAddress = to\n        this.partnerAddress = partnerAddress\n\n        this.chainFlipSdk = new SwapSDK({\n            network: 'mainnet',\n            enabledFeatures: { dca: true },\n        })\n    }\n\n    protected async doPostTransitAction() {\n        checkMinAmount(this.transit.amountOut)\n\n        const { src, dest } = this.config\n        let quote: RegularQuote | undefined\n        try {\n            const { quotes } = await this.chainFlipSdk.getQuoteV2({\n                amount: this.transit.amountOut.raw.toString(),\n                srcChain: src.chain,\n                srcAsset: src.asset,\n                destChain: dest.chain,\n                destAsset: dest.asset,\n                isVaultSwap: true,\n                brokerCommissionBps: ChainFlipBrokerFeeBps,\n            })\n            quote = quotes.find((quote) => quote.type === 'REGULAR')\n        } catch (e) {\n            throw new ChainFlipError('getQuoteV2', e)\n        }\n\n        if (!quote) {\n            throw new ChainFlipError('There is no REGULAR quote found')\n        }\n\n        this.chainFlipQuote = quote\n\n        try {\n            // Encode vault swap transaction data\n            this.chainFlipVaultSwapResponse = await this.chainFlipSdk.encodeVaultSwapData({\n                quote,\n                destAddress: this.dstAddress,\n                fillOrKillParams: {\n                    slippageTolerancePercent: this.chainFlipQuote.recommendedSlippageTolerancePercent,\n                    refundAddress: this.evmTo,\n                    retryDurationBlocks: 100,\n                },\n                brokerAccount: ChainFlipBrokerAccount,\n                brokerCommissionBps: ChainFlipBrokerFeeBps,\n            })\n        } catch (e) {\n            throw new ChainFlipError('encodeVaultSwapData', e)\n        }\n    }\n\n    public async exactIn({\n        tokenAmountIn,\n        config,\n        from,\n        slippage,\n        deadline,\n    }: ZappingChainFlipExactInParams): Promise<SwapExactInResult> {\n        const chainFlipTokenIn = config.tokenIn\n        this.config = config\n        this.multicallRouter = this.symbiosis.multicallRouter(chainFlipTokenIn.chainId)\n\n        const transitTokenIn = this.symbiosis.transitToken(tokenAmountIn.token.chainId, this.omniPoolConfig)\n        const transitTokenOut = this.symbiosis.transitToken(chainFlipTokenIn.chainId, this.omniPoolConfig)\n        if (transitTokenIn.equals(transitTokenOut)) {\n            throw new ChainFlipError('Same transit token')\n        }\n        this.evmTo = from\n        if (!isEvmChainId(tokenAmountIn.token.chainId)) {\n            this.evmTo = this.symbiosis.config.refundAddress\n        }\n        const result = await this.doExactIn({\n            tokenAmountIn,\n            tokenOut: chainFlipTokenIn,\n            from,\n            to: this.evmTo,\n            slippage,\n            deadline,\n            transitTokenIn,\n            transitTokenOut,\n            partnerAddress: this.partnerAddress,\n        })\n\n        const { egressAmount } = this.chainFlipQuote\n        const { usdcFeeToken, solFeeToken, btcFeeToken } = getChainFlipFee(this.chainFlipQuote)\n        const amountOut = new TokenAmount(config.tokenOut, egressAmount)\n\n        return {\n            ...result,\n            tokenAmountOut: amountOut,\n            tokenAmountOutMin: amountOut,\n            routes: [\n                ...result.routes,\n                {\n                    provider: 'chainflip-bridge',\n                    tokens: [chainFlipTokenIn, amountOut.token],\n                },\n            ],\n            fees: [\n                ...result.fees,\n                {\n                    provider: 'chainflip-bridge',\n                    description: 'ChainFlip fee',\n                    value: usdcFeeToken,\n                },\n                {\n                    provider: 'chainflip-bridge',\n                    description: 'ChainFlip fee',\n                    value: solFeeToken,\n                },\n                {\n                    provider: 'chainflip-bridge',\n                    description: 'ChainFlip fee',\n                    value: btcFeeToken,\n                },\n            ],\n        }\n    }\n\n    protected tradeCTo(): string {\n        return this.multicallRouter.address\n    }\n\n    protected finalReceiveSide(): string {\n        return this.multicallRouter.address\n    }\n\n    protected finalCalldata(): string | [] {\n        return this.buildMulticall()\n    }\n\n    protected finalOffset(): number {\n        return 36\n    }\n\n    private buildMulticall() {\n        const callDatas = []\n        const receiveSides = []\n        const path = []\n        const offsets = []\n        const amount = this.transit.amountOut\n\n        if (this.tradeC) {\n            callDatas.push(this.tradeC.callData)\n            receiveSides.push(this.tradeC.routerAddress)\n            path.push(this.tradeC.tokenAmountIn.token.address)\n            offsets.push(this.tradeC.callDataOffset!)\n        }\n\n        const { chain } = this.chainFlipVaultSwapResponse\n        if (chain !== 'Arbitrum' && chain !== 'Ethereum') {\n            throw new ChainFlipError(`Incorrect source chain: ${chain}`)\n        }\n        const { tokenIn } = this.config\n        const { calldata, to } = this.chainFlipVaultSwapResponse\n        callDatas.push(calldata)\n        receiveSides.push(to)\n        path.push(tokenIn.address)\n        offsets.push(164)\n\n        return this.multicallRouter.interface.encodeFunctionData('multicall', [\n            amount.raw.toString(),\n            callDatas,\n            receiveSides,\n            path,\n            offsets,\n            this.evmTo,\n        ])\n    }\n}\n","import { SwapExactInParams, SwapExactInResult } from '../../types'\nimport { ChainFlipAssetId, ChainFlipChainId, ChainFlipConfig, ChainFlipToken } from './types'\nimport { GAS_TOKEN } from '../../../entities'\nimport { ChainId } from '../../../constants'\nimport { theBest } from '../utils'\nimport { SOL_USDC } from '../../chainUtils'\nimport { ZappingOnChainChainFlip } from './zappingOnChainChainFlip'\nimport { ZappingCrossChainChainFlip } from './zappingCrossChainChainFlip'\nimport { ARB_USDC, CF_ARB_USDC, CF_ETH_USDC, ETH_USDC } from './utils'\nimport { ChainFlipError } from '../../sdkError'\n\nconst CF_SOL_SOL: ChainFlipToken = {\n    chainId: ChainFlipChainId.Solana,\n    assetId: ChainFlipAssetId.SOL,\n    chain: 'Solana',\n    asset: 'SOL',\n}\n\nconst CF_SOL_USDC: ChainFlipToken = {\n    chainId: ChainFlipChainId.Solana,\n    assetId: ChainFlipAssetId.solUSDC,\n    chain: 'Solana',\n    asset: 'USDC',\n}\n\nconst CONFIGS: ChainFlipConfig[] = [\n    {\n        tokenIn: ARB_USDC,\n        tokenOut: GAS_TOKEN[ChainId.SOLANA_MAINNET],\n        src: CF_ARB_USDC,\n        dest: CF_SOL_SOL,\n    },\n    {\n        tokenIn: ARB_USDC,\n        tokenOut: SOL_USDC,\n        src: CF_ARB_USDC,\n        dest: CF_SOL_USDC,\n    },\n    {\n        tokenIn: ETH_USDC,\n        tokenOut: GAS_TOKEN[ChainId.SOLANA_MAINNET],\n        src: CF_ETH_USDC,\n        dest: CF_SOL_SOL,\n    },\n    {\n        tokenIn: ETH_USDC,\n        tokenOut: SOL_USDC,\n        src: CF_ETH_USDC,\n        dest: CF_SOL_USDC,\n    },\n]\n\nexport const CHAIN_FLIP_SOL_TOKENS = CONFIGS.map((i) => i.tokenIn)\n\nexport async function solanaChainFlipSwap(context: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn, from, to, symbiosis, slippage, deadline, selectMode, tokenOut } = context\n\n    // via stable pool only\n    const poolConfig = symbiosis.config.omniPools[0]\n\n    const CF_CONFIGS = CONFIGS.filter((config) => config.tokenOut.equals(tokenOut))\n\n    if (!CF_CONFIGS.length) {\n        throw new ChainFlipError('No config found for tokenOut')\n    }\n\n    const promises: Promise<SwapExactInResult>[] = []\n\n    if (CF_CONFIGS.some((config) => config.tokenIn.chainId === tokenAmountIn.token.chainId)) {\n        const onChainPromises = CF_CONFIGS.map((config) => ZappingOnChainChainFlip(context, config))\n\n        promises.push(...onChainPromises)\n    }\n\n    const crossChainPromises = CF_CONFIGS.map((config) => {\n        const zapping = new ZappingCrossChainChainFlip(context, poolConfig)\n        return zapping.exactIn({\n            tokenAmountIn,\n            config,\n            from,\n            to,\n            slippage,\n            deadline,\n        })\n    })\n\n    promises.push(...crossChainPromises)\n\n    return theBest(promises, selectMode)\n}\n","import { SwapExactInParams, SwapExactInResult } from '../../types'\nimport { GAS_TOKEN } from '../../../entities'\nimport { ChainId } from '../../../constants'\nimport { theBest } from '../utils'\n\nimport { ZappingCrossChainChainFlip } from './zappingCrossChainChainFlip'\nimport { ZappingOnChainChainFlip } from './zappingOnChainChainFlip'\nimport { ChainFlipAssetId, ChainFlipChainId, ChainFlipConfig, ChainFlipToken } from './types'\nimport { ARB_USDC, CF_ARB_USDC, CF_ETH_USDC, ETH_USDC } from './utils'\nimport { ChainFlipError } from '../../sdkError'\n\nconst CF_BTC_BTC: ChainFlipToken = {\n    chainId: ChainFlipChainId.Bitcoin,\n    assetId: ChainFlipAssetId.BTC,\n    chain: 'Bitcoin',\n    asset: 'BTC',\n}\n\nconst CONFIGS: ChainFlipConfig[] = [\n    {\n        tokenIn: ARB_USDC,\n        tokenOut: GAS_TOKEN[ChainId.BTC_MAINNET],\n        src: CF_ARB_USDC,\n        dest: CF_BTC_BTC,\n    },\n    {\n        tokenIn: ETH_USDC,\n        tokenOut: GAS_TOKEN[ChainId.BTC_MAINNET],\n        src: CF_ETH_USDC,\n        dest: CF_BTC_BTC,\n    },\n]\n\nexport const CHAIN_FLIP_BTC_TOKENS = CONFIGS.map((i) => i.tokenIn)\n\nexport async function btcChainFlipSwap(context: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn, from, to, symbiosis, slippage, deadline, selectMode, tokenOut } = context\n\n    // via stable pool only\n    const poolConfig = symbiosis.config.omniPools[0]\n\n    const CF_CONFIGS = CONFIGS.filter((config) => config.tokenOut.equals(tokenOut))\n\n    if (!CF_CONFIGS.length) {\n        throw new ChainFlipError('No config found for tokenOut')\n    }\n\n    const promises: Promise<SwapExactInResult>[] = []\n\n    if (CF_CONFIGS.some((config) => config.tokenIn.chainId === tokenAmountIn.token.chainId)) {\n        const onChainPromises = CF_CONFIGS.map((config) => ZappingOnChainChainFlip(context, config))\n        promises.push(...onChainPromises)\n    }\n\n    const crossChainPromises = CF_CONFIGS.map((config) => {\n        const zapping = new ZappingCrossChainChainFlip(context, poolConfig)\n        return zapping.exactIn({\n            tokenAmountIn,\n            config,\n            from,\n            to,\n            slippage,\n            deadline,\n        })\n    })\n\n    promises.push(...crossChainPromises)\n\n    return theBest(promises, selectMode)\n}\n","import { BigNumber, BytesLike, utils } from 'ethers'\nimport { AddressZero } from '@ethersproject/constants/lib/addresses'\nimport { ZERO_FEE_COLLECTOR_ADDRESSES } from '../../swapExactIn'\nimport { Percent, Token, TokenAmount } from '../../../entities'\nimport { onchainSwap } from '../onchainSwap'\nimport { tronAddressToEvm } from '../../chainUtils'\nimport { getPkScript, getThreshold, getToBtcFee } from '../../chainUtils/btc'\nimport { AmountLessThanFeeError, AmountTooLowError, SdkError } from '../../sdkError'\nimport { FeeCollector__factory, MulticallRouterV2__factory } from '../../contracts'\nimport { BIPS_BASE, MULTICALL_ROUTER_V2 } from '../../constants'\nimport { Symbiosis } from '../../symbiosis'\nimport { MultiCallItem, SwapExactInParams, SwapExactInResult } from '../../types'\nimport { getPartnerFeeCall } from '../../feeCall/getPartnerFeeCall'\nimport { getVolumeFeeCall } from '../../feeCall/getVolumeFeeCall'\nimport { ChainId } from '../../../constants'\n\nexport async function zappingBtcOnChain(params: SwapExactInParams, syBtc: Token): Promise<SwapExactInResult> {\n    const { symbiosis, tokenAmountIn, tokenOut, to, from, partnerAddress } = params\n\n    const bitcoinAddress = getPkScript(to, tokenOut.chainId)\n\n    const chainId = tokenAmountIn.token.chainId\n\n    const feeCollectorAddress = ZERO_FEE_COLLECTOR_ADDRESSES[chainId]\n    if (!feeCollectorAddress) {\n        throw new SdkError(`Fee collector not found for chain ${chainId}`)\n    }\n    const multicallRouterAddress = MULTICALL_ROUTER_V2[chainId]\n    if (!multicallRouterAddress) {\n        throw new SdkError(`MulticallRouterV2 not found for chain ${chainId}`)\n    }\n\n    const provider = symbiosis.getProvider(chainId)\n    const multicallRouter = MulticallRouterV2__factory.connect(multicallRouterAddress, provider)\n    const feeCollector = FeeCollector__factory.connect(feeCollectorAddress, provider)\n\n    const [fee, approveTo] = await symbiosis.cache.get(\n        ['feeCollector.fee', 'feeCollector.onchainGateway', chainId.toString()],\n        () => {\n            return Promise.all([feeCollector.callStatic.fee(), feeCollector.callStatic.onchainGateway()])\n        },\n        60 * 60 // 1 hour\n    )\n\n    let inTokenAmount = tokenAmountIn\n    if (inTokenAmount.token.isNative) {\n        const feeTokenAmount = new TokenAmount(inTokenAmount.token, fee.toString())\n        if (inTokenAmount.lessThan(feeTokenAmount) || inTokenAmount.equalTo(feeTokenAmount)) {\n            throw new AmountLessThanFeeError(`Min amount: ${feeTokenAmount.toSignificant()}`)\n        }\n\n        inTokenAmount = inTokenAmount.subtract(feeTokenAmount)\n    }\n\n    const calls: MultiCallItem[] = []\n    let value = fee.toString()\n    let amountIn = tokenAmountIn\n    let amountInMin = tokenAmountIn\n    let priceImpact = new Percent('0', BIPS_BASE)\n    if (!tokenAmountIn.token.equals(syBtc)) {\n        const swapCall = await getSwapCall({\n            ...params,\n            tokenOut: syBtc,\n            from: multicallRouterAddress,\n            to: multicallRouterAddress,\n        })\n        calls.push(swapCall)\n        amountIn = swapCall.amountOut\n        amountInMin = swapCall.amountOutMin\n        priceImpact = swapCall.priceImpact\n\n        if (swapCall.amountIn.token.isNative) {\n            /**\n             * To maintain consistency with any potential fees charged by the aggregator,\n             * we calculate the total value by adding the fee to the value obtained from the aggregator.\n             */\n            value = BigNumber.from(swapCall.value).add(fee).toString()\n        }\n    }\n\n    const partnerFeeCall = await getPartnerFeeCall({\n        symbiosis,\n        amountIn,\n        amountInMin,\n        partnerAddress,\n    })\n    if (partnerFeeCall) {\n        calls.push(partnerFeeCall)\n        amountIn = partnerFeeCall.amountOut\n        amountInMin = partnerFeeCall.amountOutMin\n    }\n    const volumeFeeCollector = symbiosis.getVolumeFeeCollector(amountIn.token.chainId, [ChainId.BTC_MAINNET])\n    if (volumeFeeCollector) {\n        const volumeFeeCall = getVolumeFeeCall({\n            feeCollector: volumeFeeCollector,\n            amountIn,\n            amountInMin,\n        })\n        calls.push(volumeFeeCall)\n        amountIn = volumeFeeCall.amountOut\n        amountInMin = volumeFeeCall.amountOutMin\n    }\n\n    const burnCall = await getBurnCall({\n        symbiosis,\n        amountIn,\n        amountInMin,\n        tokenOut,\n        bitcoinAddress,\n    })\n    calls.push(burnCall)\n\n    await symbiosis.checkDustLimit(burnCall.amountOutMin)\n\n    const multicallCalldata = multicallRouter.interface.encodeFunctionData('multicall', [\n        inTokenAmount.raw.toString(),\n        [...calls.map((i) => i.data)],\n        [...calls.map((i) => i.to)],\n        [...calls.map((i) => (i.amountIn.token.isNative ? AddressZero : i.amountIn.token.address))],\n        [...calls.map((i) => i.offset)],\n        [...calls.map((i) => i.amountIn.token.isNative)],\n        from,\n    ])\n\n    const data = feeCollector.interface.encodeFunctionData('onswap', [\n        inTokenAmount.token.isNative ? AddressZero : inTokenAmount.token.address,\n        inTokenAmount.raw.toString(),\n        multicallRouter.address,\n        multicallRouter.address, // inTokenAmount.token.isNative ? AddressZero : result.approveTo,\n        multicallCalldata,\n    ])\n\n    return {\n        kind: 'crosschain-swap',\n        tokenAmountOut: burnCall.amountOut,\n        tokenAmountOutMin: burnCall.amountOutMin,\n        priceImpact,\n        approveTo,\n        routes: calls.map((i) => i.routes).flat(),\n        fees: calls.map((i) => i.fees).flat(),\n        transactionType: 'evm',\n        transactionRequest: {\n            chainId,\n            to: feeCollectorAddress,\n            data,\n            value,\n        },\n    }\n}\n\nasync function getSwapCall(params: SwapExactInParams): Promise<MultiCallItem> {\n    // Get onchain swap transaction what will be executed by fee collector\n    const result = await onchainSwap(params)\n\n    let value: string\n    let data: BytesLike\n    let routerAddress: string\n    if (result.transactionType === 'tron') {\n        value = result.transactionRequest.call_value.toString()\n        const method = utils.id(result.transactionRequest.function_selector).slice(0, 10)\n        data = method + result.transactionRequest.raw_parameter\n        routerAddress = tronAddressToEvm(result.transactionRequest.contract_address)\n    } else if (result.transactionType === 'evm') {\n        value = result.transactionRequest.value?.toString() as string\n        data = result.transactionRequest.data as BytesLike\n        routerAddress = result.transactionRequest.to as string\n    } else {\n        throw new SdkError('Swap call is possible on EVM or Tron chains')\n    }\n\n    const { routes, fees, tokenAmountOut: amountOut, tokenAmountOutMin: amountOutMin, priceImpact } = result\n\n    return {\n        priceImpact,\n        amountIn: params.tokenAmountIn,\n        amountOut,\n        amountOutMin,\n        to: routerAddress,\n        data,\n        value,\n        offset: 0,\n        routes,\n        fees,\n    }\n}\n\nasync function getBurnCall({\n    symbiosis,\n    amountIn,\n    amountInMin,\n    tokenOut,\n    bitcoinAddress,\n}: {\n    symbiosis: Symbiosis\n    amountIn: TokenAmount\n    amountInMin: TokenAmount\n    tokenOut: Token\n    bitcoinAddress: Buffer\n}): Promise<MultiCallItem> {\n    const synthesis = symbiosis.synthesis(amountIn.token.chainId)\n    const [fee, threshold] = await Promise.all([\n        getToBtcFee(amountIn, synthesis, symbiosis.cache),\n        getThreshold(amountIn, synthesis, symbiosis.cache),\n    ])\n    if (amountIn.lessThan(fee)) {\n        throw new AmountLessThanFeeError(`Min amount: ${fee.toSignificant()} ${fee.token.symbol}`)\n    }\n    if (amountIn.lessThan(threshold)) {\n        throw new AmountTooLowError(`Min amount: ${threshold.toSignificant()} ${threshold.token.symbol}`)\n    }\n    const data = synthesis.interface.encodeFunctionData('burnSyntheticTokenBTC', [\n        fee.raw.toString(), // _stableBridgingFee must be >= minBtcFee\n        '0', // _amount will be patched\n        bitcoinAddress, // _to\n        amountIn.token.address, // _stoken\n        symbiosis.clientId, // _clientID\n    ])\n\n    const amountOut = new TokenAmount(tokenOut, amountIn.subtract(fee).raw)\n    const amountOutMin = new TokenAmount(tokenOut, amountInMin.subtract(fee).raw)\n    return {\n        priceImpact: new Percent('0', BIPS_BASE),\n        amountIn,\n        amountOut,\n        amountOutMin,\n        to: synthesis.address,\n        data,\n        value: '0',\n        offset: 68,\n        fees: [\n            {\n                provider: 'symbiosis',\n                description: 'Burn fee',\n                value: fee,\n            },\n        ],\n        routes: [\n            {\n                provider: 'symbiosis',\n                tokens: [amountIn.token, tokenOut],\n            },\n        ],\n    }\n}\n","import { SwapExactInParams, SwapExactInResult } from '../../types'\nimport { theBest } from '../utils'\nimport { ZappingBtc } from '../../swapping'\nimport { zappingBtcOnChain } from './zappingBtcOnChain'\n\nexport async function burnSyntheticBtc(context: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn, symbiosis, to, selectMode, disableSrcChainRouting, disableDstChainRouting } = context\n\n    const promises: Promise<SwapExactInResult>[] = []\n\n    symbiosis.config.btcConfigs.forEach(({ btc, symBtc }) => {\n        const syBtc = symbiosis.getRepresentation(btc, symBtc.chainId)\n        if (!syBtc) {\n            return\n        }\n\n        // allow only to unwrap deprecated syBTC\n        if (syBtc.deprecated) {\n            return\n        }\n\n        if (tokenAmountIn.token.chainId === syBtc.chainId) {\n            promises.push(zappingBtcOnChain(context, syBtc))\n            return\n        }\n\n        symbiosis.config.omniPools\n            .filter((i) => i.generalPurpose || i.coinGeckoId === 'bitcoin')\n            .forEach((poolConfig) => {\n                const combinations = symbiosis.getTransitCombinations({\n                    poolConfig,\n                    tokenIn: tokenAmountIn.token,\n                    tokenOut: syBtc,\n                    disableSrcChainRouting,\n                    disableDstChainRouting,\n                })\n                combinations.forEach(({ transitTokenIn, transitTokenOut }) => {\n                    const zappingBtc = new ZappingBtc(symbiosis, poolConfig)\n                    const { from, slippage, deadline, partnerAddress } = context\n\n                    const promise = zappingBtc.exactIn({\n                        tokenAmountIn,\n                        syBtc,\n                        from,\n                        to,\n                        slippage,\n                        deadline,\n                        transitTokenIn,\n                        transitTokenOut,\n                        partnerAddress,\n                    })\n                    promises.push(promise)\n                })\n            })\n    })\n\n    return theBest(promises, selectMode)\n}\n","import { SwapExactInParams, SwapExactInResult } from '../types'\nimport { Token } from '../../entities'\nimport { ChainId } from '../../constants'\nimport { theBest } from './utils'\nimport { ZappingThor } from '../swapping'\n\nconst ETH_USDC = new Token({\n    address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n    chainId: ChainId.ETH_MAINNET,\n    decimals: 6,\n    name: 'USDC',\n    symbol: 'USDC',\n    icons: {\n        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n    },\n})\nconst AVAX_USDC = new Token({\n    address: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E',\n    chainId: ChainId.AVAX_MAINNET,\n    decimals: 6,\n    name: 'USDC',\n    symbol: 'USDC',\n    icons: {\n        large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n        small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png',\n    },\n})\n\nexport const THOR_TOKENS = [ETH_USDC, AVAX_USDC]\n\nexport async function thorChainSwap(context: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn, from, to, symbiosis, slippage, deadline, selectMode, partnerAddress } = context\n\n    // via stable pool only\n    const poolConfig = symbiosis.config.omniPools[0]\n\n    const promises = THOR_TOKENS.map((thorToken) => {\n        const zappingThor = new ZappingThor(symbiosis, poolConfig)\n\n        return zappingThor.exactIn({\n            tokenAmountIn,\n            thorTokenIn: thorToken,\n            from,\n            to,\n            slippage,\n            deadline,\n            partnerAddress,\n        })\n    })\n\n    return theBest(promises, selectMode)\n}\n","import { SwapExactInParams, SwapExactInResult } from '../types'\nimport { ChainId } from '../../constants'\nimport { theBest } from './utils'\nimport { isBtcChainId } from '../chainUtils'\nimport { btcChainFlipSwap } from './swapChainFlip'\nimport { burnSyntheticBtc } from './toBtc/burnSyntheticBtc'\nimport { thorChainSwap } from './thorChainSwap'\n\nfunction isThorChainAvailable(chainId: ChainId) {\n    return chainId === ChainId.BTC_MAINNET\n}\n\nfunction isNativeAvailable(chainId: ChainId) {\n    return isBtcChainId(chainId)\n}\n\nfunction isChainFlipAvailable(chainId: ChainId) {\n    return isBtcChainId(chainId)\n}\n\nexport function isToBtcSwapSupported(context: SwapExactInParams): boolean {\n    const { tokenOut } = context\n\n    return isThorChainAvailable(tokenOut.chainId) || isNativeAvailable(tokenOut.chainId)\n}\n\nexport async function toBtcSwap(context: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenOut, selectMode } = context\n\n    const promises = []\n    if (isNativeAvailable(tokenOut.chainId)) {\n        promises.push(burnSyntheticBtc(context))\n    }\n    if (isThorChainAvailable(tokenOut.chainId)) {\n        promises.push(thorChainSwap(context))\n    }\n    if (isChainFlipAvailable(tokenOut.chainId)) {\n        promises.push(btcChainFlipSwap(context))\n    }\n\n    return theBest(promises, selectMode)\n}\n","import { TransactionRequest } from '@ethersproject/providers'\nimport { AddressZero } from '@ethersproject/constants/lib/addresses'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { BytesLike, isAddress } from 'ethers/lib/utils'\n\nimport { BtcConfig, FeeItem, MultiCallItem, RouteItem, SwapExactInParams, SwapExactInResult } from '../types'\nimport { Fraction, Percent, TokenAmount } from '../../entities'\n\nimport { AmountLessThanFeeError, SdkError } from '../sdkError'\nimport { getBtcPortalFee, getPkScript, isBtcChainId, isEvmChainId, isTronChainId } from '../chainUtils'\nimport { ERC20__factory, MetaRouter__factory, SymBtc__factory } from '../contracts'\nimport { MetaRouteStructs } from '../contracts/MetaRouter'\nimport { AggregatorTrade } from '../trade'\nimport { theBest } from './utils'\nimport { ChainId } from '../../constants'\nimport { bestPoolSwapping } from './crosschainSwap/bestPoolSwapping'\nimport { BIPS_BASE } from '../constants'\nimport { getPartnerFeeCall } from '../feeCall/getPartnerFeeCall'\nimport { getVolumeFeeCall } from '../feeCall/getVolumeFeeCall'\nimport { validate } from 'bitcoin-address-validation'\nimport { isUseOneInchOnly } from '../utils'\nimport { randomBytes } from 'crypto'\nimport { DepositoryContracts } from '../symbiosis'\n\nexport function isFromBtcSwapSupported(context: SwapExactInParams): boolean {\n    const { tokenAmountIn, symbiosis } = context\n\n    if (!isBtcChainId(tokenAmountIn.token.chainId)) {\n        return false\n    }\n\n    symbiosis.validateLimits(tokenAmountIn)\n\n    return true\n}\n\nexport async function fromBtcSwap(context: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn, tokenOut, selectMode, symbiosis } = context\n\n    if (!isBtcChainId(tokenAmountIn.token.chainId)) {\n        throw new SdkError(`tokenAmountIn is not BTC token`)\n    }\n\n    const promises: Promise<SwapExactInResult>[] = []\n\n    // configs except syBTC on zksync\n    const allConfigs = symbiosis.config.btcConfigs.filter((i) => i.symBtc.chainId !== ChainId.ZKSYNC_MAINNET)\n    // prefer to use destination chain syBTC to avoid cross-chain routing\n    const chainOutConfigs = allConfigs.filter((i) => i.symBtc.chainId === tokenOut.chainId)\n    const configs = chainOutConfigs.length > 0 ? chainOutConfigs : allConfigs\n    configs.forEach((btcConfig) => {\n        promises.push(fromBtcSwapInternal(context, btcConfig))\n    })\n\n    return theBest(promises, selectMode)\n}\n\nasync function fromBtcSwapInternal(context: SwapExactInParams, btcConfig: BtcConfig): Promise<SwapExactInResult> {\n    const { tokenAmountIn, tokenOut, symbiosis, to, refundAddress, generateBtcDepositAddress } = context\n\n    const { btc, symBtc, forwarderUrl } = btcConfig\n\n    const syBtcSynth = symbiosis.getRepresentation(btc, symBtc.chainId)\n    if (!syBtcSynth) {\n        throw new SdkError(`syBTC as synth wasn't found`)\n    }\n    const syBtc = symbiosis.tokens().find((token) => token.equals(syBtcSynth) && !token.isSynthetic)\n    if (!syBtc) {\n        throw new SdkError(`syBTC as original wasn't found`)\n    }\n\n    if (!isEvmChainId(tokenOut.chainId) && !isTronChainId(tokenOut.chainId)) {\n        throw new SdkError(`Only EVM chains are allowed to swap from BTC`)\n    }\n\n    if (!isAddress(to)) {\n        throw new SdkError(`Incorrect destination address was provided`)\n    }\n\n    if (refundAddress && !validate(refundAddress)) {\n        throw new SdkError(`Incorrect refund address was provided`)\n    }\n\n    const btcAmountRaw = tokenAmountIn.raw.toString()\n    let syBtcAmount = new TokenAmount(syBtc, btcAmountRaw)\n\n    const fees: FeeItem[] = []\n\n    // >> PORTAL FEE\n    const btcPortalFeeRaw = await getBtcPortalFee(forwarderUrl, symbiosis.cache)\n    const btcPortalFee = new TokenAmount(syBtc, btcPortalFeeRaw)\n    if (syBtcAmount.lessThan(btcPortalFee)) {\n        throw new AmountLessThanFeeError(\n            `Amount ${syBtcAmount.toSignificant()} ${\n                syBtcAmount.token.symbol\n            } less than btcPortalFee ${btcPortalFee.toSignificant()} ${btcPortalFee.token.symbol}`\n        )\n    }\n    syBtcAmount = syBtcAmount.subtract(btcPortalFee)\n    fees.push({\n        provider: 'symbiosis',\n        description: 'BTC Portal fee',\n        value: new TokenAmount(btc, btcPortalFee.raw),\n    })\n\n    // >> MINT FEE\n    const mintFeeRaw = '1000' // satoshi\n    const mintFee = new TokenAmount(syBtc, mintFeeRaw.toString())\n    if (syBtcAmount.lessThan(mintFee)) {\n        throw new AmountLessThanFeeError(\n            `Amount ${syBtcAmount.toSignificant()} ${\n                syBtcAmount.token.symbol\n            } less than mintFee ${mintFee.toSignificant()} ${mintFee.token.symbol}`\n        )\n    }\n    syBtcAmount = syBtcAmount.subtract(mintFee)\n    fees.push({\n        provider: 'symbiosis',\n        description: 'Mint fee',\n        value: mintFee,\n    })\n\n    const { tail: initialTail } = await buildTail(context, btcConfig, syBtcAmount)\n\n    const btcForwarderFeeRaw = await estimateWrap({\n        forwarderUrl,\n        portalFee: btcPortalFeeRaw,\n        stableBridgingFee: mintFeeRaw,\n        tail: initialTail,\n        to,\n        amount: btcAmountRaw,\n        refundAddress,\n        clientId: symbiosis.clientId,\n    })\n    const btcForwarderFeeMax = new TokenAmount(\n        syBtc,\n        btcForwarderFeeRaw.mul(200).div(100).toString() // +100% of fee\n    )\n    if (syBtcAmount.lessThan(btcForwarderFeeMax)) {\n        throw new AmountLessThanFeeError(\n            `Amount ${syBtcAmount.toSignificant()} less than btcForwarderFeeMax ${btcForwarderFeeMax.toSignificant()}`\n        )\n    }\n    syBtcAmount = syBtcAmount.subtract(btcForwarderFeeMax)\n    fees.push({\n        provider: 'symbiosis',\n        description: 'BTC Forwarder fee',\n        value: new TokenAmount(btc, btcForwarderFeeMax.raw),\n    })\n\n    // >> TODO patch amounts instead calling quote again\n    const {\n        tail,\n        fees: swapFees,\n        amountOut,\n        amountOutMin,\n        priceImpact,\n        routes,\n    } = await buildTail(context, btcConfig, syBtcAmount)\n    fees.push(...swapFees)\n    // <<\n\n    let validUntil = ''\n    let revealAddress = ''\n    if (generateBtcDepositAddress) {\n        const wrapResponse = await wrap({\n            forwarderUrl,\n            portalFee: btcPortalFeeRaw,\n            stableBridgingFee: mintFeeRaw,\n            tail,\n            to,\n            feeLimit: btcForwarderFeeMax.raw.toString(),\n            amount: btcAmountRaw,\n            refundAddress,\n            clientId: symbiosis.clientId,\n        })\n        validUntil = wrapResponse.validUntil\n        revealAddress = wrapResponse.revealAddress\n    }\n\n    return {\n        kind: 'from-btc-swap',\n        transactionType: 'btc',\n        transactionRequest: {\n            depositAddress: revealAddress,\n            validUntil,\n            tokenAmountOut: amountOut,\n        },\n        tokenAmountOut: amountOut,\n        tokenAmountOutMin: amountOutMin,\n        priceImpact,\n        approveTo: AddressZero,\n        amountInUsd: amountOut,\n        routes: [\n            {\n                provider: 'symbiosis',\n                tokens: [btc, syBtc],\n            },\n            ...routes,\n        ],\n        fees,\n    }\n}\n\nasync function buildTail(\n    context: SwapExactInParams,\n    btcConfig: BtcConfig,\n    syBtcAmount: TokenAmount\n): Promise<{\n    tail: string\n    fees: FeeItem[]\n    routes: RouteItem[]\n    priceImpact: Percent\n    amountOut: TokenAmount\n    amountOutMin: TokenAmount\n}> {\n    const { symbiosis, partnerAddress, to, tokenOut } = context\n\n    const { symBtc } = btcConfig\n    const chainId = syBtcAmount.token.chainId\n\n    const calls: MultiCallItem[] = []\n    const fees: FeeItem[] = []\n    const routes: RouteItem[] = []\n\n    const partnerFeeCall = await getPartnerFeeCall({\n        symbiosis,\n        amountIn: syBtcAmount,\n        partnerAddress,\n    })\n    if (partnerFeeCall) {\n        syBtcAmount = partnerFeeCall.amountOut // override\n        calls.push(partnerFeeCall)\n        fees.push(...partnerFeeCall.fees)\n    }\n\n    const feeCollector = symbiosis.getVolumeFeeCollector(syBtcAmount.token.chainId, [ChainId.BTC_MAINNET])\n    if (feeCollector) {\n        const volumeFeeCall = getVolumeFeeCall({\n            feeCollector,\n            amountIn: syBtcAmount,\n        })\n        syBtcAmount = volumeFeeCall.amountOut // override\n        calls.push(volumeFeeCall)\n        fees.push(...volumeFeeCall.fees)\n    }\n\n    const isOnChain = tokenOut.chainId === chainId\n    const buildSwapFunc = isOnChain ? buildOnChainSwap : buildCrossChainSwap\n\n    const swapCalls = await buildSwapFunc(context, syBtcAmount, btcConfig)\n    let amountOut = syBtcAmount\n    let amountOutMin = syBtcAmount\n    let priceImpact = new Percent('0', BIPS_BASE)\n\n    if (swapCalls.length > 0) {\n        calls.push(...swapCalls)\n        fees.push(...swapCalls.map((i) => i.fees).flat())\n        routes.push(...swapCalls.map((i) => i.routes).flat())\n        amountOut = swapCalls[swapCalls.length - 1].amountOut\n        amountOutMin = swapCalls[swapCalls.length - 1].amountOutMin\n        priceImpact = swapCalls[swapCalls.length - 1].priceImpact\n    }\n\n    const multicallRouter = symbiosis.multicallRouter(chainId)\n    const multicallCalldata = multicallRouter.interface.encodeFunctionData('multicall', [\n        '0', // will be patched\n        [...calls.map((i) => i.data)],\n        [...calls.map((i) => i.to)],\n        [...calls.map((i) => (i.amountIn.token.isNative ? AddressZero : i.amountIn.token.address))],\n        [...calls.map((i) => i.offset)],\n        to,\n    ])\n    const symBtcContract = SymBtc__factory.connect(symBtc.address, symbiosis.getProvider(chainId))\n    const tail = await symBtcContract.callStatic.packBTCTransactionTail({\n        receiveSide: multicallRouter.address,\n        receiveSideCalldata: multicallCalldata,\n        receiveSideOffset: 36,\n    })\n\n    return { tail, fees, routes, priceImpact, amountOut, amountOutMin }\n}\n\nasync function buildOnChainSwap(\n    context: SwapExactInParams,\n    syBtcAmount: TokenAmount,\n    btcConfig: BtcConfig\n): Promise<MultiCallItem[]> {\n    const { to, tokenAmountIn, tokenOut, symbiosis } = context\n\n    if (syBtcAmount.token.equals(tokenOut)) {\n        return []\n    }\n    const aggregatorTrade = new AggregatorTrade({\n        ...context,\n        tokenAmountIn: syBtcAmount,\n        tokenAmountInMin: syBtcAmount,\n        from: to, // there is not from address, set user's address\n        clientId: symbiosis.clientId,\n        preferOneInchUsage: isUseOneInchOnly(tokenAmountIn.token, tokenOut),\n    })\n    await aggregatorTrade.init()\n\n    const dep = context.symbiosis.depository(syBtcAmount.token.chainId)\n    if (dep) {\n        const transferCall = ERC20__factory.createInterface().encodeFunctionData('transfer', [\n            to,\n            aggregatorTrade.amountOutMin.toBigInt(),\n        ])\n        const call = await buildDepositCall({\n            context,\n            dep,\n            syBtcAmount,\n            tokenAmountOutMin: aggregatorTrade.amountOutMin,\n            btcConfig,\n            target: aggregatorTrade.amountOutMin.token.address,\n            targetCalldata: transferCall,\n            targetOffset: 68n,\n        })\n        call.fees = aggregatorTrade.fees || []\n        call.priceImpact = aggregatorTrade.priceImpact\n\n        return [call]\n    } else {\n        return [\n            {\n                to: aggregatorTrade.routerAddress,\n                data: aggregatorTrade.callData,\n                offset: aggregatorTrade.callDataOffset,\n                fees: aggregatorTrade.fees || [],\n                amountOut: aggregatorTrade.amountOut,\n                amountOutMin: aggregatorTrade.amountOutMin,\n                amountIn: syBtcAmount,\n                routes: [\n                    {\n                        provider: aggregatorTrade.tradeType,\n                        tokens: [syBtcAmount.token, aggregatorTrade.tokenOut],\n                    },\n                ],\n                value: '0',\n                priceImpact: aggregatorTrade.priceImpact,\n            },\n        ]\n    }\n}\n\nasync function buildCrossChainSwap(\n    context: SwapExactInParams,\n    syBtcAmount: TokenAmount,\n    btcConfig: BtcConfig\n): Promise<MultiCallItem[]> {\n    const { to } = context\n\n    const swapExactInResult = await bestPoolSwapping({\n        ...context,\n        tokenAmountIn: syBtcAmount,\n        from: to, // to be able to revert a tx\n        tradeAContext: 'multicallRouter',\n        partnerAddress: undefined, // don't need to call partner fee twice\n    })\n    const data = (swapExactInResult.transactionRequest as TransactionRequest).data!\n    const result = MetaRouter__factory.createInterface().decodeFunctionData('metaRoute', data)\n    const tx = result._metarouteTransaction as MetaRouteStructs.MetaRouteTransactionStruct\n\n    const dep = context.symbiosis.depository(syBtcAmount.token.chainId)\n    if (dep) {\n        if (swapExactInResult.tradeA) {\n            // There is DEX-swap on BSC, lock to Depository instead.\n            const call = await buildDepositCall({\n                context,\n                dep,\n                syBtcAmount,\n                tokenAmountOutMin: swapExactInResult.tradeA.amountOutMin,\n                btcConfig,\n                target: tx.relayRecipient,\n                targetCalldata: tx.otherSideCalldata,\n                targetOffset: 100n, // metaSynthesize struct size\n            })\n            call.fees = swapExactInResult.fees || []\n            call.priceImpact = swapExactInResult.priceImpact\n            return [call]\n        } else {\n            // There is no on-chain swap, Depository is not needed.\n            return [\n                {\n                    to: tx.relayRecipient,\n                    data: tx.otherSideCalldata,\n                    offset: 100, // metaSynthesize struct\n                    fees: swapExactInResult.fees,\n                    routes: swapExactInResult.routes,\n                    value: '0',\n                    amountIn: syBtcAmount,\n                    amountOut: swapExactInResult.tokenAmountOut,\n                    amountOutMin: swapExactInResult.tokenAmountOutMin,\n                    priceImpact: swapExactInResult.priceImpact,\n                },\n            ]\n        }\n    } else {\n        const calls: MultiCallItem[] = []\n        let amountIn = syBtcAmount\n        if (swapExactInResult.tradeA) {\n            // There is DEX-swap on BSC\n            calls.push({\n                to: tx.firstDexRouter,\n                data: tx.firstSwapCalldata,\n                offset: swapExactInResult.tradeA.callDataOffset,\n                fees: [],\n                routes: [],\n                value: '0',\n                amountIn,\n                amountOut: swapExactInResult.tradeA.amountOut,\n                amountOutMin: swapExactInResult.tradeA.amountOutMin,\n                priceImpact: new Percent('0', BIPS_BASE),\n            })\n            amountIn = swapExactInResult.tradeA.amountOut\n        }\n\n        calls.push({\n            to: tx.relayRecipient,\n            data: tx.otherSideCalldata,\n            offset: 100, // metaSynthesize struct\n            fees: swapExactInResult.fees,\n            routes: swapExactInResult.routes,\n            value: '0',\n            amountIn,\n            amountOut: swapExactInResult.tokenAmountOut,\n            amountOutMin: swapExactInResult.tokenAmountOutMin,\n            priceImpact: swapExactInResult.priceImpact,\n        })\n        return calls\n    }\n}\n\ntype BuildDepositCallParameters = {\n    context: SwapExactInParams\n    dep: DepositoryContracts\n    syBtcAmount: TokenAmount\n    tokenAmountOutMin: TokenAmount\n    btcConfig: BtcConfig\n    target: string\n    targetCalldata: BytesLike\n    targetOffset: BigNumberish\n}\n\nasync function buildDepositCall({\n    context,\n    dep,\n    syBtcAmount,\n    tokenAmountOutMin,\n    btcConfig,\n    target,\n    targetCalldata,\n    targetOffset,\n}: BuildDepositCallParameters): Promise<MultiCallItem> {\n    const { to, refundAddress } = context\n    const fromToken = syBtcAmount.token\n    const toToken = tokenAmountOutMin.token\n\n    const swapCondition = await dep.swapUnlocker.encodeCondition({\n        outToken: toToken.address, // destination token\n        outMinAmount: tokenAmountOutMin.toBigInt(),\n        target, // target to send destination token after validation\n        targetCalldata, // calldata to call on target. If it's empty then tokens are simply transferred\n        targetOffset, // offset to patch-in amountTo in targetCalldata\n    })\n    const withdrawCondition = await dep.withdrawUnlocker.encodeCondition({\n        recipient: to, // owner can withdraw fromToken directly\n    })\n    const unlockers = [\n        {\n            unlocker: dep.swapUnlocker.address,\n            condition: swapCondition,\n        },\n        {\n            unlocker: dep.withdrawUnlocker.address,\n            condition: withdrawCondition,\n        },\n    ]\n    if (refundAddress !== undefined && refundAddress !== '' && dep.btcRefundUnlocker !== undefined) {\n        const refundScript = getPkScript(refundAddress, btcConfig.btc.chainId)\n        const btcRefundCondition = await dep.btcRefundUnlocker.encodeCondition({\n            refundAddress: refundScript,\n        })\n        unlockers.push({\n            unlocker: dep.btcRefundUnlocker.address,\n            condition: btcRefundCondition,\n        })\n    }\n    const condition = await dep.branchedUnlocker.encodeCondition({\n        unlockers: unlockers,\n    })\n    const nonce = BigInt(`0x${randomBytes(32).toString('hex')}`)\n    const deposit = {\n        token: fromToken.address, // source token\n        amount: syBtcAmount.toBigInt(), // amount of fromToken\n        nonce: nonce, // To be able to create identical deposits\n    }\n    const unlocker = {\n        unlocker: dep.branchedUnlocker.address,\n        condition: condition,\n    }\n    const lockTx = await dep.depository.populateTransaction.lock(deposit, unlocker)\n\n    return {\n        to: dep.depository.address,\n        data: lockTx.data!,\n        offset: 4 + 32 + 32, // Offset to `amount` field in DepositoryTypes.Deposit\n        routes: [\n            {\n                provider: 'depository',\n                tokens: [syBtcAmount.token, tokenAmountOutMin.token],\n            },\n        ],\n        value: '0',\n        amountIn: syBtcAmount,\n        amountOut: tokenAmountOutMin,\n        amountOutMin: tokenAmountOutMin,\n        fees: [],\n        priceImpact: new Fraction(0n),\n    }\n}\n\ninterface DepositAddressResult {\n    revealAddress: string\n    validUntil: string\n    legacyAddress: string\n}\n\ntype EstimateWrapParams = {\n    forwarderUrl: string\n    portalFee: string\n    stableBridgingFee: string\n    tail: string\n    to: string\n    amount: string\n    refundAddress?: string\n    clientId?: string\n}\nexport type EstimateWrapBodyParams = {\n    amount: number\n    info: {\n        portalFee: number\n        op: number\n        stableBridgingFee: number\n        tail: string\n        to: string\n    }\n    refundAddress?: string\n    clientId?: string\n}\n\nasync function estimateWrap({\n    forwarderUrl,\n    portalFee,\n    stableBridgingFee,\n    tail,\n    to,\n    amount,\n    refundAddress,\n    clientId,\n}: EstimateWrapParams): Promise<BigNumber> {\n    const estimateWrapApiUrl = new URL(`${forwarderUrl}/estimate-wrap`)\n    const myHeaders = new Headers({\n        accept: 'application/json',\n        'Content-Type': 'application/json',\n    })\n\n    const body: EstimateWrapBodyParams = {\n        amount: Number(amount),\n        info: {\n            portalFee: Number(portalFee),\n            op: 0, // 0 - wrap operation\n            stableBridgingFee: Number(stableBridgingFee),\n            tail: encodeTail(tail),\n            to,\n        },\n        clientId,\n    }\n    if (refundAddress) {\n        body.refundAddress = refundAddress\n    }\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: JSON.stringify(body),\n    }\n\n    const response = await fetch(`${estimateWrapApiUrl}`, requestOptions)\n    if (!response.ok) {\n        const text = await response.text()\n        const json = JSON.parse(text)\n        throw new SdkError(json.message ?? text)\n    }\n\n    const { revealTxFee } = await response.json()\n\n    return BigNumber.from(revealTxFee)\n}\n\ntype WrapParams = EstimateWrapParams & {\n    feeLimit: string\n}\nexport type WrapBodyParams = EstimateWrapBodyParams & {\n    feeLimit: number\n}\n\nasync function wrap({\n    forwarderUrl,\n    portalFee,\n    stableBridgingFee,\n    tail,\n    to,\n    feeLimit,\n    amount,\n    refundAddress,\n    clientId,\n}: WrapParams): Promise<DepositAddressResult> {\n    const body: WrapBodyParams = {\n        info: {\n            portalFee: Number(portalFee),\n            op: 0, // 0 - is wrap operation\n            stableBridgingFee: Number(stableBridgingFee),\n            tail: encodeTail(tail),\n            to,\n        },\n        clientId,\n        feeLimit: Number(feeLimit),\n        amount: Number(amount),\n    }\n    if (refundAddress) {\n        body.refundAddress = refundAddress\n    }\n\n    const wrapApiUrl = new URL(`${forwarderUrl}/wrap`)\n    const myHeaders = new Headers({\n        accept: 'application/json',\n        'Content-Type': 'application/json',\n    })\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: JSON.stringify(body),\n    }\n\n    const response = await fetch(`${wrapApiUrl}`, requestOptions)\n    if (!response.ok) {\n        const text = await response.text()\n        const json = JSON.parse(text)\n        throw new SdkError(json.message ?? text)\n    }\n\n    const data = await response.json()\n\n    const { revealAddress, validUntil, legacyAddress } = data\n\n    return {\n        revealAddress,\n        validUntil,\n        legacyAddress,\n    }\n}\n\nfunction encodeTail(tail: string): string {\n    return Buffer.from(tail.slice(2), 'hex').toString('base64')\n}\n","import { SwapExactInParams, SwapExactInResult } from '../types'\nimport { ChainId } from '../../constants'\nimport { theBest } from './utils'\nimport { isSolanaChainId } from '../chainUtils'\nimport { solanaChainFlipSwap } from './swapChainFlip'\n\nfunction isChainFlipAvailable(chainId: ChainId) {\n    return isSolanaChainId(chainId)\n}\n\nexport function isToSolanaSwapSupported(context: SwapExactInParams): boolean {\n    const { tokenOut } = context\n\n    return isChainFlipAvailable(tokenOut.chainId)\n}\n\nexport async function toSolanaSwap(context: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenOut, selectMode } = context\n\n    const promises = []\n    if (isChainFlipAvailable(tokenOut.chainId)) {\n        promises.push(solanaChainFlipSwap(context))\n    }\n\n    return theBest(promises, selectMode)\n}\n","import { isTonChainId, isTronChainId, tronAddressToEvm } from '../chainUtils'\nimport { bridge, isBridgeSupported } from './bridge'\nimport { crosschainSwap } from './crosschainSwap'\nimport { feeCollectorSwap, isFeeCollectorSwapSupported } from './feeCollectorSwap'\nimport { isOnchainSwapSupported, onchainSwap } from './onchainSwap'\nimport { SwapExactInParams, SwapExactInResult } from '../types'\nimport { isUnwrapSupported, unwrap } from './unwrap'\nimport { isWrapSupported, wrap } from './wrap'\nimport { toTonSwap } from './toTonSwap'\nimport { isToBtcSwapSupported, toBtcSwap } from './toBtcSwap'\nimport { fromBtcSwap, isFromBtcSwapSupported } from './fromBtcSwap'\nimport { isToSolanaSwapSupported, toSolanaSwap } from './toSolanaSwap'\n\nexport * from './fromBtcSwap'\n\n// Universal stateless function that allows swap tokens on same chain or crosschain\nexport async function swapExactIn(params: SwapExactInParams): Promise<SwapExactInResult> {\n    const { tokenAmountIn, tokenOut } = params\n\n    if (isTronChainId(tokenAmountIn.token.chainId)) {\n        params.from = tronAddressToEvm(params.from)\n    }\n    if (isTronChainId(tokenOut.chainId)) {\n        params.to = tronAddressToEvm(params.to)\n    }\n\n    if (tokenAmountIn.token.equals(tokenOut)) {\n        throw new Error('Cannot swap same tokens')\n    }\n\n    if (isWrapSupported(params)) {\n        return wrap(params)\n    }\n\n    if (isUnwrapSupported(params)) {\n        return unwrap(params)\n    }\n\n    if (isOnchainSwapSupported(params)) {\n        if (isFeeCollectorSwapSupported(params)) {\n            return feeCollectorSwap(params)\n        }\n\n        return onchainSwap(params)\n    }\n\n    if (isFromBtcSwapSupported(params)) {\n        return fromBtcSwap(params)\n    }\n\n    if (isToBtcSwapSupported(params)) {\n        return toBtcSwap(params)\n    }\n\n    if (isToSolanaSwapSupported(params)) {\n        return toSolanaSwap(params)\n    }\n\n    if (isBridgeSupported(params)) {\n        return bridge(params)\n    }\n\n    if (isTonChainId(tokenOut.chainId)) {\n        return toTonSwap(params)\n    }\n\n    return crosschainSwap(params)\n}\n","import { parseUnits } from '@ethersproject/units'\nimport type { Symbiosis } from './symbiosis'\nimport { ChainId } from '../constants'\nimport { Portal__factory, Synthesis__factory } from './contracts'\nimport { TransactionReceipt } from '@ethersproject/providers'\nimport { LogDescription } from '@ethersproject/abi'\nimport { TokenAmount } from '../entities'\nimport { getExternalId, isEvmChainId, isTronChainId } from './chainUtils'\nimport { SynthesizeRequestEvent } from './contracts/Portal'\nimport { utils } from 'ethers'\nimport { OmniPoolConfig } from './types'\nimport { SdkError } from './sdkError'\n\ntype InitProps = {\n    validateState: boolean\n    synthesizeRequestFinder?: SynthesizeRequestFinder\n}\n\nexport enum PendingRequestState {\n    Default = 0,\n    Sent,\n    Reverted,\n}\n\nexport type PendingRequestType = 'burn' | 'synthesize' | 'burn-v2' | 'burn-v2-revert' | 'synthesize-v2'\n\nexport interface PendingRequest {\n    originalFromTokenAmount: TokenAmount\n    fromTokenAmount: TokenAmount\n    transactionHash: string\n    state: PendingRequestState\n    internalId: string\n    externalId: string\n    type: PendingRequestType\n    from: string\n    to: string\n    revertableAddress: string\n    chainIdFrom: ChainId\n    chainIdTo: ChainId\n    revertChainId: ChainId\n}\n\nexport interface SourceChainData {\n    fromAddress: string\n    sourceChainId: ChainId\n}\n\nexport type SynthesizeRequestFinder = (externalId: string) => Promise<SourceChainData | undefined>\n\nexport const findSourceChainData = async (\n    symbiosis: Symbiosis,\n    chainIdFrom: ChainId,\n    chainIdTo: ChainId,\n    txHash: string,\n    revertableAddress: string,\n    omniPoolConfig: OmniPoolConfig,\n    synthesizeRequestFinder?: SynthesizeRequestFinder\n): Promise<SourceChainData | undefined> => {\n    const synthesis = symbiosis.synthesis(omniPoolConfig.chainId)\n    const filter = synthesis.filters.SynthesizeCompleted()\n    const tx = await synthesis.provider.getTransactionReceipt(txHash)\n    const foundSynthesizeCompleted = tx.logs.find((log) => {\n        if (log.topics.length === 0) {\n            return false\n        }\n        return log.topics[0] === filter.topics?.[0]\n    })\n    if (!foundSynthesizeCompleted) return undefined\n    const externalId = foundSynthesizeCompleted.topics?.[1]\n\n    const chains = symbiosis\n        .chains()\n        .filter((chain) => isEvmChainId(chain.id) || isTronChainId(chain.id))\n        .filter((chain) => {\n            return chain.id !== chainIdFrom && chain.id !== chainIdTo\n        })\n\n    const promises = chains.map((chain) => {\n        return findSynthesizeRequestOnChain(symbiosis, chain.id, revertableAddress, externalId, omniPoolConfig)\n    })\n    const results = await Promise.allSettled(promises)\n\n    let sourceChainId = undefined\n    let fromAddress = undefined\n    const errors: SdkError[] = []\n    for (let i = 0; i < results.length; i++) {\n        const item = results[i]\n        const chainId = chains[i].id\n        if (item.status !== 'fulfilled') {\n            errors.push(new SdkError(`Error occurred on chain ${chainId} while loading findSynthesizeRequestOnChain`))\n            continue\n        }\n        if (item.value) {\n            sourceChainId = chainId\n            fromAddress = item.value.args.from\n            break\n        }\n    }\n    if (errors.length > 0 && !synthesizeRequestFinder) {\n        throw new AggregateError(errors, 'findSourceChainData error')\n    }\n\n    if (!fromAddress && synthesizeRequestFinder) {\n        const data = await synthesizeRequestFinder(externalId)\n        sourceChainId = data?.sourceChainId\n        fromAddress = data?.fromAddress\n    }\n\n    if (!fromAddress || !sourceChainId) {\n        return\n    }\n\n    return {\n        sourceChainId,\n        fromAddress,\n    }\n}\n\nconst findSynthesizeRequestOnChain = async (\n    symbiosis: Symbiosis,\n    chainId: ChainId,\n    revertableAddress: string,\n    originExternalId: string,\n    omniPoolConfig: OmniPoolConfig\n): Promise<SynthesizeRequestEvent | undefined> => {\n    const portal = symbiosis.portal(chainId)\n    const eventFragment = portal.interface.getEvent('SynthesizeRequest')\n    const topics = portal.interface.encodeFilterTopics(eventFragment, [\n        undefined,\n        undefined, // from\n        omniPoolConfig.chainId, // chains IDs\n        revertableAddress, // revertableAddress\n    ])\n    const blockOffset = symbiosis.filterBlockOffset(chainId)\n    const toBlock = await portal.provider.getBlockNumber()\n    const fromBlock = toBlock - blockOffset\n    const events = await portal.queryFilter<SynthesizeRequestEvent>({ topics }, fromBlock, toBlock)\n\n    const synthesis = symbiosis.synthesis(omniPoolConfig.chainId)\n    return events.find((e) => {\n        const { id } = e.args\n        const externalId = getExternalId({\n            internalId: id,\n            contractAddress: synthesis.address,\n            revertableAddress,\n            chainId: omniPoolConfig.chainId,\n        })\n        return originExternalId === externalId\n    })\n}\n\nexport const isSynthesizeV2 = async (symbiosis: Symbiosis, chainId: ChainId, txHash: string): Promise<boolean> => {\n    const id = utils.id(\n        'metaBurnSyntheticToken((uint256,uint256,bytes32,address,address,address,bytes,uint256,address,address,address,address,uint256,bytes32))'\n    )\n    const hash = id.slice(2, 10)\n    const tx = await symbiosis.getProvider(chainId).getTransaction(txHash)\n\n    return tx.data.includes(hash)\n}\n\nexport class RevertRequest {\n    constructor(private symbiosis: Symbiosis, private chainId: ChainId, private transactionHash: string) {}\n\n    async init({ validateState = false, synthesizeRequestFinder }: InitProps): Promise<PendingRequest | null> {\n        const provider = this.symbiosis.getProvider(this.chainId)\n\n        const receipt = await provider.getTransactionReceipt(this.transactionHash)\n        if (!receipt) {\n            throw new SdkError(`Tx ${this.transactionHash} does not exist on chain ${this.chainId}`)\n        }\n\n        let type: PendingRequestType = 'synthesize'\n        let log = this.findSynthesizeRequest(receipt)\n        if (!log) {\n            type = 'burn'\n            log = this.findBurnRequest(receipt)\n        }\n\n        if (!log) {\n            throw new SdkError('Tx does not contain mint/burn event and cannot be reverted')\n        }\n\n        const { id, amount, token: tokenAddress, from: fromOrigin, to, chainID, revertableAddress } = log.args\n        const chainIdTo = chainID.toNumber()\n        let chainIdFrom = this.chainId\n        let from = fromOrigin\n\n        const token = this.symbiosis.findToken(tokenAddress, this.chainId)\n        if (!token) {\n            throw new SdkError(`Cannot find token ${tokenAddress} at chain ${this.chainId}`)\n        }\n        const omniPoolConfig = this.symbiosis.getOmniPoolByToken(token)\n        if (!omniPoolConfig) {\n            throw new SdkError(`Cannot find omni pool config by token ${tokenAddress}`)\n        }\n\n        let fromTokenAmount = new TokenAmount(token, amount)\n        const originalFromTokenAmount = fromTokenAmount\n\n        if (type === 'synthesize') {\n            const isV2 = await isSynthesizeV2(this.symbiosis, this.chainId, receipt.transactionHash)\n            if (isV2) {\n                type = 'synthesize-v2'\n            }\n        }\n\n        if (type === 'burn') {\n            const metaRouterAddress = this.symbiosis.metaRouter(omniPoolConfig.chainId).address\n            if (from.toLowerCase() === metaRouterAddress.toLowerCase()) {\n                type = 'burn-v2'\n                const data = await findSourceChainData(\n                    this.symbiosis,\n                    this.chainId,\n                    chainIdTo,\n                    receipt.transactionHash,\n                    revertableAddress,\n                    omniPoolConfig,\n                    synthesizeRequestFinder\n                )\n                if (data) {\n                    const { sourceChainId, fromAddress } = data\n                    from = fromAddress\n                    const sourceChainToken = this.symbiosis.transitToken(sourceChainId, omniPoolConfig)\n                    chainIdFrom = sourceChainToken.chainId\n                    fromTokenAmount = new TokenAmount(\n                        sourceChainToken,\n                        parseUnits(\n                            fromTokenAmount.toExact(sourceChainToken.decimals),\n                            sourceChainToken.decimals\n                        ).toString()\n                    )\n                } else {\n                    const transitToken = this.symbiosis.transitToken(chainIdTo, omniPoolConfig)\n                    type = 'burn-v2-revert'\n                    fromTokenAmount = new TokenAmount(transitToken, fromTokenAmount.raw)\n                }\n            }\n        }\n\n        let contractAddress\n        if (['synthesize', 'synthesize-v2'].includes(type)) {\n            contractAddress = this.symbiosis.synthesis(chainIdTo).address\n        } else {\n            contractAddress = this.symbiosis.portal(chainIdTo).address\n        }\n\n        const externalId = getExternalId({\n            internalId: id,\n            contractAddress,\n            revertableAddress,\n            chainId: chainIdTo,\n        })\n\n        let state = PendingRequestState.Default\n        if (validateState) {\n            if (['synthesize', 'synthesize-v2'].includes(type)) {\n                state = await this.symbiosis.synthesis(chainIdTo).synthesizeStates(externalId)\n            } else {\n                state = await this.symbiosis.portal(chainIdTo).unsynthesizeStates(externalId)\n            }\n            if (state === 1) {\n                throw new SdkError(`Tx is success and cannot be reverted.`)\n            }\n        }\n\n        let revertChainId = chainIdTo\n        if (type === 'synthesize-v2') {\n            revertChainId = this.chainId\n        }\n\n        return {\n            internalId: id,\n            externalId,\n            transactionHash: this.transactionHash,\n            state,\n            type,\n            from,\n            to,\n            revertableAddress,\n            chainIdFrom,\n            chainIdTo,\n            fromTokenAmount,\n            revertChainId,\n            originalFromTokenAmount,\n        }\n    }\n\n    private findSynthesizeRequest(receipt: TransactionReceipt): LogDescription | null {\n        const contract = Portal__factory.createInterface()\n        const event = contract.events['SynthesizeRequest(bytes32,address,uint256,address,address,uint256,address)']\n\n        const log = receipt.logs.find((log) => {\n            if (log.topics.length === 0) {\n                return false\n            }\n            const topic = contract.getEventTopic(event)\n            return log.topics[0].toLowerCase() === topic.toLowerCase()\n        })\n        if (!log) {\n            return null\n        }\n\n        return contract.parseLog(log)\n    }\n\n    private findBurnRequest(receipt: TransactionReceipt): LogDescription | null {\n        const contract = Synthesis__factory.createInterface()\n        const burnRequest = contract.events['BurnRequest(bytes32,address,uint256,address,address,uint256,address)']\n        const topic = contract.getEventTopic(burnRequest)\n        const log = receipt.logs.find((log) => {\n            if (log.topics.length === 0) {\n                return false\n            }\n            return log.topics[0].toLowerCase() === topic.toLowerCase()\n        })\n\n        if (!log) return null\n\n        return contract.parseLog(log)\n    }\n}\n"],"mappings":"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","names":["JSBI","ChainId","TradeType","Rounding","invariant","JSBI","JSBI","JSBI","address","JSBI","invariant","invariant","JSBI","JSBI","invariant","JSBI","invariant","getAddress","address","getAddress","Token","JSBI","invariant","invariant","JSBI","JSBI","invariant","invariant","JSBI","Token","invariant","JSBI","invariant","invariant","output","Token","address","invariant","invariant","invariant","invariant","utils","BigNumber","JSBI","TronWeb","utils","address","Contract","utils","_abi","address","utils","Contract","_abi","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","Contract","utils","_abi","address","Contract","utils","_abi","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","Contract","utils","_abi","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","Contract","utils","_abi","address","utils","Contract","ContractFactory","_abi","_bytecode","isSuperArgs","address","Contract","utils","_abi","address","AddressZero","JSBI","getAddress","unwrapDustLimit","address","token","tonTokenAddress","parseUnits","BigNumber","utils","JSBI","JSBI","Token","JSBI","Field","Token","utils","BigNumber","JSBI","parseUnits","BigNumber","BigNumber","address","BigNumber","JSBI","BigNumber","JSBI","BigNumber","AddressZero","AddressZero","BigNumber","BigNumber","Token","path","BigNumber","JSBI","AddressZero","AddressZero","JSBI","address","Multicall","Route","toHex","Trade","Token","CurrencyAmount","TradeType","validateAndParseAddress","TradeType","ethers","JSBI","CurrencyAmount","invariant","invariant","CurrencyAmount","invariant","POSSIBLE_FEES","Token","Route","JSBI","amountOut","Trade","CurrencyAmount","TradeType","invariant","validateAndParseAddress","toHex","Multicall","utils","BigNumber","BigNumber","amountOut","amountOutMin","callData","functionSelector","PublicKey","PublicKey","Address","beginCell","toNano","TronWeb","address","json","Token","TronWeb","JSBI","JSBI","Address","beginCell","toNano","PublicKey","NATIVE_MINT","PublicKey","NATIVE_MINT","AddressZero","JSBI","AddressZero","MaxUint256","BigNumber","JSBI","Token","AddressZero","BigNumber","JSBI","MaxUint256","Token","config","Token","config","Token","DEFAULT_EXCEED_DELAY","DEFAULT_EXCEED_DELAY","error","Address","AddressZero","Address","chainId","log","response","result","outHash","log","address","bridge","contract","requestType","internalId","revertableAddress","externalChainId","externalId","Address","address","Address","senderAddress","AddressZero","MaxUint256","JSBI","BigNumber","BigNumber","BigNumber","OutNotInitializedError","AddressZero","JSBI","MaxUint256","Address","AddressZero","Address","AddressZero","address","fetch","BigNumber","BigNumber","fetch","parseUnits","AddressZero","MaxUint256","Address","address","MaxUint256","AddressZero","data","AddressZero","BigNumber","utils","TronWeb","TronWeb","utils","BigNumber","AddressZero","AddressZero","AddressZero","AddressZero","AddressZero","SwapSDK","AddressZero","BigNumber","utils","Token","BTC","config","BigNumber","AddressZero","utils","SwapSDK","quote","SwapSDK","SwapSDK","quote","config","config","CONFIGS","config","BigNumber","utils","AddressZero","getSwapCall","BigNumber","AddressZero","utils","ETH_USDC","Token","AddressZero","BigNumber","validate","validate","wrap","AddressZero","BigNumber","isChainFlipAvailable","utils","config","json","BigNumber","chains","address","JSBI","TronWeb","log","token","limit","parseUnits","parseUnits","utils","PendingRequestState","chains","utils","parseUnits","log"]}