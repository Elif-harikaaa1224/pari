"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AdvisorError: () => AdvisorError,
  AmountLessThanFeeError: () => AmountLessThanFeeError,
  AmountTooHighError: () => AmountTooHighError,
  AmountTooLowError: () => AmountTooLowError,
  BASES_TO_CHECK_TRADES_AGAINST: () => BASES_TO_CHECK_TRADES_AGAINST,
  BIPS_BASE: () => BIPS_BASE,
  BTC_NETWORKS: () => BTC_NETWORKS,
  BaseSwapping: () => BaseSwapping,
  Bridge: () => Bridge,
  CHAIN_FLIP_BTC_TOKENS: () => CHAIN_FLIP_BTC_TOKENS,
  CHAIN_FLIP_SOL_TOKENS: () => CHAIN_FLIP_SOL_TOKENS,
  COINGECKO_GAS_TOKEN_IDS: () => COINGECKO_GAS_TOKEN_IDS,
  COINGECKO_PLATFORMS: () => COINGECKO_PLATFORMS,
  CROSS_CHAIN_ID: () => CROSS_CHAIN_ID,
  CUSTOM_BASES: () => CUSTOM_BASES,
  Cache: () => Cache,
  Chain: () => Chain,
  ChainFlipError: () => ChainFlipError,
  ChainId: () => ChainId,
  DEFAULT_EXCEED_DELAY: () => DEFAULT_EXCEED_DELAY,
  DEX_TOKENS_TO_CHECK_TRADES_AGAINST: () => DEX_TOKENS_TO_CHECK_TRADES_AGAINST,
  DedustTradeError: () => DedustTradeError,
  EventIds: () => EventIds,
  FACTORY_ADDRESS: () => FACTORY_ADDRESS,
  FEE_COLLECTOR_ADDRESSES: () => FEE_COLLECTOR_ADDRESSES,
  Field: () => Field,
  Fraction: () => Fraction,
  GAS_TOKEN: () => GAS_TOKEN,
  GetLogTimeoutExceededError: () => GetLogTimeoutExceededError,
  INIT_CODE_HASH: () => INIT_CODE_HASH,
  InsufficientInputAmountError: () => InsufficientInputAmountError,
  InsufficientReservesError: () => InsufficientReservesError,
  IzumiTrade: () => IzumiTrade,
  IzumiTradeError: () => IzumiTradeError,
  JSBI: () => import_jsbi18.default,
  JupiterTradeError: () => JupiterTradeError,
  LimitError: () => LimitError,
  MINIMUM_LIQUIDITY: () => MINIMUM_LIQUIDITY,
  MIN_META_SYNTH_JETTONS: () => MIN_META_SYNTH_JETTONS,
  MIN_META_SYNTH_TONS: () => MIN_META_SYNTH_TONS,
  MIN_SYNTH_JETTONS: () => MIN_SYNTH_JETTONS,
  MIN_SYNTH_TONS: () => MIN_SYNTH_TONS,
  MULTICALL_ADDRESSES: () => MULTICALL_ADDRESSES,
  MULTICALL_ROUTER_V2: () => MULTICALL_ROUTER_V2,
  NOTIFICATION_PAYMENT: () => NOTIFICATION_PAYMENT,
  NoMulticallAddressError: () => NoMulticallAddressError,
  NoRepresentationFoundError: () => NoRepresentationFoundError,
  NoTransitTokenError: () => NoTransitTokenError,
  ONE_BIPS: () => ONE_BIPS,
  OmniLiquidity: () => OmniLiquidity,
  OneInchTradeError: () => OneInchTradeError,
  Opcodes: () => Opcodes,
  OpenOceanTradeError: () => OpenOceanTradeError,
  PAIR_ADDRESS_CACHE: () => PAIR_ADDRESS_CACHE,
  Pair: () => Pair,
  PendingRequestState: () => PendingRequestState,
  Percent: () => Percent,
  Price: () => Price,
  Profiler: () => Profiler,
  RaydiumTradeError: () => RaydiumTradeError,
  RevertPending: () => RevertPending,
  RevertRequest: () => RevertRequest,
  Rounding: () => Rounding,
  Route: () => Route,
  Router: () => Router,
  RoutingError: () => RoutingError,
  SOL_USDC: () => SOL_USDC,
  SdkError: () => SdkError,
  StonFiTradeError: () => StonFiTradeError,
  Swapping: () => Swapping,
  SwappingMiddleware: () => SwappingMiddleware,
  SwappingToTon: () => SwappingToTon,
  Symbiosis: () => Symbiosis,
  THOR_TOKENS: () => THOR_TOKENS,
  TON_REFERRAL_ADDRESS: () => TON_REFERRAL_ADDRESS,
  TON_STONFI_PROXY_ADDRESS: () => TON_STONFI_PROXY_ADDRESS,
  TON_TOKEN_DECIMALS: () => TON_TOKEN_DECIMALS,
  TRON_PORTAL_ABI: () => TRON_PORTAL_ABI,
  TRON_TRC20_ABI: () => TRON_TRC20_ABI,
  ThorChainError: () => ThorChainError,
  Token: () => Token2,
  TokenAmount: () => TokenAmount,
  Trade: () => Trade,
  TradeError: () => TradeError,
  TradeType: () => TradeType,
  UniV2TradeError: () => UniV2TradeError,
  UniV3TradeError: () => UniV3TradeError,
  WETH: () => WETH,
  WETH_ONLY: () => WETH_ONLY,
  WrapTradeError: () => WrapTradeError,
  ZERO: () => ZERO,
  ZERO_FEE_COLLECTOR_ADDRESSES: () => ZERO_FEE_COLLECTOR_ADDRESSES,
  Zapping: () => Zapping,
  ZappingBtc: () => ZappingBtc,
  ZappingThor: () => ZappingThor,
  addSolanaFee: () => addSolanaFee,
  aggregatorErrorToText: () => aggregatorErrorToText,
  basisPointsToPercent: () => basisPointsToPercent,
  buildMetaSynthesize: () => buildMetaSynthesize,
  buildSynthesize: () => buildSynthesize,
  calculateGasMargin: () => calculateGasMargin,
  calculatePriceImpact: () => calculatePriceImpact,
  callDataToCell: () => callDataToCell,
  chains: () => chains,
  computeSlippageAdjustedAmounts: () => computeSlippageAdjustedAmounts,
  computeTradePriceBreakdown: () => computeTradePriceBreakdown,
  dev: () => config3,
  findSourceChainData: () => findSourceChainData,
  fromBtcSwap: () => fromBtcSwap,
  getAddress: () => getAddress3,
  getAllPairCombinations: () => getAllPairCombinations,
  getBtcPortalFee: () => getBtcPortalFee,
  getChainById: () => getChainById,
  getExternalId: () => getExternalId,
  getInternalId: () => getInternalId,
  getLogWithTimeout: () => getLogWithTimeout,
  getMinAmount: () => getMinAmount,
  getMulticall: () => getMulticall,
  getPkScript: () => getPkScript,
  getPkScriptForChain: () => getPkScriptForChain,
  getSolanaConnection: () => getSolanaConnection,
  getThreshold: () => getThreshold,
  getToBtcFee: () => getToBtcFee,
  getTokenAmountUsd: () => getTokenAmountUsd,
  getTokenPriceUsd: () => getTokenPriceUsd,
  getUnwrapDustLimit: () => getUnwrapDustLimit,
  getZkCreate2Address: () => getZkCreate2Address,
  inputOutputComparator: () => inputOutputComparator,
  isBtcChainId: () => isBtcChainId,
  isEvmChainId: () => isEvmChainId,
  isFromBtcSwapSupported: () => isFromBtcSwapSupported,
  isSolanaChainId: () => isSolanaChainId,
  isSynthesizeV2: () => isSynthesizeV2,
  isTonChainId: () => isTonChainId,
  isTronChain: () => isTronChain,
  isTronChainId: () => isTronChainId,
  isTronToken: () => isTronToken,
  isWTon: () => isWTon,
  mainnet: () => config,
  prepareTronTransaction: () => prepareTronTransaction,
  splitSlippage: () => splitSlippage,
  swapExactIn: () => swapExactIn,
  testnet: () => config2,
  tokenEquals: () => tokenEquals,
  tonAdvisorMock: () => tonAdvisorMock,
  tradeComparator: () => tradeComparator,
  tronAddressToEvm: () => tronAddressToEvm,
  waitForBtcCommitTxMined: () => waitForBtcCommitTxMined,
  waitForBtcDepositAccepted: () => waitForBtcDepositAccepted,
  waitForBtcEvmTxIssued: () => waitForBtcEvmTxIssued,
  waitForComplete: () => waitForComplete,
  waitFromTonTxMined: () => waitFromTonTxMined,
  wrappedAmount: () => wrappedAmount,
  wrappedToken: () => wrappedToken
});
module.exports = __toCommonJS(src_exports);
var import_jsbi18 = __toESM(require("jsbi"));

// src/constants.ts
var import_jsbi = __toESM(require("jsbi"));
var ChainId = /* @__PURE__ */ ((ChainId3) => {
  ChainId3[ChainId3["ETH_MAINNET"] = 1] = "ETH_MAINNET";
  ChainId3[ChainId3["ETH_RINKEBY"] = 4] = "ETH_RINKEBY";
  ChainId3[ChainId3["ETH_KOVAN"] = 42] = "ETH_KOVAN";
  ChainId3[ChainId3["BSC_MAINNET"] = 56] = "BSC_MAINNET";
  ChainId3[ChainId3["BSC_TESTNET"] = 97] = "BSC_TESTNET";
  ChainId3[ChainId3["MATIC_MAINNET"] = 137] = "MATIC_MAINNET";
  ChainId3[ChainId3["MATIC_MUMBAI"] = 80001] = "MATIC_MUMBAI";
  ChainId3[ChainId3["AVAX_MAINNET"] = 43114] = "AVAX_MAINNET";
  ChainId3[ChainId3["AVAX_TESTNET"] = 43113] = "AVAX_TESTNET";
  ChainId3[ChainId3["HECO_MAINNET"] = 128] = "HECO_MAINNET";
  ChainId3[ChainId3["HECO_TESTNET"] = 256] = "HECO_TESTNET";
  ChainId3[ChainId3["OKEX_MAINNET"] = 66] = "OKEX_MAINNET";
  ChainId3[ChainId3["OKEX_TESTNET"] = 65] = "OKEX_TESTNET";
  ChainId3[ChainId3["BOBA_MAINNET"] = 288] = "BOBA_MAINNET";
  ChainId3[ChainId3["SYMBIOSIS_TESTNET"] = 719095483] = "SYMBIOSIS_TESTNET";
  ChainId3[ChainId3["SYMBIOSIS_MAINNET"] = 13863860] = "SYMBIOSIS_MAINNET";
  ChainId3[ChainId3["BOBA_AVALANCHE"] = 43288] = "BOBA_AVALANCHE";
  ChainId3[ChainId3["BOBA_RINKEBY"] = 28] = "BOBA_RINKEBY";
  ChainId3[ChainId3["MILKOMEDA_MAINNET"] = 2001] = "MILKOMEDA_MAINNET";
  ChainId3[ChainId3["MILKOMEDA_DEVNET"] = 200101] = "MILKOMEDA_DEVNET";
  ChainId3[ChainId3["BTC_MAINNET"] = 3652501241] = "BTC_MAINNET";
  ChainId3[ChainId3["BTC_MUTINY"] = 2782866891] = "BTC_MUTINY";
  ChainId3[ChainId3["BTC_TESTNET4"] = 675223068] = "BTC_TESTNET4";
  ChainId3[ChainId3["AURORA_MAINNET"] = 1313161554] = "AURORA_MAINNET";
  ChainId3[ChainId3["AURORA_TESTNET"] = 1313161555] = "AURORA_TESTNET";
  ChainId3[ChainId3["TELOS_MAINNET"] = 40] = "TELOS_MAINNET";
  ChainId3[ChainId3["TELOS_TESTNET"] = 41] = "TELOS_TESTNET";
  ChainId3[ChainId3["SHARDEUM_TESTNET_2"] = 8081] = "SHARDEUM_TESTNET_2";
  ChainId3[ChainId3["KAVA_MAINNET"] = 2222] = "KAVA_MAINNET";
  ChainId3[ChainId3["SCROLL_SEPOLIA"] = 534351] = "SCROLL_SEPOLIA";
  ChainId3[ChainId3["SEPOLIA_TESTNET"] = 11155111] = "SEPOLIA_TESTNET";
  ChainId3[ChainId3["ZKSYNC_MAINNET"] = 324] = "ZKSYNC_MAINNET";
  ChainId3[ChainId3["ARBITRUM_MAINNET"] = 42161] = "ARBITRUM_MAINNET";
  ChainId3[ChainId3["ARBITRUM_NOVA"] = 42170] = "ARBITRUM_NOVA";
  ChainId3[ChainId3["OPTIMISM_MAINNET"] = 10] = "OPTIMISM_MAINNET";
  ChainId3[ChainId3["ZETACHAIN_ATHENS_2"] = 7001] = "ZETACHAIN_ATHENS_2";
  ChainId3[ChainId3["POLYGON_ZK"] = 1101] = "POLYGON_ZK";
  ChainId3[ChainId3["TRON_MAINNET"] = 728126428] = "TRON_MAINNET";
  ChainId3[ChainId3["TRON_TESTNET"] = 2494104990] = "TRON_TESTNET";
  ChainId3[ChainId3["LINEA_TESTNET"] = 59140] = "LINEA_TESTNET";
  ChainId3[ChainId3["LINEA_MAINNET"] = 59144] = "LINEA_MAINNET";
  ChainId3[ChainId3["MANTLE_MAINNET"] = 5e3] = "MANTLE_MAINNET";
  ChainId3[ChainId3["MANTLE_TESTNET"] = 5001] = "MANTLE_TESTNET";
  ChainId3[ChainId3["BASE_MAINNET"] = 8453] = "BASE_MAINNET";
  ChainId3[ChainId3["SCROLL_MAINNET"] = 534352] = "SCROLL_MAINNET";
  ChainId3[ChainId3["MANTA_MAINNET"] = 169] = "MANTA_MAINNET";
  ChainId3[ChainId3["METIS_MAINNET"] = 1088] = "METIS_MAINNET";
  ChainId3[ChainId3["OKX_X1_TESTNET"] = 195] = "OKX_X1_TESTNET";
  ChainId3[ChainId3["BAHAMUT_MAINNET"] = 5165] = "BAHAMUT_MAINNET";
  ChainId3[ChainId3["MODE_MAINNET"] = 34443] = "MODE_MAINNET";
  ChainId3[ChainId3["RSK_MAINNET"] = 30] = "RSK_MAINNET";
  ChainId3[ChainId3["BLAST_MAINNET"] = 81457] = "BLAST_MAINNET";
  ChainId3[ChainId3["MERLIN_MAINNET"] = 4200] = "MERLIN_MAINNET";
  ChainId3[ChainId3["ZKLINK_MAINNET"] = 810180] = "ZKLINK_MAINNET";
  ChainId3[ChainId3["CORE_MAINNET"] = 1116] = "CORE_MAINNET";
  ChainId3[ChainId3["TON_MAINNET"] = 85918] = "TON_MAINNET";
  ChainId3[ChainId3["TON_TESTNET"] = 85919] = "TON_TESTNET";
  ChainId3[ChainId3["TAIKO_MAINNET"] = 167e3] = "TAIKO_MAINNET";
  ChainId3[ChainId3["SEI_EVM_MAINNET"] = 1329] = "SEI_EVM_MAINNET";
  ChainId3[ChainId3["ZETACHAIN_MAINNET"] = 7e3] = "ZETACHAIN_MAINNET";
  ChainId3[ChainId3["CRONOS_MAINNET"] = 25] = "CRONOS_MAINNET";
  ChainId3[ChainId3["FRAXTAL_MAINNET"] = 252] = "FRAXTAL_MAINNET";
  ChainId3[ChainId3["GRAVITY_MAINNET"] = 1625] = "GRAVITY_MAINNET";
  ChainId3[ChainId3["BSQUARED_MAINNET"] = 223] = "BSQUARED_MAINNET";
  ChainId3[ChainId3["CRONOS_ZK_MAINNET"] = 388] = "CRONOS_ZK_MAINNET";
  ChainId3[ChainId3["MORPH_MAINNET"] = 2818] = "MORPH_MAINNET";
  ChainId3[ChainId3["SOLANA_MAINNET"] = 5426] = "SOLANA_MAINNET";
  ChainId3[ChainId3["GOAT_MAINNET"] = 2345] = "GOAT_MAINNET";
  ChainId3[ChainId3["SONIC_MAINNET"] = 146] = "SONIC_MAINNET";
  ChainId3[ChainId3["ABSTRACT_MAINNET"] = 2741] = "ABSTRACT_MAINNET";
  ChainId3[ChainId3["GNOSIS_MAINNET"] = 100] = "GNOSIS_MAINNET";
  ChainId3[ChainId3["BERACHAIN_MAINNET"] = 80094] = "BERACHAIN_MAINNET";
  ChainId3[ChainId3["UNICHAIN_MAINNET"] = 130] = "UNICHAIN_MAINNET";
  ChainId3[ChainId3["SONEIUM_MAINNET"] = 1868] = "SONEIUM_MAINNET";
  ChainId3[ChainId3["OPBNB_MAINNET"] = 204] = "OPBNB_MAINNET";
  ChainId3[ChainId3["HYPERLIQUID_MAINNET"] = 999] = "HYPERLIQUID_MAINNET";
  ChainId3[ChainId3["KATANA_MAINNET"] = 747474] = "KATANA_MAINNET";
  ChainId3[ChainId3["APECHAIN_MAINNET"] = 33139] = "APECHAIN_MAINNET";
  ChainId3[ChainId3["PLASMA_MAINNET"] = 9745] = "PLASMA_MAINNET";
  return ChainId3;
})(ChainId || {});
var TradeType = /* @__PURE__ */ ((TradeType4) => {
  TradeType4[TradeType4["EXACT_INPUT"] = 0] = "EXACT_INPUT";
  TradeType4[TradeType4["EXACT_OUTPUT"] = 1] = "EXACT_OUTPUT";
  return TradeType4;
})(TradeType || {});
var Rounding = /* @__PURE__ */ ((Rounding4) => {
  Rounding4[Rounding4["ROUND_DOWN"] = 0] = "ROUND_DOWN";
  Rounding4[Rounding4["ROUND_HALF_UP"] = 1] = "ROUND_HALF_UP";
  Rounding4[Rounding4["ROUND_UP"] = 2] = "ROUND_UP";
  return Rounding4;
})(Rounding || {});
var FACTORY_ADDRESS = {
  [1 /* ETH_MAINNET */]: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
  [4 /* ETH_RINKEBY */]: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
  [42 /* ETH_KOVAN */]: "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
  [56 /* BSC_MAINNET */]: "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",
  [97 /* BSC_TESTNET */]: "0x6725F303b657a9451d8BA641348b6761A6CC7a17",
  [137 /* MATIC_MAINNET */]: "0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32",
  [80001 /* MATIC_MUMBAI */]: "0x8a628F00710993c1cebbaa02338d2264ee7056C6",
  [43114 /* AVAX_MAINNET */]: "0xefa94DE7a4656D787667C749f7E1223D71E9FD88",
  [43113 /* AVAX_TESTNET */]: "0xb278D63e2E2a4aeb5A398eB87a91FF909B72C8D5",
  [128 /* HECO_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [256 /* HECO_TESTNET */]: "0xca33f6D096BDD7FcB28d708f631cD76E73Ecfc2d",
  [66 /* OKEX_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [65 /* OKEX_TESTNET */]: "0xD68B1DCDe3bAeB3FF1483Ad33c3efC6B6e0A8E4C",
  [288 /* BOBA_MAINNET */]: "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
  [43288 /* BOBA_AVALANCHE */]: "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
  [719095483 /* SYMBIOSIS_TESTNET */]: "0x0000000000000000000000000000000000000000",
  [13863860 /* SYMBIOSIS_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [28 /* BOBA_RINKEBY */]: "0xab740666e226cb5b6b451eb943b0257a7cb3ce0a",
  [2001 /* MILKOMEDA_MAINNET */]: "0x2ef06A90b0E7Ae3ae508e83Ea6628a3987945460",
  [200101 /* MILKOMEDA_DEVNET */]: "0x428779a1a596c9cfdb68f5daef78b14901b95566",
  [3652501241 /* BTC_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [2782866891 /* BTC_MUTINY */]: "0x0000000000000000000000000000000000000000",
  [675223068 /* BTC_TESTNET4 */]: "0x0000000000000000000000000000000000000000",
  [1313161554 /* AURORA_MAINNET */]: "0xc66F594268041dB60507F00703b152492fb176E7",
  [1313161555 /* AURORA_TESTNET */]: "0x60913758635b54e6C9685f92201A5704eEe74748",
  [40 /* TELOS_MAINNET */]: "0xb630f53df13645bff0ef55eb44a8a490a7dd4514",
  [41 /* TELOS_TESTNET */]: "0x6db1D2C691DcdF4DA36d3497F68a63C7282a4a44",
  [8081 /* SHARDEUM_TESTNET_2 */]: "0x1DAcbaB28Decd115c8AA6F183877C71b942aE406",
  [2222 /* KAVA_MAINNET */]: "0xA138FAFc30f6Ec6980aAd22656F2F11C38B56a95",
  [534351 /* SCROLL_SEPOLIA */]: "0x0000000000000000000000000000000000000000",
  [324 /* ZKSYNC_MAINNET */]: "0x40be1cba6c5b47cdf9da7f963b6f761f4c60627d",
  [42161 /* ARBITRUM_MAINNET */]: "0xd394e9cc20f43d2651293756f8d320668e850f1b",
  // arbSwap
  [42170 /* ARBITRUM_NOVA */]: "0xf6239423fcf1c19ed2791d9648a90836074242fd",
  // arbSwap
  [10 /* OPTIMISM_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [7001 /* ZETACHAIN_ATHENS_2 */]: "0x9fd96203f7b22bCF72d9DCb40ff98302376cE09c",
  [1101 /* POLYGON_ZK */]: "0x0000000000000000000000000000000000000000",
  [728126428 /* TRON_MAINNET */]: "0x689ABAEEED3F0BB3585773192E23224CAC25DD41",
  // sunswap.io - TKWJdrQkqHisa1X8HUdHEfREvTzw4pMAaY
  [2494104990 /* TRON_TESTNET */]: "0x1df14d5e036019f298d2a358bb234cf301e5e8e3",
  // sunswap.io - TChXfbQLafcoExbcXTtwNZMBKdeW2p1V5G
  [59140 /* LINEA_TESTNET */]: "0x0000000000000000000000000000000000000000",
  [59144 /* LINEA_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [5e3 /* MANTLE_MAINNET */]: "0xE5020961fA51ffd3662CDf307dEf18F9a87Cce7c",
  // fusionX
  [5001 /* MANTLE_TESTNET */]: "0x272465431A6b86E3B9E5b9bD33f5D103a3F59eDb",
  // fusionX
  [8453 /* BASE_MAINNET */]: "0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB",
  // baseSwap
  [534352 /* SCROLL_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [169 /* MANTA_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [1088 /* METIS_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [195 /* OKX_X1_TESTNET */]: "0x0000000000000000000000000000000000000000",
  [5165 /* BAHAMUT_MAINNET */]: "0xd0C5d23290d63E06a0c4B87F14bD2F7aA551a895",
  // silkswap
  [34443 /* MODE_MAINNET */]: "0xc02155946dd8c89d3d3238a6c8a64d04e2cd4500",
  // kim exchange
  [30 /* RSK_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [81457 /* BLAST_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [4200 /* MERLIN_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [810180 /* ZKLINK_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [11155111 /* SEPOLIA_TESTNET */]: "0x7E0987E5b3a30e3f2828572Bb659A548460a3003",
  [1116 /* CORE_MAINNET */]: "0x3E723C7B6188E8Ef638DB9685Af45c7CB66f77B9",
  [85918 /* TON_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [85919 /* TON_TESTNET */]: "0x0000000000000000000000000000000000000000",
  [167e3 /* TAIKO_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [1329 /* SEI_EVM_MAINNET */]: "0x71f6b49ae1558357bBb5A6074f1143c46cBcA03d",
  [7e3 /* ZETACHAIN_MAINNET */]: "0x9fd96203f7b22bCF72d9DCb40ff98302376cE09c",
  [25 /* CRONOS_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [252 /* FRAXTAL_MAINNET */]: "0xE30521fe7f3bEB6Ad556887b50739d6C7CA667E6",
  [1625 /* GRAVITY_MAINNET */]: "0x7d8c6B58BA2d40FC6E34C25f9A488067Fe0D2dB4",
  [223 /* BSQUARED_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [388 /* CRONOS_ZK_MAINNET */]: "0x50704Ac00064be03CEEd817f41E0Aa61F52ef4DC",
  // H2 Finance
  [2818 /* MORPH_MAINNET */]: "0x8D2A8b8F7d200d75Bf5F9E84e01F9272f90EFB8b",
  // bulba swap
  [5426 /* SOLANA_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [2345 /* GOAT_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [146 /* SONIC_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [2741 /* ABSTRACT_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [100 /* GNOSIS_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [80094 /* BERACHAIN_MAINNET */]: "0x5e705e184d233ff2a7cb1553793464a9d0c3028f",
  [130 /* UNICHAIN_MAINNET */]: "0x1f98400000000000000000000000000000000002",
  [1868 /* SONEIUM_MAINNET */]: "0xC3d4fA777308412CbA0520c4034Ad3567de852dF",
  [204 /* OPBNB_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [999 /* HYPERLIQUID_MAINNET */]: "0x724412C00059bf7d6ee7d4a1d0D5cd4de3ea1C48",
  [747474 /* KATANA_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [33139 /* APECHAIN_MAINNET */]: "0x0000000000000000000000000000000000000000",
  [9745 /* PLASMA_MAINNET */]: "0x0000000000000000000000000000000000000000"
};
var INIT_CODE_HASH = {
  [1 /* ETH_MAINNET */]: "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",
  [4 /* ETH_RINKEBY */]: "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",
  [42 /* ETH_KOVAN */]: "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",
  [56 /* BSC_MAINNET */]: "0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5",
  [97 /* BSC_TESTNET */]: "0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66",
  [137 /* MATIC_MAINNET */]: "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",
  [80001 /* MATIC_MUMBAI */]: "0x85f8ad645fe62917d6939782650649d3d7c4b5f25d81415a9fac4a9f341793ca",
  [43114 /* AVAX_MAINNET */]: "0x40231f6b438bce0797c9ada29b718a87ea0a5cea3fe9a771abdd76bd41a3e545",
  [43113 /* AVAX_TESTNET */]: "0x85f8ad645fe62917d6939782650649d3d7c4b5f25d81415a9fac4a9f341793ca",
  [128 /* HECO_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [256 /* HECO_TESTNET */]: "0x85f8ad645fe62917d6939782650649d3d7c4b5f25d81415a9fac4a9f341793ca",
  [66 /* OKEX_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [65 /* OKEX_TESTNET */]: "0x7f08f1b43a5b37be17b2d24d4f2c6b1311e19eedc53cc4528f0e72cdfb5d8d37",
  [288 /* BOBA_MAINNET */]: "0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303",
  [43288 /* BOBA_AVALANCHE */]: "0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303",
  [719095483 /* SYMBIOSIS_TESTNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [13863860 /* SYMBIOSIS_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [28 /* BOBA_RINKEBY */]: "0x1db9efb13a1398e31bb71895c392fa1217130f78dc65080174491adcec5da9b9",
  [2001 /* MILKOMEDA_MAINNET */]: "0x0103d86123641edae209ed992b2bf060ae2baab6a28f5b1eb7dad61335915104",
  [200101 /* MILKOMEDA_DEVNET */]: "0x0103d86123641edae209ed992b2bf060ae2baab6a28f5b1eb7dad61335915104",
  [3652501241 /* BTC_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [2782866891 /* BTC_MUTINY */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [675223068 /* BTC_TESTNET4 */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [1313161554 /* AURORA_MAINNET */]: "0x754e1d90e536e4c1df81b7f030f47b4ca80c87120e145c294f098c83a6cb5ace",
  [1313161555 /* AURORA_TESTNET */]: "0x4a697f690d1f46e0f1a897a8662acae31ced3039b00c052392ed0bc179f9f28c",
  [40 /* TELOS_MAINNET */]: "0x73d5f9d3e0db97ca102c315a9a45dfebef394eae36edcce8853bcb1ee049a6dd",
  [41 /* TELOS_TESTNET */]: "0x4386561b28c0ca71b777ab3684458dd9f6c1b3b7fc609c5758f0f00a48625996",
  [8081 /* SHARDEUM_TESTNET_2 */]: "0x3bde95ed3dcb15c415ca128950d4807b9e3698b981ff73007c9d3c220a5b2f6f",
  [2222 /* KAVA_MAINNET */]: "0x851a56ac1b3682251d8341ad09c09bf45fca37af4451453063637d745a94fe1f",
  [534351 /* SCROLL_SEPOLIA */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [324 /* ZKSYNC_MAINNET */]: "0x95d5c05820d58f1c8cc736b47fe10a29ddcd2cf73a0d842e8537b9fe510fc618",
  [42161 /* ARBITRUM_MAINNET */]: "0x8336ef61546f16041265cbd61fb71f00434b515a1f3dba059227802ec4a4be4f",
  // arbSwap
  [42170 /* ARBITRUM_NOVA */]: "0x70b19cf85a176c6b86e2d324be179104bdc8fafee13d548ae07d28b9f53cbc71",
  // arbSwap
  [10 /* OPTIMISM_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [7001 /* ZETACHAIN_ATHENS_2 */]: "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",
  [1101 /* POLYGON_ZK */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [59140 /* LINEA_TESTNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [59144 /* LINEA_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [5e3 /* MANTLE_MAINNET */]: "0x58c684aeb03fe49c8a3080db88e425fae262c5ef5bf0e8acffc0526c6e3c03a0",
  // fusionX
  [5001 /* MANTLE_TESTNET */]: "0x58c684aeb03fe49c8a3080db88e425fae262c5ef5bf0e8acffc0526c6e3c03a0",
  // fusionX
  [8453 /* BASE_MAINNET */]: "0xb618a2730fae167f5f8ac7bd659dd8436d571872655bcb6fd11f2158c8a64a3b",
  // baseSwap
  [728126428 /* TRON_MAINNET */]: "0x6d3f89421f83e4b62e628de8fc7ff2b014a79bf8fd8e8b0ea46e4a1d9409b67d",
  // sunswap.io
  [2494104990 /* TRON_TESTNET */]: "0x0e26acb4c8f8d3df2264904ab1e00efdc142a9f341741ca7e0a7ae5f9b0c0fa9",
  // sunswap.io
  [534352 /* SCROLL_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [169 /* MANTA_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [1088 /* METIS_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [195 /* OKX_X1_TESTNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [5165 /* BAHAMUT_MAINNET */]: "0x79cd523bc695c4f4a15256b1eddb22624ae455e51c452c3dac1737955440bfbe",
  // silkswap
  [34443 /* MODE_MAINNET */]: "0x7b58b1fadf495e5bef34e311418b22e4f729c080a333619b4318c23bc7fb4c0a",
  // kim exchange
  [30 /* RSK_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [81457 /* BLAST_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [4200 /* MERLIN_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [810180 /* ZKLINK_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [11155111 /* SEPOLIA_TESTNET */]: "0x4156ccc01dad273e6c65c4335c428a2ff4a4b0c95a9a228f6bfed45a069d3fe7",
  [1116 /* CORE_MAINNET */]: "0xee028118a054757b5daded92bc998b195fc653d33f3214aaabeec98d7599f6b8",
  [85918 /* TON_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [85919 /* TON_TESTNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [167e3 /* TAIKO_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [1329 /* SEI_EVM_MAINNET */]: "0x7240a7a71cc85d56ee2e5ca1c5236ce877abc9b49b4696adc94968ef43796fed",
  [7e3 /* ZETACHAIN_MAINNET */]: "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",
  [25 /* CRONOS_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [252 /* FRAXTAL_MAINNET */]: "0x676b4c9b92980c4e7823b43031b17d7299896d1cd7d147104ad8e21692123fa1",
  [1625 /* GRAVITY_MAINNET */]: "0xba70494e4abe6721f3f96552635a28b70921f79b39c6b06ab9cb14618a78df9f",
  [223 /* BSQUARED_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [388 /* CRONOS_ZK_MAINNET */]: "0x010003b769eff14077b08cfa578449069839b9ccb7e566601190f93592d4a6bc",
  // H2 Finance
  [2818 /* MORPH_MAINNET */]: "0xe0d4c9aa46e27dc0f29e1fbc328dadb3455bbfc8dd936b2ea1abd5d028cc2813",
  // bulba swap
  [5426 /* SOLANA_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [2345 /* GOAT_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [146 /* SONIC_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [2741 /* ABSTRACT_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [100 /* GNOSIS_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [80094 /* BERACHAIN_MAINNET */]: "0x190cc7bdd70507a793b76d7bc2bf03e1866989ca7881812e0e1947b23e099534",
  [130 /* UNICHAIN_MAINNET */]: "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",
  [1868 /* SONEIUM_MAINNET */]: "0x986d5bc7d1ebad7b6aa48b90d79ba2498e5e223dad50971c48f147ab6395bdd2",
  [204 /* OPBNB_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [999 /* HYPERLIQUID_MAINNET */]: "0xc83d9df19c8c8a0a1229bd3122cbb86fd8ff56f79cc6781c15999d39425466e9",
  [747474 /* KATANA_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [33139 /* APECHAIN_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000",
  [9745 /* PLASMA_MAINNET */]: "0x0000000000000000000000000000000000000000000000000000000000000000"
};
var MINIMUM_LIQUIDITY = import_jsbi.default.BigInt(1e3);
var ZERO = import_jsbi.default.BigInt(0);
var ONE = import_jsbi.default.BigInt(1);
var TWO = import_jsbi.default.BigInt(2);
var THREE = import_jsbi.default.BigInt(3);
var FIVE = import_jsbi.default.BigInt(5);
var TEN = import_jsbi.default.BigInt(10);
var _100 = import_jsbi.default.BigInt(100);
var _998 = import_jsbi.default.BigInt(998);
var _1000 = import_jsbi.default.BigInt(1e3);
var SOLIDITY_TYPE_MAXIMA = {
  ["uint8" /* uint8 */]: import_jsbi.default.BigInt("0xff"),
  ["uint256" /* uint256 */]: import_jsbi.default.BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")
};
var NATIVE_TOKEN_ADDRESS = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE";

// src/errors.ts
var CAN_SET_PROTOTYPE = "setPrototypeOf" in Object;
var InsufficientReservesError = class extends Error {
  constructor() {
    super();
    this.isInsufficientReservesError = true;
    this.name = this.constructor.name;
    if (CAN_SET_PROTOTYPE)
      Object.setPrototypeOf(this, new.target.prototype);
  }
};
var InsufficientInputAmountError = class extends Error {
  constructor() {
    super();
    this.isInsufficientInputAmountError = true;
    this.name = this.constructor.name;
    if (CAN_SET_PROTOTYPE)
      Object.setPrototypeOf(this, new.target.prototype);
  }
};

// src/entities/chain.ts
var Chain = class {
  constructor(params) {
    this.id = params.id;
    this.name = params.name;
    this.disabled = params.disabled;
    this.explorer = params.explorer;
    this.icons = params.icons;
    this.swappable = params?.swappable !== false;
    this.evm = params?.evm !== false;
  }
};
var chains = [
  new Chain({
    id: 85918 /* TON_MAINNET */,
    name: "TON",
    disabled: false,
    explorer: "https://tonviewer.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
    },
    evm: false
  }),
  new Chain({
    id: 85919 /* TON_TESTNET */,
    name: "TON",
    disabled: false,
    explorer: "https://testnet.tonviewer.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
    },
    evm: false
  }),
  new Chain({
    id: 3652501241 /* BTC_MAINNET */,
    name: "Bitcoin",
    disabled: false,
    explorer: "https://mempool.space",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
    },
    evm: false
  }),
  new Chain({
    id: 2782866891 /* BTC_MUTINY */,
    name: "Bitcoin Mutiny",
    disabled: false,
    explorer: "https://mutinynet.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
    },
    evm: false
  }),
  new Chain({
    id: 675223068 /* BTC_TESTNET4 */,
    name: "Bitcoin Testnet4",
    disabled: false,
    explorer: "https://mempool.space/testnet4",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
    },
    evm: false
  }),
  new Chain({
    id: 1 /* ETH_MAINNET */,
    name: "Ethereum",
    disabled: false,
    explorer: "https://etherscan.io",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png"
    }
  }),
  new Chain({
    id: 4 /* ETH_RINKEBY */,
    name: "Rinkeby",
    disabled: false,
    explorer: "https://rinkeby.etherscan.io",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png"
    }
  }),
  new Chain({
    id: 42 /* ETH_KOVAN */,
    name: "Kovan",
    disabled: false,
    explorer: "https://kovan.etherscan.io",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png"
    }
  }),
  new Chain({
    id: 56 /* BSC_MAINNET */,
    name: "BNB",
    disabled: false,
    explorer: "https://bscscan.com",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png"
    }
  }),
  new Chain({
    id: 97 /* BSC_TESTNET */,
    name: "BNB",
    disabled: false,
    explorer: "https://testnet.bscscan.com",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/smartchain/info/logo.png"
    }
  }),
  new Chain({
    id: 137 /* MATIC_MAINNET */,
    name: "Polygon",
    disabled: false,
    explorer: "https://polygonscan.com",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png"
    }
  }),
  new Chain({
    id: 80001 /* MATIC_MUMBAI */,
    name: "Mumbai",
    // Polygon Testnet
    disabled: false,
    explorer: "https://mumbai.polygonscan.com",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png"
    }
  }),
  new Chain({
    id: 43114 /* AVAX_MAINNET */,
    name: "Avalanche",
    disabled: false,
    explorer: "https://snowtrace.io",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png"
    }
  }),
  new Chain({
    id: 43113 /* AVAX_TESTNET */,
    name: "Fuji",
    disabled: false,
    explorer: "https://testnet.snowtrace.io",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/avalanchex/info/logo.png"
    }
  }),
  new Chain({
    id: 128 /* HECO_MAINNET */,
    name: "HECO",
    disabled: false,
    explorer: "https://hecoinfo.com",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png"
    }
  }),
  new Chain({
    id: 256 /* HECO_TESTNET */,
    name: "HECO",
    disabled: false,
    explorer: "https://testnet.hecoinfo.com",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/heco/info/logo.png"
    }
  }),
  new Chain({
    id: 66 /* OKEX_MAINNET */,
    name: "OEC",
    disabled: false,
    explorer: "https://www.oklink.com/oec",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png",
      large: "https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png"
    }
  }),
  new Chain({
    id: 65 /* OKEX_TESTNET */,
    name: "OEC",
    disabled: false,
    explorer: "https://www.oklink.com/oec-test",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png",
      large: "https://s2.coinmarketcap.com/static/img/exchanges/64x64/294.png"
    }
  }),
  new Chain({
    id: 288 /* BOBA_MAINNET */,
    name: "Boba Ethereum",
    disabled: false,
    explorer: "https://eth.bobascan.com",
    icons: {
      small: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-ethereum/logo.png",
      large: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-ethereum/logo.png"
    }
  }),
  new Chain({
    id: 28 /* BOBA_RINKEBY */,
    name: "Boba Rinkeby",
    disabled: false,
    explorer: "https://blockexplorer.rinkeby.boba.network",
    icons: {
      small: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-ethereum/logo.png",
      large: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-ethereum/logo.png"
    }
  }),
  new Chain({
    id: 43288 /* BOBA_AVALANCHE */,
    name: "Boba Avalanche",
    disabled: false,
    explorer: "https://blockexplorer.avax.boba.network",
    icons: {
      small: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-avalanche/logo.png",
      large: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/boba-avalanche/logo.png"
    }
  }),
  new Chain({
    id: 719095483 /* SYMBIOSIS_TESTNET */,
    name: "Symbiosis Testnet",
    disabled: false,
    explorer: "https://symbiosis-nitro-testnet.explorer.caldera.xyz",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png"
    }
  }),
  new Chain({
    id: 13863860 /* SYMBIOSIS_MAINNET */,
    name: "Symbiosis",
    disabled: false,
    explorer: "https://symbiosis.calderaexplorer.xyz",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png"
    }
  }),
  new Chain({
    id: 2001 /* MILKOMEDA_MAINNET */,
    name: "Milkomeda",
    disabled: false,
    explorer: "https://explorer-mainnet-cardano-evm.c1.milkomeda.com",
    icons: {
      small: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png",
      large: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png"
    }
  }),
  new Chain({
    id: 200101 /* MILKOMEDA_DEVNET */,
    name: "Milkomeda",
    disabled: false,
    explorer: "https://explorer-devnet-cardano-evm.c1.milkomeda.com",
    icons: {
      small: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png",
      large: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/milkomeda/logo.png"
    }
  }),
  new Chain({
    id: 1313161554 /* AURORA_MAINNET */,
    name: "Aurora",
    disabled: false,
    explorer: "https://aurorascan.dev",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png"
    }
  }),
  new Chain({
    id: 1313161555 /* AURORA_TESTNET */,
    name: "Aurora",
    disabled: false,
    explorer: "https://testnet.aurorascan.dev",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/14803.png"
    }
  }),
  new Chain({
    id: 40 /* TELOS_MAINNET */,
    name: "Telos",
    disabled: false,
    explorer: "https://teloscan.io",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png"
    }
  }),
  new Chain({
    id: 41 /* TELOS_TESTNET */,
    name: "Telos",
    disabled: false,
    explorer: "https://testnet.teloscan.io",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4660.png"
    }
  }),
  new Chain({
    id: 8081 /* SHARDEUM_TESTNET_2 */,
    name: "Shardeum Liberty 2.X",
    disabled: false,
    explorer: "https://explorer-liberty20.shardeum.org",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/22353.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/22353.png"
    }
  }),
  new Chain({
    id: 2222 /* KAVA_MAINNET */,
    name: "KAVA EVM",
    disabled: false,
    explorer: "https://explorer.kava.io",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/4846.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4846.png"
    }
  }),
  new Chain({
    id: 534351 /* SCROLL_SEPOLIA */,
    name: "Scroll Sepolia",
    disabled: false,
    explorer: "https://scroll-sepolia.l2scan.co",
    icons: {
      small: "https://res.cloudinary.com/dzkjyvmsn/image/upload/v1680688496/scroll_p8h6bl.png",
      large: "https://res.cloudinary.com/dzkjyvmsn/image/upload/v1680688496/scroll_p8h6bl.png"
    }
  }),
  new Chain({
    id: 324 /* ZKSYNC_MAINNET */,
    name: "ZkSync Era",
    disabled: false,
    explorer: "https://era.zksync.network",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/24091.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/24091.png"
    }
  }),
  new Chain({
    id: 42161 /* ARBITRUM_MAINNET */,
    name: "Arbitrum One",
    disabled: false,
    explorer: "https://arbiscan.io",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11841.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11841.png"
    }
  }),
  new Chain({
    id: 42170 /* ARBITRUM_NOVA */,
    name: "Arbitrum Nova",
    disabled: false,
    explorer: "https://nova.arbiscan.io",
    icons: {
      small: "https://l2beat.com/icons/nova.png",
      large: "https://l2beat.com/icons/nova.png"
    }
  }),
  new Chain({
    id: 10 /* OPTIMISM_MAINNET */,
    name: "Optimism",
    disabled: false,
    explorer: "https://optimistic.etherscan.io",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11840.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11840.png"
    }
  }),
  new Chain({
    id: 7001 /* ZETACHAIN_ATHENS_2 */,
    name: "ZetaChain",
    disabled: false,
    explorer: "https://explorer.zetachain.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png"
    }
  }),
  new Chain({
    id: 1101 /* POLYGON_ZK */,
    name: "Polygon zkEVM",
    disabled: false,
    explorer: "https://zkevm.polygonscan.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3890.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3890.png"
    }
  }),
  new Chain({
    id: 728126428 /* TRON_MAINNET */,
    name: "Tron",
    disabled: false,
    explorer: "https://tronscan.org",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png"
    },
    evm: false
  }),
  new Chain({
    id: 2494104990 /* TRON_TESTNET */,
    name: "Tron Testnet",
    disabled: false,
    explorer: "https://shasta.tronscan.org",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png"
    },
    evm: false
  }),
  new Chain({
    id: 59140 /* LINEA_TESTNET */,
    name: "Linea",
    disabled: false,
    explorer: "https://goerli.lineascan.build",
    icons: {
      small: "https://l2beat.com/icons/linea.png",
      large: "https://l2beat.com/icons/linea.png"
    }
  }),
  new Chain({
    id: 59144 /* LINEA_MAINNET */,
    name: "Linea",
    disabled: false,
    explorer: "https://lineascan.build",
    icons: {
      small: "https://l2beat.com/icons/linea.png",
      large: "https://l2beat.com/icons/linea.png"
    }
  }),
  new Chain({
    id: 5e3 /* MANTLE_MAINNET */,
    name: "Mantle",
    disabled: false,
    explorer: "https://explorer.mantle.xyz",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png"
    }
  }),
  new Chain({
    id: 5001 /* MANTLE_TESTNET */,
    name: "Mantle",
    disabled: false,
    explorer: "https://explorer.testnet.mantle.xyz",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png"
    }
  }),
  new Chain({
    id: 8453 /* BASE_MAINNET */,
    name: "Base",
    disabled: false,
    explorer: "https://basescan.org",
    icons: {
      small: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/base/logo.png",
      large: "https://raw.githubusercontent.com/allush/assets/main/images/blockchains/base/logo.png"
    }
  }),
  new Chain({
    id: 534352 /* SCROLL_MAINNET */,
    name: "Scroll",
    disabled: false,
    explorer: "https://scrollscan.com",
    icons: {
      small: "https://res.cloudinary.com/dzkjyvmsn/image/upload/v1680688496/scroll_p8h6bl.png",
      large: "https://res.cloudinary.com/dzkjyvmsn/image/upload/v1680688496/scroll_p8h6bl.png"
    }
  }),
  new Chain({
    id: 169 /* MANTA_MAINNET */,
    name: "Manta",
    disabled: false,
    explorer: "https://pacific-explorer.manta.network",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/13631.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/128x128/13631.png"
    }
  }),
  new Chain({
    id: 1088 /* METIS_MAINNET */,
    name: "Metis",
    disabled: false,
    explorer: "https://explorer.metis.io",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/9640.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/128x128/9640.png"
    }
  }),
  new Chain({
    id: 195 /* OKX_X1_TESTNET */,
    name: "OKX X1 Testnet",
    disabled: false,
    explorer: "https://www.oklink.com/x1-test",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png"
    }
  }),
  new Chain({
    id: 5165 /* BAHAMUT_MAINNET */,
    name: "Bahamut",
    disabled: false,
    explorer: "https://www.ftnscan.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/22615.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/22615.png"
    }
  }),
  new Chain({
    id: 34443 /* MODE_MAINNET */,
    name: "Mode",
    disabled: false,
    explorer: "https://explorer.mode.network",
    icons: {
      small: "https://assets-global.website-files.com/64c906a6ed3c4d809558853b/64d0b081f0331ac3c64c5e4d_flav.png",
      large: "https://assets-global.website-files.com/64c906a6ed3c4d809558853b/64d0b081f0331ac3c64c5e4d_flav.png"
    }
  }),
  new Chain({
    id: 30 /* RSK_MAINNET */,
    name: "Rootstock",
    disabled: false,
    explorer: "https://rootstock.blockscout.com",
    icons: {
      small: "https://rootstock.blockscout.com/assets/favicon/favicon.ico",
      large: "https://rootstock.blockscout.com/assets/favicon/favicon.ico"
    }
  }),
  new Chain({
    id: 81457 /* BLAST_MAINNET */,
    name: "Blast",
    disabled: false,
    explorer: "https://blastscan.io",
    icons: {
      small: "https://assets.coingecko.com/coins/images/35494/standard/blast2.jpeg?1708919600",
      large: "https://assets.coingecko.com/coins/images/35494/standard/blast2.jpeg?1708919600"
    }
  }),
  new Chain({
    id: 4200 /* MERLIN_MAINNET */,
    name: "Merlin",
    disabled: false,
    explorer: "https://scan.merlinchain.io",
    icons: {
      small: "https://assets.coingecko.com/asset_platforms/images/188/small/merlin-chain.jpeg?1708522313",
      large: "https://assets.coingecko.com/asset_platforms/images/188/small/merlin-chain.jpeg?1708522313"
    }
  }),
  new Chain({
    id: 810180 /* ZKLINK_MAINNET */,
    name: "ZkLink",
    disabled: false,
    explorer: "https://explorer.zklink.io",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/13039.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/13039.png"
    }
  }),
  new Chain({
    id: 11155111 /* SEPOLIA_TESTNET */,
    name: "Sepolia",
    disabled: false,
    explorer: "https://sepolia.etherscan.io",
    icons: {
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png",
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/info/logo.png"
    }
  }),
  new Chain({
    id: 1116 /* CORE_MAINNET */,
    name: "CORE",
    disabled: false,
    explorer: "https://scan.coredao.org",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/23254.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/23254.png"
    }
  }),
  new Chain({
    id: 167e3 /* TAIKO_MAINNET */,
    name: "Taiko",
    disabled: false,
    explorer: "https://taikoscan.io",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/31525.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/31525.png"
    }
  }),
  new Chain({
    id: 1329 /* SEI_EVM_MAINNET */,
    name: "Sei v2",
    disabled: false,
    explorer: "https://seitrace.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/23149.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/23149.png"
    }
  }),
  new Chain({
    id: 7e3 /* ZETACHAIN_MAINNET */,
    name: "ZetaChain",
    disabled: false,
    explorer: "https://zetachain.blockscout.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png"
    }
  }),
  new Chain({
    id: 25 /* CRONOS_MAINNET */,
    name: "Cronos",
    disabled: false,
    explorer: "https://cronoscan.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3635.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3635.png"
    }
  }),
  new Chain({
    id: 252 /* FRAXTAL_MAINNET */,
    name: "Fraxtal",
    disabled: false,
    explorer: "https://fraxscan.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png"
    }
  }),
  new Chain({
    id: 1625 /* GRAVITY_MAINNET */,
    name: "Gravity",
    disabled: false,
    explorer: "https://explorer.gravity.xyz",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png"
    }
  }),
  new Chain({
    id: 223 /* BSQUARED_MAINNET */,
    name: "B\xB2 Network",
    disabled: false,
    explorer: "https://explorer.bsquared.network",
    icons: {
      small: "https://coin-images.coingecko.com/asset_platforms/images/239/small/bsquared-network.jpeg?1713432732",
      large: "https://coin-images.coingecko.com/asset_platforms/images/239/small/bsquared-network.jpeg?1713432732"
    }
  }),
  new Chain({
    id: 388 /* CRONOS_ZK_MAINNET */,
    name: "Cronos zkEVM",
    disabled: false,
    explorer: "https://explorer.zkevm.cronos.org",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33873.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33873.png"
    }
  }),
  new Chain({
    id: 2818 /* MORPH_MAINNET */,
    name: "Morph",
    disabled: false,
    explorer: "https://explorer.morphl2.io",
    icons: {
      small: "https://coin-images.coingecko.com/asset_platforms/images/22185/small/morph.jpg?1729659940",
      large: "https://coin-images.coingecko.com/asset_platforms/images/22185/small/morph.jpg?1729659940"
    }
  }),
  new Chain({
    id: 5426 /* SOLANA_MAINNET */,
    name: "Solana",
    disabled: false,
    explorer: "https://explorer.solana.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/5426.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/5426.png"
    }
  }),
  new Chain({
    id: 2345 /* GOAT_MAINNET */,
    name: "Goat",
    disabled: false,
    explorer: "https://explorer.goat.network",
    icons: {
      small: "https://cdn.prod.website-files.com/6669a2e2b7f624149423b9be/6669b090137434ab4c6d11a2_favicoin%20goat.png",
      large: "https://cdn.prod.website-files.com/6669a2e2b7f624149423b9be/6669b090137434ab4c6d11a2_favicoin%20goat.png"
    }
  }),
  new Chain({
    id: 146 /* SONIC_MAINNET */,
    name: "Sonic",
    disabled: false,
    explorer: "https://sonicscan.org",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32684.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32684.png"
    }
  }),
  new Chain({
    id: 2741 /* ABSTRACT_MAINNET */,
    name: "Abstract",
    disabled: false,
    explorer: "https://abscan.org",
    icons: {
      small: "https://s3.coinmarketcap.com/dexer/token/d51628b923d63af38ff8900885c6399b.jpg",
      large: "https://s3.coinmarketcap.com/dexer/token/d51628b923d63af38ff8900885c6399b.jpg"
    }
  }),
  new Chain({
    id: 100 /* GNOSIS_MAINNET */,
    name: "Gnosis",
    disabled: false,
    explorer: "https://gnosisscan.io",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1659.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1659.png"
    }
  }),
  new Chain({
    id: 80094 /* BERACHAIN_MAINNET */,
    name: "Berachain",
    disabled: false,
    explorer: "https://berascan.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/24647.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/24647.png"
    }
  }),
  new Chain({
    id: 130 /* UNICHAIN_MAINNET */,
    name: "Unichain",
    disabled: false,
    explorer: "https://uniscan.xyz",
    icons: {
      small: "https://coin-images.coingecko.com/asset_platforms/images/22206/thumb/unichain.png?1739323630",
      large: "https://coin-images.coingecko.com/asset_platforms/images/22206/thumb/unichain.png?1739323630"
    }
  }),
  new Chain({
    id: 1868 /* SONEIUM_MAINNET */,
    name: "Soneium",
    disabled: false,
    explorer: "https://soneium.blockscout.com/",
    icons: {
      small: "https://coin-images.coingecko.com/asset_platforms/images/22200/thumb/soneium-removebg-preview.png?1737099934",
      large: "https://coin-images.coingecko.com/asset_platforms/images/22200/thumb/soneium-removebg-preview.png?1737099934"
    }
  }),
  new Chain({
    id: 204 /* OPBNB_MAINNET */,
    name: "opBNB",
    disabled: false,
    explorer: "https://opbnb.bscscan.com",
    icons: {
      small: "https://icons.llamao.fi/icons/chains/rsz_opbnb?w=48&h=48",
      large: "https://icons.llamao.fi/icons/chains/rsz_opbnb?w=48&h=48"
    }
  }),
  new Chain({
    id: 999 /* HYPERLIQUID_MAINNET */,
    name: "HyperEVM",
    disabled: false,
    explorer: "https://www.hyperscan.com",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32196.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32196.png"
    }
  }),
  new Chain({
    id: 747474 /* KATANA_MAINNET */,
    name: "Katana",
    disabled: false,
    explorer: "https://explorer.katanarpc.com",
    icons: {
      small: "https://katana.network/meta/favicon.ico",
      large: "https://katana.network/meta/favicon.ico"
    }
  }),
  new Chain({
    id: 33139 /* APECHAIN_MAINNET */,
    name: "ApeChain",
    disabled: false,
    explorer: "https://apescan.io",
    icons: {
      small: "https://coin-images.coingecko.com/asset_platforms/images/22184/small/apechain.jpg?1729564324",
      large: "https://coin-images.coingecko.com/asset_platforms/images/22184/small/apechain.jpg?1729564324"
    }
  }),
  new Chain({
    id: 9745 /* PLASMA_MAINNET */,
    name: "Plasma",
    disabled: false,
    explorer: "https://plasmascan.to",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/36645.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/36645.png"
    }
  })
];
var getChainById = (chainId) => {
  if (!chainId)
    return void 0;
  return chains.find((chain) => chain.id === chainId);
};

// src/entities/fractions/fraction.ts
var import_tiny_invariant2 = __toESM(require("tiny-invariant"));
var import_jsbi3 = __toESM(require("jsbi"));
var import_decimal = __toESM(require("decimal.js-light"));
var import_big = __toESM(require("big.js"));
var import_toformat = __toESM(require("toformat"));

// src/utils.ts
var import_tiny_invariant = __toESM(require("tiny-invariant"));
var import_jsbi2 = __toESM(require("jsbi"));
var import_address = require("@ethersproject/address");
function validateSolidityTypeInstance(value, solidityType) {
  (0, import_tiny_invariant.default)(import_jsbi2.default.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`);
  (0, import_tiny_invariant.default)(import_jsbi2.default.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`);
}
function validateAndParseAddress(address2) {
  if (address2 === "") {
    return address2;
  }
  try {
    return (0, import_address.getAddress)(address2);
  } catch (error) {
    (0, import_tiny_invariant.default)(false, `${address2} is not a valid address.`);
  }
}
function parseBigintIsh(bigintIsh) {
  return bigintIsh instanceof import_jsbi2.default ? bigintIsh : typeof bigintIsh === "bigint" ? import_jsbi2.default.BigInt(bigintIsh.toString()) : import_jsbi2.default.BigInt(bigintIsh);
}
function sqrt(y) {
  validateSolidityTypeInstance(y, "uint256" /* uint256 */);
  let z = ZERO;
  let x;
  if (import_jsbi2.default.greaterThan(y, THREE)) {
    z = y;
    x = import_jsbi2.default.add(import_jsbi2.default.divide(y, TWO), ONE);
    while (import_jsbi2.default.lessThan(x, z)) {
      z = x;
      x = import_jsbi2.default.divide(import_jsbi2.default.add(import_jsbi2.default.divide(y, x), x), TWO);
    }
  } else if (import_jsbi2.default.notEqual(y, ZERO)) {
    z = ONE;
  }
  return z;
}
function sortedInsert(items, add, maxSize, comparator) {
  (0, import_tiny_invariant.default)(maxSize > 0, "MAX_SIZE_ZERO");
  (0, import_tiny_invariant.default)(items.length <= maxSize, "ITEMS_SIZE");
  if (items.length === 0) {
    items.push(add);
    return null;
  } else {
    const isFull = items.length === maxSize;
    if (isFull && comparator(items[items.length - 1], add) <= 0) {
      return add;
    }
    let lo = 0, hi = items.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (comparator(items[mid], add) <= 0) {
        lo = mid + 1;
      } else {
        hi = mid;
      }
    }
    items.splice(lo, 0, add);
    return isFull ? items.pop() : null;
  }
}
var createFakeAmount = (tokenAmount, token) => {
  const decimalsA = import_jsbi2.default.exponentiate(import_jsbi2.default.BigInt(10), import_jsbi2.default.BigInt(tokenAmount.token.decimals));
  const decimalsB = import_jsbi2.default.exponentiate(import_jsbi2.default.BigInt(10), import_jsbi2.default.BigInt(token.decimals));
  const fakeAmountRaw = import_jsbi2.default.divide(import_jsbi2.default.multiply(tokenAmount.raw, decimalsB), decimalsA);
  return new TokenAmount(token, fakeAmountRaw);
};
var delay = (ms) => new Promise((res) => setTimeout(res, ms));

// src/entities/fractions/fraction.ts
var Decimal = (0, import_toformat.default)(import_decimal.default);
var Big = (0, import_toformat.default)(import_big.default);
var toSignificantRounding = {
  [0 /* ROUND_DOWN */]: Decimal.ROUND_DOWN,
  [1 /* ROUND_HALF_UP */]: Decimal.ROUND_HALF_UP,
  [2 /* ROUND_UP */]: Decimal.ROUND_UP
};
var toFixedRounding = {
  [0 /* ROUND_DOWN */]: 0 /* RoundDown */,
  [1 /* ROUND_HALF_UP */]: 1 /* RoundHalfUp */,
  [2 /* ROUND_UP */]: 3 /* RoundUp */
};
var Fraction = class _Fraction {
  constructor(numerator, denominator = ONE) {
    this.numerator = parseBigintIsh(numerator);
    this.denominator = parseBigintIsh(denominator);
  }
  // performs floor division
  get quotient() {
    return import_jsbi3.default.divide(this.numerator, this.denominator);
  }
  // remainder after floor division
  get remainder() {
    return new _Fraction(import_jsbi3.default.remainder(this.numerator, this.denominator), this.denominator);
  }
  invert() {
    return new _Fraction(this.denominator, this.numerator);
  }
  add(other) {
    const otherParsed = other instanceof _Fraction ? other : new _Fraction(parseBigintIsh(other));
    if (import_jsbi3.default.equal(this.denominator, otherParsed.denominator)) {
      return new _Fraction(import_jsbi3.default.add(this.numerator, otherParsed.numerator), this.denominator);
    }
    return new _Fraction(
      import_jsbi3.default.add(
        import_jsbi3.default.multiply(this.numerator, otherParsed.denominator),
        import_jsbi3.default.multiply(otherParsed.numerator, this.denominator)
      ),
      import_jsbi3.default.multiply(this.denominator, otherParsed.denominator)
    );
  }
  subtract(other) {
    const otherParsed = other instanceof _Fraction ? other : new _Fraction(parseBigintIsh(other));
    if (import_jsbi3.default.equal(this.denominator, otherParsed.denominator)) {
      return new _Fraction(import_jsbi3.default.subtract(this.numerator, otherParsed.numerator), this.denominator);
    }
    return new _Fraction(
      import_jsbi3.default.subtract(
        import_jsbi3.default.multiply(this.numerator, otherParsed.denominator),
        import_jsbi3.default.multiply(otherParsed.numerator, this.denominator)
      ),
      import_jsbi3.default.multiply(this.denominator, otherParsed.denominator)
    );
  }
  lessThan(other) {
    const otherParsed = other instanceof _Fraction ? other : new _Fraction(parseBigintIsh(other));
    return import_jsbi3.default.lessThan(
      import_jsbi3.default.multiply(this.numerator, otherParsed.denominator),
      import_jsbi3.default.multiply(otherParsed.numerator, this.denominator)
    );
  }
  equalTo(other) {
    const otherParsed = other instanceof _Fraction ? other : new _Fraction(parseBigintIsh(other));
    return import_jsbi3.default.equal(
      import_jsbi3.default.multiply(this.numerator, otherParsed.denominator),
      import_jsbi3.default.multiply(otherParsed.numerator, this.denominator)
    );
  }
  greaterThan(other) {
    const otherParsed = other instanceof _Fraction ? other : new _Fraction(parseBigintIsh(other));
    return import_jsbi3.default.greaterThan(
      import_jsbi3.default.multiply(this.numerator, otherParsed.denominator),
      import_jsbi3.default.multiply(otherParsed.numerator, this.denominator)
    );
  }
  multiply(other) {
    const otherParsed = other instanceof _Fraction ? other : new _Fraction(parseBigintIsh(other));
    return new _Fraction(
      import_jsbi3.default.multiply(this.numerator, otherParsed.numerator),
      import_jsbi3.default.multiply(this.denominator, otherParsed.denominator)
    );
  }
  divide(other) {
    const otherParsed = other instanceof _Fraction ? other : new _Fraction(parseBigintIsh(other));
    return new _Fraction(
      import_jsbi3.default.multiply(this.numerator, otherParsed.denominator),
      import_jsbi3.default.multiply(this.denominator, otherParsed.numerator)
    );
  }
  toSignificant(significantDigits, format = { groupSeparator: "" }, rounding = 1 /* ROUND_HALF_UP */) {
    (0, import_tiny_invariant2.default)(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);
    (0, import_tiny_invariant2.default)(significantDigits > 0, `${significantDigits} is not positive.`);
    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });
    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);
    return quotient.toFormat(quotient.decimalPlaces(), format);
  }
  toFixed(decimalPlaces, format = { groupSeparator: "" }, rounding = 1 /* ROUND_HALF_UP */) {
    (0, import_tiny_invariant2.default)(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);
    (0, import_tiny_invariant2.default)(decimalPlaces >= 0, `${decimalPlaces} is negative.`);
    Big.DP = decimalPlaces;
    Big.RM = toFixedRounding[rounding];
    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);
  }
  toExact(decimalPlaces, format = { groupSeparator: "" }) {
    Big.DP = decimalPlaces;
    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);
  }
};

// src/entities/fractions/percent.ts
var _100_PERCENT = new Fraction(_100);
var Percent = class extends Fraction {
  toSignificant(significantDigits = 5, format, rounding) {
    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);
  }
  toFixed(decimalPlaces = 2, format, rounding) {
    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);
  }
};

// src/entities/fractions/tokenAmount.ts
var import_tiny_invariant3 = __toESM(require("tiny-invariant"));
var import_jsbi4 = __toESM(require("jsbi"));
var TokenAmount = class _TokenAmount extends Fraction {
  constructor(token, amount) {
    const parsedAmount = parseBigintIsh(amount);
    validateSolidityTypeInstance(parsedAmount, "uint256" /* uint256 */);
    super(parsedAmount, import_jsbi4.default.exponentiate(TEN, import_jsbi4.default.BigInt(token.decimals)));
    this.token = token;
  }
  get raw() {
    return this.numerator;
  }
  add(other) {
    (0, import_tiny_invariant3.default)(this.token.equals(other.token), "TOKEN");
    return new _TokenAmount(this.token, import_jsbi4.default.add(this.raw, other.raw));
  }
  subtract(other) {
    (0, import_tiny_invariant3.default)(this.token.equals(other.token), "TOKEN");
    return new _TokenAmount(this.token, import_jsbi4.default.subtract(this.raw, other.raw));
  }
  greaterThanOrEqual(amount) {
    return import_jsbi4.default.greaterThanOrEqual(this.raw, amount);
  }
  toSignificant(significantDigits = 6, format, rounding = 0 /* ROUND_DOWN */) {
    return super.toSignificant(significantDigits, format, rounding);
  }
  toFixed(decimalPlaces = this.token.decimals, format, rounding = 0 /* ROUND_DOWN */) {
    (0, import_tiny_invariant3.default)(decimalPlaces <= this.token.decimals, "DECIMALS");
    return super.toFixed(decimalPlaces, format, rounding);
  }
  toExact(decimalPlaces = this.token.decimals, format = { groupSeparator: "" }) {
    return super.toExact(decimalPlaces, format);
  }
  toBigInt() {
    return BigInt(this.raw.toString());
  }
};

// src/entities/token.ts
var import_jsbi5 = __toESM(require("jsbi"));
var import_tiny_invariant4 = __toESM(require("tiny-invariant"));

// src/crosschain/chainUtils/tron.ts
var import_address2 = require("@ethersproject/address");
var import_bytes = require("@ethersproject/bytes");
var import_keccak256 = require("@ethersproject/keccak256");
var import_ethers = require("ethers");
var import_tronweb = __toESM(require("tronweb"));
function getFunctionSelector(abi) {
  if (abi instanceof import_ethers.utils.FunctionFragment) {
    abi = JSON.parse(abi.format(import_ethers.utils.FormatTypes.json));
  }
  abi.stateMutability = abi.stateMutability ? abi.stateMutability.toLowerCase() : "nonpayable";
  abi.type = abi.type ? abi.type.toLowerCase() : "";
  if (abi.type === "fallback" || abi.type === "receive")
    return "0x";
  const iface = new import_ethers.utils.Interface([abi]);
  if (abi.type === "event") {
    return iface.getEvent(abi.name).format(import_ethers.utils.FormatTypes.sighash);
  }
  return iface.getFunction(abi.name).format(import_ethers.utils.FormatTypes.sighash);
}
function prepareTronTransaction({
  chainId,
  tronWeb,
  abi,
  contractAddress,
  functionName,
  params,
  value,
  ownerAddress
}) {
  const functionFragment = abi.find((item) => item.type === "function" && item.name === functionName);
  if (!functionFragment) {
    throw new Error("Method not found in ABI");
  }
  const functionSelector = getFunctionSelector(functionFragment);
  const rawParameter = tronWeb.utils.abi.encodeParamsV2ByABI(functionFragment, params);
  return {
    chain_id: chainId,
    call_value: value?.toString() ?? 0,
    contract_address: import_tronweb.default.address.fromHex(contractAddress),
    fee_limit: 2e8,
    // 200 TRX
    function_selector: functionSelector,
    owner_address: import_tronweb.default.address.fromHex(ownerAddress),
    raw_parameter: rawParameter
  };
}
var ADDRESS_PREFIX_REGEX = /^(41)/;
function tronAddressToEvm(address2) {
  try {
    return import_tronweb.default.address.toHex(address2).replace(ADDRESS_PREFIX_REGEX, "0x");
  } catch (e) {
    return address2;
  }
}
function isTronChainId(chainId) {
  return [728126428 /* TRON_MAINNET */, 2494104990 /* TRON_TESTNET */].includes(chainId);
}
function isTronChain(chain) {
  return isTronChainId(chain.id);
}
function isTronToken(token) {
  return isTronChainId(token.chainId);
}
async function getTransactionInfoById(tronWeb, txId) {
  const result = await tronWeb.fullNode.request("wallet/gettransactioninfobyid", { value: txId }, "post");
  if (result && Object.keys(result).length > 0) {
    return result;
  }
  return null;
}
function getTronCreate2Address(from, salt, initCodeHash) {
  return (0, import_address2.getAddress)((0, import_bytes.hexDataSlice)((0, import_keccak256.keccak256)((0, import_bytes.concat)(["0x41", (0, import_address2.getAddress)(from), salt, initCodeHash])), 12));
}

// src/entities/token.ts
var Token2 = class {
  /**
   * Constructs an instance of the base class `Token`.
   * @param params TokenConstructor
   */
  constructor(params) {
    validateSolidityTypeInstance(import_jsbi5.default.BigInt(params.decimals), "uint8" /* uint8 */);
    this.decimals = params.decimals;
    this.symbol = params.symbol;
    this.name = params.name;
    this.chainId = params.chainId;
    this.isNative = !!params.isNative;
    this.icons = params.icons;
    this.chainFromId = params.chainFromId;
    this.userToken = params.userToken;
    this.deprecated = !!params.deprecated;
    this.attributes = params.attributes;
    if (isTronChainId(params.chainId)) {
      this.address = tronAddressToEvm(params.address);
      return;
    }
    this.address = validateAndParseAddress(params.address);
  }
  /**
   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.
   * @param other other token to compare
   */
  equals(other) {
    if (this === other) {
      return true;
    }
    return this.chainId === other.chainId && this.address === other.address;
  }
  /**
   * Returns true if the address of this token sorts before the address of the other token
   * @param other other token to compare
   * @throws if the tokens have the same address
   * @throws if the tokens are on different chains
   */
  sortsBefore(other) {
    (0, import_tiny_invariant4.default)(this.chainId === other.chainId, "CHAIN_IDS");
    (0, import_tiny_invariant4.default)(this.address !== other.address, "ADDRESSES");
    return this.address.toLowerCase() < other.address.toLowerCase();
  }
  get isSynthetic() {
    return !!this.chainFromId;
  }
  get chain() {
    return getChainById(this.chainId);
  }
  get chainFrom() {
    return getChainById(this.chainFromId);
  }
  get tonAddress() {
    if (!this.attributes?.ton) {
      throw new Error(`${this.name} has no ton address`);
    }
    return this.attributes.ton;
  }
  get solAddress() {
    if (!this.attributes?.solana) {
      throw new Error(`${this.name} has no solana address`);
    }
    return this.attributes.solana;
  }
};
function tokenEquals(tokenA, tokenB) {
  return tokenA.equals(tokenB);
}
var WETH = {
  // >> FAKE
  [85918 /* TON_MAINNET */]: new Token2({
    chainId: 85918 /* TON_MAINNET */,
    address: "",
    decimals: 9
  }),
  [85919 /* TON_TESTNET */]: new Token2({
    chainId: 85919 /* TON_TESTNET */,
    address: "",
    decimals: 9
  }),
  [3652501241 /* BTC_MAINNET */]: new Token2({
    chainId: 3652501241 /* BTC_MAINNET */,
    address: "",
    decimals: 8
  }),
  [2782866891 /* BTC_MUTINY */]: new Token2({
    chainId: 2782866891 /* BTC_MUTINY */,
    address: "",
    decimals: 8
  }),
  [675223068 /* BTC_TESTNET4 */]: new Token2({
    chainId: 675223068 /* BTC_TESTNET4 */,
    address: "",
    decimals: 8
  }),
  [5426 /* SOLANA_MAINNET */]: new Token2({
    chainId: 5426 /* SOLANA_MAINNET */,
    address: "",
    decimals: 9
  }),
  // << FAKE
  [728126428 /* TRON_MAINNET */]: new Token2({
    chainId: 728126428 /* TRON_MAINNET */,
    address: "0x891CDB91D149F23B1A45D9C5CA78A88D0CB44C18",
    decimals: 6,
    symbol: "WTRX",
    isNative: false,
    name: "Wrapped TRX",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png"
    }
  }),
  [1 /* ETH_MAINNET */]: new Token2({
    chainId: 1 /* ETH_MAINNET */,
    address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png",
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png"
    }
  }),
  [4 /* ETH_RINKEBY */]: new Token2({
    chainId: 4 /* ETH_RINKEBY */,
    address: "0xc778417e063141139fce010982780140aa0cd5ab",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png",
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png"
    }
  }),
  [42 /* ETH_KOVAN */]: new Token2({
    chainId: 42 /* ETH_KOVAN */,
    address: "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png",
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png"
    }
  }),
  [56 /* BSC_MAINNET */]: new Token2({
    chainId: 56 /* BSC_MAINNET */,
    address: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
    decimals: 18,
    symbol: "WBNB",
    isNative: false,
    name: "Wrapped BNB",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png"
    }
  }),
  [97 /* BSC_TESTNET */]: new Token2({
    chainId: 97 /* BSC_TESTNET */,
    address: "0xae13d989dac2f0debff460ac112a837c89baa7cd",
    decimals: 18,
    symbol: "WBNB",
    isNative: false,
    name: "Wrapped BNB",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png"
    }
  }),
  [137 /* MATIC_MAINNET */]: new Token2({
    chainId: 137 /* MATIC_MAINNET */,
    address: "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
    decimals: 18,
    symbol: "WMATIC",
    isNative: false,
    name: "Wrapped MATIC",
    icons: {
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png",
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png"
    }
  }),
  [80001 /* MATIC_MUMBAI */]: new Token2({
    chainId: 80001 /* MATIC_MUMBAI */,
    address: "0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",
    decimals: 18,
    symbol: "WMATIC",
    isNative: false,
    name: "Wrapped MATIC",
    icons: {
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png",
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/polygon/info/logo.png"
    }
  }),
  [43114 /* AVAX_MAINNET */]: new Token2({
    chainId: 43114 /* AVAX_MAINNET */,
    address: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    decimals: 18,
    symbol: "WAVAX",
    isNative: false,
    name: "Wrapped AVAX",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png"
    }
  }),
  [43113 /* AVAX_TESTNET */]: new Token2({
    chainId: 43113 /* AVAX_TESTNET */,
    address: "0xd00ae08403B9bbb9124bB305C09058E32C39A48c",
    decimals: 18,
    symbol: "WAVAX",
    isNative: false,
    name: "Wrapped AVAX",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/9462.png"
    }
  }),
  [128 /* HECO_MAINNET */]: new Token2({
    chainId: 128 /* HECO_MAINNET */,
    address: "0x5545153ccfca01fbd7dd11c0b23ba694d9509a6f",
    decimals: 18,
    symbol: "WHT",
    isNative: false,
    name: "Wrapped HT",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png"
    }
  }),
  [256 /* HECO_TESTNET */]: new Token2({
    chainId: 256 /* HECO_TESTNET */,
    address: "0x7aF326B6351C8A9b8fb8CD205CBe11d4Ac5FA836",
    decimals: 18,
    symbol: "WHT",
    isNative: false,
    name: "Wrapped HT",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png"
    }
  }),
  [66 /* OKEX_MAINNET */]: new Token2({
    chainId: 66 /* OKEX_MAINNET */,
    address: "0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15",
    decimals: 18,
    symbol: "WOKT",
    isNative: false,
    name: "Wrapped OKT",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png"
    }
  }),
  [65 /* OKEX_TESTNET */]: new Token2({
    chainId: 65 /* OKEX_TESTNET */,
    address: "0x2219845942d28716c0F7C605765fABDcA1a7d9E0",
    decimals: 18,
    symbol: "WOKT",
    isNative: false,
    name: "Wrapped OKT",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11132.png"
    }
  }),
  [288 /* BOBA_MAINNET */]: new Token2({
    chainId: 288 /* BOBA_MAINNET */,
    address: "0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png",
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png"
    }
  }),
  [43288 /* BOBA_AVALANCHE */]: new Token2({
    chainId: 43288 /* BOBA_AVALANCHE */,
    address: "0x26c319B7B2cF823365414d082698C8ac90cbBA63",
    decimals: 18,
    symbol: "WBOBA",
    isNative: false,
    name: "Wrapped BOBA",
    icons: {
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/14556.png",
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/14556.png"
    }
  }),
  [719095483 /* SYMBIOSIS_TESTNET */]: new Token2({
    chainId: 719095483 /* SYMBIOSIS_TESTNET */,
    address: "0x0000000000000000000000000000000000000000",
    decimals: 18,
    symbol: "WTVT",
    isNative: false,
    name: "Wrapped TVT",
    icons: {
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png"
    }
  }),
  [13863860 /* SYMBIOSIS_MAINNET */]: new Token2({
    chainId: 13863860 /* SYMBIOSIS_MAINNET */,
    address: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
    decimals: 18,
    symbol: "WSIS",
    isNative: false,
    name: "Wrapped SIS",
    icons: {
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png"
    }
  }),
  [28 /* BOBA_RINKEBY */]: new Token2({
    chainId: 28 /* BOBA_RINKEBY */,
    address: "0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      large: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png",
      small: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png"
    }
  }),
  [2001 /* MILKOMEDA_MAINNET */]: new Token2({
    chainId: 2001 /* MILKOMEDA_MAINNET */,
    address: "0xAE83571000aF4499798d1e3b0fA0070EB3A3E3F9",
    decimals: 18,
    symbol: "WADA",
    isNative: false,
    name: "Wrapped ADA",
    icons: {
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png",
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png"
    }
  }),
  [200101 /* MILKOMEDA_DEVNET */]: new Token2({
    chainId: 200101 /* MILKOMEDA_DEVNET */,
    // address: '0x65a51E52eCD17B641f8F0D1d56a6c9738951FDC9',
    address: "0x01bbbb9c97fc43e3393e860fc8bbead47b6960db",
    decimals: 18,
    symbol: "WTADA",
    isNative: false,
    name: "Wrapped TADA",
    icons: {
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png",
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/19369.png"
    }
  }),
  [1313161554 /* AURORA_MAINNET */]: new Token2({
    chainId: 1313161554 /* AURORA_MAINNET */,
    address: "0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png",
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png"
    }
  }),
  [1313161555 /* AURORA_TESTNET */]: new Token2({
    chainId: 1313161555 /* AURORA_TESTNET */,
    address: "0x1b6A3d5B5DCdF7a37CFE35CeBC0C4bD28eA7e946",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png",
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/2396.png"
    }
  }),
  [40 /* TELOS_MAINNET */]: new Token2({
    chainId: 40 /* TELOS_MAINNET */,
    address: "0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E",
    decimals: 18,
    symbol: "WTLOS",
    isNative: false,
    name: "Wrapped TLOS",
    icons: {
      large: "https://raw.githubusercontent.com/telosnetwork/token-list/main/logos/wtlos.png",
      small: "https://raw.githubusercontent.com/telosnetwork/token-list/main/logos/wtlos.png"
    }
  }),
  [41 /* TELOS_TESTNET */]: new Token2({
    chainId: 41 /* TELOS_TESTNET */,
    address: "0xaE85Bf723A9e74d6c663dd226996AC1b8d075AA9",
    decimals: 18,
    symbol: "WTLOS",
    isNative: false,
    name: "Wrapped TLOS",
    icons: {
      large: "https://raw.githubusercontent.com/telosnetwork/token-list/main/logos/wtlos.png",
      small: "https://raw.githubusercontent.com/telosnetwork/token-list/main/logos/wtlos.png"
    }
  }),
  [8081 /* SHARDEUM_TESTNET_2 */]: new Token2({
    chainId: 8081 /* SHARDEUM_TESTNET_2 */,
    address: "0xb6204c4b6b2545cF23F5EC0Bf8AEB8cB56E13C15",
    decimals: 18,
    symbol: "WSHM",
    isNative: false,
    name: "Wrapped SHM",
    icons: {
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/22353.png",
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/22353.png"
    }
  }),
  [2222 /* KAVA_MAINNET */]: new Token2({
    chainId: 2222 /* KAVA_MAINNET */,
    address: "0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b",
    decimals: 18,
    symbol: "WKAVA",
    isNative: false,
    name: "Wrapped KAVA",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/4846.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4846.png"
    }
  }),
  [534351 /* SCROLL_SEPOLIA */]: new Token2({
    chainId: 534351 /* SCROLL_SEPOLIA */,
    address: "0x5300000000000000000000000000000000000004",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [324 /* ZKSYNC_MAINNET */]: new Token2({
    chainId: 324 /* ZKSYNC_MAINNET */,
    address: "0x5aea5775959fbc2557cc8789bc1bf90a239d9a91",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [42161 /* ARBITRUM_MAINNET */]: new Token2({
    chainId: 42161 /* ARBITRUM_MAINNET */,
    address: "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [42170 /* ARBITRUM_NOVA */]: new Token2({
    chainId: 42170 /* ARBITRUM_NOVA */,
    address: "0x722e8bdd2ce80a4422e880164f2079488e115365",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [10 /* OPTIMISM_MAINNET */]: new Token2({
    chainId: 10 /* OPTIMISM_MAINNET */,
    address: "0x4200000000000000000000000000000000000006",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [7001 /* ZETACHAIN_ATHENS_2 */]: new Token2({
    chainId: 7001 /* ZETACHAIN_ATHENS_2 */,
    address: "0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf",
    decimals: 18,
    symbol: "WZETA",
    isNative: false,
    name: "Wrapped ZETA",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/21259.png"
    }
  }),
  [1101 /* POLYGON_ZK */]: new Token2({
    chainId: 1101 /* POLYGON_ZK */,
    address: "0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [2494104990 /* TRON_TESTNET */]: new Token2({
    chainId: 2494104990 /* TRON_TESTNET */,
    address: "0xf060b2655346cf3f825c3300177dff8a2acd89aa",
    decimals: 6,
    symbol: "WTRX",
    isNative: false,
    name: "Wrapped TRX",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png"
    }
  }),
  [59140 /* LINEA_TESTNET */]: new Token2({
    chainId: 59140 /* LINEA_TESTNET */,
    address: "0x2C1b868d6596a18e32E61B901E4060C872647b6C",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [59144 /* LINEA_MAINNET */]: new Token2({
    chainId: 59144 /* LINEA_MAINNET */,
    address: "0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [5e3 /* MANTLE_MAINNET */]: new Token2({
    chainId: 5e3 /* MANTLE_MAINNET */,
    address: "0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8",
    decimals: 18,
    symbol: "WMNT",
    isNative: false,
    name: "Wrapped MNT",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png"
    }
  }),
  [5001 /* MANTLE_TESTNET */]: new Token2({
    chainId: 5001 /* MANTLE_TESTNET */,
    address: "0x8734110e5e1dcF439c7F549db740E546fea82d66",
    decimals: 18,
    symbol: "WBIT",
    isNative: false,
    name: "Wrapped BIT",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/27075.png"
    }
  }),
  [8453 /* BASE_MAINNET */]: new Token2({
    chainId: 8453 /* BASE_MAINNET */,
    address: "0x4200000000000000000000000000000000000006",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [534352 /* SCROLL_MAINNET */]: new Token2({
    chainId: 534352 /* SCROLL_MAINNET */,
    address: "0x5300000000000000000000000000000000000004",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [169 /* MANTA_MAINNET */]: new Token2({
    chainId: 169 /* MANTA_MAINNET */,
    address: "0x0Dc808adcE2099A9F62AA87D9670745AbA741746",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [1088 /* METIS_MAINNET */]: new Token2({
    chainId: 1088 /* METIS_MAINNET */,
    address: "0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481",
    decimals: 18,
    symbol: "WMETIS",
    isNative: false,
    name: "Wrapped METIS",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/9640.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/9640.png"
    }
  }),
  [195 /* OKX_X1_TESTNET */]: new Token2({
    chainId: 195 /* OKX_X1_TESTNET */,
    address: "0x67A1f4A939b477A6b7c5BF94D97E45dE87E608eF",
    decimals: 18,
    symbol: "WOKB",
    isNative: false,
    name: "Wrapped OKB",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png"
    }
  }),
  [5165 /* BAHAMUT_MAINNET */]: new Token2({
    chainId: 5165 /* BAHAMUT_MAINNET */,
    address: "0x4084aB20f8ffcA76C19AAF854Fb5fe9DE6217fBB",
    decimals: 18,
    symbol: "WFTN",
    isNative: false,
    name: "Wrapped FTN",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/22615.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/22615.png"
    }
  }),
  [34443 /* MODE_MAINNET */]: new Token2({
    chainId: 34443 /* MODE_MAINNET */,
    address: "0x4200000000000000000000000000000000000006",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [30 /* RSK_MAINNET */]: new Token2({
    chainId: 30 /* RSK_MAINNET */,
    address: "0x542fda317318ebf1d3deaf76e0b632741a7e677d",
    decimals: 18,
    symbol: "WRBTC",
    isNative: false,
    name: "Wrapped BTC",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3626.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3626.png"
    }
  }),
  [81457 /* BLAST_MAINNET */]: new Token2({
    chainId: 81457 /* BLAST_MAINNET */,
    address: "0x4300000000000000000000000000000000000004",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [4200 /* MERLIN_MAINNET */]: new Token2({
    chainId: 4200 /* MERLIN_MAINNET */,
    address: "0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA",
    decimals: 18,
    symbol: "WBTC",
    isNative: false,
    name: "Wrapped BTC",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png"
    }
  }),
  [810180 /* ZKLINK_MAINNET */]: new Token2({
    chainId: 810180 /* ZKLINK_MAINNET */,
    address: "0x8280a4e7D5B3B658ec4580d3Bc30f5e50454F169",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [11155111 /* SEPOLIA_TESTNET */]: new Token2({
    chainId: 11155111 /* SEPOLIA_TESTNET */,
    address: "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [1116 /* CORE_MAINNET */]: new Token2({
    chainId: 1116 /* CORE_MAINNET */,
    address: "0x191E94fa59739e188dcE837F7f6978d84727AD01",
    decimals: 18,
    symbol: "WCORE",
    isNative: false,
    name: "Wrapped CORE",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/23254.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/23254.png"
    }
  }),
  [167e3 /* TAIKO_MAINNET */]: new Token2({
    chainId: 167e3 /* TAIKO_MAINNET */,
    address: "0xA51894664A773981C6C112C43ce576f315d5b1B6",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [1329 /* SEI_EVM_MAINNET */]: new Token2({
    chainId: 1329 /* SEI_EVM_MAINNET */,
    address: "0xE30feDd158A2e3b13e9badaeABaFc5516e95e8C7",
    decimals: 18,
    symbol: "WSEI",
    isNative: false,
    name: "Wrapped SEI",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/23149.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/23149.png"
    }
  }),
  [7e3 /* ZETACHAIN_MAINNET */]: new Token2({
    chainId: 7e3 /* ZETACHAIN_MAINNET */,
    address: "0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf",
    decimals: 18,
    symbol: "WZETA",
    isNative: false,
    name: "Wrapped ZETA",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/29464.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29464.png"
    }
  }),
  [25 /* CRONOS_MAINNET */]: new Token2({
    chainId: 25 /* CRONOS_MAINNET */,
    address: "0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23",
    decimals: 18,
    symbol: "WCRO",
    isNative: false,
    name: "Wrapped CRO",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/14532.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/14532.png"
    }
  }),
  [252 /* FRAXTAL_MAINNET */]: new Token2({
    chainId: 252 /* FRAXTAL_MAINNET */,
    address: "0xFc00000000000000000000000000000000000002",
    decimals: 18,
    symbol: "WFRAX",
    isNative: false,
    name: "Wrapped FRAX",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png"
    }
  }),
  [1625 /* GRAVITY_MAINNET */]: new Token2({
    chainId: 1625 /* GRAVITY_MAINNET */,
    address: "0xBB859E225ac8Fb6BE1C7e38D87b767e95Fef0EbD",
    decimals: 18,
    symbol: "wG",
    isNative: false,
    name: "Wrapped G",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png"
    }
  }),
  [223 /* BSQUARED_MAINNET */]: new Token2({
    chainId: 223 /* BSQUARED_MAINNET */,
    address: "0x4200000000000000000000000000000000000006",
    decimals: 18,
    symbol: "WBTC",
    isNative: false,
    name: "Wrapped BTC",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png"
    }
  }),
  [388 /* CRONOS_ZK_MAINNET */]: new Token2({
    chainId: 388 /* CRONOS_ZK_MAINNET */,
    address: "0xC1bF55EE54E16229d9b369a5502Bfe5fC9F20b6d",
    decimals: 18,
    symbol: "wzkCRO",
    isNative: false,
    name: "Wrapped zkCRO",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33873.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33873.png"
    }
  }),
  [2818 /* MORPH_MAINNET */]: new Token2({
    chainId: 2818 /* MORPH_MAINNET */,
    address: "0x5300000000000000000000000000000000000011",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [2345 /* GOAT_MAINNET */]: new Token2({
    chainId: 2345 /* GOAT_MAINNET */,
    address: "0xbC10000000000000000000000000000000000000",
    decimals: 18,
    symbol: "WGBTC",
    isNative: false,
    name: "Wrapped Goat BTC",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png"
    }
  }),
  [146 /* SONIC_MAINNET */]: new Token2({
    chainId: 146 /* SONIC_MAINNET */,
    address: "0x039e2fB66102314Ce7b64Ce5Ce3E5183bc94aD38",
    decimals: 18,
    symbol: "WS",
    isNative: false,
    name: "Wrapped Sonic",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32684.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32684.png"
    }
  }),
  [2741 /* ABSTRACT_MAINNET */]: new Token2({
    chainId: 2741 /* ABSTRACT_MAINNET */,
    address: "0x3439153EB7AF838Ad19d56E1571FBD09333C2809",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [100 /* GNOSIS_MAINNET */]: new Token2({
    chainId: 100 /* GNOSIS_MAINNET */,
    address: "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
    decimals: 18,
    symbol: "WXDAI",
    isNative: false,
    name: "Wrapped xDAI",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/9021.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/9021.png"
    }
  }),
  [80094 /* BERACHAIN_MAINNET */]: new Token2({
    chainId: 80094 /* BERACHAIN_MAINNET */,
    address: "0x6969696969696969696969696969696969696969",
    decimals: 18,
    symbol: "WBERA",
    isNative: false,
    name: "Wrapped BERA",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/35608.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/35608.png"
    }
  }),
  [130 /* UNICHAIN_MAINNET */]: new Token2({
    chainId: 130 /* UNICHAIN_MAINNET */,
    address: "0x4200000000000000000000000000000000000006",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [1868 /* SONEIUM_MAINNET */]: new Token2({
    chainId: 1868 /* SONEIUM_MAINNET */,
    address: "0x4200000000000000000000000000000000000006",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [204 /* OPBNB_MAINNET */]: new Token2({
    chainId: 204 /* OPBNB_MAINNET */,
    address: "0x4200000000000000000000000000000000000006",
    decimals: 18,
    symbol: "WBNB",
    isNative: false,
    name: "Wrapped BNB",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png"
    }
  }),
  [999 /* HYPERLIQUID_MAINNET */]: new Token2({
    chainId: 999 /* HYPERLIQUID_MAINNET */,
    address: "0x5555555555555555555555555555555555555555",
    decimals: 18,
    symbol: "WHYPE",
    isNative: false,
    name: "Wrapped HYPE",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/35881.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/35881.png"
    }
  }),
  [747474 /* KATANA_MAINNET */]: new Token2({
    chainId: 747474 /* KATANA_MAINNET */,
    address: "0xEE7D8BCFb72bC1880D0Cf19822eB0A2e6577aB62",
    decimals: 18,
    symbol: "WETH",
    isNative: false,
    name: "Wrapped ETH",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"
    }
  }),
  [33139 /* APECHAIN_MAINNET */]: new Token2({
    chainId: 33139 /* APECHAIN_MAINNET */,
    address: "0x48b62137edfa95a428d35c09e44256a739f6b557",
    decimals: 18,
    symbol: "WAPE",
    isNative: false,
    name: "Wrapped APE",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png"
    }
  }),
  [9745 /* PLASMA_MAINNET */]: new Token2({
    chainId: 9745 /* PLASMA_MAINNET */,
    address: "0x6100E367285b01F48D07953803A2d8dCA5D19873",
    decimals: 18,
    symbol: "WXPL",
    isNative: false,
    name: "Wrapped XPL",
    icons: {
      small: "https://s2.coinmarketcap.com/static/img/coins/64x64/36645.png",
      large: "https://s2.coinmarketcap.com/static/img/coins/64x64/36645.png"
    }
  })
};

// src/entities/fractions/price.ts
var import_tiny_invariant5 = __toESM(require("tiny-invariant"));
var import_jsbi6 = __toESM(require("jsbi"));
var Price = class _Price extends Fraction {
  // denominator and numerator _must_ be raw, i.e. in the native representation
  constructor(baseToken, quoteToken, denominator, numerator) {
    super(numerator, denominator);
    this.baseToken = baseToken;
    this.quoteToken = quoteToken;
    this.scalar = new Fraction(
      import_jsbi6.default.exponentiate(TEN, import_jsbi6.default.BigInt(baseToken.decimals)),
      import_jsbi6.default.exponentiate(TEN, import_jsbi6.default.BigInt(quoteToken.decimals))
    );
  }
  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token
  static fromRoute(route) {
    const prices = [];
    for (const [i, pair] of route.pairs.entries()) {
      prices.push(
        route.path[i].equals(pair.token0) ? new _Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw) : new _Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)
      );
    }
    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0]);
  }
  get raw() {
    return new Fraction(this.numerator, this.denominator);
  }
  get adjusted() {
    return super.multiply(this.scalar);
  }
  invert() {
    return new _Price(this.quoteToken, this.baseToken, this.numerator, this.denominator);
  }
  multiply(other) {
    (0, import_tiny_invariant5.default)(tokenEquals(this.quoteToken, other.baseToken), "TOKEN");
    const fraction = super.multiply(other);
    return new _Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator);
  }
  // performs floor division on overflow
  quote(tokenAmount) {
    (0, import_tiny_invariant5.default)(tokenEquals(tokenAmount.token, this.baseToken), "TOKEN");
    return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient);
  }
  toSignificant(significantDigits = 6, format, rounding) {
    return this.adjusted.toSignificant(significantDigits, format, rounding);
  }
  toFixed(decimalPlaces = 4, format, rounding) {
    return this.adjusted.toFixed(decimalPlaces, format, rounding);
  }
};

// src/entities/pair.ts
var import_tiny_invariant6 = __toESM(require("tiny-invariant"));
var import_jsbi7 = __toESM(require("jsbi"));
var import_solidity = require("@ethersproject/solidity");
var import_address3 = require("@ethersproject/address");
var PAIR_ADDRESS_CACHE = {};
function getZkCreate2Address(from, salt, initCodeHash) {
  const MAP = {
    "0x50704Ac00064be03CEEd817f41E0Aa61F52ef4DC": {
      "0x10dac1b69a0ef99baf5786f77bf0aab84749fd564007f4fad53a9395afa06d6a": "0x20eDB5049461c9a6F490671742824c9F9aD05eD8",
      // H2 (USDC,wzkCRO)
      "0xdaa80bb10d1689abf76a659ce2e4b2c7e859fca2d05933a3d81c3636c0ef62f0": "0x006022eb9de7869e84f021605Ae23bE6C7D2d952",
      // H2 (USDC,vUSD)
      "0x91965e804433f989e92a043ea20a588fec7c4ca4ce64a380d6215f3992eadbb6": "0xA61947027caDbe9505d2a40E73EB21CB957e2daD"
      // H2 (wzkCRO,vUSD)
    }
  };
  try {
    return MAP[from][salt];
  } catch {
    throw new Error(`Unknown zk pair with initCodeHash: ${initCodeHash}`);
  }
}
var Pair = class _Pair {
  static getAddress(tokenA, tokenB) {
    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];
    const chainId = tokens[0].chainId;
    let types = ["address", "address"];
    let params = [tokens[0].address, tokens[1].address];
    if (chainId === 2222 /* KAVA_MAINNET */) {
      types = [...types, "bool"];
      params = [...params, false];
    }
    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === void 0) {
      let getCreate2Address = import_address3.getCreate2Address;
      if (isTronChainId(chainId)) {
        getCreate2Address = getTronCreate2Address;
      } else if (chainId === 388 /* CRONOS_ZK_MAINNET */) {
        getCreate2Address = getZkCreate2Address;
      }
      PAIR_ADDRESS_CACHE = {
        ...PAIR_ADDRESS_CACHE,
        [tokens[0].address]: {
          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],
          [tokens[1].address]: getCreate2Address(
            FACTORY_ADDRESS[chainId],
            (0, import_solidity.keccak256)(["bytes"], [(0, import_solidity.pack)(types, params)]),
            INIT_CODE_HASH[chainId]
          )
        }
      };
    }
    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];
  }
  constructor(tokenAmountA, tokenAmountB) {
    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];
    this.liquidityToken = new Token2({
      chainId: tokenAmounts[0].token.chainId,
      address: _Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),
      decimals: 18,
      symbol: "UNI-V2",
      name: "Uniswap V2"
    });
    this.tokenAmounts = tokenAmounts;
  }
  /**
   * Returns true if the token is either token0 or token1
   * @param token to check
   */
  involvesToken(token) {
    return token.equals(this.token0) || token.equals(this.token1);
  }
  /**
   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0
   */
  get token0Price() {
    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);
  }
  /**
   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1
   */
  get token1Price() {
    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);
  }
  /**
   * Return the price of the given token in terms of the other token in the pair.
   * @param token token to return price of
   */
  priceOf(token) {
    (0, import_tiny_invariant6.default)(this.involvesToken(token), "TOKEN");
    return token.equals(this.token0) ? this.token0Price : this.token1Price;
  }
  /**
   * Returns the chain ID of the tokens in the pair.
   */
  get chainId() {
    return this.token0.chainId;
  }
  get token0() {
    return this.tokenAmounts[0].token;
  }
  get token1() {
    return this.tokenAmounts[1].token;
  }
  get reserve0() {
    return this.tokenAmounts[0];
  }
  get reserve1() {
    return this.tokenAmounts[1];
  }
  reserveOf(token) {
    (0, import_tiny_invariant6.default)(this.involvesToken(token), "TOKEN");
    return token.equals(this.token0) ? this.reserve0 : this.reserve1;
  }
  getOutputAmount(inputAmount) {
    (0, import_tiny_invariant6.default)(this.involvesToken(inputAmount.token), "TOKEN");
    if (import_jsbi7.default.equal(this.reserve0.raw, ZERO) || import_jsbi7.default.equal(this.reserve1.raw, ZERO)) {
      throw new InsufficientReservesError();
    }
    const inputReserve = this.reserveOf(inputAmount.token);
    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);
    const inputAmountWithFee = import_jsbi7.default.multiply(inputAmount.raw, _998);
    const numerator = import_jsbi7.default.multiply(inputAmountWithFee, outputReserve.raw);
    const denominator = import_jsbi7.default.add(import_jsbi7.default.multiply(inputReserve.raw, _1000), inputAmountWithFee);
    const outputAmount = new TokenAmount(
      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,
      import_jsbi7.default.divide(numerator, denominator)
    );
    if (import_jsbi7.default.equal(outputAmount.raw, ZERO)) {
      throw new InsufficientInputAmountError();
    }
    return [outputAmount, new _Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];
  }
  getInputAmount(outputAmount) {
    (0, import_tiny_invariant6.default)(this.involvesToken(outputAmount.token), "TOKEN");
    if (import_jsbi7.default.equal(this.reserve0.raw, ZERO) || import_jsbi7.default.equal(this.reserve1.raw, ZERO) || import_jsbi7.default.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {
      throw new InsufficientReservesError();
    }
    const outputReserve = this.reserveOf(outputAmount.token);
    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);
    const numerator = import_jsbi7.default.multiply(import_jsbi7.default.multiply(inputReserve.raw, outputAmount.raw), _1000);
    const denominator = import_jsbi7.default.multiply(import_jsbi7.default.subtract(outputReserve.raw, outputAmount.raw), _998);
    const inputAmount = new TokenAmount(
      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,
      import_jsbi7.default.add(import_jsbi7.default.divide(numerator, denominator), ONE)
    );
    return [inputAmount, new _Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];
  }
  getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {
    (0, import_tiny_invariant6.default)(totalSupply.token.equals(this.liquidityToken), "LIQUIDITY");
    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];
    (0, import_tiny_invariant6.default)(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), "TOKEN");
    let liquidity;
    if (import_jsbi7.default.equal(totalSupply.raw, ZERO)) {
      liquidity = import_jsbi7.default.subtract(sqrt(import_jsbi7.default.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);
    } else {
      const amount0 = import_jsbi7.default.divide(import_jsbi7.default.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);
      const amount1 = import_jsbi7.default.divide(import_jsbi7.default.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);
      liquidity = import_jsbi7.default.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;
    }
    if (!import_jsbi7.default.greaterThan(liquidity, ZERO)) {
      throw new InsufficientInputAmountError();
    }
    return new TokenAmount(this.liquidityToken, liquidity);
  }
  getLiquidityValue(token, totalSupply, liquidity, feeOn = false, kLast) {
    (0, import_tiny_invariant6.default)(this.involvesToken(token), "TOKEN");
    (0, import_tiny_invariant6.default)(totalSupply.token.equals(this.liquidityToken), "TOTAL_SUPPLY");
    (0, import_tiny_invariant6.default)(liquidity.token.equals(this.liquidityToken), "LIQUIDITY");
    (0, import_tiny_invariant6.default)(import_jsbi7.default.lessThanOrEqual(liquidity.raw, totalSupply.raw), "LIQUIDITY");
    let totalSupplyAdjusted;
    if (!feeOn) {
      totalSupplyAdjusted = totalSupply;
    } else {
      (0, import_tiny_invariant6.default)(!!kLast, "K_LAST");
      const kLastParsed = parseBigintIsh(kLast);
      if (!import_jsbi7.default.equal(kLastParsed, ZERO)) {
        const rootK = sqrt(import_jsbi7.default.multiply(this.reserve0.raw, this.reserve1.raw));
        const rootKLast = sqrt(kLastParsed);
        if (import_jsbi7.default.greaterThan(rootK, rootKLast)) {
          const numerator = import_jsbi7.default.multiply(totalSupply.raw, import_jsbi7.default.subtract(rootK, rootKLast));
          const denominator = import_jsbi7.default.add(import_jsbi7.default.multiply(rootK, FIVE), rootKLast);
          const feeLiquidity = import_jsbi7.default.divide(numerator, denominator);
          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));
        } else {
          totalSupplyAdjusted = totalSupply;
        }
      } else {
        totalSupplyAdjusted = totalSupply;
      }
    }
    return new TokenAmount(
      token,
      import_jsbi7.default.divide(import_jsbi7.default.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)
    );
  }
};

// src/entities/route.ts
var import_tiny_invariant7 = __toESM(require("tiny-invariant"));
var Route = class {
  constructor(pairs, input, output) {
    (0, import_tiny_invariant7.default)(pairs.length > 0, "PAIRS");
    (0, import_tiny_invariant7.default)(
      pairs.every((pair) => pair.chainId === pairs[0].chainId),
      "CHAIN_IDS"
    );
    (0, import_tiny_invariant7.default)(
      pairs[0].involvesToken(input) || input.isNative && pairs[0].involvesToken(WETH[pairs[0].chainId]),
      "INPUT"
    );
    (0, import_tiny_invariant7.default)(
      typeof output === "undefined" || pairs[pairs.length - 1].involvesToken(output) || output.isNative && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId]),
      "OUTPUT"
    );
    const path = [input.isNative ? WETH[pairs[0].chainId] : input];
    for (const [i, pair] of pairs.entries()) {
      const currentInput = path[i];
      (0, import_tiny_invariant7.default)(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), "PATH");
      const output2 = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;
      path.push(output2);
    }
    this.pairs = pairs;
    this.path = path;
    this.midPrice = Price.fromRoute(this);
    this.input = input;
    this.output = output ?? path[path.length - 1];
  }
  get chainId() {
    return this.pairs[0].chainId;
  }
};

// src/entities/gasToken.ts
var GAS = (chainId, symbol, iconId, decimals = 18) => new Token2({
  isNative: true,
  name: symbol,
  symbol,
  address: "",
  chainId,
  decimals,
  icons: {
    small: `https://s2.coinmarketcap.com/static/img/coins/64x64/${iconId}.png`,
    large: `https://s2.coinmarketcap.com/static/img/coins/64x64/${iconId}.png`
  }
});
var TOKEN_AS_GAS = (chainId, address2, symbol, iconId, decimals = 18) => new Token2({
  name: symbol,
  symbol,
  address: address2,
  chainId,
  decimals,
  icons: {
    small: `https://s2.coinmarketcap.com/static/img/coins/64x64/${iconId}.png`,
    large: `https://s2.coinmarketcap.com/static/img/coins/64x64/${iconId}.png`
  }
});
var GAS_TOKEN = {
  [1 /* ETH_MAINNET */]: GAS(1 /* ETH_MAINNET */, "ETH", 1027),
  [4 /* ETH_RINKEBY */]: GAS(4 /* ETH_RINKEBY */, "ETH", 1027),
  [42 /* ETH_KOVAN */]: GAS(42 /* ETH_KOVAN */, "ETH", 1027),
  [56 /* BSC_MAINNET */]: GAS(56 /* BSC_MAINNET */, "BNB", 1839),
  [97 /* BSC_TESTNET */]: GAS(97 /* BSC_TESTNET */, "BNB", 1839),
  [137 /* MATIC_MAINNET */]: GAS(137 /* MATIC_MAINNET */, "POL", 28321),
  [80001 /* MATIC_MUMBAI */]: GAS(80001 /* MATIC_MUMBAI */, "MATIC", 3890),
  [43114 /* AVAX_MAINNET */]: GAS(43114 /* AVAX_MAINNET */, "AVAX", 5805),
  [43113 /* AVAX_TESTNET */]: GAS(43113 /* AVAX_TESTNET */, "AVAX", 5805),
  [128 /* HECO_MAINNET */]: GAS(128 /* HECO_MAINNET */, "HT", 2502),
  [256 /* HECO_TESTNET */]: GAS(256 /* HECO_TESTNET */, "HT", 2502),
  [66 /* OKEX_MAINNET */]: GAS(66 /* OKEX_MAINNET */, "OKT", 8267),
  [65 /* OKEX_TESTNET */]: GAS(65 /* OKEX_TESTNET */, "OKT", 8267),
  [288 /* BOBA_MAINNET */]: GAS(288 /* BOBA_MAINNET */, "ETH", 1027),
  [28 /* BOBA_RINKEBY */]: GAS(28 /* BOBA_RINKEBY */, "ETH", 1027),
  [719095483 /* SYMBIOSIS_TESTNET */]: GAS(719095483 /* SYMBIOSIS_TESTNET */, "TVT", 15084),
  [13863860 /* SYMBIOSIS_MAINNET */]: GAS(13863860 /* SYMBIOSIS_MAINNET */, "SIS", 15084),
  [43288 /* BOBA_AVALANCHE */]: GAS(43288 /* BOBA_AVALANCHE */, "BOBA", 14556),
  [2001 /* MILKOMEDA_MAINNET */]: GAS(2001 /* MILKOMEDA_MAINNET */, "MilkADA", 2010),
  [200101 /* MILKOMEDA_DEVNET */]: GAS(200101 /* MILKOMEDA_DEVNET */, "MilktADA", 2010),
  [3652501241 /* BTC_MAINNET */]: GAS(3652501241 /* BTC_MAINNET */, "BTC", 1, 8),
  [2782866891 /* BTC_MUTINY */]: GAS(2782866891 /* BTC_MUTINY */, "BTC", 1, 8),
  [675223068 /* BTC_TESTNET4 */]: GAS(675223068 /* BTC_TESTNET4 */, "BTC", 1, 8),
  [1313161554 /* AURORA_MAINNET */]: GAS(1313161554 /* AURORA_MAINNET */, "ETH", 1027),
  [1313161555 /* AURORA_TESTNET */]: GAS(1313161555 /* AURORA_TESTNET */, "ETH", 1027),
  [40 /* TELOS_MAINNET */]: GAS(40 /* TELOS_MAINNET */, "TLOS", 4660),
  [41 /* TELOS_TESTNET */]: GAS(41 /* TELOS_TESTNET */, "TLOS", 4660),
  [8081 /* SHARDEUM_TESTNET_2 */]: GAS(8081 /* SHARDEUM_TESTNET_2 */, "SHM", 22353),
  [2222 /* KAVA_MAINNET */]: GAS(2222 /* KAVA_MAINNET */, "KAVA", 4846),
  [534351 /* SCROLL_SEPOLIA */]: GAS(534351 /* SCROLL_SEPOLIA */, "ETH", 1027),
  [324 /* ZKSYNC_MAINNET */]: GAS(324 /* ZKSYNC_MAINNET */, "ETH", 1027),
  [42161 /* ARBITRUM_MAINNET */]: GAS(42161 /* ARBITRUM_MAINNET */, "ETH", 1027),
  [42170 /* ARBITRUM_NOVA */]: GAS(42170 /* ARBITRUM_NOVA */, "ETH", 1027),
  [10 /* OPTIMISM_MAINNET */]: GAS(10 /* OPTIMISM_MAINNET */, "ETH", 1027),
  [7001 /* ZETACHAIN_ATHENS_2 */]: GAS(7001 /* ZETACHAIN_ATHENS_2 */, "ZETA", 21259),
  [1101 /* POLYGON_ZK */]: GAS(1101 /* POLYGON_ZK */, "ETH", 1027),
  [59144 /* LINEA_MAINNET */]: GAS(59144 /* LINEA_MAINNET */, "ETH", 1027),
  [59140 /* LINEA_TESTNET */]: GAS(59140 /* LINEA_TESTNET */, "ETH", 1027),
  [5e3 /* MANTLE_MAINNET */]: GAS(5e3 /* MANTLE_MAINNET */, "MNT", 27075),
  [5001 /* MANTLE_TESTNET */]: GAS(5001 /* MANTLE_TESTNET */, "MNT", 27075),
  [8453 /* BASE_MAINNET */]: GAS(8453 /* BASE_MAINNET */, "ETH", 1027),
  [2494104990 /* TRON_TESTNET */]: GAS(2494104990 /* TRON_TESTNET */, "TRX", 1958, 6),
  [728126428 /* TRON_MAINNET */]: GAS(728126428 /* TRON_MAINNET */, "TRX", 1958, 6),
  [534352 /* SCROLL_MAINNET */]: GAS(534352 /* SCROLL_MAINNET */, "ETH", 1027),
  [169 /* MANTA_MAINNET */]: GAS(169 /* MANTA_MAINNET */, "ETH", 1027),
  [1088 /* METIS_MAINNET */]: TOKEN_AS_GAS(
    1088 /* METIS_MAINNET */,
    "0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000",
    "METIS",
    9640
  ),
  [195 /* OKX_X1_TESTNET */]: GAS(195 /* OKX_X1_TESTNET */, "OKB", 3897),
  [5165 /* BAHAMUT_MAINNET */]: GAS(5165 /* BAHAMUT_MAINNET */, "FTN", 22615),
  [34443 /* MODE_MAINNET */]: GAS(34443 /* MODE_MAINNET */, "ETH", 1027),
  [30 /* RSK_MAINNET */]: GAS(30 /* RSK_MAINNET */, "RBTC", 3626),
  [81457 /* BLAST_MAINNET */]: GAS(81457 /* BLAST_MAINNET */, "ETH", 1027),
  [4200 /* MERLIN_MAINNET */]: GAS(4200 /* MERLIN_MAINNET */, "BTC", 1),
  [810180 /* ZKLINK_MAINNET */]: GAS(810180 /* ZKLINK_MAINNET */, "ETH", 1027),
  [11155111 /* SEPOLIA_TESTNET */]: GAS(11155111 /* SEPOLIA_TESTNET */, "ETH", 1027),
  [1116 /* CORE_MAINNET */]: GAS(1116 /* CORE_MAINNET */, "CORE", 23254),
  [85918 /* TON_MAINNET */]: GAS(85918 /* TON_MAINNET */, "TON", 11419, 9),
  [85919 /* TON_TESTNET */]: GAS(85919 /* TON_TESTNET */, "TON", 11419, 9),
  [167e3 /* TAIKO_MAINNET */]: GAS(167e3 /* TAIKO_MAINNET */, "ETH", 1027),
  [1329 /* SEI_EVM_MAINNET */]: GAS(1329 /* SEI_EVM_MAINNET */, "SEI", 23149),
  [7e3 /* ZETACHAIN_MAINNET */]: GAS(7e3 /* ZETACHAIN_MAINNET */, "ZETA", 21259),
  [25 /* CRONOS_MAINNET */]: GAS(25 /* CRONOS_MAINNET */, "CRO", 3635),
  [252 /* FRAXTAL_MAINNET */]: GAS(252 /* FRAXTAL_MAINNET */, "FRAX", 6952),
  [1625 /* GRAVITY_MAINNET */]: GAS(1625 /* GRAVITY_MAINNET */, "G", 32120),
  [223 /* BSQUARED_MAINNET */]: GAS(223 /* BSQUARED_MAINNET */, "BTC", 1),
  [388 /* CRONOS_ZK_MAINNET */]: GAS(388 /* CRONOS_ZK_MAINNET */, "zkCRO", 33873),
  [2818 /* MORPH_MAINNET */]: GAS(2818 /* MORPH_MAINNET */, "ETH", 1027),
  [5426 /* SOLANA_MAINNET */]: GAS(5426 /* SOLANA_MAINNET */, "SOL", 5426, 9),
  [2345 /* GOAT_MAINNET */]: GAS(2345 /* GOAT_MAINNET */, "BTC", 1),
  [146 /* SONIC_MAINNET */]: GAS(146 /* SONIC_MAINNET */, "S", 32684),
  [2741 /* ABSTRACT_MAINNET */]: GAS(2741 /* ABSTRACT_MAINNET */, "ETH", 1027),
  [100 /* GNOSIS_MAINNET */]: GAS(100 /* GNOSIS_MAINNET */, "xDAI", 8635),
  [80094 /* BERACHAIN_MAINNET */]: GAS(80094 /* BERACHAIN_MAINNET */, "BERA", 24647),
  [130 /* UNICHAIN_MAINNET */]: GAS(130 /* UNICHAIN_MAINNET */, "ETH", 1027),
  [1868 /* SONEIUM_MAINNET */]: GAS(1868 /* SONEIUM_MAINNET */, "ETH", 1027),
  [204 /* OPBNB_MAINNET */]: GAS(204 /* OPBNB_MAINNET */, "BNB", 1839),
  [999 /* HYPERLIQUID_MAINNET */]: GAS(999 /* HYPERLIQUID_MAINNET */, "HYPE", 32196),
  [747474 /* KATANA_MAINNET */]: GAS(747474 /* KATANA_MAINNET */, "ETH", 1027),
  [33139 /* APECHAIN_MAINNET */]: GAS(33139 /* APECHAIN_MAINNET */, "APE", 18876),
  [9745 /* PLASMA_MAINNET */]: GAS(9745 /* PLASMA_MAINNET */, "XPL", 36645)
};

// src/entities/trade.ts
var import_tiny_invariant8 = __toESM(require("tiny-invariant"));
function computePriceImpact(midPrice, inputAmount, outputAmount) {
  const exactQuote = midPrice.raw.multiply(inputAmount.raw);
  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);
  return new Percent(slippage.numerator, slippage.denominator);
}
function inputOutputComparator(a, b) {
  (0, import_tiny_invariant8.default)(tokenEquals(a.inputAmount.token, b.inputAmount.token), "INPUT_CURRENCY");
  (0, import_tiny_invariant8.default)(tokenEquals(a.outputAmount.token, b.outputAmount.token), "OUTPUT_CURRENCY");
  if (a.outputAmount.equalTo(b.outputAmount)) {
    if (a.inputAmount.equalTo(b.inputAmount)) {
      return 0;
    }
    if (a.inputAmount.lessThan(b.inputAmount)) {
      return -1;
    } else {
      return 1;
    }
  } else {
    if (a.outputAmount.lessThan(b.outputAmount)) {
      return 1;
    } else {
      return -1;
    }
  }
}
function tradeComparator(a, b) {
  const ioComp = inputOutputComparator(a, b);
  if (ioComp !== 0) {
    return ioComp;
  }
  if (a.priceImpact.lessThan(b.priceImpact)) {
    return -1;
  } else if (a.priceImpact.greaterThan(b.priceImpact)) {
    return 1;
  }
  return a.route.path.length - b.route.path.length;
}
function wrappedAmount(tokenAmount) {
  return tokenAmount.token.isNative ? new TokenAmount(WETH[tokenAmount.token.chainId], tokenAmount.raw) : tokenAmount;
}
function wrappedToken(token) {
  return token.isNative ? WETH[token.chainId] : token;
}
var Trade = class _Trade {
  /**
   * Constructs an exact in trade with the given amount in and route
   * @param route route of the exact in trade
   * @param amountIn the amount being passed in
   */
  static exactIn(route, amountIn) {
    return new _Trade(route, amountIn, 0 /* EXACT_INPUT */);
  }
  /**
   * Constructs an exact out trade with the given amount out and route
   * @param route route of the exact out trade
   * @param amountOut the amount returned by the trade
   */
  static exactOut(route, amountOut) {
    return new _Trade(route, amountOut, 1 /* EXACT_OUTPUT */);
  }
  constructor(route, amount, tradeType) {
    const amounts = new Array(route.path.length);
    const nextPairs = new Array(route.pairs.length);
    if (tradeType === 0 /* EXACT_INPUT */) {
      (0, import_tiny_invariant8.default)(tokenEquals(amount.token, route.input), "INPUT");
      amounts[0] = wrappedAmount(amount);
      for (let i = 0; i < route.path.length - 1; i++) {
        const pair = route.pairs[i];
        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i]);
        amounts[i + 1] = outputAmount;
        nextPairs[i] = nextPair;
      }
    } else {
      (0, import_tiny_invariant8.default)(tokenEquals(amount.token, route.output), "OUTPUT");
      amounts[amounts.length - 1] = wrappedAmount(amount);
      for (let i = route.path.length - 1; i > 0; i--) {
        const pair = route.pairs[i - 1];
        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i]);
        amounts[i - 1] = inputAmount;
        nextPairs[i - 1] = nextPair;
      }
    }
    this.route = route;
    this.tradeType = tradeType;
    this.inputAmount = tradeType === 0 /* EXACT_INPUT */ ? amount : new TokenAmount(route.input, amounts[0].raw);
    this.outputAmount = tradeType === 1 /* EXACT_OUTPUT */ ? amount : new TokenAmount(route.output, amounts[amounts.length - 1].raw);
    this.executionPrice = new Price(
      this.inputAmount.token,
      this.outputAmount.token,
      this.inputAmount.raw,
      this.outputAmount.raw
    );
    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));
    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);
  }
  /**
   * Get the minimum amount that must be received from this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */
  minimumAmountOut(slippageTolerance) {
    (0, import_tiny_invariant8.default)(!slippageTolerance.lessThan(ZERO), "SLIPPAGE_TOLERANCE");
    if (this.tradeType === 1 /* EXACT_OUTPUT */) {
      return this.outputAmount;
    } else {
      const slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;
      return new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut);
    }
  }
  /**
   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */
  maximumAmountIn(slippageTolerance) {
    (0, import_tiny_invariant8.default)(!slippageTolerance.lessThan(ZERO), "SLIPPAGE_TOLERANCE");
    if (this.tradeType === 0 /* EXACT_INPUT */) {
      return this.inputAmount;
    } else {
      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;
      return new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn);
    }
  }
  /**
   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token
   * amount to an output token, making at most `maxHops` hops.
   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting
   * the amount in among multiple routes.
   * @param pairs the pairs to consider in finding the best trade
   * @param tokenAmountIn exact amount of input token to spend
   * @param tokenOut the desired token out
   * @param maxNumResults maximum number of results to return
   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair
   * @param currentPairs used in recursion; the current list of pairs
   * @param originalAmountIn used in recursion; the original value of the tokenAmountIn parameter
   * @param bestTrades used in recursion; the current list of best trades
   */
  static bestTradeExactIn(pairs, tokenAmountIn, tokenOut, { maxNumResults = 3, maxHops = 3 } = {}, currentPairs = [], originalAmountIn = tokenAmountIn, bestTrades = []) {
    (0, import_tiny_invariant8.default)(pairs.length > 0, "PAIRS");
    (0, import_tiny_invariant8.default)(maxHops > 0, "MAX_HOPS");
    (0, import_tiny_invariant8.default)(originalAmountIn === tokenAmountIn || currentPairs.length > 0, "INVALID_RECURSION");
    const amountIn = wrappedAmount(tokenAmountIn);
    for (let i = 0; i < pairs.length; i++) {
      const pair = pairs[i];
      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token))
        continue;
      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO))
        continue;
      let amountOut;
      try {
        ;
        [amountOut] = pair.getOutputAmount(amountIn);
      } catch (error) {
        if (error.isInsufficientInputAmountError) {
          continue;
        }
        throw error;
      }
      if (amountOut.token.equals(wrappedToken(tokenOut))) {
        sortedInsert(
          bestTrades,
          new _Trade(
            new Route([...currentPairs, pair], originalAmountIn.token, tokenOut),
            originalAmountIn,
            0 /* EXACT_INPUT */
          ),
          maxNumResults,
          tradeComparator
        );
      } else if (maxHops > 1 && pairs.length > 1) {
        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));
        _Trade.bestTradeExactIn(
          pairsExcludingThisPair,
          amountOut,
          tokenOut,
          {
            maxNumResults,
            maxHops: maxHops - 1
          },
          [...currentPairs, pair],
          originalAmountIn,
          bestTrades
        );
      }
    }
    return bestTrades;
  }
  /**
   * similar to the above method but instead targets a fixed output amount
   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token
   * to an output token amount, making at most `maxHops` hops
   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting
   * the amount in among multiple routes.
   * @param pairs the pairs to consider in finding the best trade
   * @param tokenIn the token to spend
   * @param tokenAmountOut the exact amount of token out
   * @param maxNumResults maximum number of results to return
   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair
   * @param currentPairs used in recursion; the current list of pairs
   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter
   * @param bestTrades used in recursion; the current list of best trades
   */
  static bestTradeExactOut(pairs, tokenIn, tokenAmountOut, { maxNumResults = 3, maxHops = 3 } = {}, currentPairs = [], originalAmountOut = tokenAmountOut, bestTrades = []) {
    (0, import_tiny_invariant8.default)(pairs.length > 0, "PAIRS");
    (0, import_tiny_invariant8.default)(maxHops > 0, "MAX_HOPS");
    (0, import_tiny_invariant8.default)(originalAmountOut === tokenAmountOut || currentPairs.length > 0, "INVALID_RECURSION");
    const amountOut = wrappedAmount(tokenAmountOut);
    for (let i = 0; i < pairs.length; i++) {
      const pair = pairs[i];
      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token))
        continue;
      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO))
        continue;
      let amountIn;
      try {
        ;
        [amountIn] = pair.getInputAmount(amountOut);
      } catch (error) {
        if (error.isInsufficientReservesError) {
          continue;
        }
        throw error;
      }
      if (amountIn.token.equals(wrappedToken(tokenIn))) {
        sortedInsert(
          bestTrades,
          new _Trade(
            new Route([pair, ...currentPairs], tokenIn, originalAmountOut.token),
            originalAmountOut,
            1 /* EXACT_OUTPUT */
          ),
          maxNumResults,
          tradeComparator
        );
      } else if (maxHops > 1 && pairs.length > 1) {
        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));
        _Trade.bestTradeExactOut(
          pairsExcludingThisPair,
          tokenIn,
          amountIn,
          {
            maxNumResults,
            maxHops: maxHops - 1
          },
          [pair, ...currentPairs],
          originalAmountOut,
          bestTrades
        );
      }
    }
    return bestTrades;
  }
};

// src/entities/profiler.ts
var Profiler = class {
  constructor() {
    const now = Date.now();
    this.start = now;
    this.stop = now;
    this.list = [];
  }
  tick(name) {
    const now = Date.now();
    this.list.push({
      name,
      start: this.stop,
      stop: now
    });
    this.stop = now;
  }
  toString() {
    const list = this.list.map((i) => {
      return { ...i, duration: i.stop - i.start };
    });
    list.push({
      name: "TOTAL",
      start: this.start,
      stop: this.stop,
      duration: this.stop - this.start
    });
    return list.filter((i) => i.duration > 1);
  }
};

// src/router.ts
var import_tiny_invariant9 = __toESM(require("tiny-invariant"));
function toHex(tokenAmount) {
  return `0x${tokenAmount.raw.toString(16)}`;
}
var ZERO_HEX = "0x0";
var Router = class {
  /**
   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.
   * @param trade to produce call parameters for
   * @param options options for the call parameters
   */
  static swapCallParameters(trade, options) {
    (0, import_tiny_invariant9.default)(!(trade.inputAmount.token.isNative && trade.outputAmount.token.isNative), "ETHER_IN_OUT");
    (0, import_tiny_invariant9.default)(options.ttl > 0, "TTL");
    const to = validateAndParseAddress(options.recipient);
    const amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));
    const amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));
    let path;
    if (trade.inputAmount.token.chainId === 2222 /* KAVA_MAINNET */) {
      const routes = [];
      for (let i = 0; i < trade.route.path.length - 1; i++) {
        routes.push({
          from: trade.route.path[i].address,
          to: trade.route.path[i + 1].address,
          stable: false
        });
      }
      path = routes;
    } else {
      path = trade.route.path.map((token) => token.address);
    }
    const deadline = `0x${(Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3) + options.ttl).toString(16)}`;
    const useFeeOnTransfer = Boolean(options.feeOnTransfer);
    const hasReferrer = [34443 /* MODE_MAINNET */, 999 /* HYPERLIQUID_MAINNET */].includes(
      trade.outputAmount.token.chainId
    );
    let methodName;
    let args;
    let value;
    let offset;
    let minReceivedOffset;
    switch (trade.tradeType) {
      case 0 /* EXACT_INPUT */:
        if (trade.inputAmount.token.isNative) {
          methodName = "swapExactETHForTokens";
          args = [amountOut, path, to, deadline];
          if (useFeeOnTransfer) {
            methodName = "swapExactETHForTokensSupportingFeeOnTransferTokens";
            if (hasReferrer) {
              args = [amountOut, path, to, to, deadline];
            }
          }
          value = amountIn;
          offset = 0;
          minReceivedOffset = 36;
        } else if (trade.outputAmount.token.isNative) {
          methodName = "swapExactTokensForETH";
          args = [amountIn, amountOut, path, to, deadline];
          if (useFeeOnTransfer) {
            methodName = "swapExactTokensForETHSupportingFeeOnTransferTokens";
            if (hasReferrer) {
              args = [amountIn, amountOut, path, to, to, deadline];
            }
          }
          value = ZERO_HEX;
          offset = 36;
          minReceivedOffset = 68;
        } else {
          methodName = "swapExactTokensForTokens";
          args = [amountIn, amountOut, path, to, deadline];
          if (useFeeOnTransfer) {
            methodName = "swapExactTokensForTokensSupportingFeeOnTransferTokens";
            if (hasReferrer) {
              args = [amountIn, amountOut, path, to, to, deadline];
            }
          }
          value = ZERO_HEX;
          offset = 36;
          minReceivedOffset = 68;
        }
        break;
      case 1 /* EXACT_OUTPUT */:
        (0, import_tiny_invariant9.default)(!useFeeOnTransfer, "EXACT_OUT_FOT");
        if (trade.inputAmount.token.isNative) {
          methodName = "swapETHForExactTokens";
          args = [amountOut, path, to, deadline];
          value = amountIn;
          offset = 0;
          minReceivedOffset = 0;
        } else if (trade.outputAmount.token.isNative) {
          methodName = "swapTokensForExactETH";
          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
          offset = 68;
          minReceivedOffset = 0;
        } else {
          methodName = "swapTokensForExactTokens";
          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
          offset = 68;
          minReceivedOffset = 0;
        }
        break;
    }
    return {
      methodName,
      args,
      value,
      offset,
      minReceivedOffset
    };
  }
};

// src/crosschain/symbiosis.ts
var import_providers = require("@ethersproject/providers");
var import_ethers60 = require("ethers");
var import_isomorphic_unfetch2 = __toESM(require("isomorphic-unfetch"));
var import_jsbi17 = __toESM(require("jsbi"));
var import_tronweb4 = __toESM(require("tronweb"));

// src/crosschain/contracts/factories/AdaRouter__factory.ts
var import_ethers2 = require("ethers");
var _abi = [
  {
    type: "constructor",
    stateMutability: "nonpayable",
    inputs: [
      {
        type: "address",
        name: "_factory",
        internalType: "address"
      },
      {
        type: "address",
        name: "_WADA",
        internalType: "address"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address"
      }
    ],
    name: "WADA",
    inputs: []
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountB",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      }
    ],
    name: "addLiquidity",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "amountADesired",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountBDesired",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountAMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountBMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "payable",
    outputs: [
      {
        type: "uint256",
        name: "amountToken",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountADA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      }
    ],
    name: "addLiquidityADA",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "amountTokenDesired",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountADAMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address"
      }
    ],
    name: "factory",
    inputs: []
  },
  {
    type: "function",
    stateMutability: "pure",
    outputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      }
    ],
    name: "getAmountIn",
    inputs: [
      {
        type: "uint256",
        name: "amountOut",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "reserveIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "reserveOut",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "pure",
    outputs: [
      {
        type: "uint256",
        name: "amountOut",
        internalType: "uint256"
      }
    ],
    name: "getAmountOut",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "reserveIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "reserveOut",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "getAmountsIn",
    inputs: [
      {
        type: "uint256",
        name: "amountOut",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "getAmountsOut",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "pure",
    outputs: [
      {
        type: "uint256",
        name: "amountB",
        internalType: "uint256"
      }
    ],
    name: "quote",
    inputs: [
      {
        type: "uint256",
        name: "amountA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "reserveA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "reserveB",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountB",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidity",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountAMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountBMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountToken",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountADA",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityADA",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountADAMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountADA",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityADASupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountADAMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountToken",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountADA",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityADAWithPermit",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountADAMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      },
      {
        type: "bool",
        name: "approveMax",
        internalType: "bool"
      },
      {
        type: "uint8",
        name: "v",
        internalType: "uint8"
      },
      {
        type: "bytes32",
        name: "r",
        internalType: "bytes32"
      },
      {
        type: "bytes32",
        name: "s",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountADA",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityADAWithPermitSupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountADAMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      },
      {
        type: "bool",
        name: "approveMax",
        internalType: "bool"
      },
      {
        type: "uint8",
        name: "v",
        internalType: "uint8"
      },
      {
        type: "bytes32",
        name: "r",
        internalType: "bytes32"
      },
      {
        type: "bytes32",
        name: "s",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountB",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityWithPermit",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountAMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountBMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      },
      {
        type: "bool",
        name: "approveMax",
        internalType: "bool"
      },
      {
        type: "uint8",
        name: "v",
        internalType: "uint8"
      },
      {
        type: "bytes32",
        name: "r",
        internalType: "bytes32"
      },
      {
        type: "bytes32",
        name: "s",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "payable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapADAForExactTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountOut",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "payable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapExactADAForTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "payable",
    outputs: [],
    name: "swapExactADAForTokensSupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapExactTokensForADA",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "swapExactTokensForADASupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapExactTokensForTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapTokensForExactADA",
    inputs: [
      {
        type: "uint256",
        name: "amountOut",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountInMax",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapTokensForExactTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountOut",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountInMax",
        internalType: "uint256"
      },
      {
        type: "address[]",
        name: "path",
        internalType: "address[]"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "receive",
    stateMutability: "payable"
  }
];
var AdaRouter__factory = class {
  static createInterface() {
    return new import_ethers2.utils.Interface(_abi);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers2.Contract(address2, _abi, signerOrProvider);
  }
};
AdaRouter__factory.abi = _abi;

// src/crosschain/contracts/factories/AvaxRouter__factory.ts
var import_ethers3 = require("ethers");
var _abi2 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_WAVAX",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "WAVAX",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAXMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquidityAVAX",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256"
      }
    ],
    name: "getAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256"
      }
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      }
    ],
    name: "getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      }
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256"
      }
    ],
    name: "quote",
    outputs: [
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAXMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityAVAX",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAX",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAXMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityAVAXSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountAVAX",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAXMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityAVAXWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAX",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAXMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountAVAX",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapAVAXForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactAVAXForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactAVAXForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForAVAX",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForAVAXSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactAVAX",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var AvaxRouter__factory = class {
  static createInterface() {
    return new import_ethers3.utils.Interface(_abi2);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers3.Contract(address2, _abi2, signerOrProvider);
  }
};
AvaxRouter__factory.abi = _abi2;

// src/crosschain/contracts/factories/BranchedUnlocker__factory.ts
var import_ethers4 = require("ethers");
var _abi3 = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "condition",
        type: "bytes"
      }
    ],
    name: "decodeCondition",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IDepositUnlocker",
                name: "unlocker",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "condition",
                type: "bytes"
              }
            ],
            internalType: "struct DepositoryTypes.Unlocker[]",
            name: "unlockers",
            type: "tuple[]"
          }
        ],
        internalType: "struct BranchedUnlocker.Condition",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IDepositUnlocker",
                name: "unlocker",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "condition",
                type: "bytes"
              }
            ],
            internalType: "struct DepositoryTypes.Unlocker[]",
            name: "unlockers",
            type: "tuple[]"
          }
        ],
        internalType: "struct BranchedUnlocker.Condition",
        name: "c",
        type: "tuple"
      }
    ],
    name: "encodeCondition",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "index",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "solution",
            type: "bytes"
          }
        ],
        internalType: "struct BranchedUnlocker.Solution",
        name: "s",
        type: "tuple"
      }
    ],
    name: "encodeSolution",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMetaRouter",
        name: "metarouter",
        type: "address"
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256"
          }
        ],
        internalType: "struct DepositoryTypes.Deposit",
        name: "deposit",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "condition",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "solution",
        type: "bytes"
      }
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode = "0x608060405234601957604051610dcf61001f8239610dcf90f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806322c0bff814610052578063760bd1181461004d57806385a600c7146100485763b11e07ce03610092576103c7565b61036c565b6102ff565b61014e565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b73ffffffffffffffffffffffffffffffffffffffff81165b0361009257565b600080fd5b905035906100a482610073565b565b908160609103126100925790565b909182601f830112156100925781359167ffffffffffffffff831161009257602001926001830284011161009257565b919060c083820312610092576100fa8184610097565b9261010882602083016100a6565b92608082013567ffffffffffffffff811161009257836101299184016100b4565b92909360a082013567ffffffffffffffff81116100925761014a92016100b4565b9091565b346100925761016d6101613660046100e4565b949390939291926107b7565b60405180805b0390f35b9060208282031261009257813567ffffffffffffffff81116100925761014a92016100b4565b6100576100706100709273ffffffffffffffffffffffffffffffffffffffff1690565b6100709061019d565b610070906101c0565b6101db906101c9565b9052565b60005b8381106101f25750506000910152565b81810151838201526020016101e2565b61022361022c60209361023693610217815190565b80835293849260200190565b958691016101df565b601f01601f191690565b0190565b6100709160206040820192610257600082015160008501906101d2565b0151906020818403910152610202565b906100709161023a565b9061028761027d835190565b8083529160200190565b90816102996020830284019460200190565b926000915b8383106102ad57505050505090565b909192939460206102d06102c983856001950387528951610267565b9760200190565b930193019193929061029e565b516020808352610070920190610271565b6020808252610070929101906102dd565b346100925761017361031b610315366004610177565b90610a2f565b604051918291826102ee565b908160209103126100925790565b9060208282031261009257813567ffffffffffffffff8111610092576100709201610327565b602080825261007092910190610202565b3461009257610173610387610382366004610335565b610bd7565b6040519182918261035b565b908160409103126100925790565b9060208282031261009257813567ffffffffffffffff8111610092576100709201610393565b34610092576101736103876103dd3660046103a1565b610c2e565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761041a57604052565b6103e2565b906100a461042c60405190565b92836103f8565b67ffffffffffffffff811161041a57602090601f01601f19160190565b9061046261045d83610433565b61041f565b918252565b6104716023610450565b7f4272616e63686564556e6c6f636b65722e756e6c6f636b286d657461726f757460208201527f6572290000000000000000000000000000000000000000000000000000000000604082015290565b610070610467565b6104d26029610450565b7f4272616e63686564556e6c6f636b65722e756e6c6f636b28756e6c6f636b657260208201527f732e6c656e677468290000000000000000000000000000000000000000000000604082015290565b6100706104c8565b8061008b565b905035906100a482610529565b90826000939282370152565b9092919261055861045d82610433565b9381855281830111610092576100a491602085019061053c565b9080601f830112156100925781602061007093359101610548565b919091604081840312610092576105a4604061041f565b926105af818361052f565b8452602082013567ffffffffffffffff8111610092576105cf9201610572565b6020830152565b9060208282031261009257813567ffffffffffffffff811161009257610070920161058d565b610606601e610450565b7f4272616e63686564556e6c6f636b65722e756e6c6f636b28696e646578290000602082015290565b6100706105fc565b1561063e57565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4272616e63686564556e6c6f636b65723a20696e76616c6964206c6f636b206960448201527f6e646578000000000000000000000000000000000000000000000000000000006064820152608490fd5b634e487b7160e01b600052603260045260246000fd5b906106e1825190565b8110156106f2576020809102010190565b6106c2565b600091031261009257565b50610070906020810190610097565b5061007090602081019061052f565b9060406107616100a49361074161073a6000830183610702565b85906101d2565b6107586107516020830183610711565b6020860152565b82810190610711565b910152565b929061079d91610790610070969461078660c088019460008901906101d2565b6020870190610720565b8482036080860152610202565b9160a0818403910152610202565b6040513d6000823e3d90fd5b9360006107e5610808939795610852956107e06107d38a6101c9565b6107db6104c0565b610c84565b610a2f565b01936108006107f386515190565b6107fb610521565b610d00565b8101906105d6565b91829061084c9061082261081a845190565b6107fb61062f565b61084661082d845190565b61084061083c61007085515190565b9190565b10610637565b51915190565b906106d8565b5160208061087c610877845173ffffffffffffffffffffffffffffffffffffffff1690565b6101c9565b92015192015193813b1561009257600080946108cd61089a60405190565b978896879586947f22c0bff800000000000000000000000000000000000000000000000000000000865260048601610766565b03925af180156108f6576108de5750565b6100a49060006108ee81836103f8565b8101906106f7565b6107ab565b610070602061041f565b61090d6108fb565b9060608252565b610070610905565b67ffffffffffffffff811161041a5760208091020190565b9190916040818403126100925761094b604061041f565b926105af8183610097565b92919061096561045d8261091c565b93818552602080860192028101918383116100925781905b83821061098b575050505050565b813567ffffffffffffffff8111610092576020916109ac8784938701610934565b81520191019061097d565b9080601f830112156100925781602061007093359101610956565b919091602081840312610092576109e9602061041f565b92813567ffffffffffffffff811161009257610a0592016109b7565b8252565b9060208282031261009257813567ffffffffffffffff81116100925761007092016109d2565b61007091610a3b610914565b50810190610a09565b9035601e19368390030181121561009257016020813591019167ffffffffffffffff821161009257602082023603831361009257565b9035601e19368390030181121561009257016020813591019167ffffffffffffffff82116100925736829003831361009257565b919061022c81610ac5816102369560209181520190565b809561053c565b610070916040810191610af790610aed610ae68280610702565b84906101d2565b6020810190610a7a565b916020818503910152610aae565b9061007091610acc565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc13683900301811215610092570190565b818352916020019081610b586020830284019490565b92836000925b848410610b6e5750505050505090565b9091929394956020610b9a610b938385600195038852610b8e8b88610b0f565b610b05565b9860200190565b940194019294939190610b5e565b610070916020810191610bbb9080610a44565b828403909252610b42565b602080825261007092910190610ba8565b610070610be360405190565b8092610bf3602083019182610bc6565b908103825203826103f8565b610070916040810191610af790610aed610c198280610711565b8452565b602080825261007092910190610bff565b610070610c3a60405190565b8092610bf3602083019182610c1d565b92916020610c676100a49360408701908782036000890152610202565b94019073ffffffffffffffffffffffffffffffffffffffff169052565b90610cd96100a492610cca610c9860405190565b9384926004602085017f319af33300000000000000000000000000000000000000000000000000000000815201610c4a565b602082018103825203826103f8565b610d46565b92916020610cfb6100a49360408701908782036000890152610202565b940152565b90610cd96100a492610cca610d1460405190565b9384926004602085017fb60e72cc00000000000000000000000000000000000000000000000000000000815201610cde565b6100a4906001610d89565b60008091610d676a636f6e736f6c652e6c6f6790565b602082519201905afa50565b634e487b7160e01b600052605160045260246000fd5b600103610d73576100a490610d5156fea26469706673582212203e02bdb89b19af3985597dc789722aba465c74d7612678e9e4cc247c6763de1a64736f6c634300081c0033";
var isSuperArgs = (xs) => xs.length > 1;
var BranchedUnlocker__factory = class extends import_ethers4.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs(args)) {
      __super(...args);
    } else {
      __super(_abi3, _bytecode, args[0]);
    }
    this.contractName = "BranchedUnlocker";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers4.utils.Interface(_abi3);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers4.Contract(address2, _abi3, signerOrProvider);
  }
};
BranchedUnlocker__factory.bytecode = _bytecode;
BranchedUnlocker__factory.abi = _abi3;

// src/crosschain/contracts/factories/Bridge__factory.ts
var import_ethers5 = require("ethers");
var _abi4 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldMPC",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newMPC",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "effectiveTime",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainId",
        type: "uint256"
      }
    ],
    name: "LogChangeMPC",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "bridge",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "callData",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiveSide",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "oppositeBridge",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainId",
        type: "uint256"
      }
    ],
    name: "OracleRequest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "admin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "permission",
        type: "bool"
      }
    ],
    name: "SetAdminPermission",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "transmitter",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "status",
        type: "bool"
      }
    ],
    name: "SetTransmitterStatus",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newMPC",
        type: "address"
      }
    ],
    name: "changeMPC",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newMPC",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes"
      }
    ],
    name: "changeMPCSigned",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "currentChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_mpc",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "isTransmitter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "mpc",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "newMPC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "newMPCEffectiveTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "oldMPC",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_callData",
        type: "bytes"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      }
    ],
    name: "receiveRequestV2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_callData",
        type: "bytes"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes"
      }
    ],
    name: "receiveRequestV2Signed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address"
      },
      {
        internalType: "bool",
        name: "_permission",
        type: "bool"
      }
    ],
    name: "setAdminPermission",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_transmitter",
        type: "address"
      },
      {
        internalType: "bool",
        name: "_status",
        type: "bool"
      }
    ],
    name: "setTransmitterStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_callData",
        type: "bytes"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256"
      }
    ],
    name: "transmitRequestV2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "withdrawFee",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode2 = "";
var isSuperArgs2 = (xs) => xs.length > 1;
var Bridge__factory = class extends import_ethers5.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs2(args)) {
      __super(...args);
    } else {
      __super(_abi4, _bytecode2, args[0]);
    }
    this.contractName = "Bridge";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers5.utils.Interface(_abi4);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers5.Contract(address2, _abi4, signerOrProvider);
  }
};
Bridge__factory.bytecode = _bytecode2;
Bridge__factory.abi = _abi4;

// src/crosschain/contracts/factories/BtcRefundUnlocker__factory.ts
var import_ethers6 = require("ethers");
var _abi5 = [
  {
    inputs: [
      {
        internalType: "contract ISynthesis",
        name: "_synthesis",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "condition",
        type: "bytes"
      }
    ],
    name: "decodeCondition",
    outputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "refundAddress",
            type: "bytes"
          }
        ],
        internalType: "struct BtcRefundUnlocker.Condition",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "refundAddress",
            type: "bytes"
          }
        ],
        internalType: "struct BtcRefundUnlocker.Condition",
        name: "c",
        type: "tuple"
      }
    ],
    name: "encodeCondition",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "clientID",
            type: "bytes32"
          }
        ],
        internalType: "struct BtcRefundUnlocker.Solution",
        name: "s",
        type: "tuple"
      }
    ],
    name: "encodeSolution",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "synthesis",
    outputs: [
      {
        internalType: "contract ISynthesis",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMetaRouter",
        name: "metarouter",
        type: "address"
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256"
          }
        ],
        internalType: "struct DepositoryTypes.Deposit",
        name: "deposit",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "condition",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "solution",
        type: "bytes"
      }
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode3 = "0x60806040523461002a576100196100146100c2565b610136565b604051610b666101428239610b6690f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006657604052565b61002f565b9061007f61007860405190565b9283610045565b565b6001600160a01b031690565b90565b6001600160a01b0381160361002a57565b9050519061007f82610090565b9060208282031261002a5761008d916100a1565b61008d610ca8803803806100d58161006b565b9283398101906100ae565b61008d90610081906001600160a01b031682565b61008d906100e0565b61008d906100f4565b9061011661008d610132926100fd565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b61007f90600061010656fe6080604052600436101561001257600080fd5b60003560e01c806322c0bff8146100625780632af896fb1461005d578063760bd118146100585780638f4d03b4146100535763c9cd04dc0361008857610367565b61030c565b6102b1565b6101e7565b610144565b6001600160a01b031690565b90565b6001600160a01b0381165b0361008857565b600080fd5b9050359061009a82610076565b565b908160609103126100885790565b909182601f830112156100885781359167ffffffffffffffff831161008857602001926001830284011161008857565b919060c083820312610088576100f0818461008d565b926100fe826020830161009c565b92608082013567ffffffffffffffff8111610088578361011f9184016100aa565b92909360a082013567ffffffffffffffff81116100885761014092016100aa565b9091565b34610088576101636101573660046100da565b949390939291926105fa565b60405180805b0390f35b600091031261008857565b610073916008021c6001600160a01b031690565b906100739154610178565b61007360008061018c565b610067610073610073926001600160a01b031690565b610073906101a2565b610073906101b8565b6101d3906101c1565b9052565b60208101929161009a91906101ca565b34610088576101f736600461016d565b610169610202610197565b604051918291826101d7565b9060208282031261008857813567ffffffffffffffff81116100885761014092016100aa565b60005b8381106102475750506000910152565b8181015183820152602001610237565b61027861028160209361028b9361026c815190565b80835293849260200190565b95869101610234565b601f01601f191690565b0190565b516020808352610073920190610257565b60208082526100739291019061028f565b34610088576101696102cd6102c736600461020e565b90610865565b604051918291826102a0565b908160409103126100885790565b9060408282031261008857610073916102d9565b602080825261007392910190610257565b34610088576101696103276103223660046102e7565b6108c5565b604051918291826102fb565b908160209103126100885790565b9060208282031261008857813567ffffffffffffffff8111610088576100739201610333565b346100885761016961032761037d366004610341565b61098c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176103d357604052565b610382565b9061009a6103e560405190565b92836103b1565b80610081565b9050359061009a826103ec565b91906040838203126100885761042e90602061041b60406103d8565b9461042683826103f2565b8652016103f2565b6020830152565b9060408282031261008857610073916103ff565b67ffffffffffffffff81116103d357602090601f01601f19160190565b9061047861047383610449565b6103d8565b918252565b6104876036610466565b7f427463526566756e64556e6c6f636b65722e756e6c6f636b2873796e7468657360208201527f69732c20737461626c654272696467696e674665652900000000000000000000604082015290565b61007361047d565b35610073816103ec565b3561007381610076565b61050b6105056100739263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b9061056861057a9161009a9698979561055b60809661055460a08801946000890152565b6020870152565b8482036040860152610257565b6001600160a01b039097166060830152565b0152565b6100736100736100739290565b6101d39061057e565b61009a946105d9829897956105c96080966105c26105e697600060a089019801906001600160a01b03169052565b60208c0152565b6001600160a01b031660408a0152565b8782036060890152610257565b94019061058b565b6040513d6000823e3d90fd5b9492610607919492610865565b91810161061391610435565b926106266000546001600160a01b031690565b61062f906101c1565b84929061063a845190565b6106426104d6565b9161064c926109dc565b60000193845161065b90610a36565b60200191610667835190565b61067090610a7b565b51926020810193610680856104de565b9551919361068d856104e8565b610696906101c1565b9051906106a663a0d955706104f2565b936106b060405190565b98899560208701908152600401946106c795610530565b6020820181038252036106da90856103b1565b6106e3906101c1565b906106ed906104e8565b6106f6906101c1565b91610700906104de565b906107136000546001600160a01b031690565b61071c906101c1565b91813b1561008857600080946107688261073560405190565b988997889687957f3add6d5a00000000000000000000000000000000000000000000000000000000875260048701610594565b03925af18015610791576107795750565b61009a90600061078981836103b1565b81019061016d565b6105ee565b61007360206103d8565b6107a8610796565b9060608252565b6100736107a0565b90826000939282370152565b909291926107d361047382610449565b93818552818301116100885761009a9160208501906107b7565b9080601f8301121561008857816020610073933591016107c3565b9190916020818403126100885761081f60206103d8565b92813567ffffffffffffffff81116100885761083b92016107ed565b8252565b9060208282031261008857813567ffffffffffffffff8111610088576100739201610808565b610073916108716107af565b5081019061083f565b506100739060208101906103f2565b9060206108b061009a936108a76108a3600083018361087a565b8552565b8281019061087a565b910152565b60408101929161009a9190610889565b6100736108d160405190565b80926108e16020830191826108b5565b908103825203826103b1565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368390030181121561008857016020813591019167ffffffffffffffff82116100885736829003831361008857565b9190610281816109568161028b9560209181520190565b80956107b7565b61007391602081019161097090806108ed565b82840390925261093f565b60208082526100739291019061095d565b61007361099860405190565b80926108e160208301918261097b565b60409061057a6109ca61009a9597969460608401908482036000860152610257565b6001600160a01b039097166020830152565b610a3190610a2261009a946109f060405190565b9485936004602086017f0d26b925000000000000000000000000000000000000000000000000000000008152016109a8565b602082018103825203826103b1565b610ac4565b610a22610a3161009a92610a4960405190565b9283916004602084017f0be77f56000000000000000000000000000000000000000000000000000000008152016102fb565b610a22610a3161009a92610a8e60405190565b9283916004602084017f27b7cf850000000000000000000000000000000000000000000000000000000081520190815260200190565b61009a906001610b20565b60008091610ae56a636f6e736f6c652e6c6f6790565b602082519201905afa50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600103610af15761009a90610acf56fea2646970667358221220befa6c80989dda29037019f8925cb4e457703ccce30d3e69ef927312f4f9503964736f6c634300081c0033";
var isSuperArgs3 = (xs) => xs.length > 1;
var BtcRefundUnlocker__factory = class extends import_ethers6.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs3(args)) {
      __super(...args);
    } else {
      __super(_abi5, _bytecode3, args[0]);
    }
    this.contractName = "BtcRefundUnlocker";
  }
  deploy(_synthesis, overrides) {
    return super.deploy(_synthesis, overrides || {});
  }
  getDeployTransaction(_synthesis, overrides) {
    return super.getDeployTransaction(_synthesis, overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers6.utils.Interface(_abi5);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers6.Contract(address2, _abi5, signerOrProvider);
  }
};
BtcRefundUnlocker__factory.bytecode = _bytecode3;
BtcRefundUnlocker__factory.abi = _abi5;

// src/crosschain/contracts/factories/Depository__factory.ts
var import_ethers7 = require("ethers");
var _abi6 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address"
      }
    ],
    name: "AddressEmptyCode",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "ERC1967InvalidImplementation",
    type: "error"
  },
  {
    inputs: [],
    name: "ERC1967NonPayable",
    type: "error"
  },
  {
    inputs: [],
    name: "FailedCall",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error"
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "OwnableInvalidOwner",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "SafeERC20FailedOperation",
    type: "error"
  },
  {
    inputs: [],
    name: "UUPSUnauthorizedCallContext",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "slot",
        type: "bytes32"
      }
    ],
    name: "UUPSUnsupportedProxiableUUID",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "DepositID",
        name: "depositID",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256"
          }
        ],
        indexed: false,
        internalType: "struct DepositoryTypes.Deposit",
        name: "deposit",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "contract IDepositUnlocker",
            name: "unlocker",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "condition",
            type: "bytes"
          }
        ],
        indexed: false,
        internalType: "struct DepositoryTypes.Unlocker",
        name: "unlocker",
        type: "tuple"
      }
    ],
    name: "DepositLocked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "DepositID",
        name: "depositID",
        type: "bytes32"
      }
    ],
    name: "DepositUnlocked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256"
          }
        ],
        internalType: "struct DepositoryTypes.Deposit",
        name: "d",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "contract IDepositUnlocker",
            name: "unlocker",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "condition",
            type: "bytes"
          }
        ],
        internalType: "struct DepositoryTypes.Unlocker",
        name: "u",
        type: "tuple"
      }
    ],
    name: "depositID",
    outputs: [
      {
        internalType: "DepositID",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "DepositID",
        name: "",
        type: "bytes32"
      }
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMetaRouter",
        name: "_metaRouter",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256"
          }
        ],
        internalType: "struct DepositoryTypes.Deposit",
        name: "deposit",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "contract IDepositUnlocker",
            name: "unlocker",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "condition",
            type: "bytes"
          }
        ],
        internalType: "struct DepositoryTypes.Unlocker",
        name: "unlocker",
        type: "tuple"
      }
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "metaRouter",
    outputs: [
      {
        internalType: "contract IMetaRouter",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256"
          }
        ],
        internalType: "struct DepositoryTypes.Deposit",
        name: "deposit",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "contract IDepositUnlocker",
            name: "unlocker",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "condition",
            type: "bytes"
          }
        ],
        internalType: "struct DepositoryTypes.Unlocker",
        name: "unlocker",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "solution",
        type: "bytes"
      }
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];
var _bytecode4 = "0x60a060405234602f57600e6034565b6040516118ed6100808239608051818181610eb501526110b301526118ed90f35b600080fd5b603a603c565b565b603a603a6073565b6056906059906001600160a01b031682565b90565b6001600160a01b031690565b6056906044565b6056906065565b607a30606c565b60805256fe6080604052600436101561001257600080fd5b60003560e01c80633d4dff7b146100d25780634f1ef286146100cd57806352d1902d146100c8578063595a5cd7146100c3578063715018a6146100be5780638da5cb5b146100b9578063ad3cb1cc146100b4578063b523051e146100af578063c4d66de8146100aa578063d2563133146100a5578063dbec15bb146100a05763f2fde38b036100e05761062a565b610603565b61057e565b610566565b610536565b6104d9565b6103df565b6103c7565b6103ab565b6102db565b6102b7565b610147565b805b036100e057565b600080fd5b905035906100f2826100d7565b565b906020828203126100e057610108916100e5565b90565b610108916008021c5b60ff1690565b90610108915461010b565b600061013e610108928290600052602052604060002090565b61011a565b9052565b346100e05761017461016261015d3660046100f4565b610125565b60405191829182901515815260200190565b0390f35b6001600160a01b031690565b6001600160a01b0381166100d9565b905035906100f282610184565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176101f157604052565b6101a0565b906100f261020360405190565b92836101cf565b67ffffffffffffffff81116101f157602090601f01601f19160190565b0190565b90826000939282370152565b9092919261024c6102478261020a565b6101f6565b93818552818301116100e0576100f291602085019061022b565b9080601f830112156100e05781602061010893359101610237565b9190916040818403126100e0576102988382610193565b92602082013567ffffffffffffffff81116100e0576101089201610266565b6102cb6102c5366004610281565b90610662565b604051005b60009103126100e057565b346100e0576102eb3660046102d0565b6101746102f66106bc565b6040519182918290815260200190565b908160609103126100e05790565b908160409103126100e05790565b909182601f830112156100e05781359167ffffffffffffffff83116100e05760200192600183028401116100e057565b9160a0838303126100e0576103678284610306565b92606081013567ffffffffffffffff81116100e05783610388918301610314565b92608082013567ffffffffffffffff81116100e0576103a79201610322565b9091565b346100e0576102cb6103be366004610352565b92919091610844565b346100e0576103d73660046102d0565b6102cb610998565b346100e0576103ef3660046102d0565b6101746103fa6109a0565b604051918291826001600160a01b03909116815260200190565b906104216102478361020a565b918252565b6104306005610414565b7f352e302e30000000000000000000000000000000000000000000000000000000602082015290565b610108610426565b610108610459565b610108610461565b60005b8381106104845750506000910152565b8181015183820152602001610474565b6104b56104be602093610227936104a9815190565b80835293849260200190565b95869101610471565b601f01601f191690565b602080825261010892910190610494565b346100e0576104e93660046102d0565b6101746104f4610469565b604051918291826104c8565b9190916080818403126100e0576105178382610306565b92606082013567ffffffffffffffff81116100e0576101089201610314565b346100e0576101746102f661054c366004610500565b906109d5565b906020828203126100e05761010891610193565b346100e0576102cb610579366004610552565b610c42565b346100e0576102cb610591366004610500565b90610d75565b610108916008021c6001600160a01b031690565b906101089154610597565b610108600060016105ab565b610178610108610108926001600160a01b031690565b610108906105c2565b610108906105d8565b610143906105e1565b6020810192916100f291906105ea565b346100e0576106133660046102d0565b61017461061e6105b6565b604051918291826105f3565b346100e0576102cb61063d366004610552565b610ea1565b906100f29161064f610eaa565b906100f29161065d81610f59565b610f83565b906100f291610642565b6101089061067861109d565b6106b3565b6101086101086101089290565b6101087f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61067d565b5061010861068a565b610108600061066c565b3561010881610184565b35610108816100d7565b6106e46027610414565b7f4465706f7369746f72792e756e6c6f636b28756e6c6f636b65722c206d65746160208201527f526f757465722900000000000000000000000000000000000000000000000000604082015290565b6101086106da565b903590601e1936829003018212156100e0570180359067ffffffffffffffff82116100e057602001913682900383136100e057565b50610108906020810190610193565b506101089060208101906100e5565b9060406107cf6100f2936107af6107a86000830183610770565b85906105ea565b6107c66107bf602083018361077f565b6020860152565b8281019061077f565b910152565b91906104be816107eb816102279560209181520190565b809561022b565b949293610108969461081d61082a9461081360c08a019560008b01906105ea565b602089019061078e565b86830360808801526107d4565b9260a08185039101526107d4565b6040513d6000823e3d90fd5b61084e8282611183565b61088661085a826106c6565b61087461086f6001546001600160a01b031690565b6105e1565b610880602085016106d0565b91611259565b6108c261086f836108bd61089a83836106c6565b6108af61086f6001546001600160a01b031690565b906108b8610733565b6112e4565b6106c6565b906108e36108d86001546001600160a01b031690565b93602081019061073b565b959093833b156100e0576109326000969287936108ff60405190565b998a98899788967f22c0bff8000000000000000000000000000000000000000000000000000000008852600488016107f2565b03925af1801561095b576109435750565b6100f290600061095381836101cf565b8101906102d0565b610838565b61096861133e565b6100f2610986565b6101786101086101089290565b61010890610970565b6100f2610993600061097d565b611394565b6100f2610960565b61010860007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b01546001600160a01b031690565b610108919061140d565b6101089060401c610114565b61010890546109df565b610108905b67ffffffffffffffff1690565b61010890546109f5565b6109fa6101086101089290565b9067ffffffffffffffff905b9181191691161790565b6109fa6101086101089267ffffffffffffffff1690565b90610a5b610108610a6292610a34565b8254610a1e565b9055565b9068ff00000000000000009060401b610a2a565b90610a8a610108610a6292151590565b8254610a66565b61014390610a11565b6020810192916100f29190610a91565b610ab2611454565b9081610acd610ac7610ac3836109eb565b1590565b91610a07565b90600092610ada84610a11565b67ffffffffffffffff84161480610bf9575b600193610b09610afb86610a11565b9167ffffffffffffffff1690565b149081610bd1575b155b9081610bc8575b50610b9a57610b439082610b3a86610b3187610a11565b98019788610a4b565b610b8b57610c26565b610b4c57505050565b610b7a610b86927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d294610a7a565b60405191829182610a9a565b0390a1565b610b958487610a7a565b610c26565b7ff92ee8a90000000000000000000000000000000000000000000000000000000084528380600481015b0390fd5b15905038610b1a565b9050610b13610bdf306105e1565b3b610bf0610bec8861067d565b9190565b14919050610b11565b5081610aec565b906001600160a01b0390610a2a565b90610c1f610108610a62926105e1565b8254610c00565b6100f290610c3333611471565b610c3b611482565b6001610c0f565b6100f290610aaa565b61010890610114565b6101089054610c4b565b15610c6557565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6465706f73697420616c726561647920657869737473000000000000000000006044820152606490fd5b9060ff90610a2a565b90610cdd610108610a6292151590565b8254610cc4565b9035601e1936839003018112156100e057016020813591019167ffffffffffffffff82116100e0573682900383136100e057565b610108916040810191610d4390610d39610d328280610770565b84906105ea565b6020810190610ce4565b9160208185039101526107d4565b9161010892610d686080820193600083019061078e565b6060818403910152610d18565b907fbb3817ab7fef6fba44a81e5959917aa992d92c518017cff2c8f68f7bc2a4ffc790610e15610da5828561140d565b610dce610db1866106c6565b610dba306105e1565b610dc6602089016106d0565b9133906114ae565b610df6610df1610ac3610dec84600090600052602052604060002090565b610c54565b610c5e565b6101086001610e1083600090600052602052604060002090565b610ccd565b92610e2b610e2260405190565b92839283610d51565b0390a2565b6100f290610e3c61133e565b6000610e478161097d565b6001600160a01b0381166001600160a01b03841614610e6b5750506100f290611394565b7f1e4fbdf70000000000000000000000000000000000000000000000000000000082526001600160a01b03166004820152602490fd5b6100f290610e30565b610eb3306105e1565b7f000000000000000000000000000000000000000000000000000000000000000090610ef06001600160a01b0383165b916001600160a01b031690565b14908115610f2b575b50610f0057565b7fe07c8dba000000000000000000000000000000000000000000000000000000006000908152600490fd5b9050610f48610ee3610f3b6114e4565b926001600160a01b031690565b141538610ef9565b506100f261133e565b6100f290610f50565b905051906100f2826100d7565b906020828203126100e05761010891610f62565b90610f9061086f836105e1565b906020610f9c60405190565b7f52d1902d00000000000000000000000000000000000000000000000000000000815292839060049082905afa6000928161106c575b5061101d5750506001610fe25750565b7f4c9c8ce30000000000000000000000000000000000000000000000000000000060009081526001600160a01b039091166004526024036000fd5b90929161102b61010861068a565b840361103c576100f29293506114f4565b7faa1d49a40000000000000000000000000000000000000000000000000000000060009081526004859052602490fd5b61108f91935060203d602011611096575b61108781836101cf565b810190610f6f565b9138610fd2565b503d61107d565b6110a6306105e1565b6110d86001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610ee3565b03610f0057565b156110e657565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6465706f736974206973206e6f7420617661696c61626c6500000000000000006044820152606490fd5b91906008610a2a91029161115960ff841b90565b921b90565b919061116f610108610a6293151590565b908354611145565b6100f29160009161115e565b6111cd916111909161140d565b61010860006111b46111af610dec858490600052602052604060002090565b6110df565b6111c8838290600052602052604060002090565b611177565b7f7365d0eabb56c257feb8a9eac21febe335838563118e4e5c6041062d0832b2236111f760405190565b8080610e2b565b6112176112116101089263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6001600160a01b0390911681526040810192916100f29160200152565b61129c60049261128d6100f29561127363a9059cbb6111fe565b9261127d60405190565b968794602086019081520161123c565b602082018103825203836101cf565b611560565b6040906112d56112c36100f29597969460608401908482036000860152610494565b6001600160a01b039097166020830152565b01906001600160a01b03169052565b6113399061132a6100f2946112f860405190565b9485936004602086017ffcec75e0000000000000000000000000000000000000000000000000000000008152016112a1565b602082018103825203826101cf565b611610565b6113466109a0565b339061135182610ee3565b036113595750565b7f118cdaa70000000000000000000000000000000000000000000000000000000060009081526001600160a01b039091166004526024036000fd5b6113dc6113d67f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930061086f846113d083546001600160a01b031690565b92610c0f565b916105e1565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061140760405190565b600090a3565b61143e6101089261143292611420600090565b50604051938492602084019283610d51565b908103825203826101cf565b611450611449825190565b9160200190565b2090565b610108611644565b6100f29061146861164c565b6100f290611694565b6100f29061145c565b6100f261164c565b6100f261147a565b6001600160a01b039182168152911660208201526060810192916100f29160400152565b9061129c9061128d6100f2956004956114ca6323b872dd6111fe565b936114d460405190565b978895602087019081520161148a565b61010860006109c761010861068a565b906114fe8261169d565b611507826105e1565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b61153160405190565b600090a28051611544610bec600061067d565b1115611556576115539161175c565b50565b50506100f2611701565b90600060209161156e600090565b50828151910182855af115610838573d90600051600092611591610bec8561067d565b036115fc57506115a0816105e1565b3b6115ad610bec8461067d565b145b6115b7575050565b610bc46115c483926105e1565b7f5274afe70000000000000000000000000000000000000000000000000000000083526001600160a01b031660048301526024820190565b611609610bec600161067d565b14156115af565b6100f29060016118a7565b6101087ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061067d565b61010861161b565b611657610ac36117a5565b61165d57565b7fd7e6bcf8000000000000000000000000000000000000000000000000000000006000908152600490fd5b6100f290610e3c61164c565b6100f290611688565b6000813b6116ad610bec8361067d565b146116c857906100f2916116c261010861068a565b01610c0f565b7f4c9c8ce30000000000000000000000000000000000000000000000000000000081526001600160a01b03919091166004820152602490fd5b600061170c8161067d565b34116117155750565b7fb398979f000000000000000000000000000000000000000000000000000000008152600490fd5b3d156117575761174c3d610414565b903d6000602084013e565b606090565b6000806101089361176b606090565b50602081519101845af461177d61173d565b916117b8565b600080916117996a636f6e736f6c652e6c6f6790565b602082519201905afa50565b61010860006117b2611454565b016109eb565b906117c35750611830565b8151906000916117d5610bec8461067d565b148061181b575b6117e557505090565b7f9996b3150000000000000000000000000000000000000000000000000000000082526001600160a01b03166004820152602490fd5b50803b61182a610bec8461067d565b146117dc565b8051600090611841610bec8361067d565b11156118505750805190602001fd5b7fd6bda275000000000000000000000000000000000000000000000000000000008152600490fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600103611878576100f29061178356fea264697066735822122012f2d86bc34732f6e7d59f5cd49ee8bd820509de917fae5c0dd87c6384fbc80364736f6c634300081c0033";
var isSuperArgs4 = (xs) => xs.length > 1;
var Depository__factory = class extends import_ethers7.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs4(args)) {
      __super(...args);
    } else {
      __super(_abi6, _bytecode4, args[0]);
    }
    this.contractName = "Depository";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers7.utils.Interface(_abi6);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers7.Contract(address2, _abi6, signerOrProvider);
  }
};
Depository__factory.bytecode = _bytecode4;
Depository__factory.abi = _abi6;

// src/crosschain/contracts/factories/DragonswapRouter__factory.ts
var import_ethers8 = require("ethers");
var _abi7 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_WSEI",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "WSEI",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountSEIMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquiditySEI",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountSEI",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256"
      }
    ],
    name: "getAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256"
      }
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      }
    ],
    name: "getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      }
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256"
      }
    ],
    name: "quote",
    outputs: [
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountSEIMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquiditySEI",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountSEI",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountSEIMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquiditySEISupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountSEI",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountSEIMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquiditySEIWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountSEI",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountSEIMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquiditySEIWithPermitSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountSEI",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactSEIForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactSEIForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForSEI",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForSEISupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapSEIForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactSEI",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var DragonswapRouter__factory = class {
  static createInterface() {
    return new import_ethers8.utils.Interface(_abi7);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers8.Contract(address2, _abi7, signerOrProvider);
  }
};
DragonswapRouter__factory.abi = _abi7;

// src/crosschain/contracts/factories/ERC20__factory.ts
var import_ethers9 = require("ethers");
var _abi8 = [
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [
      {
        name: "",
        type: "string"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_spender",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_from",
        type: "address"
      },
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [
      {
        name: "",
        type: "uint8"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        name: "_owner",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        name: "balance",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [
      {
        name: "",
        type: "string"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        name: "_owner",
        type: "address"
      },
      {
        name: "_spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  }
];
var ERC20__factory = class {
  static createInterface() {
    return new import_ethers9.utils.Interface(_abi8);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers9.Contract(address2, _abi8, signerOrProvider);
  }
};
ERC20__factory.abi = _abi8;

// src/crosschain/contracts/factories/Fabric__factory.ts
var import_ethers10 = require("ethers");
var _abi9 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "rToken",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainID",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "sToken",
        type: "address"
      }
    ],
    name: "RepresentationCreated",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_rtoken",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "_stokenName",
        type: "string"
      },
      {
        internalType: "string",
        name: "_stokenSymbol",
        type: "string"
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8"
      }
    ],
    name: "createRepresentationByAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_syntTokenAdr",
        type: "address"
      }
    ],
    name: "getRealRepresentation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_realTokenAdr",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      }
    ],
    name: "getSyntRepresentation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_key",
        type: "bytes32"
      }
    ],
    name: "getSyntRepresentationByKey",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_synthesis",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "synthesis",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_stoken",
        type: "address"
      }
    ],
    name: "synthesize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_stoken",
        type: "address"
      }
    ],
    name: "unsynthesize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode5 = "0x608060405234801561001057600080fd5b5061297a806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000d95760003560e01c80638da5cb5b116200008b578063e49029fc1162000062578063e49029fc1462000272578063e7ca9aaf14620002ab578063f2fde38b14620003fb57600080fd5b80638da5cb5b14620001fe578063a8160b761462000210578063c4d66de8146200024957600080fd5b8063506890a011620000c0578063506890a01462000146578063715018a614620001bd5780637cf8f32714620001c957600080fd5b8063161acb4714620000de5780632af896fb1462000132575b600080fd5b6200011660048036036020811015620000f657600080fd5b50356001600160a01b039081166000908152606760205260409020541690565b604080516001600160a01b039092168252519081900360200190f35b60655462000116906001600160a01b031681565b62000116600480360360408110156200015e57600080fd5b5060408051823560601b6bffffffffffffffffffffffff1916602082810191909152928301356034808301919091528251808303909101815260549091018252805190830120600090815260669092529020546001600160a01b031690565b620001c762000424565b005b6200011660048036036020811015620001e157600080fd5b50356000908152606660205260409020546001600160a01b031690565b6033546001600160a01b031662000116565b620001c7600480360360608110156200022857600080fd5b506001600160a01b0381358116916020810135916040909101351662000492565b620001c7600480360360208110156200026157600080fd5b50356001600160a01b031662000553565b620001c7600480360360608110156200028a57600080fd5b506001600160a01b0381358116916020810135916040909101351662000699565b620001c7600480360360a0811015620002c357600080fd5b6001600160a01b0382351691602081013591810190606081016040820135640100000000811115620002f457600080fd5b8201836020820111156200030757600080fd5b803590602001918460018302840111640100000000831117156200032a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156200037e57600080fd5b8201836020820111156200039157600080fd5b80359060200191846001830284011164010000000083111715620003b457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903560ff1691506200073c9050565b620001c7600480360360208110156200041357600080fd5b50356001600160a01b0316620007ae565b6033546001600160a01b03163314620004845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b62000490600062000896565b565b6065546001600160a01b03163314620004dd5760405162461bcd60e51b8152600401808060200182810382526021815260200180620028fb6021913960400191505060405180910390fd5b806001600160a01b0316639dc29fac84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156200053557600080fd5b505af11580156200054a573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16620005705760005460ff161562000574565b303b155b620005e85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016200047b565b600054610100900460ff161580156200062857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6200063262000900565b606580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841617905580156200069557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6065546001600160a01b03163314620006e45760405162461bcd60e51b8152600401808060200182810382526021815260200180620028fb6021913960400191505060405180910390fd5b806001600160a01b03166340c10f1984846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156200053557600080fd5b6033546001600160a01b03163314620007985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200047b565b620007a7858585858562000993565b5050505050565b6033546001600160a01b031633146200080a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200047b565b6001600160a01b038116620008885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200047b565b620008938162000896565b50565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166200097f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200047b565b6200098962000cb6565b6200049062000d35565b6001600160a01b038516620009ef576040805162461bcd60e51b815260206004820181905260248201527f53796d623a2072746f6b656e20697320746865207a65726f2061646472657373604482015290519081900360640190fd5b604080516bffffffffffffffffffffffff19606088901b16602080830191909152603480830188905283518084039091018152605490920183528151918101919091206000908152606690915220546001600160a01b0316801562000a865760405162461bcd60e51b81526004018080602001828103825260298152602001806200291c6029913960400191505060405180910390fd5b600084848460405162000a999062000dbf565b60ff82166040820152606080825284519082015283518190602080830191608084019188019080838360005b8381101562000adf57818101518382015260200162000ac5565b50505050905090810190601f16801562000b0d5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101562000b4257818101518382015260200162000b28565b50505050905090810190601f16801562000b705780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f08015801562000b95573d6000803e3d6000fd5b5090508660676000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060666000898960405160200180836001600160a01b031660601b81526014018281526020019250505060405160208183030381529060405280519060200120815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fe33e6b41ee9908e3919a380a52ae7059282c36b87adeee0d2ac1b05dfc50be6f87878360405180846001600160a01b03168152602001838152602001826001600160a01b03168152602001935050505060405180910390a150505050505050565b600054610100900460ff16620004905760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200047b565b600054610100900460ff1662000db45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016200047b565b620004903362000896565b611b2d8062000dce8339019056fe6101806040527f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9610140523480156200003757600080fd5b5060405162001b2d38038062001b2d8339810160408190526200005a9162000359565b6040518060400160405280600981526020016853796d62696f73697360b81b81525080604051806040016040528060018152602001603160f81b8152508585620000b3620000ad620001a860201b60201c565b620001ac565b8151620000c8906004906020850190620001fc565b508051620000de906005906020840190620001fc565b5050825160208085019190912083518483012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c0019052805194019390932091935091906080523060601b60c05261012052505050505060f81b7fff00000000000000000000000000000000000000000000000000000000000000166101605250620004319050565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200020a90620003de565b90600052602060002090601f0160209004810192826200022e576000855562000279565b82601f106200024957805160ff191683800117855562000279565b8280016001018555821562000279579182015b82811115620002795782518255916020019190600101906200025c565b50620002879291506200028b565b5090565b5b808211156200028757600081556001016200028c565b600082601f830112620002b457600080fd5b81516001600160401b0380821115620002d157620002d16200041b565b604051601f8301601f19908116603f01168101908282118183101715620002fc57620002fc6200041b565b816040528381526020925086838588010111156200031957600080fd5b600091505b838210156200033d57858201830151818301840152908201906200031e565b838211156200034f5760008385830101525b9695505050505050565b6000806000606084860312156200036f57600080fd5b83516001600160401b03808211156200038757600080fd5b6200039587838801620002a2565b94506020860151915080821115620003ac57600080fd5b50620003bb86828701620002a2565b925050604084015160ff81168114620003d357600080fd5b809150509250925092565b600181811c90821680620003f357607f821691505b602082108114156200041557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160601c60e0516101005161012051610140516101605160f81c6116906200049d60003960006101c30152600061074601526000610d3301526000610d8201526000610d5d01526000610cb601526000610ce001526000610d0a01526116906000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063a457c2d711610081578063d505accf11610066578063d505accf146102bd578063dd62ed3e146102d0578063f2fde38b1461030957600080fd5b8063a457c2d714610297578063a9059cbb146102aa57600080fd5b80638da5cb5b116100b25780638da5cb5b1461026157806395d89b411461027c5780639dc29fac1461028457600080fd5b8063715018a6146102465780637ecebe001461024e57600080fd5b8063313ce56711610124578063395093511161010957806339509351146101f557806340c10f191461020857806370a082311461021d57600080fd5b8063313ce567146101bc5780633644e515146101ed57600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd1461019757806323b872dd146101a9575b600080fd5b61015e61031c565b60405161016b9190611575565b60405180910390f35b61018761018236600461154b565b6103ae565b604051901515815260200161016b565b6003545b60405190815260200161016b565b6101876101b736600461149c565b6103c4565b60405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161016b565b61019b610488565b61018761020336600461154b565b610497565b61021b61021636600461154b565b6104d3565b005b61019b61022b366004611447565b6001600160a01b031660009081526001602052604090205490565b61021b61053b565b61019b61025c366004611447565b6105a1565b6000546040516001600160a01b03909116815260200161016b565b61015e6105c1565b61021b61029236600461154b565b6105d0565b6101876102a536600461154b565b610634565b6101876102b836600461154b565b6106e5565b61021b6102cb3660046114d8565b6106f2565b61019b6102de366004611469565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b61021b610317366004611447565b610856565b60606004805461032b906115f9565b80601f0160208091040260200160405190810160405280929190818152602001828054610357906115f9565b80156103a45780601f10610379576101008083540402835291602001916103a4565b820191906000526020600020905b81548152906001019060200180831161038757829003601f168201915b5050505050905090565b60006103bb338484610938565b50600192915050565b60006103d1848484610a91565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156104705760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61047d8533858403610938565b506001949350505050565b6000610492610ca9565b905090565b3360008181526002602090815260408083206001600160a01b038716845290915281205490916103bb9185906104ce9086906115ca565b610938565b6000546001600160a01b0316331461052d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b6105378282610dd0565b5050565b6000546001600160a01b031633146105955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b61059f6000610eaf565b565b6001600160a01b0381166000908152600660205260408120545b92915050565b60606005805461032b906115f9565b6000546001600160a01b0316331461062a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b6105378282610f17565b3360009081526002602090815260408083206001600160a01b0386168452909152812054828110156106ce5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610467565b6106db3385858403610938565b5060019392505050565b60006103bb338484610a91565b834211156107425760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610467565b60007f00000000000000000000000000000000000000000000000000000000000000008888886107718c611094565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006107cc826110bc565b905060006107dc82878787611125565b9050896001600160a01b0316816001600160a01b03161461083f5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610467565b61084a8a8a8a610938565b50505050505050505050565b6000546001600160a01b031633146108b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b6001600160a01b03811661092c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610467565b61093581610eaf565b50565b6001600160a01b0383166109b35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b038216610a2f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610b0d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b038216610b895760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b03831660009081526001602052604090205481811015610c185760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290610c4f9084906115ca565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9b91815260200190565b60405180910390a350505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610d0257507f000000000000000000000000000000000000000000000000000000000000000046145b15610d2c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b038216610e265760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610467565b8060036000828254610e3891906115ca565b90915550506001600160a01b03821660009081526001602052604081208054839290610e659084906115ca565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216610f935760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b038216600090815260016020526040902054818110156110225760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610467565b6001600160a01b03831660009081526001602052604081208383039055600380548492906110519084906115e2565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610a84565b6001600160a01b03811660009081526006602052604090208054600181018255905b50919050565b60006105bb6110c9610ca9565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006111368787878761114d565b915091506111438161123a565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111845750600090506003611231565b8460ff16601b1415801561119c57508460ff16601c14155b156111ad5750600090506004611231565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611201573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661122a57600060019250925050611231565b9150600090505b94509492505050565b600081600481111561124e5761124e611644565b14156112575750565b600181600481111561126b5761126b611644565b14156112b95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610467565b60028160048111156112cd576112cd611644565b141561131b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610467565b600381600481111561132f5761132f611644565b14156113a35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610467565b60048160048111156113b7576113b7611644565b14156109355760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610467565b80356001600160a01b038116811461144257600080fd5b919050565b60006020828403121561145957600080fd5b6114628261142b565b9392505050565b6000806040838503121561147c57600080fd5b6114858361142b565b91506114936020840161142b565b90509250929050565b6000806000606084860312156114b157600080fd5b6114ba8461142b565b92506114c86020850161142b565b9150604084013590509250925092565b600080600080600080600060e0888a0312156114f357600080fd5b6114fc8861142b565b965061150a6020890161142b565b95506040880135945060608801359350608088013560ff8116811461152e57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561155e57600080fd5b6115678361142b565b946020939093013593505050565b600060208083528351808285015260005b818110156115a257858101830151858201604001528201611586565b818111156115b4576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156115dd576115dd61162e565b500190565b6000828210156115f4576115f461162e565b500390565b600181811c9082168061160d57607f821691505b602082108114156110b657634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212208bf71d9ddf309d88a97b8c028826275a9599d3cdb2db5b0547bfe39a71698ac864736f6c6343000807003353796d623a2063616c6c6572206973206e6f74207468652073796e74686573697353796d623a20746f6b656e20726570726573656e746174696f6e20616c726561647920657869737473a2646970667358221220a60cf18f476b01d9b1b1871bf88e40a4dd9d1fdce6e06b6bc111cfbb8e5d045264736f6c63430008070033";
var isSuperArgs5 = (xs) => xs.length > 1;
var Fabric__factory = class extends import_ethers10.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs5(args)) {
      __super(...args);
    } else {
      __super(_abi9, _bytecode5, args[0]);
    }
    this.contractName = "Fabric";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers10.utils.Interface(_abi9);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers10.Contract(address2, _abi9, signerOrProvider);
  }
};
Fabric__factory.bytecode = _bytecode5;
Fabric__factory.abi = _abi9;

// src/crosschain/contracts/factories/FeeCollector__factory.ts
var import_ethers11 = require("ethers");
var _abi10 = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "balance",
        type: "uint256"
      }
    ],
    name: "ClaimedTokens",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    name: "OnchainSwap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newFee",
        type: "uint256"
      }
    ],
    name: "changeFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      }
    ],
    name: "claimTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "fee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "onchainGateway",
    outputs: [
      {
        internalType: "contract OnchainGateway",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "dex",
        type: "address"
      },
      {
        internalType: "address",
        name: "dexgateway",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "calldata_",
        type: "bytes"
      }
    ],
    name: "onswap",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var FeeCollector__factory = class {
  static createInterface() {
    return new import_ethers11.utils.Interface(_abi10);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers11.Contract(address2, _abi10, signerOrProvider);
  }
};
FeeCollector__factory.abi = _abi10;

// src/crosschain/contracts/factories/HyperSwapRouter__factory.ts
var import_ethers12 = require("ethers");
var _abi11 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_WETH",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      }
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token1",
        type: "address"
      },
      {
        internalType: "address",
        name: "token2",
        type: "address"
      }
    ],
    name: "getPair",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256"
      }
    ],
    name: "quote",
    outputs: [
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityETHSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityETHWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var HyperSwapRouter__factory = class {
  static createInterface() {
    return new import_ethers12.utils.Interface(_abi11);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers12.Contract(address2, _abi11, signerOrProvider);
  }
};
HyperSwapRouter__factory.abi = _abi11;

// src/crosschain/contracts/factories/IzumiFactory__factory.ts
var import_ethers13 = require("ethers");
var _abi12 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_chargeReceiver",
        type: "address"
      },
      {
        internalType: "address",
        name: "_swapX2YModule",
        type: "address"
      },
      {
        internalType: "address",
        name: "_swapY2XModule",
        type: "address"
      },
      {
        internalType: "address",
        name: "_liquidityModule",
        type: "address"
      },
      {
        internalType: "address",
        name: "_limitOrderModule",
        type: "address"
      },
      {
        internalType: "address",
        name: "_flashModule",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenY",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "pointDelta",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "address",
        name: "pool",
        type: "address"
      }
    ],
    name: "NewPool",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    inputs: [],
    name: "chargeReceiver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        internalType: "uint24",
        name: "pointDelta",
        type: "uint24"
      }
    ],
    name: "enableFeeAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    name: "fee2pointDelta",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "flashModule",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "limitOrderModule",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "liquidityModule",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_chargeReceiver",
        type: "address"
      }
    ],
    name: "modifyChargeReceiver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        internalType: "int24",
        name: "currentPoint",
        type: "int24"
      }
    ],
    name: "newPool",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "only_addr_",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    name: "pool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "swapX2YModule",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "swapY2XModule",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var IzumiFactory__factory = class {
  static createInterface() {
    return new import_ethers13.utils.Interface(_abi12);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers13.Contract(address2, _abi12, signerOrProvider);
  }
};
IzumiFactory__factory.abi = _abi12;

// src/crosschain/contracts/factories/IzumiPool__factory.ts
var import_ethers14 = require("ethers");
var _abi13 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "address",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "_fee",
        type: "uint24"
      },
      {
        internalType: "int24",
        name: "currentPoint",
        type: "int24"
      },
      {
        internalType: "int24",
        name: "_pointDelta",
        type: "int24"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "int24",
        name: "point",
        type: "int24"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sellXEarnY",
        type: "bool"
      }
    ],
    name: "AddLimitOrder",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "int24",
        name: "leftPoint",
        type: "int24"
      },
      {
        indexed: true,
        internalType: "int24",
        name: "rightPoint",
        type: "int24"
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "liquidity",
        type: "uint128"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "Burn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "int24",
        name: "point",
        type: "int24"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sellXEarnY",
        type: "bool"
      }
    ],
    name: "DecLimitOrder",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "paidX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "paidY",
        type: "uint256"
      }
    ],
    name: "Flash",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "int24",
        name: "leftPoint",
        type: "int24"
      },
      {
        indexed: true,
        internalType: "int24",
        name: "rightPoint",
        type: "int24"
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "liquidity",
        type: "uint128"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "Mint",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenY",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sellXEarnY",
        type: "bool"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "Swap",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "int24",
        name: "point",
        type: "int24"
      },
      {
        internalType: "uint128",
        name: "amountX",
        type: "uint128"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "addLimOrderWithX",
    outputs: [
      {
        internalType: "uint128",
        name: "orderX",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "acquireY",
        type: "uint128"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "int24",
        name: "point",
        type: "int24"
      },
      {
        internalType: "uint128",
        name: "amountY",
        type: "uint128"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "addLimOrderWithY",
    outputs: [
      {
        internalType: "uint128",
        name: "orderY",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "acquireX",
        type: "uint128"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "point",
        type: "int24"
      },
      {
        internalType: "uint128",
        name: "assignX",
        type: "uint128"
      }
    ],
    name: "assignLimOrderEarnX",
    outputs: [
      {
        internalType: "uint128",
        name: "actualAssignX",
        type: "uint128"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "point",
        type: "int24"
      },
      {
        internalType: "uint128",
        name: "assignY",
        type: "uint128"
      }
    ],
    name: "assignLimOrderEarnY",
    outputs: [
      {
        internalType: "uint128",
        name: "actualAssignY",
        type: "uint128"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "leftPt",
        type: "int24"
      },
      {
        internalType: "int24",
        name: "rightPt",
        type: "int24"
      },
      {
        internalType: "uint128",
        name: "liquidDelta",
        type: "uint128"
      }
    ],
    name: "burn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "int24",
        name: "leftPt",
        type: "int24"
      },
      {
        internalType: "int24",
        name: "rightPt",
        type: "int24"
      },
      {
        internalType: "uint256",
        name: "amountXLim",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountYLim",
        type: "uint256"
      }
    ],
    name: "collect",
    outputs: [
      {
        internalType: "uint256",
        name: "actualAmountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "actualAmountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "collectFeeCharged",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "int24",
        name: "point",
        type: "int24"
      },
      {
        internalType: "uint128",
        name: "collectDec",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "collectEarn",
        type: "uint128"
      },
      {
        internalType: "bool",
        name: "isEarnY",
        type: "bool"
      }
    ],
    name: "collectLimOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "actualCollectDec",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "actualCollectEarn",
        type: "uint128"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "point",
        type: "int24"
      },
      {
        internalType: "uint128",
        name: "deltaX",
        type: "uint128"
      }
    ],
    name: "decLimOrderWithX",
    outputs: [
      {
        internalType: "uint128",
        name: "actualDeltaX",
        type: "uint128"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "point",
        type: "int24"
      },
      {
        internalType: "uint128",
        name: "deltaY",
        type: "uint128"
      }
    ],
    name: "decLimOrderWithY",
    outputs: [
      {
        internalType: "uint128",
        name: "actualDeltaY",
        type: "uint128"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "newNextQueueLen",
        type: "uint16"
      }
    ],
    name: "expandObservationQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "fee",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "feeChargePercent",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "feeScaleX_128",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "feeScaleY_128",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "flash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "leftMostPt",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24"
      }
    ],
    name: "limitOrderData",
    outputs: [
      {
        internalType: "uint128",
        name: "sellingX",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "earnY",
        type: "uint128"
      },
      {
        internalType: "uint256",
        name: "accEarnY",
        type: "uint256"
      },
      {
        internalType: "uint128",
        name: "sellingY",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "earnX",
        type: "uint128"
      },
      {
        internalType: "uint256",
        name: "accEarnX",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "leftPoint",
        type: "int24"
      },
      {
        internalType: "int24",
        name: "rightPoint",
        type: "int24"
      }
    ],
    name: "limitOrderSnapshot",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "sellingX",
            type: "uint128"
          },
          {
            internalType: "uint128",
            name: "earnY",
            type: "uint128"
          },
          {
            internalType: "uint256",
            name: "accEarnY",
            type: "uint256"
          },
          {
            internalType: "uint128",
            name: "sellingY",
            type: "uint128"
          },
          {
            internalType: "uint128",
            name: "earnX",
            type: "uint128"
          },
          {
            internalType: "uint256",
            name: "accEarnX",
            type: "uint256"
          }
        ],
        internalType: "struct IiZiSwapPool.LimitOrderStruct[]",
        name: "limitOrders",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "liquidity",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128"
      },
      {
        internalType: "uint256",
        name: "lastFeeScaleX_128",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "lastFeeScaleY_128",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "tokenOwedX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "tokenOwedY",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "leftPoint",
        type: "int24"
      },
      {
        internalType: "int24",
        name: "rightPoint",
        type: "int24"
      }
    ],
    name: "liquiditySnapshot",
    outputs: [
      {
        internalType: "int128[]",
        name: "deltaLiquidities",
        type: "int128[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "maxLiquidPt",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "int24",
        name: "leftPt",
        type: "int24"
      },
      {
        internalType: "int24",
        name: "rightPt",
        type: "int24"
      },
      {
        internalType: "uint128",
        name: "liquidDelta",
        type: "uint128"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "observations",
    outputs: [
      {
        internalType: "uint32",
        name: "timestamp",
        type: "uint32"
      },
      {
        internalType: "int56",
        name: "accPoint",
        type: "int56"
      },
      {
        internalType: "bool",
        name: "init",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]"
      }
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "accPoints",
        type: "int56[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24"
      }
    ],
    name: "orderOrEndpoint",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int16",
        name: "",
        type: "int16"
      }
    ],
    name: "pointBitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pointDelta",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24"
      }
    ],
    name: "points",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidSum",
        type: "uint128"
      },
      {
        internalType: "int128",
        name: "liquidDelta",
        type: "int128"
      },
      {
        internalType: "uint256",
        name: "accFeeXOut_128",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "accFeeYOut_128",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "isEndpt",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "rightMostPt",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "sqrtRate_96",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtPrice_96",
        type: "uint160"
      },
      {
        internalType: "int24",
        name: "currentPoint",
        type: "int24"
      },
      {
        internalType: "uint16",
        name: "observationCurrentIndex",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "observationQueueLen",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "observationNextQueueLen",
        type: "uint16"
      },
      {
        internalType: "bool",
        name: "locked",
        type: "bool"
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "liquidityX",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128"
      },
      {
        internalType: "int24",
        name: "lowPt",
        type: "int24"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "swapX2Y",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint128",
        name: "desireY",
        type: "uint128"
      },
      {
        internalType: "int24",
        name: "lowPt",
        type: "int24"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "swapX2YDesireY",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128"
      },
      {
        internalType: "int24",
        name: "highPt",
        type: "int24"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "swapY2X",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint128",
        name: "desireX",
        type: "uint128"
      },
      {
        internalType: "int24",
        name: "highPt",
        type: "int24"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "swapY2XDesireX",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "tokenX",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "tokenY",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalFeeXCharged",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalFeeYCharged",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "userEarnX",
    outputs: [
      {
        internalType: "uint256",
        name: "lastAccEarn",
        type: "uint256"
      },
      {
        internalType: "uint128",
        name: "sellingRemain",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "sellingDec",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "earn",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "earnAssign",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "userEarnY",
    outputs: [
      {
        internalType: "uint256",
        name: "lastAccEarn",
        type: "uint256"
      },
      {
        internalType: "uint128",
        name: "sellingRemain",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "sellingDec",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "earn",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "earnAssign",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var IzumiPool__factory = class {
  static createInterface() {
    return new import_ethers14.utils.Interface(_abi13);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers14.Contract(address2, _abi13, signerOrProvider);
  }
};
IzumiPool__factory.abi = _abi13;

// src/crosschain/contracts/factories/IzumiQuoter__factory.ts
var import_ethers15 = require("ethers");
var _abi14 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_weth",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]"
      }
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      }
    ],
    name: "pool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "refundETH",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128"
      },
      {
        internalType: "bytes",
        name: "path",
        type: "bytes"
      }
    ],
    name: "swapAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "acquire",
        type: "uint256"
      },
      {
        internalType: "int24[]",
        name: "pointAfterList",
        type: "int24[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "desire",
        type: "uint128"
      },
      {
        internalType: "bytes",
        name: "path",
        type: "bytes"
      }
    ],
    name: "swapDesire",
    outputs: [
      {
        internalType: "uint256",
        name: "cost",
        type: "uint256"
      },
      {
        internalType: "int24[]",
        name: "pointAfterList",
        type: "int24[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128"
      },
      {
        internalType: "int24",
        name: "lowPt",
        type: "int24"
      }
    ],
    name: "swapX2Y",
    outputs: [
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      },
      {
        internalType: "int24",
        name: "finalPoint",
        type: "int24"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "path",
        type: "bytes"
      }
    ],
    name: "swapX2YCallback",
    outputs: [],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        internalType: "uint128",
        name: "desireY",
        type: "uint128"
      },
      {
        internalType: "int24",
        name: "lowPt",
        type: "int24"
      }
    ],
    name: "swapX2YDesireY",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "int24",
        name: "finalPoint",
        type: "int24"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128"
      },
      {
        internalType: "int24",
        name: "highPt",
        type: "int24"
      }
    ],
    name: "swapY2X",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "int24",
        name: "finalPoint",
        type: "int24"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "path",
        type: "bytes"
      }
    ],
    name: "swapY2XCallback",
    outputs: [],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        internalType: "uint128",
        name: "desireX",
        type: "uint128"
      },
      {
        internalType: "int24",
        name: "highPt",
        type: "int24"
      }
    ],
    name: "swapY2XDesireX",
    outputs: [
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      },
      {
        internalType: "int24",
        name: "finalPoint",
        type: "int24"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "minAmount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      }
    ],
    name: "sweepToken",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minAmount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      }
    ],
    name: "unwrapWETH9",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var IzumiQuoter__factory = class {
  static createInterface() {
    return new import_ethers15.utils.Interface(_abi14);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers15.Contract(address2, _abi14, signerOrProvider);
  }
};
IzumiQuoter__factory.abi = _abi14;

// src/crosschain/contracts/factories/IzumiSwap__factory.ts
var import_ethers16 = require("ethers");
var _abi15 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_weth",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]"
      }
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      }
    ],
    name: "pool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "refundETH",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint128",
            name: "amount",
            type: "uint128"
          },
          {
            internalType: "uint256",
            name: "minAcquired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct Swap.SwapAmountParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "swapAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "cost",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "acquire",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint128",
            name: "desire",
            type: "uint128"
          },
          {
            internalType: "uint256",
            name: "maxPayed",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct Swap.SwapDesireParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "swapDesire",
    outputs: [
      {
        internalType: "uint256",
        name: "cost",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "acquire",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenY",
            type: "address"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "int24",
            name: "boundaryPt",
            type: "int24"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint128",
            name: "amount",
            type: "uint128"
          },
          {
            internalType: "uint256",
            name: "maxPayed",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "minAcquired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct Swap.SwapParams",
        name: "swapParams",
        type: "tuple"
      }
    ],
    name: "swapX2Y",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "swapX2YCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenY",
            type: "address"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "int24",
            name: "boundaryPt",
            type: "int24"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint128",
            name: "amount",
            type: "uint128"
          },
          {
            internalType: "uint256",
            name: "maxPayed",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "minAcquired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct Swap.SwapParams",
        name: "swapParams",
        type: "tuple"
      }
    ],
    name: "swapX2YDesireY",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenY",
            type: "address"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "int24",
            name: "boundaryPt",
            type: "int24"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint128",
            name: "amount",
            type: "uint128"
          },
          {
            internalType: "uint256",
            name: "maxPayed",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "minAcquired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct Swap.SwapParams",
        name: "swapParams",
        type: "tuple"
      }
    ],
    name: "swapY2X",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "swapY2XCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenY",
            type: "address"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "int24",
            name: "boundaryPt",
            type: "int24"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint128",
            name: "amount",
            type: "uint128"
          },
          {
            internalType: "uint256",
            name: "maxPayed",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "minAcquired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct Swap.SwapParams",
        name: "swapParams",
        type: "tuple"
      }
    ],
    name: "swapY2XDesireX",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "minAmount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      }
    ],
    name: "sweepToken",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minAmount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      }
    ],
    name: "unwrapWETH9",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var IzumiSwap__factory = class {
  static createInterface() {
    return new import_ethers16.utils.Interface(_abi15);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers16.Contract(address2, _abi15, signerOrProvider);
  }
};
IzumiSwap__factory.abi = _abi15;

// src/crosschain/contracts/factories/KavaRouter__factory.ts
var import_ethers17 = require("ethers");
var _abi16 = [
  {
    type: "constructor",
    stateMutability: "nonpayable",
    inputs: [
      {
        type: "address",
        name: "_factory",
        internalType: "address"
      },
      {
        type: "address",
        name: "_weth",
        internalType: "address"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256[]",
        name: "",
        internalType: "uint256[]"
      }
    ],
    name: "UNSAFE_swapExactTokensForTokens",
    inputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      },
      {
        type: "tuple[]",
        name: "routes",
        internalType: "struct Router.route[]",
        components: [
          {
            type: "address",
            name: "from",
            internalType: "address"
          },
          {
            type: "address",
            name: "to",
            internalType: "address"
          },
          {
            type: "bool",
            name: "stable",
            internalType: "bool"
          }
        ]
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountB",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      }
    ],
    name: "addLiquidity",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "amountADesired",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountBDesired",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountAMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountBMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "payable",
    outputs: [
      {
        type: "uint256",
        name: "amountToken",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETH",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      }
    ],
    name: "addLiquidityETH",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "amountTokenDesired",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETHMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "address"
      }
    ],
    name: "factory",
    inputs: []
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "uint256",
        name: "amount",
        internalType: "uint256"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      }
    ],
    name: "getAmountOut",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "tokenIn",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenOut",
        internalType: "address"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "getAmountsOut",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "tuple[]",
        name: "routes",
        internalType: "struct Router.route[]",
        components: [
          {
            type: "address",
            name: "from",
            internalType: "address"
          },
          {
            type: "address",
            name: "to",
            internalType: "address"
          },
          {
            type: "bool",
            name: "stable",
            internalType: "bool"
          }
        ]
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "uint256",
        name: "reserveA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "reserveB",
        internalType: "uint256"
      }
    ],
    name: "getReserves",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "bool",
        name: "",
        internalType: "bool"
      }
    ],
    name: "isPair",
    inputs: [
      {
        type: "address",
        name: "pair",
        internalType: "address"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "pair",
        internalType: "address"
      }
    ],
    name: "pairFor",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "uint256",
        name: "amountA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountB",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      }
    ],
    name: "quoteAddLiquidity",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "amountADesired",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountBDesired",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "uint256",
        name: "amountA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountB",
        internalType: "uint256"
      }
    ],
    name: "quoteRemoveLiquidity",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountB",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidity",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountAMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountBMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountToken",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETH",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityETH",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETHMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountToken",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETH",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityETHSupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETHMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountToken",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETH",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityETHWithPermit",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETHMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      },
      {
        type: "bool",
        name: "approveMax",
        internalType: "bool"
      },
      {
        type: "uint8",
        name: "v",
        internalType: "uint8"
      },
      {
        type: "bytes32",
        name: "r",
        internalType: "bytes32"
      },
      {
        type: "bytes32",
        name: "s",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountToken",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETH",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "address",
        name: "token",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountTokenMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountETHMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      },
      {
        type: "bool",
        name: "approveMax",
        internalType: "bool"
      },
      {
        type: "uint8",
        name: "v",
        internalType: "uint8"
      },
      {
        type: "bytes32",
        name: "r",
        internalType: "bytes32"
      },
      {
        type: "bytes32",
        name: "s",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256",
        name: "amountA",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountB",
        internalType: "uint256"
      }
    ],
    name: "removeLiquidityWithPermit",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "uint256",
        name: "liquidity",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountAMin",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountBMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      },
      {
        type: "bool",
        name: "approveMax",
        internalType: "bool"
      },
      {
        type: "uint8",
        name: "v",
        internalType: "uint8"
      },
      {
        type: "bytes32",
        name: "r",
        internalType: "bytes32"
      },
      {
        type: "bytes32",
        name: "s",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "pure",
    outputs: [
      {
        type: "address",
        name: "token0",
        internalType: "address"
      },
      {
        type: "address",
        name: "token1",
        internalType: "address"
      }
    ],
    name: "sortTokens",
    inputs: [
      {
        type: "address",
        name: "tokenA",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenB",
        internalType: "address"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "payable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapExactETHForTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "tuple[]",
        name: "routes",
        internalType: "struct Router.route[]",
        components: [
          {
            type: "address",
            name: "from",
            internalType: "address"
          },
          {
            type: "address",
            name: "to",
            internalType: "address"
          },
          {
            type: "bool",
            name: "stable",
            internalType: "bool"
          }
        ]
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "payable",
    outputs: [],
    name: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "tuple[]",
        name: "routes",
        internalType: "struct Router.route[]",
        components: [
          {
            type: "address",
            name: "from",
            internalType: "address"
          },
          {
            type: "address",
            name: "to",
            internalType: "address"
          },
          {
            type: "bool",
            name: "stable",
            internalType: "bool"
          }
        ]
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapExactTokensForETH",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "tuple[]",
        name: "routes",
        internalType: "struct Router.route[]",
        components: [
          {
            type: "address",
            name: "from",
            internalType: "address"
          },
          {
            type: "address",
            name: "to",
            internalType: "address"
          },
          {
            type: "bool",
            name: "stable",
            internalType: "bool"
          }
        ]
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "tuple[]",
        name: "routes",
        internalType: "struct Router.route[]",
        components: [
          {
            type: "address",
            name: "from",
            internalType: "address"
          },
          {
            type: "address",
            name: "to",
            internalType: "address"
          },
          {
            type: "bool",
            name: "stable",
            internalType: "bool"
          }
        ]
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapExactTokensForTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "tuple[]",
        name: "routes",
        internalType: "struct Router.route[]",
        components: [
          {
            type: "address",
            name: "from",
            internalType: "address"
          },
          {
            type: "address",
            name: "to",
            internalType: "address"
          },
          {
            type: "bool",
            name: "stable",
            internalType: "bool"
          }
        ]
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [
      {
        type: "uint256[]",
        name: "amounts",
        internalType: "uint256[]"
      }
    ],
    name: "swapExactTokensForTokensSimple",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "address",
        name: "tokenFrom",
        internalType: "address"
      },
      {
        type: "address",
        name: "tokenTo",
        internalType: "address"
      },
      {
        type: "bool",
        name: "stable",
        internalType: "bool"
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    inputs: [
      {
        type: "uint256",
        name: "amountIn",
        internalType: "uint256"
      },
      {
        type: "uint256",
        name: "amountOutMin",
        internalType: "uint256"
      },
      {
        type: "tuple[]",
        name: "routes",
        internalType: "struct Router.route[]",
        components: [
          {
            type: "address",
            name: "from",
            internalType: "address"
          },
          {
            type: "address",
            name: "to",
            internalType: "address"
          },
          {
            type: "bool",
            name: "stable",
            internalType: "bool"
          }
        ]
      },
      {
        type: "address",
        name: "to",
        internalType: "address"
      },
      {
        type: "uint256",
        name: "deadline",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "address",
        name: "",
        internalType: "contract IWETH"
      }
    ],
    name: "weth",
    inputs: []
  },
  {
    type: "receive",
    stateMutability: "payable"
  }
];
var KavaRouter__factory = class {
  static createInterface() {
    return new import_ethers17.utils.Interface(_abi16);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers17.Contract(address2, _abi16, signerOrProvider);
  }
};
KavaRouter__factory.abi = _abi16;

// src/crosschain/contracts/factories/KimRouter__factory.ts
var import_ethers18 = require("ethers");
var _abi17 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_WETH",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeSharingContract",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    name: "assign",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      }
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token1",
        type: "address"
      },
      {
        internalType: "address",
        name: "token2",
        type: "address"
      }
    ],
    name: "getPair",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256"
      }
    ],
    name: "quote",
    outputs: [
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeSharingContract",
        type: "address"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      }
    ],
    name: "register",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityETHSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityETHWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "referrer",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var KimRouter__factory = class {
  static createInterface() {
    return new import_ethers18.utils.Interface(_abi17);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers18.Contract(address2, _abi17, signerOrProvider);
  }
};
KimRouter__factory.abi = _abi17;

// src/crosschain/contracts/factories/MetaRouter__factory.ts
var import_ethers19 = require("ethers");
var _abi18 = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "TransitTokenSent",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "_offset",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "externalCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "crossChainID",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "externalID",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "tokenReal",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "swapTokens",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "finalCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaMintTransaction",
        name: "_metaMintTransaction",
        type: "tuple"
      }
    ],
    name: "metaMintSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "firstSwapCalldata",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes"
          },
          {
            internalType: "address[]",
            name: "approvedTokens",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "firstDexRouter",
            type: "address"
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "bool",
            name: "nativeIn",
            type: "bool"
          },
          {
            internalType: "address",
            name: "relayRecipient",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "otherSideCalldata",
            type: "bytes"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaRouteTransaction",
        name: "_metarouteTransaction",
        type: "tuple"
      }
    ],
    name: "metaRoute",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "metaRouterGateway",
    outputs: [
      {
        internalType: "contract MetaRouterGateway",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_router",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_swapCalldata",
        type: "bytes"
      },
      {
        internalType: "address",
        name: "_burnToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "_synthesis",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_burnCalldata",
        type: "bytes"
      }
    ],
    name: "returnSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode6 = "0x60a060405234801561001057600080fd5b503060405161001e90610060565b6001600160a01b039091168152602001604051809103906000f08015801561004a573d6000803e3d6000fd5b5060601b6001600160601b03191660805261006d565b6104d780611db283390190565b60805160601c611cfe6100b46000396000818160c60152818161066c015281816108180152818161097801528181610cad01528181610ff401526112500152611cfe6000f3fe60806040526004361061005a5760003560e01c8063a11b119811610043578063a11b1198146100a1578063c394a5da146100b4578063f5b697a51461010457600080fd5b80633bc788351461005f578063732cffe914610081575b600080fd5b34801561006b57600080fd5b5061007f61007a366004611a40565b610124565b005b34801561008d57600080fd5b5061007f61009c366004611809565b61053a565b61007f6100af366004611a7c565b6107e7565b3480156100c057600080fd5b506100e87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b34801561011057600080fd5b5061007f61011f3660046118ca565b61119c565b600061013360e0830183611b30565b600081811061014457610144611c16565b905060200201602081019061015991906117ee565b9050610169610120830183611b7a565b1590506102ad5760008061020b61018360e0860186611b30565b600081811061019457610194611c16565b90506020020160208101906101a991906117ee565b60208601356101c0610120880161010089016117ee565b6101ce610120890189611b7a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506024925061124a915050565b915091508161027557610253816040518060400160405280602081526020017f4d657461526f757465723a20696e7465726e616c2073776170206661696c65648152506113b0565b60405162461bcd60e51b815260040161026c9190611afd565b60405180910390fd5b61028260e0850185611b30565b600181811061029357610293611c16565b90506020020160208101906102a891906117ee565b925050505b6102bb610160830183611b7a565b15905061040357604082013560006102d7610160850185611b7a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250608485018790526040516370a0823160e01b8152306004820152949550936001600160a01b03881693506370a082319250602401905060206040518083038186803b15801561035557600080fd5b505afa158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d9190611ab8565b90506000806103b586846103a96101608b016101408c016117ee565b878b610180013561124a565b91509150816103fd57610253816040518060400160405280601d81526020017f4d657461526f757465723a2066696e616c2063616c6c206661696c65640000008152506113b0565b50505050505b600061041260e0840184611b30565b600161042160e0870187611b30565b61042c929150611bc1565b81811061043b5761043b611c16565b905060200201602081019061045091906117ee565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561049157600080fd5b505afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c99190611ab8565b90508015610535576105356104e160e0850185611b30565b60016104f060e0880188611b30565b6104fb929150611bc1565b81811061050a5761050a611c16565b905060200201602081019061051f91906117ee565b61052f60e0860160c087016117ee565b836113e6565b505050565b6000806105828b8b8b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506024925061124a915050565b91509150816105ad5761025381604051806060016040528060228152602001611c85602291396113b0565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a082319060240160206040518083038186803b1580156105ef57600080fd5b505afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190611ab8565b9050600085858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506064810183905290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690881614156106e75760405162461bcd60e51b815260206004820152601f60248201527f4d657461526f7574657256323a20696e76616c696420726563697069656e7400604482015260640161026c565b863b878161074b5760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b5050600080886001600160a01b0316836040516107689190611ae1565b6000604051808303816000865af19150503d80600081146107a5576040519150601f19603f3d011682016040523d82523d6000602084013e6107aa565b606091505b5091509150816107d65761025381604051806060016040528060318152602001611c54603191396113b0565b505050505050505050505050505050565b60006107f66040830183611b30565b915061080a905060e0830160c08401611952565b6108f4576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639fc314c861084a6040850185611b30565b600081811061085b5761085b611c16565b905060200201602081019061087091906117ee565b336040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0392831660048201529116602482015260a08501356044820152606401600060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b505050505b60a08201356109038380611b7a565b159050610bed5761091a60e0840160c08501611952565b61096e5761096e61092e6040850185611b30565b600081811061093f5761093f611c16565b905060200201602081019061095491906117ee565b61096460808601606087016117ee565b8560a00135611555565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166109a860808501606086016117ee565b6001600160a01b031614156109ff5760405162461bcd60e51b815260206004820181905260248201527f4d657461526f757465723a20696e76616c696420666972737420726f75746572604482015260640161026c565b600080610a1260808601606087016117ee565b803b9250905081610a795760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b506000905080610a8f60808601606087016117ee565b6001600160a01b031634610aa38780611b7a565b604051610ab1929190611ad1565b60006040518083038185875af1925050503d8060008114610aee576040519150601f19603f3d011682016040523d82523d6000602084013e610af3565b606091505b509150915081610b3c57610253816040518060400160405280601d81526020017f4d657461526f757465723a2066697273742073776170206661696c65640000008152506113b0565b610b496040860186611b30565b6001818110610b5a57610b5a611c16565b9050602002016020810190610b6f91906117ee565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610bb057600080fd5b505afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190611ab8565b925050505b80610bfb6020850185611b7a565b159050610f47576000610c116020860186611b7a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505050602481018490529050610ca3610c5e6040870187611b30565b610c69600288611bc1565b818110610c7857610c78611c16565b9050602002016020810190610c8d91906117ee565b610c9d60a08801608089016117ee565b85611555565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610cdd60a08701608088016117ee565b6001600160a01b03161415610d5a5760405162461bcd60e51b815260206004820152602160248201527f4d657461526f757465723a20696e76616c6964207365636f6e6420726f75746560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161026c565b600080610d6d60a08801608089016117ee565b803b9250905081610dd45760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b506000905080610dea60a08801608089016117ee565b6001600160a01b031683604051610e019190611ae1565b6000604051808303816000865af19150503d8060008114610e3e576040519150601f19603f3d011682016040523d82523d6000602084013e610e43565b606091505b509150915081610e8c57610253816040518060400160405280601e81526020017f4d657461526f757465723a207365636f6e642073776170206661696c656400008152506113b0565b610e996040880188611b30565b610ea4600189611bc1565b818110610eb357610eb3611c16565b9050602002016020810190610ec891906117ee565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015610f0957600080fd5b505afa158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f419190611ab8565b93505050505b610f9d610f576040860186611b30565b610f62600187611bc1565b818110610f7157610f71611c16565b9050602002016020810190610f8691906117ee565b610f97610100870160e088016117ee565b83611555565b6000610fad610100860186611b7a565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506064810183905290506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611025610100870160e088016117ee565b6001600160a01b0316141561107c5760405162461bcd60e51b815260206004820152601d60248201527f4d657461526f757465723a20696e76616c696420726563697069656e74000000604482015260640161026c565b600080611090610100880160e089016117ee565b803b92509050816110f75760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b50600090508061110e610100880160e089016117ee565b6001600160a01b0316836040516111259190611ae1565b6000604051808303816000865af19150503d8060008114611162576040519150601f19603f3d011682016040523d82523d6000602084013e611167565b606091505b5091509150816111935761025381604051806060016040528060228152602001611ca7602291396113b0565b50505050505050565b60006111e288888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925061124a915050565b50905080611240576111f58883896113e6565b604080516001600160a01b038481168252602082018a90528a168183015290517f0ac368c799fd87078497a837c3b184349108599d7c108f68710d3321ba416c6f9181900360600190a15b5050505050505050565b600060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614156112d05760405162461bcd60e51b815260206004820152601f60248201527f4d657461526f757465723a20696e76616c696420726563656976655369646500604482015260640161026c565b6112db878688611555565b838301869052843b85816113455760405162461bcd60e51b815260206004820152602b60248201527f4d657461526f757465723a2063616c6c20666f722061206e6f6e2d636f6e747260448201526a1858dd081858d8dbdd5b9d60aa1b606482015260840161026c565b5050846001600160a01b03168460405161135f9190611ae1565b6000604051808303816000865af19150503d806000811461139c576040519150601f19603f3d011682016040523d82523d6000602084013e6113a1565b606091505b50909890975095505050505050565b60606044835110156113c35750806113e0565b600483019250828060200190518101906113dd9190611993565b90505b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916114709190611ae1565b6000604051808303816000865af19150503d80600081146114ad576040519150601f19603f3d011682016040523d82523d6000602084013e6114b2565b606091505b50915091508180156114dc5750805115806114dc5750808060200190518101906114dc9190611976565b61154e5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c656400000000000000000000000000000000000000606482015260840161026c565b5050505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e9060440160206040518083038186803b1580156115b857600080fd5b505afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f09190611ab8565b101561053557604080516001600160a01b0380851660248301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff604480840182905284518085039091018152606490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790529251610535938793879391926000928392908716916116ab9190611ae1565b6000604051808303816000865af19150503d80600081146116e8576040519150601f19603f3d011682016040523d82523d6000602084013e6116ed565b606091505b50915091508180156117175750805115806117175750808060200190518101906117179190611976565b61154e5760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c6564000000000000000000000000000000000000000000606482015260840161026c565b80356001600160a01b03811681146117a057600080fd5b919050565b60008083601f8401126117b757600080fd5b50813567ffffffffffffffff8111156117cf57600080fd5b6020830191508360208285010111156117e757600080fd5b9250929050565b60006020828403121561180057600080fd5b6113dd82611789565b600080600080600080600080600060e08a8c03121561182757600080fd5b6118308a611789565b985060208a0135975061184560408b01611789565b965060608a013567ffffffffffffffff8082111561186257600080fd5b61186e8d838e016117a5565b909850965086915061188260808d01611789565b955061189060a08d01611789565b945060c08c01359150808211156118a657600080fd5b506118b38c828d016117a5565b915080935050809150509295985092959850929598565b600080600080600080600060c0888a0312156118e557600080fd5b6118ee88611789565b96506020880135955061190360408901611789565b9450606088013567ffffffffffffffff81111561191f57600080fd5b61192b8a828b016117a5565b9095509350506080880135915061194460a08901611789565b905092959891949750929550565b60006020828403121561196457600080fd5b813561196f81611c42565b9392505050565b60006020828403121561198857600080fd5b815161196f81611c42565b6000602082840312156119a557600080fd5b815167ffffffffffffffff808211156119bd57600080fd5b818401915084601f8301126119d157600080fd5b8151818111156119e3576119e3611c2c565b604051601f8201601f19908116603f01168101908382118183101715611a0b57611a0b611c2c565b81604052828152876020848701011115611a2457600080fd5b611a35836020830160208801611be6565b979650505050505050565b600060208284031215611a5257600080fd5b813567ffffffffffffffff811115611a6957600080fd5b82016101a0818503121561196f57600080fd5b600060208284031215611a8e57600080fd5b813567ffffffffffffffff811115611aa557600080fd5b8201610120818503121561196f57600080fd5b600060208284031215611aca57600080fd5b5051919050565b8183823760009101908152919050565b60008251611af3818460208701611be6565b9190910192915050565b6020815260008251806020840152611b1c816040850160208701611be6565b601f01601f19169190910160400192915050565b6000808335601e19843603018112611b4757600080fd5b83018035915067ffffffffffffffff821115611b6257600080fd5b6020019150600581901b36038213156117e757600080fd5b6000808335601e19843603018112611b9157600080fd5b83018035915067ffffffffffffffff821115611bac57600080fd5b6020019150368190038213156117e757600080fd5b600082821015611be157634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015611c01578181015183820152602001611be9565b83811115611c10576000848401525b50505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611c5057600080fd5b5056fe4d657461526f7574657256323a2072657665727453796e74686573697a65526571756573742063616c6c206661696c65644d657461526f7574657256323a20696e7465726e616c2073776170206661696c65644d657461526f757465723a206f7468657220736964652063616c6c206661696c6564a2646970667358221220a2dff3f0a8dbc197d1ad55f50e2b6d0821fbeb5977ccbd177433edefb43232f964736f6c6343000807003360a060405234801561001057600080fd5b506040516104d73803806104d783398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c61043961009e6000396000818160550152818160a2015261017101526104396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639fc314c81461003b578063dbec15bb14610050575b600080fd5b61004e610049366004610363565b6100a0565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461016a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f53796d623a2063616c6c6572206973206e6f7420746865206d657461726f757460448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61019683837f00000000000000000000000000000000000000000000000000000000000000008461019b565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161023a91906103c8565b6000604051808303816000865af19150503d8060008114610277576040519150601f19603f3d011682016040523d82523d6000602084013e61027c565b606091505b50915091508180156102a65750805115806102a65750808060200190518101906102a6919061039f565b610332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610161565b505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461035e57600080fd5b919050565b60008060006060848603121561037857600080fd5b6103818461033a565b925061038f6020850161033a565b9150604084013590509250925092565b6000602082840312156103b157600080fd5b815180151581146103c157600080fd5b9392505050565b6000825160005b818110156103e957602081860181015185830152016103cf565b818111156103f8576000828501525b50919091019291505056fea26469706673582212202568575dd38d51c811ca9abb487d12cf7f92601b834f2b8dba043bc452c3f35164736f6c63430008070033";
var isSuperArgs6 = (xs) => xs.length > 1;
var MetaRouter__factory = class extends import_ethers19.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs6(args)) {
      __super(...args);
    } else {
      __super(_abi18, _bytecode6, args[0]);
    }
    this.contractName = "MetaRouter";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers19.utils.Interface(_abi18);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers19.Contract(address2, _abi18, signerOrProvider);
  }
};
MetaRouter__factory.bytecode = _bytecode6;
MetaRouter__factory.abi = _abi18;

// src/crosschain/contracts/factories/Multicall__factory.ts
var import_ethers20 = require("ethers");
var _abi19 = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes"
          }
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]"
      }
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes"
          }
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]"
      }
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address"
      }
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool"
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes"
          }
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]"
      }
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool"
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes"
          }
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]"
      }
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes"
          }
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var Multicall__factory = class {
  static createInterface() {
    return new import_ethers20.utils.Interface(_abi19);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers20.Contract(address2, _abi19, signerOrProvider);
  }
};
Multicall__factory.abi = _abi19;

// src/crosschain/contracts/factories/MulticallRouter__factory.ts
var import_ethers21 = require("ethers");
var _abi20 = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "bytes[]",
        name: "_calldata",
        type: "bytes[]"
      },
      {
        internalType: "address[]",
        name: "_receiveSides",
        type: "address[]"
      },
      {
        internalType: "address[]",
        name: "_path",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "_offset",
        type: "uint256[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "multicall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode7 = "0x608060405234801561001057600080fd5b50610de6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631e859a0514610030575b600080fd5b61004361003e366004610b54565b610045565b005b6100718360008151811061005b5761005b610c1a565b602002602001015161006a3390565b30896103af565b60005b85518110156102b157600084828151811061009157610091610c1a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012b9190610c30565b9050600087838151811061014157610141610c1a565b60200260200101519050600085848151811061015f5761015f610c1a565b6020026020010151905082818301526101ab87858151811061018357610183610c1a565b602002602001015189868151811061019d5761019d610c1a565b602002602001015185610534565b6000808986815181106101c0576101c0610c1a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16846040516101ec9190610c79565b6000604051808303816000865af19150503d8060008114610229576040519150601f19603f3d011682016040523d82523d6000602084013e61022e565b606091505b50915091508161029957610277816040518060400160405280601c81526020017f4d756c746963616c6c526f757465723a2063616c6c206661696c6564000000008152506105e5565b60405162461bcd60e51b81526004016102909190610c95565b60405180910390fd5b505050505080806102a990610cde565b915050610074565b50600083600185516102c39190610cf9565b815181106102d3576102d3610c1a565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190610c30565b905080156103a6576103a684600186516103879190610cf9565b8151811061039757610397610c1a565b6020026020010151838361061b565b50505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161044e9190610c79565b6000604051808303816000865af19150503d806000811461048b576040519150601f19603f3d011682016040523d82523d6000602084013e610490565b606091505b50915091508180156104ba5750805115806104ba5750808060200190518101906104ba9190610d10565b61052c5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610290565b505050505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015282919085169063dd62ed3e90604401602060405180830381865afa1580156105a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190610c30565b10156105e0576105e08383600019610797565b505050565b60606044835110156105f8575080610615565b600483019250828060200190518101906106129190610d39565b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916106b29190610c79565b6000604051808303816000865af19150503d80600081146106ef576040519150601f19603f3d011682016040523d82523d6000602084013e6106f4565b606091505b509150915081801561071e57508051158061071e57508080602001905181019061071e9190610d10565b6107905760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610290565b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052915160009283929087169161082e9190610c79565b6000604051808303816000865af19150503d806000811461086b576040519150601f19603f3d011682016040523d82523d6000602084013e610870565b606091505b509150915081801561089a57508051158061089a57508080602001905181019061089a9190610d10565b6107905760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c65640000000000000000000000000000000000000000006064820152608401610290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561094b5761094b61090c565b604052919050565b600067ffffffffffffffff82111561096d5761096d61090c565b5060051b60200190565b600067ffffffffffffffff8211156109915761099161090c565b50601f01601f191660200190565b600082601f8301126109b057600080fd5b813560206109c56109c083610953565b610922565b82815260059290921b840181019181810190868411156109e457600080fd5b8286015b84811015610a6357803567ffffffffffffffff811115610a085760008081fd5b8701603f81018913610a1a5760008081fd5b848101356040610a2c6109c083610977565b8281528b82848601011115610a415760008081fd5b82828501898301376000928101880192909252508452509183019183016109e8565b509695505050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a9257600080fd5b919050565b600082601f830112610aa857600080fd5b81356020610ab86109c083610953565b82815260059290921b84018101918181019086841115610ad757600080fd5b8286015b84811015610a6357610aec81610a6e565b8352918301918301610adb565b600082601f830112610b0a57600080fd5b81356020610b1a6109c083610953565b82815260059290921b84018101918181019086841115610b3957600080fd5b8286015b84811015610a635780358352918301918301610b3d565b60008060008060008060c08789031215610b6d57600080fd5b86359550602087013567ffffffffffffffff80821115610b8c57600080fd5b610b988a838b0161099f565b96506040890135915080821115610bae57600080fd5b610bba8a838b01610a97565b95506060890135915080821115610bd057600080fd5b610bdc8a838b01610a97565b94506080890135915080821115610bf257600080fd5b50610bff89828a01610af9565b925050610c0e60a08801610a6e565b90509295509295509295565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c4257600080fd5b5051919050565b60005b83811015610c64578181015183820152602001610c4c565b83811115610c73576000848401525b50505050565b60008251610c8b818460208701610c49565b9190910192915050565b6020815260008251806020840152610cb4816040850160208701610c49565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610cf257610cf2610cc8565b5060010190565b600082821015610d0b57610d0b610cc8565b500390565b600060208284031215610d2257600080fd5b81518015158114610d3257600080fd5b9392505050565b600060208284031215610d4b57600080fd5b815167ffffffffffffffff811115610d6257600080fd5b8201601f81018413610d7357600080fd5b8051610d816109c082610977565b818152856020838501011115610d9657600080fd5b610da7826020830160208601610c49565b9594505050505056fea264697066735822122093d426beff7768b31552a91402fe54dbd5fff518998f3cc478bad3a1a60f5f8e64736f6c634300080b0033";
var isSuperArgs7 = (xs) => xs.length > 1;
var MulticallRouter__factory = class extends import_ethers21.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs7(args)) {
      __super(...args);
    } else {
      __super(_abi20, _bytecode7, args[0]);
    }
    this.contractName = "MulticallRouter";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers21.utils.Interface(_abi20);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers21.Contract(address2, _abi20, signerOrProvider);
  }
};
MulticallRouter__factory.bytecode = _bytecode7;
MulticallRouter__factory.abi = _abi20;

// src/crosschain/contracts/factories/MulticallRouterV2__factory.ts
var import_ethers22 = require("ethers");
var _abi21 = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "bytes[]",
        name: "_calldata",
        type: "bytes[]"
      },
      {
        internalType: "address[]",
        name: "_receiveSides",
        type: "address[]"
      },
      {
        internalType: "address[]",
        name: "_path",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "_offset",
        type: "uint256[]"
      },
      {
        internalType: "bool[]",
        name: "_isNativeIn",
        type: "bool[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "multicall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var _bytecode8 = "0x608060405234801561001057600080fd5b506111c1806100206000396000f3fe6080604052600436106100225760003560e01c8063bc982fc41461002e57600080fd5b3661002957005b600080fd5b61004161003c366004610efb565b610043565b005b816000815181106100565761005661112b565b6020026020010151156100bd57600034116100b85760405162461bcd60e51b815260206004820152601c60248201527f4d756c746963616c6c526f757465723a207a65726f20616d6f756e740000000060448201526064015b60405180910390fd5b6100e9565b6100e9846000815181106100d3576100d361112b565b60200260200101516100e23390565b308a6106e4565b60005b8651811015610536578281815181106101075761010761112b565b6020026020010151156102935760004790506000808860008151811061012f5761012f61112b565b60200260200101519050803b915081600014156101b45760405162461bcd60e51b815260206004820152603060248201527f4d756c746963616c6c526f757465723a2063616c6c20666f722061206e6f6e2d60448201527f636f6e7472616374206163636f756e740000000000000000000000000000000060648201526084016100af565b6000808a86815181106101c9576101c961112b565b60200260200101516001600160a01b0316858d88815181106101ed576101ed61112b565b60200260200101516040516102029190610fe7565b60006040518083038185875af1925050503d806000811461023f576040519150601f19603f3d011682016040523d82523d6000602084013e610244565b606091505b50915091508161028957610270816040518060600160405280602381526020016111696023913961085c565b60405162461bcd60e51b81526004016100af9190611003565b5050505050610524565b60008582815181106102a7576102a761112b565b60209081029190910101516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561030b57600080fd5b505afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610ee2565b905060008883815181106103595761035961112b565b6020026020010151905060008684815181106103775761037761112b565b602002602001015190506000808a86815181106103965761039661112b565b602002602001015190508483850152803b915081600014156104205760405162461bcd60e51b815260206004820152603060248201527f4d756c746963616c6c526f757465723a2063616c6c20666f722061206e6f6e2d60448201527f636f6e7472616374206163636f756e740000000000000000000000000000000060648201526084016100af565b505061045f8885815181106104375761043761112b565b60200260200101518a86815181106104515761045161112b565b602002602001015185610892565b6000808a86815181106104745761047461112b565b60200260200101516001600160a01b0316846040516104939190610fe7565b6000604051808303816000865af19150503d80600081146104d0576040519150601f19603f3d011682016040523d82523d6000602084013e6104d5565b606091505b50915091508161051e57610270816040518060400160405280601c81526020017f4d756c746963616c6c526f757465723a2063616c6c206661696c65640000000081525061085c565b50505050505b8061052e816110fa565b9150506100ec565b506000846001865161054891906110b3565b815181106105585761055861112b565b60209081029190910101516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156105bc57600080fd5b505afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f49190610ee2565b9050801561062d5761062d856001875161060e91906110b3565b8151811061061e5761061e61112b565b60200260200101518383610951565b4780156106d9576000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114610681576040519150601f19603f3d011682016040523d82523d6000602084013e610686565b606091505b50509050806106d75760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e6420457468657200000000000000000000000060448201526064016100af565b505b505050505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916107769190610fe7565b6000604051808303816000865af19150503d80600081146107b3576040519150601f19603f3d011682016040523d82523d6000602084013e6107b8565b606091505b50915091508180156107e25750805115806107e25750808060200190518101906107e29190610e47565b6108545760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c656400000000000000000000000000000060648201526084016100af565b505050505050565b606060448351101561086f57508061088c565b600483019250828060200190518101906108899190610e6b565b90505b92915050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e9060440160206040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d9190610ee2565b101561094c5761093f83836000610ac0565b61094c8383600019610ac0565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916109db9190610fe7565b6000604051808303816000865af19150503d8060008114610a18576040519150601f19603f3d011682016040523d82523d6000602084013e610a1d565b606091505b5091509150818015610a47575080511580610a47575080806020019051810190610a479190610e47565b610ab95760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c65640000000000000000000000000000000000000060648201526084016100af565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790529151600092839290871691610b4a9190610fe7565b6000604051808303816000865af19150503d8060008114610b87576040519150601f19603f3d011682016040523d82523d6000602084013e610b8c565b606091505b5091509150818015610bb6575080511580610bb6575080806020019051810190610bb69190610e47565b610ab95760405162461bcd60e51b815260206004820152602b60248201527f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060448201527f726f7665206661696c656400000000000000000000000000000000000000000060648201526084016100af565b80356001600160a01b0381168114610c3f57600080fd5b919050565b600082601f830112610c5557600080fd5b81356020610c6a610c6583611067565b611036565b80838252828201915082860187848660051b8901011115610c8a57600080fd5b60005b85811015610cb057610c9e82610c28565b84529284019290840190600101610c8d565b5090979650505050505050565b600082601f830112610cce57600080fd5b81356020610cde610c6583611067565b80838252828201915082860187848660051b8901011115610cfe57600080fd5b60005b85811015610cb0578135610d1481611157565b84529284019290840190600101610d01565b600082601f830112610d3757600080fd5b81356020610d47610c6583611067565b80838252828201915082860187848660051b8901011115610d6757600080fd5b60005b85811015610cb057813567ffffffffffffffff811115610d8957600080fd5b8801603f81018a13610d9a57600080fd5b858101356040610dac610c658361108b565b8281528c82848601011115610dc057600080fd5b828285018a8301376000928101890192909252508552509284019290840190600101610d6a565b600082601f830112610df857600080fd5b81356020610e08610c6583611067565b80838252828201915082860187848660051b8901011115610e2857600080fd5b60005b85811015610cb057813584529284019290840190600101610e2b565b600060208284031215610e5957600080fd5b8151610e6481611157565b9392505050565b600060208284031215610e7d57600080fd5b815167ffffffffffffffff811115610e9457600080fd5b8201601f81018413610ea557600080fd5b8051610eb3610c658261108b565b818152856020838501011115610ec857600080fd5b610ed98260208301602086016110ca565b95945050505050565b600060208284031215610ef457600080fd5b5051919050565b600080600080600080600060e0888a031215610f1657600080fd5b87359650602088013567ffffffffffffffff80821115610f3557600080fd5b610f418b838c01610d26565b975060408a0135915080821115610f5757600080fd5b610f638b838c01610c44565b965060608a0135915080821115610f7957600080fd5b610f858b838c01610c44565b955060808a0135915080821115610f9b57600080fd5b610fa78b838c01610de7565b945060a08a0135915080821115610fbd57600080fd5b50610fca8a828b01610cbd565b925050610fd960c08901610c28565b905092959891949750929550565b60008251610ff98184602087016110ca565b9190910192915050565b60208152600082518060208401526110228160408501602087016110ca565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561105f5761105f611141565b604052919050565b600067ffffffffffffffff82111561108157611081611141565b5060051b60200190565b600067ffffffffffffffff8211156110a5576110a5611141565b50601f01601f191660200190565b6000828210156110c5576110c5611115565b500390565b60005b838110156110e55781810151838201526020016110cd565b838111156110f4576000848401525b50505050565b600060001982141561110e5761110e611115565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461116557600080fd5b5056fe4d756c746963616c6c526f757465723a206e61746976652063616c6c206661696c6564a2646970667358221220dbc5d27713815a216e194dcaeee0f467ee6a77e599fb355d519592906912cf4f64736f6c63430008070033";
var isSuperArgs8 = (xs) => xs.length > 1;
var MulticallRouterV2__factory = class extends import_ethers22.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs8(args)) {
      __super(...args);
    } else {
      __super(_abi21, _bytecode8, args[0]);
    }
    this.contractName = "MulticallRouterV2";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers22.utils.Interface(_abi21);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers22.Contract(address2, _abi21, signerOrProvider);
  }
};
MulticallRouterV2__factory.bytecode = _bytecode8;
MulticallRouterV2__factory.abi = _abi21;

// src/crosschain/contracts/factories/OctoPoolFeeCollector__factory.ts
var import_ethers23 = require("ethers");
var _abi22 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_feeReceiver",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_feeRate",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "balance",
        type: "uint256"
      }
    ],
    name: "ClaimedTokens",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    name: "FeeCollected",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    inputs: [],
    name: "WAD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newFeeRate",
        type: "uint256"
      }
    ],
    name: "changeFeeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "collectFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "feeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "feeReceiver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newFeeReceiver",
        type: "address"
      }
    ],
    name: "setFeeReceiver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode9 = "0x6080604052670de0b6b3a764000060035534801561001c57600080fd5b50604051610b0a380380610b0a83398101604081905261003b916100bc565b6100443361006c565b600155600280546001600160a01b0319166001600160a01b03929092169190911790556100f6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100cf57600080fd5b82516001600160a01b03811681146100e657600080fd5b6020939093015192949293505050565b610a05806101056000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063978bbdb911610076578063b3f006741161005b578063b3f0067414610122578063efdcd97414610135578063f2fde38b1461014857600080fd5b8063978bbdb914610106578063affca9321461010f57600080fd5b80636a146024146100a8578063715018a6146100c45780637ff7b0d2146100ce5780638da5cb5b146100e1575b600080fd5b6100b160035481565b6040519081526020015b60405180910390f35b6100cc61015b565b005b6100cc6100dc366004610840565b6101c6565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100bb565b6100b160015481565b6100cc61011d36600461086c565b61026c565b6002546100ee906001600160a01b031681565b6100cc610143366004610885565b6102cb565b6100cc610156366004610885565b61035f565b6000546001600160a01b031633146101ba5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6101c46000610441565b565b6101d2813330856104a9565b6000600354600154846101e591906108cf565b6101ef91906108ec565b905061020582336102008487610927565b610560565b60025461021d9083906001600160a01b031683610560565b604080516001600160a01b0384168152602081018590529081018290527f108516ddcf5ba43cea6bb2cd5ff6d59ac196c1c86ccb9178332b9dd72d1ca5619060600160405180910390a1505050565b6000546001600160a01b031633146102c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b1565b600155565b6000546001600160a01b031633146103255760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b1565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103b95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b1565b6001600160a01b0381166104355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101b1565b61043e81610441565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261055a9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526105ae565b50505050565b6040516001600160a01b0383166024820152604481018290526105a99084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016104f6565b505050565b6000610603826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106939092919063ffffffff16565b8051909150156105a95780806020019051810190610621919061093a565b6105a95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101b1565b60606106a284846000856106ac565b90505b9392505050565b6060824710156107245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101b1565b843b6107725760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101b1565b600080866001600160a01b0316858760405161078e9190610980565b60006040518083038185875af1925050503d80600081146107cb576040519150601f19603f3d011682016040523d82523d6000602084013e6107d0565b606091505b50915091506107e08282866107eb565b979650505050505050565b606083156107fa5750816106a5565b82511561080a5782518084602001fd5b8160405162461bcd60e51b81526004016101b1919061099c565b80356001600160a01b038116811461083b57600080fd5b919050565b6000806040838503121561085357600080fd5b8235915061086360208401610824565b90509250929050565b60006020828403121561087e57600080fd5b5035919050565b60006020828403121561089757600080fd5b6106a582610824565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176108e6576108e66108a0565b92915050565b600082610922577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b818103818111156108e6576108e66108a0565b60006020828403121561094c57600080fd5b815180151581146106a557600080fd5b60005b8381101561097757818101518382015260200161095f565b50506000910152565b6000825161099281846020870161095c565b9190910192915050565b60208152600082518060208401526109bb81604085016020870161095c565b601f01601f1916919091016040019291505056fea264697066735822122066d7925f09ed4bc46642455b4e2bc57639e34c77f22523edc1ebc237299aecab64736f6c63430008130033";
var isSuperArgs9 = (xs) => xs.length > 1;
var OctoPoolFeeCollector__factory = class extends import_ethers23.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs9(args)) {
      __super(...args);
    } else {
      __super(_abi22, _bytecode9, args[0]);
    }
    this.contractName = "OctoPoolFeeCollector";
  }
  deploy(_feeReceiver, _feeRate, overrides) {
    return super.deploy(_feeReceiver, _feeRate, overrides || {});
  }
  getDeployTransaction(_feeReceiver, _feeRate, overrides) {
    return super.getDeployTransaction(_feeReceiver, _feeRate, overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers23.utils.Interface(_abi22);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers23.Contract(address2, _abi22, signerOrProvider);
  }
};
OctoPoolFeeCollector__factory.bytecode = _bytecode9;
OctoPoolFeeCollector__factory.abi = _abi22;

// src/crosschain/contracts/factories/OmniPool__factory.ts
var import_ethers24 = require("ethers");
var _abi23 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "ApprovalForAll",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "AssetAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bool",
        name: "status",
        type: "bool"
      }
    ],
    name: "AssetStatusChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "FillPool",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "NewA",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lpDividendRatio",
        type: "uint256"
      }
    ],
    name: "NewFee",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address"
      }
    ],
    name: "NewFeeTo",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "NewLPFee",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "newMaxSupply",
        type: "uint256"
      }
    ],
    name: "NewMaxSupply",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "NewMintFeeThreshold",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newVeSIS",
        type: "address"
      }
    ],
    name: "NewVeSIS",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "fromToken",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "toToken",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "toAmount",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "Swap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]"
      }
    ],
    name: "TransferBatch",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "TransferSingle",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "URI",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "Withdraw",
    type: "event"
  },
  {
    inputs: [],
    name: "a",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_maxSupply",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8"
      }
    ],
    name: "addAssetOcto",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "assetToIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      }
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_newMaxSupply",
        type: "uint256"
      }
    ],
    name: "changeMaxSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_minimumLiquidity",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "devaddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "feeTo",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "globalEquilCovRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "equilCovRatio",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "invariant",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "indexToAsset",
    outputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liability",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maxSupply",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8"
      },
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_lpFee",
        type: "uint256"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "address",
        name: "operator",
        type: "address"
      }
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lastIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lpDividendRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lpFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      }
    ],
    name: "mintFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "mintFeeThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newA",
        type: "uint256"
      }
    ],
    name: "setA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address"
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_active",
        type: "bool"
      }
    ],
    name: "setAssetStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newLpDividendRatio",
        type: "uint256"
      }
    ],
    name: "setFeeRatio",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newFeeTo",
        type: "address"
      }
    ],
    name: "setFeeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newLpFee",
        type: "uint256"
      }
    ],
    name: "setLPFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newMintFeeThreshold",
        type: "uint256"
      }
    ],
    name: "setMintFeeThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newVeSIS",
        type: "address"
      }
    ],
    name: "setVeSISAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "spreadAccumulatedError",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fromID",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_toID",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_fromAmount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_minToAmount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "actualToAmount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "lpFeeAmount",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "veSIS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_minAmount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode10 = "0x608060405234801561001057600080fd5b50614695806100206000396000f3fe608060405234801561001057600080fd5b50600436106102475760003560e01c80638456cb591161013b578063d043c565116100b8578063f242432a1161007c578063f242432a146105b9578063f2fde38b146105cc578063f3f6f0d7146105df578063f46901ed146105e8578063f6f70eaf146105fb57600080fd5b8063d043c56514610530578063d49e77cd14610543578063e4a3011614610557578063e985e9c51461056a578063ee919d50146105a657600080fd5b80638f6bdeaa116100ff5780638f6bdeaa146104455780639eeb6a2214610458578063a22cb465146104f6578063ce016ea114610509578063cfc399ea1461051c57600080fd5b80638456cb59146103fe5780638a2dfe09146104065780638a35ace31461040e5780638c9a4bb8146104215780638da5cb5b1461043457600080fd5b80633f4ba83a116101c95780635cfe092e1161018d5780635cfe092e146103c65780635f4b9bde146103d0578063704ce43e146103e3578063715018a6146103ec578063815bfd29146103f457600080fd5b80633f4ba83a146103585780634422a8dd146103605780634e1273f41461038857806353cb6a5e146103a85780635c975abb146103bb57600080fd5b806319f4ff2f1161021057806319f4ff2f146102ea57806324e75ca0146102ff578063265e7bde146103125780632eb2c2d61461032557806339e599451461033857600080fd5b8062fdd58e1461024c578063017e7e581461027257806301ffc9a71461029e5780630dbe671f146102c15780630e89341c146102ca575b600080fd5b61025f61025a366004613b2a565b61060e565b6040519081526020015b60405180910390f35b61010354610286906001600160a01b031681565b6040516001600160a01b039091168152602001610269565b6102b16102ac366004613c88565b6106a9565b6040519015158152602001610269565b61025f60fe5481565b6102dd6102d8366004613cc2565b6106f9565b6040516102699190613f26565b6102fd6102f8366004613cc2565b61078d565b005b6102fd61030d366004613cf4565b610802565b6102fd610320366004613d19565b61089c565b6102fd6103333660046139e4565b6109e6565b61025f610346366004613996565b60fc6020526000908152604090205481565b6102fd610a32565b61037361036e366004613d3b565b610a44565b60408051928352602083019190915201610269565b61039b610396366004613b9a565b610c5b565b6040516102699190613eee565b6102fd6103b6366004613cc2565b610d85565b60655460ff166102b1565b61025f6101015481565b6103736103de366004613d3b565b610dea565b61025f60ff5481565b6102fd611102565b61025f6101005481565b6102fd611114565b610373611124565b6102fd61041c366004613cc2565b611168565b6102fd61042f366004613d19565b611174565b6033546001600160a01b0316610286565b610373610453366004613d82565b611352565b6104b3610466366004613cc2565b60fb60205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff808216916001600160a01b0361010082041691600160a81b9091041687565b60408051978852602088019690965294860193909352606085019190915260ff1660808401526001600160a01b031660a0830152151560c082015260e001610269565b6102fd610504366004613af3565b611693565b6102fd610517366004613b54565b61169e565b61010454610286906001600160a01b031681565b6102fd61053e366004613cc2565b61187d565b61010254610286906001600160a01b031681565b6102fd610565366004613d19565b6118bb565b6102b16105783660046139b1565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b6102fd6105b4366004613cc2565b611a71565b6102fd6105c7366004613a8e565b611ad6565b6102fd6105da366004613996565b611b1b565b61025f60fd5481565b6102fd6105f6366004613996565b611b91565b6102fd610609366004613996565b611c0c565b60006001600160a01b03831661067e5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b50600081815260c9602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806106da57506001600160e01b031982166303a24d0760e21b145b806106a357506301ffc9a760e01b6001600160e01b03198316146106a3565b606060cb805461070890614476565b80601f016020809104026020016040519081016040528092919081815260200182805461073490614476565b80156107815780601f1061075657610100808354040283529160200191610781565b820191906000526020600020905b81548152906001019060200180831161076457829003601f168201915b50505050509050919050565b610795611c87565b670de0b6b3a76400008111156107bd5760405162461bcd60e51b8152600401610675906140bc565b6107c5611ce1565b6101008190556040518181527f63fe946ed58429ac3c5e64d4356ff92c26d7fa1e73586515df8ba9f059ab54a5906020015b60405180910390a150565b61080a611c87565b600082815260fb602052604090206004015460ff600160a81b9091041615158115151461089857600082815260fb6020526040808220600401805460ff60a81b1916600160a81b8515159081029190911791829055915191926101009091046001600160a01b0316917f409295ac74e8693e50d9c1104ed31735b01ce0bbb0772e2fc4392180993c8a949190a35b5050565b6108a4611c87565b600082815260fb60205260408120600401546108c490839060ff16611d09565b90506108d6816001600160ff1b031190565b6109225760405162461bcd60e51b815260206004820152601760248201527f4e6577206d617820737570706c7920746f6f20686967680000000000000000006044820152606401610675565b600083815260fb60205260409020548110156109905760405162461bcd60e51b815260206004820152602760248201527f43757272656e742062616c616e6365206578636565647320676976656e206d6160448201526678537570706c7960c81b6064820152608401610675565b600083815260fb60205260408082206002810184905560040154905183926101009092046001600160a01b0316917fc5d8aa673058ca711657496eae7c88ab5e64efd2f3391dcb3ed365b93ecb184f91a3505050565b6001600160a01b038516331480610a025750610a028533610578565b610a1e5760405162461bcd60e51b815260040161067590613f70565b610a2b8585858585611d71565b5050505050565b610a3a611c87565b610a42611f51565b565b600080610a4f611fa3565b82428111610a6f5760405162461bcd60e51b8152600401610675906140e3565b846001600160a01b038116610a965760405162461bcd60e51b815260040161067590614007565b600089815260fb60205260409020610aaf338b8b611fe9565b610ab88a61216d565b6000610ac48b8b61229e565b6004850154929850965091508690610ae0908b9060ff16611d09565b10610afd5760405162461bcd60e51b815260040161067590614158565b85826000016000828254610b119190614410565b9250508190555080826001016000828254610b2c9190614410565b9250508190555089826003016000828254610b479190614410565b909155505060018201541580610b7e5750610b6b6064670de0b6b3a764000061422b565b60018301548354610b7b91612454565b10155b610bb65760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b6044820152606401610675565b6004820154610be9908990610bcf90899060ff1661248f565b600485015461010090046001600160a01b031691906124bf565b5060048101546001600160a01b038089169161010081049091169082907ffb80d861da582b723be2d19507ce3e03851820c464abea89156ec77e089b1ad990610c36908a9060ff1661248f565b60408051918252602082018f9052015b60405180910390a45050509550959350505050565b60608151835114610cc05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610675565b6000835167ffffffffffffffff811115610cdc57610cdc614558565b604051908082528060200260200182016040528015610d05578160200160208202803683370190505b50905060005b8451811015610d7d57610d50858281518110610d2957610d29614542565b6020026020010151858381518110610d4357610d43614542565b602002602001015161060e565b828281518110610d6257610d62614542565b6020908102919091010152610d76816144de565b9050610d0b565b509392505050565b610d8d611c87565b670de0b6b3a7640000811115610db55760405162461bcd60e51b8152600401610675906140bc565b60ff8190556040518181527f0df0ce83543295289f05f3782542da3058e533082716a3b74f8913499444f3c5906020016107f7565b600080610df5611fa3565b82428111610e155760405162461bcd60e51b8152600401610675906140e3565b846001600160a01b038116610e3c5760405162461bcd60e51b815260040161067590614007565b600089815260fb6020526040902060040154600160a81b900460ff16610e745760405162461bcd60e51b815260040161067590613f39565b600089815260fb602052604090206002810154600490910154610e9b908a9060ff16611d09565b60008b815260fb6020526040902054610eb491906141e5565b1115610f025760405162461bcd60e51b815260206004820152601e60248201527f466f7262696464656e3a206d617820737570706c7920657863656564656400006044820152606401610675565b610f0b8961216d565b600089815260fb6020526040812060040154610f36908b90610f31908c9060ff16611d09565b612522565b9196509094509050848810610f5d5760405162461bcd60e51b815260040161067590614158565b60008a815260fb6020526040902060010154610f8a90610f7e9083906141e5565b6001600160ff1b031190565b610fcb5760405162461bcd60e51b8152602060048201526012602482015271098d2c2c4d2d8d2e8f240e8dede40d0d2ced60731b6044820152606401610675565b60008a815260fb6020526040902060040154610feb908a9060ff16611d09565b60008b815260fb6020526040812080549091906110099084906141e5565b909155505060008a815260fb60205260408120600101805483929061102f9084906141e5565b909155505060008a815260fb6020526040812060030180548792906110559084906141e5565b92505081905550611077878b876040518060200160405280600081525061273d565b60008a815260fb60205260409020600401546110a39061010090046001600160a01b031633308c61284a565b60008a815260fb60209081526040918290206004015482518c81529182018890526001600160a01b038a811693610100909204169133917ff5dd9317b9e63ac316ce44acc85f670b54b339cfa3e9076e1dd55065b922314b9101610c46565b61110a611c87565b610a426000612888565b61111c611c87565b610a426128da565b600080600080611132612917565b8092508193505050600061115161114c848460fe546129d0565b6129fb565b90508061115d846129fb565b945094505050509091565b6111718161216d565b50565b61117c611c87565b6000828152610105602090815260408083205460fb909252808320805460049182015492516370a0823160e01b815230928101929092529161122b9160ff82169161010090046001600160a01b0316906370a082319060240160206040518083038186803b1580156111ed57600080fd5b505afa158015611201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112259190613cdb565b90611d09565b6112359190614410565b61123f9190614410565b9050808211156112615760405162461bcd60e51b8152600401610675906140bc565b600083815260fb60205260408120805484929061127f9084906141e5565b9091555050600083815260fb60205260409020546001600160ff1b03116112f75760405162461bcd60e51b815260206004820152602660248201527f496d706f737369626c6520746f2073707265616420616363756d756c617465646044820152651032b93937b960d11b6064820152608401610675565b600083815260fb60209081526040918290206004015491518481526101009092046001600160a01b0316917f4941e18a2bcbb0f9fa0081238f26793a8ad8c202b913ae8bf5f7e523f68ff137910160405180910390a2505050565b60008061135d611fa3565b8242811161137d5760405162461bcd60e51b8152600401610675906140e3565b846001600160a01b0381166113a45760405162461bcd60e51b815260040161067590614007565b60008a815260fb6020526040902060040154600160a81b900460ff166113dc5760405162461bcd60e51b815260040161067590613f39565b600089815260fb6020526040902060040154600160a81b900460ff166114145760405162461bcd60e51b815260040161067590613f39565b600089815260fb60205260408082206004908101548d84529190922090910154610100918290046001600160a01b03908116929091041614156114885760405162461bcd60e51b815260206004820152600c60248201526b53616d65206164647265737360a01b6044820152606401610675565b60008a815260fb6020526040902060028101546004909101546114af908a9060ff16611d09565b60008c815260fb60205260409020546114c891906141e5565b11156115165760405162461bcd60e51b815260206004820152601e60248201527f466f7262696464656e3a206d617820737570706c7920657863656564656400006044820152606401610675565b60008a815260fb6020526040902060040154611563908b908b9061153e908c9060ff16611d09565b60008d815260fb602052604090206004015461155e908c9060ff16611d09565b612a4a565b60008b815260fb6020526040902060040154919550935061158890859060ff1661248f565b60008a815260fb60205260409020600401549094506115ab90849060ff1661248f565b60008b815260fb60205260409020600401549093506115da9061010090046001600160a01b031633308b61284a565b600089815260fb60205260409020600401546116059061010090046001600160a01b031687866124bf565b60008a815260fb602090815260408083206004908101548d855293829020015481516001600160a01b0361010095869004811682529490910484169281019290925281018a9052606081018690529087169033907f54787c404bb33c88e86f4baf88183a3b0141d0a848e6a9f7a13b66ae3a9b73d19060800160405180910390a35050965096945050505050565b610898338383612bd6565b6116a6611c87565b826001600160a01b0381166116cd5760405162461bcd60e51b815260040161067590614007565b6001600160a01b03808516600081815260fc6020908152604080832054835260fb9091529020600401546101009004909116141561174d5760405162461bcd60e51b815260206004820152601c60248201527f41737365742068617320616c7265616479206265656e206164646564000000006044820152606401610675565b6040805160e0810182526000808252602082015290810161176e8585611d09565b81526000602080830182905260ff8087166040808601919091526001600160a01b03808b166060808801919091526001608097880181905260fd8054885260fb87528488208a518155968a0151918701919091559288015160028601558701516003850155948601516004909301805460a088015160c0909801511515600160a81b0260ff60a81b1998909716610100026001600160a81b031990911694909316939093179190911794909416929092179091558154919061182f836144de565b909155506001600160a01b038516600081815260fc602052604080822093909355915190917f0e3c58ebfb2e7465fbb1c32e6b4f40c3c4f5ca77e8218a386aff8617831260d791a250505050565b611885611c87565b6101018190556040518181527f71592c407ca0abb34bb7ada163a2a8b25a2e58342a3c0926df1b9ce73cb214a5906020016107f7565b600054610100900460ff16158080156118db5750600054600160ff909116105b806118f55750303b1580156118f5575060005460ff166001145b6119585760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610675565b6000805460ff19166001179055801561197b576000805461ff0019166101001790555b611983612cb7565b61198b612ce6565b6119ac60405180606001604052806027815260200161463960279139612d19565b670de0b6b3a76400008311156119d45760405162461bcd60e51b8152600401610675906140bc565b670de0b6b3a76400008211156119fc5760405162461bcd60e51b8152600401610675906140bc565b60fe83905560ff829055670de0b6b3a76400006101005561010480546001600160a01b031916331790558015611a6c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b611a79611c87565b670de0b6b3a7640000811115611aa15760405162461bcd60e51b8152600401610675906140bc565b60fe8190556040518181527f3f4ccc115548cf9126e487dcdf7c805dbb3578de78180051ace88afa59675e9c906020016107f7565b6001600160a01b038516331480611af25750611af28533610578565b611b0e5760405162461bcd60e51b815260040161067590613f70565b610a2b8585858585612d49565b611b23611c87565b6001600160a01b038116611b885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610675565b61117181612888565b611b99611c87565b806001600160a01b038116611bc05760405162461bcd60e51b815260040161067590614007565b61010380546001600160a01b0319166001600160a01b0384169081179091556040517fd7ecd1f497e38c39a3455e0704e1bddc382baa8059756b571ff24b92cab7ff5490600090a25050565b611c14611c87565b806001600160a01b038116611c3b5760405162461bcd60e51b815260040161067590614007565b61010480546001600160a01b0319166001600160a01b0384169081179091556040517f698bdbadb3d770955212e2624318544242e40229072137a1dd6ac7edc93d847890600090a25050565b6033546001600160a01b03163314610a425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610675565b60005b60fd5481101561117157611cf78161216d565b80611d01816144de565b915050611ce4565b600060128260ff161015611d3e57611d22826012614427565b611d2d90600a614282565b611d3790846143b2565b90506106a3565b60128260ff161115611d6a57611d55601283614427565b611d6090600a614282565b611d37908461422b565b5090919050565b8151835114611dd35760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610675565b6001600160a01b038416611df95760405162461bcd60e51b81526004016106759061402d565b3360005b8451811015611ee3576000858281518110611e1a57611e1a614542565b602002602001015190506000858381518110611e3857611e38614542565b602090810291909101810151600084815260c9835260408082206001600160a01b038e168352909352919091205490915081811015611e895760405162461bcd60e51b815260040161067590614072565b600083815260c9602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611ec89084906141e5565b9250508190555050505080611edc906144de565b9050611dfd565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f33929190613f01565b60405180910390a4611f49818787878787612e77565b505050505050565b611f59612fe2565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff1615610a425760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610675565b6001600160a01b03831661204b5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610675565b3360006120578461302b565b905060006120648461302b565b604080516020808201835260009182905288825260c981528282206001600160a01b038b16835290522054909150848110156120ee5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610675565b600086815260c9602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6000818152610105602052604090205480158061218c57506101015481105b15612195575050565b60006121b861010054670de0b6b3a76400006121b19190614410565b8390613076565b905080156122195761010454600084815260fb6020526040902060040154612219916001600160a01b0316906121f290849060ff1661248f565b600086815260fb602052604090206004015461010090046001600160a01b031691906124bf565b60006122258284614410565b905080156122895760006122398583612522565b50600087815260fb6020526040812060010180549294508493509161225f9084906141e5565b9091555050600085815260fb6020526040812080548492906122829084906141e5565b9091555050505b50505060009081526101056020526040812055565b600082815260fb602052604081206003810154600190910154829182916122c69086906143b2565b6122d0919061422b565b9150816123105760405162461bcd60e51b815260206004820152600e60248201526d5a65726f206c697175696469747960901b6044820152606401610675565b600061231b83613096565b612324906144f9565b600087815260fb60205260408120549192509061234090613096565b600088815260fb60205260408120600101549192509061235f90613096565b60fe54909150600061237185846141a4565b9050600061237f8585613100565b905060006123a16123908584613100565b61239a90846143d1565b8690613134565b9050600060026123c36123bc87670de0b6b3a76400006143d1565b8a90613134565b6123cd90846141a4565b6123d791906141fd565b9050600061240d826123f36123ec888061432d565b8990613134565b6123fd858061432d565b61240791906141a4565b90613154565b61241790836141a4565b905061242661114c828a6143d1565b9b508b8b10612440576124398c8c614410565b9950612444565b8a9b505b5050505050505050509250925092565b60008161246260028261422b565b612474670de0b6b3a7640000866143b2565b61247e91906141e5565b612488919061422b565b9392505050565b600060128260ff1610156124a857611d55826012614427565b60128260ff161115611d6a57611d22601283614427565b6040516001600160a01b038316602482015260448101829052611a6c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613218565b60008060008061253185613096565b600087815260fb60205260408120549192509061254d90613096565b600088815260fb60205260408120600101549192509061256c90613096565b60fe546000955090915081612583578795506126cc565b600061258f85856141a4565b12156125ad5760405162461bcd60e51b8152600401610675906140bc565b60006125b98484613100565b905060006125c785876141a4565b905060006125d58486613134565b6125e090600261432d565b6125fc6125f586670de0b6b3a76400006143d1565b8490613134565b61260691906141a4565b9050600061261e866126188782613134565b90613134565b6126288480613134565b61264a866126368a8a61432d565b61264091906141fd565b61239a908b6143d1565b61265491906143d1565b61265e91906141a4565b905060008161266e87600461432d565b612678919061432d565b612682848061432d565b61268c91906143d1565b90506126c460026126ba886126a18588613154565b6126aa886144f9565b6126b491906141a4565b90613100565b61114c91906141fd565b9a5050505050505b8786106126e4576126dd8887614410565b94506126e8565b8795505b600089815260fb6020526040902060010154801561272d5760008a815260fb6020526040902060030154819061271e90896143b2565b612728919061422b565b61272f565b865b975050505050509250925092565b6001600160a01b03841661279d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610675565b3360006127a98561302b565b905060006127b68561302b565b9050600086815260c9602090815260408083206001600160a01b038b168452909152812080548792906127ea9084906141e5565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612164836000898989896132ea565b6040516001600160a01b03808516602483015283166044820152606481018290526128829085906323b872dd60e01b906084016124eb565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6128e2611fa3565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f863390565b60fe546000908190815b60fd548110156129ca57600081815260fb602052604081205461294390613096565b600083815260fb60205260408120600101549192509061296290613096565b9050806129705750506129b8565b600061297c8383613100565b905061298882876141a4565b95506129a86129978683613100565b6129a190836143d1565b8390613134565b6129b290886141a4565b96505050505b806129c2816144de565b915050612921565b50509091565b6000806129dd8585613100565b6129e6906144f9565b90506129f281846133b4565b95945050505050565b600080821215612a465760405162461bcd60e51b815260206004820152601660248201527576616c7565206d75737420626520706f73697469766560501b6044820152606401610675565b5090565b600084815260fb60205260408120548190612a6990610f7e90866141e5565b612ab55760405162461bcd60e51b815260206004820152601760248201527f496e697469616c20616d6f756e7420746f6f20686967680000000000000000006044820152606401610675565b612ac88686612ac387613096565b6133ef565b9092509050818310612aec5760405162461bcd60e51b815260040161067590614158565b6000858152610105602052604081208054839290612b0b9084906141e5565b9091555050600086815260fb602052604081208054869290612b2e9084906141e5565b90915550612b3e905081836141e5565b600086815260fb602052604081208054909190612b5c908490614410565b90915550612b7590506064670de0b6b3a764000061422b565b600086815260fb6020526040902060018101549054612b9391612454565b1015612bcd5760405162461bcd60e51b81526020600482015260096024820152682337b93134b23232b760b91b6044820152606401610675565b94509492505050565b816001600160a01b0316836001600160a01b03161415612c4a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610675565b6001600160a01b03838116600081815260ca6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600054610100900460ff16612cde5760405162461bcd60e51b81526004016106759061410d565b610a4261360b565b600054610100900460ff16612d0d5760405162461bcd60e51b81526004016106759061410d565b6065805460ff19169055565b600054610100900460ff16612d405760405162461bcd60e51b81526004016106759061410d565b6111718161363b565b6001600160a01b038416612d6f5760405162461bcd60e51b81526004016106759061402d565b336000612d7b8561302b565b90506000612d888561302b565b9050600086815260c9602090815260408083206001600160a01b038c16845290915290205485811015612dcd5760405162461bcd60e51b815260040161067590614072565b600087815260c9602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612e0c9084906141e5565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612e6c848a8a8a8a8a6132ea565b505050505050505050565b6001600160a01b0384163b15611f495760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612ebb9089908990889088908890600401613e56565b602060405180830381600087803b158015612ed557600080fd5b505af1925050508015612f05575060408051601f3d908101601f19168201909252612f0291810190613ca5565b60015b612fb257612f1161456e565b806308c379a01415612f4b5750612f2661458a565b80612f315750612f4d565b8060405162461bcd60e51b81526004016106759190613f26565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610675565b6001600160e01b0319811663bc197c8160e01b146121645760405162461bcd60e51b815260040161067590613fbf565b60655460ff16610a425760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610675565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061306557613065614542565b602090810291909101015292915050565b6000670de0b6b3a764000061308c60028261422b565b61247484866143b2565b60006001600160ff1b03821115612a465760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610675565b60008161310e6002826141fd565b613120670de0b6b3a76400008661432d565b61312a91906141a4565b61248891906141fd565b6000670de0b6b3a764000061314a6002826141fd565b613120848661432d565b600060038313156132095760008213801561316f5750828213155b1561317b5750806131ab565b600082128015613193575082613190836144f9565b13155b156131a8576131a1826144f9565b90506131ab565b50815b60006002826131ba81876141fd565b6131c491906141a4565b6131ce91906141fd565b90505b818114613203579050806002816131e881876141fd565b6131f291906141a4565b6131fc91906141fd565b90506131d1565b506106a3565b82156106a35750600192915050565b600061326d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661366b9092919063ffffffff16565b805190915015611a6c578080602001905181019061328b9190613c6b565b611a6c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610675565b6001600160a01b0384163b15611f495760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061332e9089908990889088908890600401613eb4565b602060405180830381600087803b15801561334857600080fd5b505af1925050508015613378575060408051601f3d908101601f1916820190925261337591810190613ca5565b60015b61338457612f1161456e565b6001600160e01b0319811663f23a6e6160e01b146121645760405162461bcd60e51b815260040161067590613fbf565b60006002836133e581670de0b6b3a76400006133d187600461432d565b6133db919061432d565b6123fd888061432d565b61312a91906143d1565b600082815260fb6020526040812054819081908161340c82613096565b600089815260fb60205260408120549192509061342890613096565b60008a815260fb60205260408120600101549192509061344790613096565b60008a815260fb60205260408120600101549192509061346690613096565b60fe54909150811580159061347a57508215155b6134965760405162461bcd60e51b8152600401610675906140bc565b60006134cf866134a6858061432d565b6134b091906141fd565b866134bb878061432d565b6134c591906141fd565b6129a191906141a4565b6134d987876141a4565b6134e391906143d1565b905060006134f5856126b48e896141a4565b905060006135038386613100565b8561350e8685613100565b61351890856143d1565b613522908961432d565b61352c91906141fd565b61353691906143d1565b9050600061354482866133b4565b90506000896135538884613134565b61355d91906143d1565b9050600081121561357b5761357461114c826144f9565b9b50613587565b613584816129fb565b9b505b8b8b10156135c95760405162461bcd60e51b815260206004820152600f60248201526e09cdee840cadcdeeaced040c6c2e6d608b1b6044820152606401610675565b60ff546135d7908d90613076565b9c5060008f13156135f3576135ec8d8d614410565b9d506135f7565b8b9d505b505050505050505050505050935093915050565b600054610100900460ff166136325760405162461bcd60e51b81526004016106759061410d565b610a4233612888565b600054610100900460ff166136625760405162461bcd60e51b81526004016106759061410d565b61117181613682565b606061367a8484600085613695565b949350505050565b80516108989060cb9060208401906137ff565b6060824710156136f65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610675565b6001600160a01b0385163b61374d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610675565b600080866001600160a01b031685876040516137699190613e3a565b60006040518083038185875af1925050503d80600081146137a6576040519150601f19603f3d011682016040523d82523d6000602084013e6137ab565b606091505b50915091506137bb8282866137c6565b979650505050505050565b606083156137d5575081612488565b8251156137e55782518084602001fd5b8160405162461bcd60e51b81526004016106759190613f26565b82805461380b90614476565b90600052602060002090601f01602090048101928261382d5760008555613873565b82601f1061384657805160ff1916838001178555613873565b82800160010185558215613873579182015b82811115613873578251825591602001919060010190613858565b50612a469291505b80821115612a46576000815560010161387b565b80356001600160a01b03811681146138a657600080fd5b919050565b600082601f8301126138bc57600080fd5b813560206138c982614180565b6040516138d682826144b1565b8381528281019150858301600585901b870184018810156138f657600080fd5b60005b85811015613915578135845292840192908401906001016138f9565b5090979650505050505050565b600082601f83011261393357600080fd5b813567ffffffffffffffff81111561394d5761394d614558565b604051613964601f8301601f1916602001826144b1565b81815284602083860101111561397957600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156139a857600080fd5b6124888261388f565b600080604083850312156139c457600080fd5b6139cd8361388f565b91506139db6020840161388f565b90509250929050565b600080600080600060a086880312156139fc57600080fd5b613a058661388f565b9450613a136020870161388f565b9350604086013567ffffffffffffffff80821115613a3057600080fd5b613a3c89838a016138ab565b94506060880135915080821115613a5257600080fd5b613a5e89838a016138ab565b93506080880135915080821115613a7457600080fd5b50613a8188828901613922565b9150509295509295909350565b600080600080600060a08688031215613aa657600080fd5b613aaf8661388f565b9450613abd6020870161388f565b93506040860135925060608601359150608086013567ffffffffffffffff811115613ae757600080fd5b613a8188828901613922565b60008060408385031215613b0657600080fd5b613b0f8361388f565b91506020830135613b1f81614614565b809150509250929050565b60008060408385031215613b3d57600080fd5b613b468361388f565b946020939093013593505050565b600080600060608486031215613b6957600080fd5b613b728461388f565b925060208401359150604084013560ff81168114613b8f57600080fd5b809150509250925092565b60008060408385031215613bad57600080fd5b823567ffffffffffffffff80821115613bc557600080fd5b818501915085601f830112613bd957600080fd5b81356020613be682614180565b604051613bf382826144b1565b8381528281019150858301600585901b870184018b1015613c1357600080fd5b600096505b84871015613c3d57613c298161388f565b835260019690960195918301918301613c18565b5096505086013592505080821115613c5457600080fd5b50613c61858286016138ab565b9150509250929050565b600060208284031215613c7d57600080fd5b815161248881614614565b600060208284031215613c9a57600080fd5b813561248881614622565b600060208284031215613cb757600080fd5b815161248881614622565b600060208284031215613cd457600080fd5b5035919050565b600060208284031215613ced57600080fd5b5051919050565b60008060408385031215613d0757600080fd5b823591506020830135613b1f81614614565b60008060408385031215613d2c57600080fd5b50508035926020909101359150565b600080600080600060a08688031215613d5357600080fd5b853594506020860135935060408601359250613d716060870161388f565b949793965091946080013592915050565b60008060008060008060c08789031215613d9b57600080fd5b86359550602087013594506040870135935060608701359250613dc06080880161388f565b915060a087013590509295509295509295565b600081518084526020808501945080840160005b83811015613e0357815187529582019590820190600101613de7565b509495945050505050565b60008151808452613e2681602086016020860161444a565b601f01601f19169290920160200192915050565b60008251613e4c81846020870161444a565b9190910192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090613e8290830186613dd3565b8281036060840152613e948186613dd3565b90508281036080840152613ea88185613e0e565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906137bb90830184613e0e565b6020815260006124886020830184613dd3565b604081526000613f146040830185613dd3565b82810360208401526129f28185613dd3565b6020815260006124886020830184613e0e565b6020808252601e908201527f417373657420776173206465616374697661746564206279206f776e65720000604082015260600190565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252600d908201526c496e76616c69642076616c756560981b604082015260600190565b60208082526010908201526f111958591b1a5b99481b9bdd081b595d60821b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252600e908201526d416d6f756e7420746f6f206c6f7760901b604082015260600190565b600067ffffffffffffffff82111561419a5761419a614558565b5060051b60200190565b600080821280156001600160ff1b03849003851316156141c6576141c6614516565b600160ff1b83900384128116156141df576141df614516565b50500190565b600082198211156141f8576141f8614516565b500190565b60008261420c5761420c61452c565b600160ff1b82146000198414161561422657614226614516565b500590565b60008261423a5761423a61452c565b500490565b600181815b8085111561427a57816000190482111561426057614260614516565b8085161561426d57918102915b93841c9390800290614244565b509250929050565b600061248860ff84168360008261429b575060016106a3565b816142a8575060006106a3565b81600181146142be57600281146142c8576142e4565b60019150506106a3565b60ff8411156142d9576142d9614516565b50506001821b6106a3565b5060208310610133831016604e8410600b8410161715614307575081810a6106a3565b614311838361423f565b806000190482111561432557614325614516565b029392505050565b60006001600160ff1b038184138284138082168684048611161561435357614353614516565b600160ff1b600087128281168783058912161561437257614372614516565b6000871292508782058712848416161561438e5761438e614516565b878505871281841616156143a4576143a4614516565b505050929093029392505050565b60008160001904831182151516156143cc576143cc614516565b500290565b60008083128015600160ff1b8501841216156143ef576143ef614516565b6001600160ff1b038401831381161561440a5761440a614516565b50500390565b60008282101561442257614422614516565b500390565b600060ff821660ff84168082101561444157614441614516565b90039392505050565b60005b8381101561446557818101518382015260200161444d565b838111156128825750506000910152565b600181811c9082168061448a57607f821691505b602082108114156144ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff811182821017156144d7576144d7614558565b6040525050565b60006000198214156144f2576144f2614516565b5060010190565b6000600160ff1b82141561450f5761450f614516565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156145875760046000803e5060005160e01c5b90565b600060443d10156145985790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156145c857505050505090565b82850191508151818111156145e05750505050505090565b843d87010160208285010111156145fa5750505050505090565b614609602082860101876144b1565b509095945050505050565b801515811461117157600080fd5b6001600160e01b03198116811461117157600080fdfe68747470733a2f2f6f63746f6e6674732e73796d62696f7369732e66696e616e63652f7b69647da264697066735822122024564eb74644f14216c8d97a92ce81d620b3e57c547e0af319e32b20a8c7c9fd64736f6c63430008050033";
var isSuperArgs10 = (xs) => xs.length > 1;
var OmniPool__factory = class extends import_ethers24.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs10(args)) {
      __super(...args);
    } else {
      __super(_abi23, _bytecode10, args[0]);
    }
    this.contractName = "OmniPool";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers24.utils.Interface(_abi23);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers24.Contract(address2, _abi23, signerOrProvider);
  }
};
OmniPool__factory.bytecode = _bytecode10;
OmniPool__factory.abi = _abi23;

// src/crosschain/contracts/factories/OmniPoolOracle__factory.ts
var import_ethers25 = require("ethers");
var _abi24 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "a",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "devaddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pool",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "lastIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lpDividendRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lpFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "poolDev",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "quoteDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "lpTokenToMint",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liabilityToMint",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fromAsset",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_toAsset",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "_fromAmount",
        type: "int256"
      }
    ],
    name: "quoteFrom",
    outputs: [
      {
        internalType: "uint256",
        name: "actualToAmount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "lpFeeAmount",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_liquidity",
        type: "uint256"
      }
    ],
    name: "quoteWithdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liabilityToBurn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode11 = "0x608060405234801561001057600080fd5b506123b1806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80638456cb59116100b2578063c4d66de811610081578063e8fa77a011610066578063e8fa77a01461023b578063f2fde38b1461024e578063f3f6f0d71461026157600080fd5b8063c4d66de814610215578063d49e77cd1461022857600080fd5b80638456cb59146101cc5780638da5cb5b146101d45780639c6f81cb146101e5578063a3602bee146101ed57600080fd5b80635c975abb116100ee5780635c975abb1461019e578063704ce43e146101b4578063715018a6146101bc578063815bfd29146101c457600080fd5b80630dbe671f146101205780630f4d3eaf1461013b57806316f0115b146101695780633f4ba83a14610194575b600080fd5b610128610269565b6040519081526020015b60405180910390f35b61014e610149366004611fde565b610304565b60408051938452602084019290925290820152606001610132565b60975461017c906001600160a01b031681565b6040516001600160a01b039091168152602001610132565b61019c610816565b005b60655460ff166040519015158152602001610132565b61012861087a565b61019c6108d8565b6101286108ea565b61019c610948565b6033546001600160a01b031661017c565b61017c6109aa565b6102006101fb366004612000565b610a40565b60408051928352602083019190915201610132565b61019c610223366004611ee0565b611157565b60985461017c906001600160a01b031681565b61014e610249366004611fde565b6112c1565b61019c61025c366004611ee0565b6117b3565b610128611843565b609754604080517f0dbe671f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691630dbe671f916004808301926020929190829003018186803b1580156102c757600080fd5b505afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190611fc5565b905090565b609754604051634f75b51160e11b815260048101849052600091829182916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103859190611f21565b60600151609754604051634f75b51160e11b81526004810188905286916001600160a01b031690639eeb6a229060240160e06040518083038186803b1580156103cd57600080fd5b505afa1580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104059190611f21565b60200151610413919061226c565b61041d91906120ca565b9150816104715760405162461bcd60e51b815260206004820152600e60248201527f5a65726f206c697175696469747900000000000000000000000000000000000060448201526064015b60405180910390fd5b600061047c8361231d565b609754604051634f75b51160e11b8152600481018990529192506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190611f21565b51609754604051634f75b51160e11b8152600481018a90529192506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b15801561054957600080fd5b505afa15801561055d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105819190611f21565b6020015190506000609760009054906101000a90046001600160a01b03166001600160a01b0316630dbe671f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d757600080fd5b505afa1580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f9190611fc5565b9050600061061d858461202c565b9050600061062b85856118a1565b9050600061064d61063c85846118a1565b610646908461228b565b86906118de565b90506000600261066f61066887670de0b6b3a764000061228b565b8a906118de565b610679908461202c565b610683919061209c565b905060006106b98261069f61069888806121cc565b89906118de565b6106a985806121cc565b6106b3919061202c565b906118fe565b6106c3908361202c565b90506106cf818961228b565b9b5050505050508686106106ee576106e787876122e3565b94506106f2565b8596505b609754604051634f75b51160e11b8152600481018b905261077b916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561073857600080fd5b505afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190611f21565b6080015188906119c2565b609754604051634f75b51160e11b8152600481018c9052919850610809916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b1580156107c657600080fd5b505afa1580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190611f21565b6080015186906119c2565b9450505050509250925092565b6098546001600160a01b031633146108705760405162461bcd60e51b815260206004820152600960248201527f466f7262696464656e00000000000000000000000000000000000000000000006044820152606401610468565b610878611a2a565b565b609754604080517f704ce43e00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163704ce43e916004808301926020929190829003018186803b1580156102c757600080fd5b6108e0611a7c565b6108786000611ad6565b609754604080517f815bfd2900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163815bfd29916004808301926020929190829003018186803b1580156102c757600080fd5b6098546001600160a01b031633146109a25760405162461bcd60e51b815260206004820152600960248201527f466f7262696464656e00000000000000000000000000000000000000000000006044820152606401610468565b610878611b40565b609754604080517f91cca3db00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916391cca3db916004808301926020929190829003018186803b158015610a0857600080fd5b505afa158015610a1c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190611f04565b609754604051634f75b51160e11b81526004810185905260009182918291829182918291610ad6916001600160a01b031690639eeb6a229060240160e06040518083038186803b158015610a9357600080fd5b505afa158015610aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acb9190611f21565b608001518890611b7d565b609754604051634f75b51160e11b8152600481018b90529198506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190611f21565b51609754604080517f0dbe671f000000000000000000000000000000000000000000000000000000008152905192935083926000926001600160a01b031691630dbe671f916004808301926020929190829003018186803b158015610bbc57600080fd5b505afa158015610bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf49190611fc5565b609754604051634f75b51160e11b8152600481018f90529192506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b158015610c3e57600080fd5b505afa158015610c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c769190611f21565b6000015190506000609760009054906101000a90046001600160a01b03166001600160a01b0316639eeb6a228f6040518263ffffffff1660e01b8152600401610cc191815260200190565b60e06040518083038186803b158015610cd957600080fd5b505afa158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d119190611f21565b6020015190506000609760009054906101000a90046001600160a01b03166001600160a01b0316639eeb6a228f6040518263ffffffff1660e01b8152600401610d5c91815260200190565b60e06040518083038186803b158015610d7457600080fd5b505afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190611f21565b60200151929850909650909450508315801590610dc857508415155b610e145760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642076616c7565000000000000000000000000000000000000006044820152606401610468565b6000610e5483610e2487806121cc565b610e2e919061209c565b88610e3989806121cc565b610e43919061209c565b610e4d919061202c565b83906118de565b610e5e848961202c565b610e68919061228b565b90506000610e8087610e7a8e8b61202c565b906118a1565b90506000610e8e83886118a1565b87610e9986856118a1565b610ea3908561228b565b610ead908b6121cc565b610eb7919061209c565b610ec1919061228b565b90506000610ecf8286611bd7565b9050600086610ede8a846118de565b610ee8919061228b565b90506000811215610f0357610efc8161231d565b9b50610f07565b809b505b50505088851015610f5a5760405162461bcd60e51b815260206004820152600f60248201527f4e6f7420656e6f756768206361736800000000000000000000000000000000006044820152606401610468565b609754604080517f704ce43e0000000000000000000000000000000000000000000000000000000081529051610ff8926001600160a01b03169163704ce43e916004808301926020929190829003018186803b158015610fb957600080fd5b505afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190611fc5565b8a90611c12565b995060008c13156110145761100d8a8a6122e3565b9a50611018565b889a505b609754604051634f75b51160e11b8152600481018f90526110a1916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561105e57600080fd5b505afa158015611072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110969190611f21565b608001518c906119c2565b9a50611144609760009054906101000a90046001600160a01b03166001600160a01b0316639eeb6a228f6040518263ffffffff1660e01b81526004016110e991815260200190565b60e06040518083038186803b15801561110157600080fd5b505afa158015611115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111399190611f21565b608001518b906119c2565b9950505050505050505050935093915050565b600054610100900460ff16158080156111775750600054600160ff909116105b806111915750303b158015611191575060005460ff166001145b6112035760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610468565b6000805460ff191660011790558015611226576000805461ff0019166101001790555b61122e611c46565b611236611ccb565b609780546001600160a01b0384167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155609880549091163317905580156112bd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b609754604051634f75b51160e11b81526004810184905260009182918291611353916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190611f21565b608001518590611d54565b609754604051634f75b51160e11b81526004810188905291955085916000916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d59190611f21565b51609754604051634f75b51160e11b8152600481018a90529192506000916001600160a01b0390911690639eeb6a229060240160e06040518083038186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190611f21565b6020015190506000609760009054906101000a90046001600160a01b03166001600160a01b0316630dbe671f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ae57600080fd5b505afa1580156114c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e69190611fc5565b9050816114f557879550611665565b6000611501858561202c565b121561154f5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642076616c7565000000000000000000000000000000000000006044820152606401610468565b600061155b84846118a1565b90506000611569858761202c565b9050600061157784866118de565b6115829060026121cc565b61159e61159786670de0b6b3a764000061228b565b84906118de565b6115a8919061202c565b905060006115c0866115ba87826118de565b906118de565b6115ca84806118de565b6115ec866115d88a8a6121cc565b6115e2919061209c565b610646908b61228b565b6115f6919061228b565b611600919061202c565b90506000816116108760046121cc565b61161a91906121cc565b61162484806121cc565b61162e919061228b565b905060026116538761164084876118fe565b6116498761231d565b610e7a919061202c565b61165d919061209c565b9a5050505050505b87861061167d5761167688876122e3565b9450611681565b8795505b609754604051634f75b51160e11b8152600481018b90526000916001600160a01b031690639eeb6a229060240160e06040518083038186803b1580156116c657600080fd5b505afa1580156116da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fe9190611f21565b60200151905080156117a357609754604051634f75b51160e11b8152600481018c905282916001600160a01b031690639eeb6a229060240160e06040518083038186803b15801561174e57600080fd5b505afa158015611762573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117869190611f21565b60600151611794908961226c565b61179e91906120ca565b6117a5565b865b975050505050509250925092565b6117bb611a7c565b6001600160a01b0381166118375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610468565b61184081611ad6565b50565b609754604080517ff3f6f0d700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163f3f6f0d7916004808301926020929190829003018186803b1580156102c757600080fd5b6000816118af60028261209c565b6118c1670de0b6b3a7640000866121cc565b6118cb919061202c565b6118d5919061209c565b90505b92915050565b6000670de0b6b3a76400006118f460028261209c565b6118c184866121cc565b600060038313156119b3576000821380156119195750828213155b15611925575080611955565b60008212801561193d57508261193a8361231d565b13155b156119525761194b8261231d565b9050611955565b50815b6000600282611964818761209c565b61196e919061202c565b611978919061209c565b90505b8181146119ad57905080600281611992818761209c565b61199c919061202c565b6119a6919061209c565b905061197b565b506118d8565b82156118d85750600192915050565b600060128260ff1610156119f7576119db8260126122fa565b6119e690600a612121565b6119f090846120ca565b90506118d8565b60128260ff161115611a2357611a0e6012836122fa565b611a1990600a612121565b6119f0908461226c565b5090919050565b611a32611d84565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6033546001600160a01b031633146108785760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610468565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611b48611dd6565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a5f3390565b600060128260ff161015611bab57611b968260126122fa565b611ba190600a612121565b6119f090846121cc565b60128260ff161115611a2357611bc26012836122fa565b611bcd90600a612121565b6119f0908461209c565b6000600283611c0881670de0b6b3a7640000611bf48760046121cc565b611bfe91906121cc565b6106a988806121cc565b6118cb919061228b565b6000670de0b6b3a7640000611c286002826120ca565b611c32848661226c565b611c3c9190612084565b6118d591906120ca565b600054610100900460ff16611cc35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610468565b610878611e29565b600054610100900460ff16611d485760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610468565b6065805460ff19169055565b600060128260ff161015611d6d57611a0e8260126122fa565b60128260ff161115611a23576119db6012836122fa565b60655460ff166108785760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610468565b60655460ff16156108785760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610468565b600054610100900460ff16611ea65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610468565b61087833611ad6565b8051611eba81612366565b919050565b80518015158114611eba57600080fd5b805160ff81168114611eba57600080fd5b600060208284031215611ef257600080fd5b8135611efd81612366565b9392505050565b600060208284031215611f1657600080fd5b8151611efd81612366565b600060e08284031215611f3357600080fd5b60405160e0810181811067ffffffffffffffff82111715611f6457634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152611f9760808401611ecf565b6080820152611fa860a08401611eaf565b60a0820152611fb960c08401611ebf565b60c08201529392505050565b600060208284031215611fd757600080fd5b5051919050565b60008060408385031215611ff157600080fd5b50508035926020909101359150565b60008060006060848603121561201557600080fd5b505081359360208301359350604090920135919050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156120665761206661233a565b82600160ff1b03841281161561207e5761207e61233a565b50500190565b600082198211156120975761209761233a565b500190565b6000826120ab576120ab612350565b6000198314600160ff1b831416156120c5576120c561233a565b500590565b6000826120d9576120d9612350565b500490565b600181815b808511156121195781600019048211156120ff576120ff61233a565b8085161561210c57918102915b93841c93908002906120e3565b509250929050565b60006118d560ff84168360008261213a575060016118d8565b81612147575060006118d8565b816001811461215d576002811461216757612183565b60019150506118d8565b60ff8411156121785761217861233a565b50506001821b6118d8565b5060208310610133831016604e8410600b84101617156121a6575081810a6118d8565b6121b083836120de565b80600019048211156121c4576121c461233a565b029392505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60008413600084138583048511828216161561220d5761220d61233a565b600160ff1b600087128682058812818416161561222c5761222c61233a565b600087129250878205871284841616156122485761224861233a565b8785058712818416161561225e5761225e61233a565b505050929093029392505050565b60008160001904831182151516156122865761228661233a565b500290565b600080831283600160ff1b018312811516156122a9576122a961233a565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0183138116156122dd576122dd61233a565b50500390565b6000828210156122f5576122f561233a565b500390565b600060ff821660ff8416808210156123145761231461233a565b90039392505050565b6000600160ff1b8214156123335761233361233a565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b038116811461184057600080fdfea26469706673582212203b7f3bb1aa41c8479d600ab7a7c4738d0a79beab9ad61c6b4563e2091d13d90764736f6c63430008050033";
var isSuperArgs11 = (xs) => xs.length > 1;
var OmniPoolOracle__factory = class extends import_ethers25.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs11(args)) {
      __super(...args);
    } else {
      __super(_abi24, _bytecode11, args[0]);
    }
    this.contractName = "OmniPoolOracle";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers25.utils.Interface(_abi24);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers25.Contract(address2, _abi24, signerOrProvider);
  }
};
OmniPoolOracle__factory.bytecode = _bytecode11;
OmniPoolOracle__factory.abi = _abi24;

// src/crosschain/contracts/factories/OneInchOracle__factory.ts
var import_ethers26 = require("ethers");
var _abi25 = [
  {
    inputs: [
      {
        internalType: "contract MultiWrapper",
        name: "_multiWrapper",
        type: "address"
      },
      {
        internalType: "contract IOracle[]",
        name: "existingOracles",
        type: "address[]"
      },
      {
        internalType: "enum OffchainOracle.OracleType[]",
        name: "oracleTypes",
        type: "uint8[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "existingConnectors",
        type: "address[]"
      },
      {
        internalType: "contract IERC20",
        name: "wBase",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "connector",
        type: "address"
      }
    ],
    name: "ConnectorAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "connector",
        type: "address"
      }
    ],
    name: "ConnectorRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract MultiWrapper",
        name: "multiWrapper",
        type: "address"
      }
    ],
    name: "MultiWrapperUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IOracle",
        name: "oracle",
        type: "address"
      },
      {
        indexed: false,
        internalType: "enum OffchainOracle.OracleType",
        name: "oracleType",
        type: "uint8"
      }
    ],
    name: "OracleAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IOracle",
        name: "oracle",
        type: "address"
      },
      {
        indexed: false,
        internalType: "enum OffchainOracle.OracleType",
        name: "oracleType",
        type: "uint8"
      }
    ],
    name: "OracleRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "connector",
        type: "address"
      }
    ],
    name: "addConnector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IOracle",
        name: "oracle",
        type: "address"
      },
      {
        internalType: "enum OffchainOracle.OracleType",
        name: "oracleKind",
        type: "uint8"
      }
    ],
    name: "addOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "connectors",
    outputs: [
      {
        internalType: "contract IERC20[]",
        name: "allConnectors",
        type: "address[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "srcToken",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "dstToken",
        type: "address"
      },
      {
        internalType: "bool",
        name: "useWrappers",
        type: "bool"
      }
    ],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "weightedRate",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "srcToken",
        type: "address"
      },
      {
        internalType: "bool",
        name: "useSrcWrappers",
        type: "bool"
      }
    ],
    name: "getRateToEth",
    outputs: [
      {
        internalType: "uint256",
        name: "weightedRate",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "multiWrapper",
    outputs: [
      {
        internalType: "contract MultiWrapper",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "oracles",
    outputs: [
      {
        internalType: "contract IOracle[]",
        name: "allOracles",
        type: "address[]"
      },
      {
        internalType: "enum OffchainOracle.OracleType[]",
        name: "oracleTypes",
        type: "uint8[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "connector",
        type: "address"
      }
    ],
    name: "removeConnector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IOracle",
        name: "oracle",
        type: "address"
      },
      {
        internalType: "enum OffchainOracle.OracleType",
        name: "oracleKind",
        type: "uint8"
      }
    ],
    name: "removeOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract MultiWrapper",
        name: "_multiWrapper",
        type: "address"
      }
    ],
    name: "setMultiWrapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var OneInchOracle__factory = class {
  static createInterface() {
    return new import_ethers26.utils.Interface(_abi25);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers26.Contract(address2, _abi25, signerOrProvider);
  }
};
OneInchOracle__factory.abi = _abi25;

// src/crosschain/contracts/factories/Pair__factory.ts
var import_ethers27 = require("ethers");
var _abi26 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "Burn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1",
        type: "uint256"
      }
    ],
    name: "Mint",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0In",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1In",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0Out",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1Out",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "Swap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint112",
        name: "reserve0",
        type: "uint112"
      },
      {
        indexed: false,
        internalType: "uint112",
        name: "reserve1",
        type: "uint112"
      }
    ],
    name: "Sync",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    constant: true,
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "MINIMUM_LIQUIDITY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "burn",
    outputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    payable: false,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "getReserves",
    outputs: [
      {
        internalType: "uint112",
        name: "reserve0",
        type: "uint112"
      },
      {
        internalType: "uint112",
        name: "reserve1",
        type: "uint112"
      },
      {
        internalType: "uint32",
        name: "blockTimestampLast",
        type: "uint32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "kLast",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    payable: false,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "permit",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "price0CumulativeLast",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "price1CumulativeLast",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "skim",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "amount0Out",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount1Out",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "swap",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    payable: false,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: false,
    inputs: [],
    name: "sync",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];
var Pair__factory = class {
  static createInterface() {
    return new import_ethers27.utils.Interface(_abi26);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers27.Contract(address2, _abi26, signerOrProvider);
  }
};
Pair__factory.abi = _abi26;

// src/crosschain/contracts/factories/PartnerFeeCollector__factory.ts
var import_ethers28 = require("ethers");
var _abi27 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "partner",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "FeeClaimed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "partner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    name: "FeeCollected",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "partner",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeRate",
        type: "uint256"
      }
    ],
    name: "PartnerActivated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "partner",
        type: "address"
      }
    ],
    name: "PartnerDeactivated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "partner",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeRate",
        type: "uint256"
      }
    ],
    name: "PartnerFeeRateUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "partner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    name: "PartnerFixedFeeUpdated",
    type: "event"
  },
  {
    inputs: [],
    name: "WAD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "partner",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "feeRate",
        type: "uint256"
      }
    ],
    name: "activatePartner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_defaultPartner",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_defaultFeeRate",
        type: "uint256"
      }
    ],
    name: "changeDefaultPartner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "claimFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "address",
        name: "partner",
        type: "address"
      }
    ],
    name: "collectFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "collectedFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "partner",
        type: "address"
      }
    ],
    name: "deactivatePartner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "defaultPartner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "fixedFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_defaultPartner",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_defaultFeeRate",
        type: "uint256"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "partners",
    outputs: [
      {
        internalType: "bool",
        name: "isActive",
        type: "bool"
      },
      {
        internalType: "uint256",
        name: "feeRate",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "partner",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "feeRate",
        type: "uint256"
      }
    ],
    name: "setFeeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "partner",
        type: "address"
      },
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "newFixedFee",
        type: "uint256"
      }
    ],
    name: "setFixedFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var PartnerFeeCollector__factory = class {
  static createInterface() {
    return new import_ethers28.utils.Interface(_abi27);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers28.Contract(address2, _abi27, signerOrProvider);
  }
};
PartnerFeeCollector__factory.abi = _abi27;

// src/crosschain/contracts/factories/Portal__factory.ts
var import_ethers29 = require("ethers");
var _abi28 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "crossChainID",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bridgingFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "BurnCompleted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "clientId",
        type: "bytes32"
      }
    ],
    name: "ClientIdLog",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "MetaRevertRequest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "RevertBurnRequest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bridgingFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "RevertSynthesizeCompleted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "metaRouter",
        type: "address"
      }
    ],
    name: "SetMetaRouter",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "threshold",
        type: "uint256"
      }
    ],
    name: "SetTokenThreshold",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "activate",
        type: "bool"
      }
    ],
    name: "SetWhitelistToken",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "chainID",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "revertableAddress",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "SynthesizeRequest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_trustedForwarder",
        type: "address"
      },
      {
        internalType: "address",
        name: "_wrapper",
        type: "address"
      },
      {
        internalType: "address",
        name: "_whitelistedToken",
        type: "address"
      },
      {
        internalType: "contract IMetaRouter",
        name: "_metaRouter",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address"
      }
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "internalID",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "address",
            name: "managerChainBridge",
            type: "address"
          },
          {
            internalType: "address",
            name: "sourceChainBridge",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "managerChainId",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "sourceChainId",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "router",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "swapCalldata",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "sourceChainSynthesis",
            type: "address"
          },
          {
            internalType: "address",
            name: "burnToken",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "burnCalldata",
            type: "bytes"
          },
          {
            internalType: "bytes32",
            name: "clientID",
            type: "bytes32"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaRevertTransaction",
        name: "_metaRevertTransaction",
        type: "tuple"
      }
    ],
    name: "metaRevertRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "metaRouter",
    outputs: [
      {
        internalType: "contract IMetaRouter",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "rtoken",
            type: "address"
          },
          {
            internalType: "address",
            name: "chain2address",
            type: "address"
          },
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "address",
            name: "oppositeBridge",
            type: "address"
          },
          {
            internalType: "address",
            name: "syntCaller",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256"
          },
          {
            internalType: "address[]",
            name: "swapTokens",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "finalCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "revertableAddress",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "clientID",
            type: "bytes32"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaSynthesizeTransaction",
        name: "_metaSynthesizeTransaction",
        type: "tuple"
      }
    ],
    name: "metaSynthesize",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_crossChainID",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_rToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "_finalReceiveSide",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_finalCalldata",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "_finalOffset",
        type: "uint256"
      }
    ],
    name: "metaUnsynthesize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "requestCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "requests",
    outputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "address",
        name: "chain2address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "rtoken",
        type: "address"
      },
      {
        internalType: "enum Portal.RequestState",
        name: "state",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_internalID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "revertBurnRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      }
    ],
    name: "revertSynthesize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMetaRouter",
        name: "_metaRouter",
        type: "address"
      }
    ],
    name: "setMetaRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256"
      }
    ],
    name: "setTokenThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "bool",
        name: "_activate",
        type: "bool"
      }
    ],
    name: "setWhitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_chain2address",
        type: "address"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_revertableAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "synthesize",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_chain2address",
        type: "address"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_revertableAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "synthesizeNative",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "approvalData",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "chain2address",
            type: "address"
          },
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "address",
            name: "oppositeBridge",
            type: "address"
          },
          {
            internalType: "address",
            name: "revertableAddress",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "clientID",
            type: "bytes32"
          }
        ],
        internalType: "struct Portal.SynthesizeWithPermitTransaction",
        name: "_syntWithPermitTx",
        type: "tuple"
      }
    ],
    name: "synthesizeWithPermit",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "tokenThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "tokenWhitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_crossChainID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "unsynthesize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "unsynthesizeStates",
    outputs: [
      {
        internalType: "enum Portal.UnsynthesizeState",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "versionRecipient",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "wrapper",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var _bytecode12 = "0x608060405234801561001057600080fd5b506141b0806100206000396000f3fe6080604052600436106101cd5760003560e01c80638bb39802116100f7578063ce654c1711610095578063f2fde38b11610064578063f2fde38b146105bc578063fab92894146105dc578063fb7c7c2a14610619578063fce633c21461063957600080fd5b8063ce654c171461053c578063dbec15bb1461055c578063e78cea921461057c578063eadd5c341461059c57600080fd5b8063ac210cc7116100d1578063ac210cc7146104bc578063b1659a3c146104dc578063c23a4c88146104fc578063c42a28941461051c57600080fd5b80638bb39802146103fe5780638da5cb5b1461041e5780639d8669851461045057600080fd5b80635badbe4c1161016f578063715018a61161013e578063715018a614610384578063753d7563146103995780637c374f99146103c95780638456cb59146103e957600080fd5b80635badbe4c146102fa5780635c975abb14610310578063687752781461032a57806370a082311461035757600080fd5b80632816f4db116101ab5780632816f4db146102345780633f4ba83a1461025a578063486ff0cd1461026f578063572b6c05146102bb57600080fd5b806308759e9b146101d25780631459457a146101f45780631ebe53ef14610214575b600080fd5b3480156101de57600080fd5b506101f26101ed366004613a48565b610659565b005b34801561020057600080fd5b506101f261020f366004613461565b610908565b34801561022057600080fd5b506101f261022f366004613aa4565b610a8b565b610247610242366004613914565b610ca5565b6040519081526020015b60405180910390f35b34801561026657600080fd5b506101f2610e52565b34801561027b57600080fd5b50604080518082018252600581527f322e302e31000000000000000000000000000000000000000000000000000000602082015290516102519190613d09565b3480156102c757600080fd5b506102ea6102d63660046133d7565b6065546001600160a01b0391821691161490565b6040519015158152602001610251565b34801561030657600080fd5b5061024760685481565b34801561031c57600080fd5b506069546102ea9060ff1681565b34801561033657600080fd5b506102476103453660046133d7565b606d6020526000908152604090205481565b34801561036357600080fd5b506102476103723660046133d7565b606c6020526000908152604090205481565b34801561039057600080fd5b506101f2610f1b565b3480156103a557600080fd5b506102ea6103b43660046133d7565b606e6020526000908152604090205460ff1681565b3480156103d557600080fd5b506101f26103e43660046134d2565b610fa0565b3480156103f557600080fd5b506101f261107d565b34801561040a57600080fd5b506101f261041936600461350b565b61112c565b34801561042a57600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610251565b34801561045c57600080fd5b506104ab61046b366004613554565b606a6020526000908152604090208054600182015460028301546003909301546001600160a01b039283169391831692811690600160a01b900460ff1685565b604051610251959493929190613c34565b3480156104c857600080fd5b50606654610438906001600160a01b031681565b3480156104e857600080fd5b506102476104f736600461398e565b6111f6565b34801561050857600080fd5b506101f2610517366004613b02565b61133d565b34801561052857600080fd5b506101f2610537366004613a26565b611646565b34801561054857600080fd5b506102476105573660046136a2565b6118c7565b34801561056857600080fd5b50606f54610438906001600160a01b031681565b34801561058857600080fd5b50606754610438906001600160a01b031681565b3480156105a857600080fd5b506101f26105b73660046133d7565b611a13565b3480156105c857600080fd5b506101f26105d73660046133d7565b611b69565b3480156105e857600080fd5b5061060c6105f7366004613554565b606b6020526000908152604090205460ff1681565b6040516102519190613cf6565b34801561062557600080fd5b50610247610634366004613825565b611c6a565b34801561064557600080fd5b506101f261065436600461356d565b611eb6565b60695460ff16156106a05760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b60448201526064015b60405180910390fd5b600085306106ac612535565b6040805160208101949094526bffffffffffffffffffffffff19606093841b811691850191909152911b16605482015246606882015260880160408051601f198184030181529190528051602090910120905060016000828152606b602052604090205460ff16600281111561072457610724613fe5565b141561077e5760405162461bcd60e51b8152602060048201526024808201527f53796d623a205265616c20746f6b656e7320616c7265616479207472616e7366604482015263195c995960e21b6064820152608401610697565b6000818152606b6020908152604091829020805460ff1916600217905581518083018352601b81527f7265766572744275726e2875696e743235362c62797465733332290000000000908201528151602481018a90526044808201859052835180830390910181526064909101835290810180516001600160e01b03167ff70519ae000000000000000000000000000000000000000000000000000000001790526067549151633675e4e160e11b815290916001600160a01b031690636cebc9c2906108549084908a908a908a90600401613cc0565b600060405180830381600087803b15801561086e57600080fd5b505af1158015610882573d6000803e3d6000fd5b505050505061088f612535565b6001600160a01b0316867f40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b60405160405180910390a3817f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f5876040516108f791815260200190565b60405180910390a250505050505050565b600054610100900460ff166109235760005460ff1615610927565b303b155b6109995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610697565b600054610100900460ff161580156109d857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6109e18561257b565b606780546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff199283161790925560668054878416908316179055606f80548584169216919091179055831615610a54576001600160a01b0383166000908152606e60205260409020805460ff191660011790555b8015610a8357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050505050565b6067546001600160a01b03163314610ae55760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f74207468652062726964676500006044820152606401610697565b60695460ff1615610b275760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6000858152606b602052604081205460ff166002811115610b4a57610b4a613fe5565b14610bbd5760405162461bcd60e51b815260206004820152602660248201527f53796d623a2073796e74686574696320746f6b656e7320656d657267656e637960448201527f556e6275726e00000000000000000000000000000000000000000000000000006064820152608401610697565b6001600160a01b0383166000908152606c6020526040902054610be1908390613f4f565b6001600160a01b0384166000908152606c6020908152604080832093909355878252606b905220805460ff19166001179055610c278382610c228986613f4f565b61261d565b606754610c3f9084906001600160a01b03168861261d565b6001600160a01b03811684867faeef64b7687b985665b6620c7fa271b6f051a3fbe2bfc366fb9c964602eb6d26610c768a87613f4f565b60408051918252602082018c90526001600160a01b0389169082015260600160405180910390a4505050505050565b60695460009060ff1615610cea5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6066546001600160a01b03166000908152606e602052604090205460ff16610d545760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e00000000000000006044820152606401610697565b6066546001600160a01b03166000908152606d6020526040902054341015610dbe5760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c64000000006044820152606401610697565b606660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b5050606654610e4693508b92506001600160a01b03169050348a8a8a8a8a8a612777565b98975050505050505050565b610e5a612535565b6001600160a01b0316610e756033546001600160a01b031690565b6001600160a01b031614610ecb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6069805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610efe612535565b6040516001600160a01b03909116815260200160405180910390a1565b610f23612535565b6001600160a01b0316610f3e6033546001600160a01b031690565b6001600160a01b031614610f945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b610f9e6000612b38565b565b610fa8612535565b6001600160a01b0316610fc36033546001600160a01b031690565b6001600160a01b0316146110195760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6001600160a01b0382166000818152606e6020908152604091829020805460ff19168515159081179091558251938452908301527f0a4552f1105808db6a44587c9ef0a7c4064bf620b9d843b514ad7365bd52239a91015b60405180910390a15050565b611085612535565b6001600160a01b03166110a06033546001600160a01b031690565b6001600160a01b0316146110f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6069805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610efe612535565b611134612535565b6001600160a01b031661114f6033546001600160a01b031690565b6001600160a01b0316146111a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6001600160a01b0382166000818152606d6020908152604091829020849055815192835282018390527fa6742efd4f410d6fd9688a6cf6a15b6d51121097a263056a3576baaacdc4a9ae9101611071565b60695460009060ff161561123b5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6001600160a01b0389166000908152606e602052604090205460ff166112a35760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e00000000000000006044820152606401610697565b6001600160a01b0389166000908152606d602052604090205488101561130b5760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c64000000006044820152606401610697565b61131e89611317612535565b308b612b97565b61132f8a8a8a8a8a8a8a8a8a612777565b9a9950505050505050505050565b6067546001600160a01b031633146113975760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f74207468652062726964676500006044820152606401610697565b60695460ff16156113d95760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6000878152606b602052604081205460ff1660028111156113fc576113fc613fe5565b1461146f5760405162461bcd60e51b815260206004820152602660248201527f53796d623a2073796e74686574696320746f6b656e7320656d657267656e637960448201527f556e6275726e00000000000000000000000000000000000000000000000000006064820152608401610697565b6001600160a01b0384166000908152606c6020526040902054611493908690613f4f565b6001600160a01b038581166000908152606c60209081526040808320949094558a8252606b905291909120805460ff191660011790556067546114d9918691168b61261d565b6114e38986613f4f565b945081516000141561154e576114fa84878761261d565b60408051868152602081018b90526001600160a01b03861681830152905130918a918a917faeef64b7687b985665b6620c7fa271b6f051a3fbe2bfc366fb9c964602eb6d26919081900360600190a461163b565b606f546115669085906001600160a01b03168761261d565b606f546040517ff5b697a50000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063f5b697a5906115b990879089908890889088908e90600401613c74565b600060405180830381600087803b1580156115d357600080fd5b505af11580156115e7573d6000803e3d6000fd5b505060408051888152602081018d90526001600160a01b0388168183015290513093508b92508a917faeef64b7687b985665b6620c7fa271b6f051a3fbe2bfc366fb9c964602eb6d26919081900360600190a45b505050505050505050565b6067546001600160a01b031633146116a05760405162461bcd60e51b815260206004820152601e60248201527f53796d623a2063616c6c6572206973206e6f74207468652062726964676500006044820152606401610697565b60695460ff16156116e25760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6000818152606a6020526040902060016003820154600160a01b900460ff16600281111561171257611712613fe5565b146117855760405162461bcd60e51b815260206004820152602960248201527f53796d623a207374617465206e6f74206f70656e206f7220747820646f65732060448201527f6e6f7420657869737400000000000000000000000000000000000000000000006064820152608401610697565b600381018054740200000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff82161790915560028201546001600160a01b039091166000908152606c60205260409020546117f19190613f4f565b6003820180546001600160a01b039081166000908152606c6020526040902092909255548254600284015461183493928316929190911690610c22908790613f4f565b6003810154606754611853916001600160a01b0390811691168561261d565b805460028201546001600160a01b039091169083907fefcdf9ea4e65571d2ce9c030c46954e950662df8a7d8bd039fc4417e37b2f88c90611895908790613f4f565b600385015460408051928352602083018990526001600160a01b039091169082015260600160405180910390a3505050565b60695460009060ff161561190c5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6040808301516001600160a01b03166000908152606e602052205460ff166119765760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e00000000000000006044820152606401610697565b6040808301516001600160a01b03166000908152606d6020908152919020549083015110156119e75760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c64000000006044820152606401610697565b611a0282604001516119f7612535565b308560200151612b97565b611a0b82612cf2565b90505b919050565b611a1b612535565b6001600160a01b0316611a366033546001600160a01b031690565b6001600160a01b031614611a8c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6001600160a01b038116611b085760405162461bcd60e51b815260206004820152602760248201527f53796d623a206d657461526f757465722063616e6e6f74206265207a65726f2060448201527f61646472657373000000000000000000000000000000000000000000000000006064820152608401610697565b606f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fd5c54ab1d37bfef4dd2253d9d73c292e46f5bd8a67ca5920aab4c2e1993178e79060200160405180910390a150565b611b71612535565b6001600160a01b0316611b8c6033546001600160a01b031690565b6001600160a01b031614611be25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610697565b6001600160a01b038116611c5e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610697565b611c6781612b38565b50565b60695460009060ff1615611caf5760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b6040808301516001600160a01b03166000908152606e602052205460ff16611d195760405162461bcd60e51b815260206004820152601860248201527f53796d623a20756e617574686f72697a656420746f6b656e00000000000000006044820152606401610697565b6040808301516001600160a01b03166000908152606d602052205460608301511015611d875760405162461bcd60e51b815260206004820152601c60248201527f53796d623a20616d6f756e7420756e646572207468726573686f6c64000000006044820152606401610697565b6000806000806000808760200151806020019051810190611da891906133fb565b6040808f015190517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b038089166004830152306024830152604482018890526064820187905260ff8616608483015260a4820185905260c48201849052979d50959b5093995091975095509350919091169063d505accf9060e401600060405180830381600087803b158015611e4657600080fd5b505af1158015611e5a573d6000803e3d6000fd5b50505050505050505050611e7f8260400151611e74612535565b308560600151612b97565b611a0b82600001518360400151846060015185608001518660a001518760c001518860e001518961010001518a6101200151612777565b60695460ff1615611ef85760405162461bcd60e51b815260206004820152600c60248201526b14de5b588e881c185d5cd95960a21b6044820152606401610697565b61010081015151156121a4576000816020015130611f14612535565b6040805160208101949094526bffffffffffffffffffffffff19606093841b811691850191909152911b16605482015246606882015260880160408051601f198184030181529190528051602090910120905060016000828152606b602052604090205460ff166002811115611f8c57611f8c613fe5565b1415611fe65760405162461bcd60e51b8152602060048201526024808201527f53796d623a205265616c20746f6b656e7320616c7265616479207472616e7366604482015263195c995960e21b6064820152608401610697565b6000818152606b60209081526040808320805460ff19166002179055805160808101909152604380825290916140ed90830139805190602001208360000151838560e001518661010001518761012001518861014001518961016001516040516024016120599796959493929190613e34565b60408051601f198184030181529181526020820180516001600160e01b03167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925260675485830151606087015160a08801519451633675e4e160e11b81529395506001600160a01b0390921693636cebc9c2936120e6938793929091600401613cc0565b600060405180830381600087803b15801561210057600080fd5b505af1158015612114573d6000803e3d6000fd5b50505050612120612535565b6001600160a01b031683602001517f40590cc12db0488520ce425059f83f8caed91bdf98de5ff829dc57c63843161b60405160405180910390a38261018001517f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f5846020015160405161219591815260200190565b60405180910390a250506124f0565b61016081015151156123a95760008160200151306121c0612535565b6040805160208101949094526bffffffffffffffffffffffff19606093841b811691850191909152911b16605482015246606882015260880160408051601f198184030181529190528051602090910120905060016000828152606b602052604090205460ff16600281111561223857612238613fe5565b14156122925760405162461bcd60e51b8152602060048201526024808201527f53796d623a205265616c20746f6b656e7320616c7265616479207472616e7366604482015263195c995960e21b6064820152608401610697565b6000818152606b60209081526040808320805460ff19166002179055805160808101909152604280825290916140ab9083013980519060200120836000015183308660800151466122e1612535565b604051602481019690965260448601949094526001600160a01b039283166064860152908216608485015260a48401521660c482015260e40160408051601f198184030181529181526020820180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252606754610120860151606087015160a08801519451633675e4e160e11b81529395506001600160a01b0390921693636cebc9c2936120e6938793929091600401613cc0565b600060405180608001604052806058815260200161405360589139805190602001208260000151836020015184604001518560800151466123e8612535565b610180890151604051602481019790975260448701959095526001600160a01b039384166064870152918316608486015260a48501521660c483015260e48201526101040160408051601f198184030181529181526020820180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252606754610120850151606086015160a08701519451633675e4e160e11b81529395506001600160a01b0390921693636cebc9c2936124bc938793929091600401613cc0565b600060405180830381600087803b1580156124d657600080fd5b505af11580156124ea573d6000803e3d6000fd5b50505050505b6124f8612535565b6001600160a01b031681602001517fbd03c66ec5bd3d01fbf22bc794f68ac88b693023b438724019205a4b42aefb2060405160405180910390a350565b6065546000906001600160a01b031633141561257657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b600054610100900460ff166125e65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610697565b6125ee61316c565b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916126929190613c18565b6000604051808303816000865af19150503d80600081146126cf576040519150601f19603f3d011682016040523d82523d6000602084013e6126d4565b606091505b50915091508180156126fe5750805115806126fe5750808060200190518101906126fe9190613537565b6127705760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201527f616e73666572206661696c6564000000000000000000000000000000000000006064820152608401610697565b5050505050565b6001600160a01b0388166000908152606c602052604081205461279b908990613f37565b6001600160a01b03808b166000908152606c602052604090209190915584166127c2578693505b6068546040516bffffffffffffffffffffffff193060601b166020820152603481019190915246605482015260740160408051601f1981840301815282825280516020918201209083018190526bffffffffffffffffffffffff1960608a811b8216938501939093529187901b909116605483015260688201859052915060009060880160405160208183030381529060405280519060200120905060006040518060800160405280604b8152602001614130604b91398051602090910120604051602481018e905260448101849052606481018590526001600160a01b03808e1660848301524660a483015260c482018d90528b1660e48201526101040160408051601f198184030181529181526020820180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252815160a0810190925291508061291f612535565b6001600160a01b0390811682528b81166020830152604082018d90528d166060820152608001600190526000838152606a60209081526040918290208351815473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039283161783559285015160018301805485169183169190911790559284015160028083019190915560608501516003830180549485169190951690811785556080860151929492937fffffffffffffffffffffff000000000000000000000000000000000000000000161790600160a01b908490811115612a0357612a03613fe5565b0217905550506068805491506000612a1a83613f96565b9091555050606754604051633675e4e160e11b81526001600160a01b0390911690636cebc9c290612a559084908c908c908b90600401613cc0565b600060405180830381600087803b158015612a6f57600080fd5b505af1158015612a83573d6000803e3d6000fd5b505050505050836001600160a01b031683612a9c612535565b604080518581526001600160a01b038c811660208301529181018d90528d821660608201529116907f31325fe0a1a2e6a5b1e41572156ba5b4e94f0fae7e7f63ec21e9b5ce1e4b3eab9060800160405180910390a4817f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f582604051612b2391815260200190565b60405180910390a29998505050505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691612c149190613c18565b6000604051808303816000865af19150503d8060008114612c51576040519150601f19603f3d011682016040523d82523d6000602084013e612c56565b606091505b5091509150818015612c80575080511580612c80575080806020019051810190612c809190613537565b610a835760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260448201527f616e7366657246726f6d206661696c65640000000000000000000000000000006064820152608401610697565b6020808201516040808401516001600160a01b03166000908152606c909352822054612d1e9190613f37565b6040808401516001600160a01b039081166000908152606c60205291909120919091556101c083015116612d615760608201516001600160a01b03166101c08301525b6068546040516bffffffffffffffffffffffff193060601b166020820152603481019190915246605482015260740160408051601f19818403018152828252805160209182012060808601516101c087015160e08801519386018390526bffffffffffffffffffffffff19606092831b811695870195909552901b9092166054840152606883015291506000906088016040516020818303038152906040528051906020012090506000604051806101a00160405280856000015181526020018560200151815260200184815260200183815260200185604001516001600160a01b0316815260200146815260200185606001516001600160a01b0316815260200185610100015181526020018561012001516001600160a01b0316815260200185610140015181526020018561016001516001600160a01b031681526020018561018001518152602001856101a001518152509050600081604051602401612eca9190613d1c565b60408051601f19818403018152918152602080830180516001600160e01b03167fc29a91bc00000000000000000000000000000000000000000000000000000000179052815160a08101835260c08901516001600160a01b0390811682526060808b0151821683850152928a015182850152928901519092169082015290915060808101600190526000848152606a60209081526040918290208351815473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039283161783559285015160018301805485169183169190911790559284015160028083019190915560608501516003830180549485169190951690811785556080860151929492937fffffffffffffffffffffff000000000000000000000000000000000000000000161790600160a01b90849081111561300c5761300c613fe5565b021790555050606880549150600061302383613f96565b9091555050606754608086015160a087015160e0880151604051633675e4e160e11b81526001600160a01b0390941693636cebc9c29361306c9387939192909190600401613cc0565b600060405180830381600087803b15801561308657600080fd5b505af115801561309a573d6000803e3d6000fd5b5050505050836101c001516001600160a01b03168460e001518560c001516001600160a01b03167f31325fe0a1a2e6a5b1e41572156ba5b4e94f0fae7e7f63ec21e9b5ce1e4b3eab86886060015189602001518a6040015160405161312494939291909384526001600160a01b039283166020850152604084019190915216606082015260800190565b60405180910390a46101e08401516040518481527f5a297b2c9a9f94a0f4e5a796c74ad38e219d1185fccf5f79c18726a830c2b6f59060200160405180910390a25050919050565b600054610100900460ff166131d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610697565b6131df6131e7565b610f9e613252565b600054610100900460ff16610f9e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610697565b600054610100900460ff166132bd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610697565b610f9e6132c8612535565b612b38565b8035611a0e8161402f565b600082601f8301126132e957600080fd5b8135602067ffffffffffffffff82111561330557613305613ffb565b8160051b613314828201613f06565b83815282810190868401838801850189101561332f57600080fd5b600093505b8584101561335b5780356133478161402f565b835260019390930192918401918401613334565b50979650505050505050565b600082601f83011261337857600080fd5b813567ffffffffffffffff81111561339257613392613ffb565b6133a56020601f19601f84011601613f06565b8181528460208386010111156133ba57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156133e957600080fd5b81356133f48161402f565b9392505050565b60008060008060008060c0878903121561341457600080fd5b865161341f8161402f565b809650506020870151945060408701519350606087015160ff8116811461344557600080fd5b809350506080870151915060a087015190509295509295509295565b600080600080600060a0868803121561347957600080fd5b85356134848161402f565b945060208601356134948161402f565b935060408601356134a48161402f565b925060608601356134b48161402f565b915060808601356134c48161402f565b809150509295509295909350565b600080604083850312156134e557600080fd5b82356134f08161402f565b9150602083013561350081614044565b809150509250929050565b6000806040838503121561351e57600080fd5b82356135298161402f565b946020939093013593505050565b60006020828403121561354957600080fd5b81516133f481614044565b60006020828403121561356657600080fd5b5035919050565b60006020828403121561357f57600080fd5b813567ffffffffffffffff8082111561359757600080fd5b908301906101a082860312156135ac57600080fd5b6135b4613e94565b82358152602083013560208201526135ce604084016132cd565b60408201526135df606084016132cd565b60608201526135f0608084016132cd565b608082015260a083013560a082015260c083013560c082015261361560e084016132cd565b60e0820152610100808401358381111561362e57600080fd5b61363a88828701613367565b82840152505061012061364e8185016132cd565b908201526101406136608482016132cd565b90820152610160838101358381111561367857600080fd5b61368488828701613367565b91830191909152506101809283013592810192909252509392505050565b6000602082840312156136b457600080fd5b813567ffffffffffffffff808211156136cc57600080fd5b9083019061020082860312156136e157600080fd5b6136e9613ebe565b8235815260208301356020820152613703604084016132cd565b6040820152613714606084016132cd565b6060820152613725608084016132cd565b608082015261373660a084016132cd565b60a082015261374760c084016132cd565b60c082015260e083013560e0820152610100808401358381111561376a57600080fd5b613776888287016132d8565b82840152505061012061378a8185016132cd565b9082015261014083810135838111156137a257600080fd5b6137ae88828701613367565b8284015250506101606137c28185016132cd565b9082015261018083810135838111156137da57600080fd5b6137e688828701613367565b8284015250506101a0915081830135828201526101c091506138098284016132cd565b918101919091526101e091820135918101919091529392505050565b60006020828403121561383757600080fd5b813567ffffffffffffffff8082111561384f57600080fd5b90830190610140828603121561386457600080fd5b61386c613ee2565b8235815260208301358281111561388257600080fd5b61388e87828601613367565b6020830152506138a0604084016132cd565b6040820152606083013560608201526138bb608084016132cd565b60808201526138cc60a084016132cd565b60a08201526138dd60c084016132cd565b60c08201526138ee60e084016132cd565b60e082015261010083810135908201526101209283013592810192909252509392505050565b600080600080600080600060e0888a03121561392f57600080fd5b8735965060208801356139418161402f565b955060408801356139518161402f565b945060608801356139618161402f565b935060808801356139718161402f565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060008060006101208a8c0312156139ad57600080fd5b8935985060208a01356139bf8161402f565b975060408a0135965060608a01356139d68161402f565b955060808a01356139e68161402f565b945060a08a01356139f68161402f565b935060c08a0135613a068161402f565b8093505060e08a013591506101008a013590509295985092959850929598565b60008060408385031215613a3957600080fd5b50508035926020909101359150565b60008060008060008060c08789031215613a6157600080fd5b86359550602087013594506040870135613a7a8161402f565b93506060870135613a8a8161402f565b9598949750929560808101359460a0909101359350915050565b60008060008060008060c08789031215613abd57600080fd5b8635955060208701359450604087013593506060870135613add8161402f565b92506080870135915060a0870135613af48161402f565b809150509295509295509295565b60008060008060008060008060006101208a8c031215613b2157600080fd5b8935985060208a0135975060408a0135965060608a0135613b418161402f565b955060808a0135945060a08a0135613b588161402f565b935060c08a0135613b688161402f565b925060e08a013567ffffffffffffffff811115613b8457600080fd5b613b908c828d01613367565b9250506101008a013590509295985092959850929598565b600081518084526020808501945080840160005b83811015613be15781516001600160a01b031687529582019590820190600101613bbc565b509495945050505050565b60008151808452613c04816020860160208601613f66565b601f01601f19169290920160200192915050565b60008251613c2a818460208701613f66565b9190910192915050565b6001600160a01b0386811682528581166020830152604082018590528316606082015260a08101613c6483614011565b8260808301529695505050505050565b60006001600160a01b038089168352876020840152808716604084015260c06060840152613ca560c0840187613bec565b60808401959095529290921660a09091015250949350505050565b608081526000613cd36080830187613bec565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60208101613d0383614011565b91905290565b6020815260006133f46020830184613bec565b602081528151602082015260208201516040820152604082015160608201526060820151608082015260006080830151613d6160a08401826001600160a01b03169052565b5060a083015160c083015260c0830151613d8660e08401826001600160a01b03169052565b5060e08301516101a06101008181860152613da56101c0860184613ba8565b90860151909250610120613dc3868201836001600160a01b03169052565b80870151915050601f19610140818786030181880152613de38584613bec565b945080880151925050610160613e03818801846001600160a01b03169052565b80880151925050610180818786030181880152613e208584613bec565b970151959092019490945250929392505050565b87815286602082015260006001600160a01b03808816604084015260e06060840152613e6360e0840188613bec565b818716608085015281861660a085015283810360c0850152613e858186613bec565b9b9a5050505050505050505050565b6040516101a0810167ffffffffffffffff81118282101715613eb857613eb8613ffb565b60405290565b604051610200810167ffffffffffffffff81118282101715613eb857613eb8613ffb565b604051610140810167ffffffffffffffff81118282101715613eb857613eb8613ffb565b604051601f8201601f1916810167ffffffffffffffff81118282101715613f2f57613f2f613ffb565b604052919050565b60008219821115613f4a57613f4a613fcf565b500190565b600082821015613f6157613f61613fcf565b500390565b60005b83811015613f81578181015183820152602001613f69565b83811115613f90576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fc857613fc8613fcf565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60038110611c6757634e487b7160e01b600052602160045260246000fd5b6001600160a01b0381168114611c6757600080fd5b8015158114611c6757600080fdfe72657665727453796e74686573697a655265717565737442794272696467652875696e743235362c627974657333322c616464726573732c616464726573732c75696e743235362c616464726573732c62797465733332297265766572744275726e416e644275726e2875696e743235362c627974657333322c616464726573732c616464726573732c75696e743235362c61646472657373297265766572744d6574614275726e2875696e743235362c627974657333322c616464726573732c62797465732c616464726573732c616464726573732c6279746573296d696e7453796e746865746963546f6b656e2875696e743235362c627974657333322c627974657333322c616464726573732c75696e743235362c75696e743235362c6164647265737329a26469706673582212205f794dfc3d082a9fe4634663bdb02d42fadbdfffeee26c417985792d30280c2e64736f6c63430008070033";
var isSuperArgs12 = (xs) => xs.length > 1;
var Portal__factory = class extends import_ethers29.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs12(args)) {
      __super(...args);
    } else {
      __super(_abi28, _bytecode12, args[0]);
    }
    this.contractName = "Portal";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers29.utils.Interface(_abi28);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers29.Contract(address2, _abi28, signerOrProvider);
  }
};
Portal__factory.bytecode = _bytecode12;
Portal__factory.abi = _abi28;

// src/crosschain/contracts/factories/SwapUnlocker__factory.ts
var import_ethers30 = require("ethers");
var _abi29 = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "condition",
        type: "bytes"
      }
    ],
    name: "decodeCondition",
    outputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "outToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "outMinAmount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "targetCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "targetOffset",
            type: "uint256"
          }
        ],
        internalType: "struct SwapUnlocker.Condition",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "outToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "outMinAmount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "targetCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "targetOffset",
            type: "uint256"
          }
        ],
        internalType: "struct SwapUnlocker.Condition",
        name: "c",
        type: "tuple"
      }
    ],
    name: "encodeCondition",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "swapper",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "swapCalldata",
            type: "bytes"
          }
        ],
        internalType: "struct SwapUnlocker.Solution",
        name: "s",
        type: "tuple"
      }
    ],
    name: "encodeSolution",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMetaRouter",
        name: "metarouter",
        type: "address"
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256"
          }
        ],
        internalType: "struct DepositoryTypes.Deposit",
        name: "deposit",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "condition",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "solution",
        type: "bytes"
      }
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode13 = "0x608060405234601957604051610cdd61001f8239610cdd90f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806322c0bff8146100525780635937fd8b1461004d578063760bd1181461004857638d8bf0a20361007857610349565b6102ed565b6101fd565b610134565b6001600160a01b031690565b90565b6001600160a01b0381165b0361007857565b600080fd5b9050359061008a82610066565b565b908160609103126100785790565b909182601f830112156100785781359167ffffffffffffffff831161007857602001926001830284011161007857565b919060c083820312610078576100e0818461007d565b926100ee826020830161008c565b92608082013567ffffffffffffffff8111610078578361010f91840161009a565b92909360a082013567ffffffffffffffff811161007857610130920161009a565b9091565b34610078576101536101473660046100ca565b949390939291926106d5565b60405180805b0390f35b908160a09103126100785790565b9060208282031261007857813567ffffffffffffffff811161007857610063920161015d565b60005b8381106101a45750506000910152565b8181015183820152602001610194565b6101d56101de6020936101e8936101c9815190565b80835293849260200190565b95869101610191565b601f01601f191690565b0190565b6020808252610063929101906101b4565b346100785761015961021861021336600461016b565b610a5d565b604051918291826101ec565b9060208282031261007857813567ffffffffffffffff811161007857610130920161009a565b610057610063610063926001600160a01b031690565b6100639061024a565b61006390610260565b61027b90610269565b9052565b90610063906080806102d460a084016102a060008801516000870190610272565b6102af60208801516020870152565b6040878101516001600160a01b031690860152606087015185820360608701526101b4565b940151910152565b60208082526100639291019061027f565b3461007857610159610309610303366004610224565b90610b66565b604051918291826102dc565b908160409103126100785790565b9060208282031261007857813567ffffffffffffffff8111610078576100639201610315565b346100785761015961021861035f366004610323565b610bcb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176103b557604052565b610364565b9061008a6103c760405190565b9283610393565b67ffffffffffffffff81116103b557602090601f01601f19160190565b906103fd6103f8836103ce565b6103ba565b918252565b61040c60136103eb565b7f53776170556e6c6f636b65722e756e6c6f636b00000000000000000000000000602082015290565b610063610402565b6001600160a01b038116610071565b9050359061008a8261043d565b90826000939282370152565b909291926104756103f8826103ce565b93818552818301116100785761008a916020850190610459565b9080601f830112156100785781602061006393359101610465565b919091604081840312610078576104c160406103ba565b926104cc818361044c565b8452602082013567ffffffffffffffff8111610078576104ec920161048f565b6020830152565b9060208282031261007857813567ffffffffffffffff81116100785761006392016104aa565b3561006381610066565b80610071565b3561006381610523565b600091031261007857565b6100636100636100639290565b61027b9061053e565b61008a94610599829897956105896080966105826105a697600060a089019801906001600160a01b03169052565b60208c0152565b6001600160a01b031660408a0152565b87820360608901526101b4565b94019061054b565b6040513d6000823e3d90fd5b9050519061008a82610523565b9060208282031261007857610063916105ba565b156105e257565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6f7574416d6f756e74206973206e6f7420656e6f7567680000000000000000006044820152606490fd5b61064b602b6103eb565b7f696e736964652076616c696461746f722053776170202d206f7574416d6f756e60208201527f742076616c696461746564000000000000000000000000000000000000000000604082015290565b610063610641565b61008a94610599829897956105896080966105826106d097600060a089019801906001600160a01b03169052565b940152565b936106f8610701929694610707946106f36106ee610435565b610be7565b610b66565b938101906104f3565b92610269565b91633add6d5a9061072b602061072461071f88610519565b610269565b9601610529565b602061073e83516001600160a01b031690565b92015190600096863b156100785761077588809461075b60405190565b968795869561076a8b60e01b90565b875260048701610554565b038183885af180156108c257610900575b508382019261079f61071f85516001600160a01b031690565b9360206107ab60405190565b7f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015295869060249082905afa9485156108c2576000956108c7575b5061071f61082f9161081761080f610063602089015190565b8810156105db565b6108226106ee61069a565b516001600160a01b031690565b9161084460408501516001600160a01b031690565b936108556080606083015192015190565b91833b156100785761088a61087f93899793889461087260405190565b9a8b998a98899760e01b90565b8752600487016106a2565b03925af180156108c25761089c575050565b8161008a92903d106108bb575b6108b38183610393565b810190610533565b503d6108a9565b6105ae565b61082f9195506108f161071f9160203d6020116108f9575b6108e98183610393565b8101906105c7565b9591506107f6565b503d6108df565b61091690853d87116108bb576108b38183610393565b38610786565b5061006390602081019061007d565b9050359061008a82610523565b5061006390602081019061092b565b5061006390602081019061044c565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1368390030181121561007857016020813591019167ffffffffffffffff82116100785736829003831361007857565b91906101de816109bf816101e89560209181520190565b8095610459565b90610063906080610a47610a3d60a084016109eb6109e4888061091c565b8690610272565b610a026109fb6020890189610938565b6020870152565b610a22610a126040890189610947565b6001600160a01b03166040870152565b610a2f6060880188610956565b9086830360608801526109a8565b9482810190610938565b910152565b6020808252610063929101906109c6565b610063610a6960405190565b8092610a79602083019182610a4c565b90810382520382610393565b61006360a06103ba565b610a97610a85565b60008082526020820181905260408201819052606080830152608082015290565b610063610a8f565b91909160a08184031261007857610ad760a06103ba565b92610ae2818361007d565b8452610af1816020840161092b565b6020850152610b03816040840161044c565b6040850152606082013567ffffffffffffffff81116100785782610b2e83608093610b39960161048f565b60608701520161092b565b6080830152565b9060208282031261007857813567ffffffffffffffff8111610078576100639201610ac0565b61006391610b72610ab8565b50810190610b40565b610063916040810191610bac90610ba2610b958280610947565b6001600160a01b03168452565b6020810190610956565b9160208185039101526109a8565b602080825261006392910190610b7b565b610063610bd760405190565b8092610a79602083019182610bba565b610c2c610c3b61008a92610bfa60405190565b9283916004602084017f41304fac000000000000000000000000000000000000000000000000000000008152016101ec565b60208201810382520382610393565b61008a906001610c97565b60008091610c5c6a636f6e736f6c652e6c6f6790565b602082519201905afa50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600103610c685761008a90610c4656fea2646970667358221220703d176f8e130463a26dc59f39ef81cb409847fb51c7d46559d3596c6124bbb764736f6c634300081c0033";
var isSuperArgs13 = (xs) => xs.length > 1;
var SwapUnlocker__factory = class extends import_ethers30.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs13(args)) {
      __super(...args);
    } else {
      __super(_abi29, _bytecode13, args[0]);
    }
    this.contractName = "SwapUnlocker";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers30.utils.Interface(_abi29);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers30.Contract(address2, _abi29, signerOrProvider);
  }
};
SwapUnlocker__factory.bytecode = _bytecode13;
SwapUnlocker__factory.abi = _abi29;

// src/crosschain/contracts/factories/SymBtc__factory.ts
var import_ethers31 = require("ethers");
var _abi30 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "contract BridgeV2",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "btcChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "btcTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_btcFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32"
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32"
      },
      {
        internalType: "BtcSerial",
        name: "_wrapSerial",
        type: "uint64"
      },
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "receiveSideCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "receiveSideOffset",
            type: "uint256"
          }
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "_tail",
        type: "tuple"
      }
    ],
    name: "getBTCCalldata",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32"
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      }
    ],
    name: "getBTCExternalID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32"
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32"
      }
    ],
    name: "getBTCInternalID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getBtcTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_btcFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_btcTxId",
        type: "bytes32"
      },
      {
        internalType: "SymBtc.BtcInputIndex",
        name: "_inputIndex",
        type: "uint32"
      },
      {
        internalType: "BtcSerial",
        name: "_wrapSerial",
        type: "uint64"
      },
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "receiveSideCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "receiveSideOffset",
            type: "uint256"
          }
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "_transactionTail",
        type: "tuple"
      }
    ],
    name: "getHashBTC",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newMPC",
        type: "address"
      }
    ],
    name: "getMpcHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getSyntToken",
    outputs: [
      {
        internalType: "contract SyntERC20",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridgeAddress",
        type: "address"
      },
      {
        internalType: "address",
        name: "_synthesisAddress",
        type: "address"
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "mpc",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "receiveSideCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "receiveSideOffset",
            type: "uint256"
          }
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "_transactionTail",
        type: "tuple"
      }
    ],
    name: "packBTCTransactionTail",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "synthesis",
    outputs: [
      {
        internalType: "contract Synthesis",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_transactionTail",
        type: "bytes"
      }
    ],
    name: "unpackBTCTransactionTail",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "receiveSideCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "receiveSideOffset",
            type: "uint256"
          }
        ],
        internalType: "struct SymBtc.FromBTCTransactionTail",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];
var SymBtc__factory = class {
  static createInterface() {
    return new import_ethers31.utils.Interface(_abi30);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers31.Contract(address2, _abi30, signerOrProvider);
  }
};
SymBtc__factory.abi = _abi30;

// src/crosschain/contracts/factories/Synthesis__factory.ts
var import_ethers32 = require("ethers");
var _abi31 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "BtcSerial",
        name: "serial",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bridgingFee",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "BTCSynthesizeCompleted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "chainID",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "revertableAddress",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "BurnRequest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "BtcSerial",
        name: "burnSerial",
        type: "uint64"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "to",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stableBridgingFee",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "rtoken",
        type: "address"
      }
    ],
    name: "BurnRequestBTC",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "chainID",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "revertableAddress",
        type: "address"
      },
      {
        components: [
          {
            internalType: "int8",
            name: "workchain",
            type: "int8"
          },
          {
            internalType: "bytes32",
            name: "address_hash",
            type: "bytes32"
          }
        ],
        indexed: false,
        internalType: "struct Synthesis.TonAddress",
        name: "to",
        type: "tuple"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "BurnRequestTON",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "clientId",
        type: "bytes32"
      }
    ],
    name: "ClientIdLog",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "BtcSerial",
        name: "burnSerial",
        type: "uint64"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "clientId",
        type: "bytes32"
      }
    ],
    name: "ClientIdLogBTC",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bridgingFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "RevertBurnCompleted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "RevertSynthesizeRequest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "fabric",
        type: "address"
      }
    ],
    name: "SetFabric",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "metaRouter",
        type: "address"
      }
    ],
    name: "SetMetaRouter",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "minFee",
        type: "uint256"
      }
    ],
    name: "SetMinFeeBTC",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "threshold",
        type: "uint256"
      }
    ],
    name: "SetTokenThreshold",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "crossChainID",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bridgingFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "SynthesizeCompleted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_stoken",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_chain2address",
        type: "address"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_revertableAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "burnSyntheticToken",
    outputs: [
      {
        internalType: "bytes32",
        name: "internalID",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_to",
        type: "bytes"
      },
      {
        internalType: "address",
        name: "_stoken",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "burnSyntheticTokenBTC",
    outputs: [
      {
        internalType: "BtcSerial",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_stoken",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_crossChainID",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "int8",
            name: "workchain",
            type: "int8"
          },
          {
            internalType: "bytes32",
            name: "address_hash",
            type: "bytes32"
          }
        ],
        internalType: "struct Synthesis.TonAddress",
        name: "_chain2address",
        type: "tuple"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_revertableAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "burnSyntheticTokenTON",
    outputs: [
      {
        internalType: "bytes32",
        name: "internalID",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "fabric",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_trustedForwarder",
        type: "address"
      },
      {
        internalType: "contract IMetaRouter",
        name: "_metaRouter",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address"
      }
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "crossChainID",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "syntCaller",
            type: "address"
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address"
          },
          {
            internalType: "address",
            name: "sToken",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "finalCallData",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "chain2address",
            type: "address"
          },
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "address",
            name: "oppositeBridge",
            type: "address"
          },
          {
            internalType: "address",
            name: "revertableAddress",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "clientID",
            type: "bytes32"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaBurnTransaction",
        name: "_metaBurnTransaction",
        type: "tuple"
      }
    ],
    name: "metaBurnSyntheticToken",
    outputs: [
      {
        internalType: "bytes32",
        name: "internalID",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "crossChainID",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "externalID",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "tokenReal",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "swapTokens",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "finalCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaMintTransaction",
        name: "_metaMintTransaction",
        type: "tuple"
      }
    ],
    name: "metaMintSyntheticToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "BtcSerial",
            name: "serial",
            type: "uint64"
          },
          {
            internalType: "bytes32",
            name: "crossChainID",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "externalID",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "tokenReal",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "receiveSideCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "receiveSideOffset",
            type: "uint256"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaMintTransactionBTC",
        name: "_metaMintTransaction",
        type: "tuple"
      }
    ],
    name: "metaMintSyntheticTokenBTC",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "metaRouter",
    outputs: [
      {
        internalType: "contract IMetaRouter",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_crossChainID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_tokenReal",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "mintSyntheticToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "realToBurnSerialBTC",
    outputs: [
      {
        internalType: "BtcSerial",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "realToMintSerialBTC",
    outputs: [
      {
        internalType: "BtcSerial",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "requestCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "requests",
    outputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "address",
        name: "chain2address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "address",
        name: "stoken",
        type: "address"
      },
      {
        internalType: "enum Synthesis.RequestState",
        name: "state",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      }
    ],
    name: "revertBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_revertableAddress",
        type: "address"
      }
    ],
    name: "revertBurnAndBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_router",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_swapCalldata",
        type: "bytes"
      },
      {
        internalType: "address",
        name: "_synthesis",
        type: "address"
      },
      {
        internalType: "address",
        name: "_burnToken",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_burnCalldata",
        type: "bytes"
      }
    ],
    name: "revertMetaBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_internalID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "revertSynthesizeRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_internalID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_sender",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "revertSynthesizeRequestByBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_fabric",
        type: "address"
      }
    ],
    name: "setFabric",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMetaRouter",
        name: "_metaRouter",
        type: "address"
      }
    ],
    name: "setMetaRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_synt",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_minFee",
        type: "uint256"
      }
    ],
    name: "setMinFeeBTC",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256"
      }
    ],
    name: "setTokenThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "syntToMinFeeBTC",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "synthesizeStates",
    outputs: [
      {
        internalType: "enum Synthesis.SynthesizeState",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "tokenThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "versionRecipient",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "pure",
    type: "function"
  }
];
var Synthesis__factory = class {
  static createInterface() {
    return new import_ethers32.utils.Interface(_abi31);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers32.Contract(address2, _abi31, signerOrProvider);
  }
};
Synthesis__factory.abi = _abi31;

// src/crosschain/contracts/factories/ThorRouter__factory.ts
var import_ethers33 = require("ethers");
var _abi32 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "rune",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldVault",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newVault",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "TransferAllowance",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "TransferOut",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "target",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "finalAsset",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "TransferOutAndCall",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldVault",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newVault",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "asset",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        indexed: false,
        internalType: "struct THORChain_Router.Coin[]",
        name: "coins",
        type: "tuple[]"
      },
      {
        indexed: false,
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "VaultTransfer",
    type: "event"
  },
  {
    inputs: [],
    name: "RUNE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "vault",
        type: "address"
      },
      {
        internalType: "address",
        name: "asset",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "vault",
        type: "address"
      },
      {
        internalType: "address",
        name: "asset",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "memo",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "expiration",
        type: "uint256"
      }
    ],
    name: "depositWithExpiry",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address"
      },
      {
        internalType: "address payable",
        name: "asgard",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "asset",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        internalType: "struct THORChain_Router.Coin[]",
        name: "coins",
        type: "tuple[]"
      },
      {
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "returnVaultAssets",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address"
      },
      {
        internalType: "address",
        name: "newVault",
        type: "address"
      },
      {
        internalType: "address",
        name: "asset",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "transferAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "asset",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "transferOut",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "aggregator",
        type: "address"
      },
      {
        internalType: "address",
        name: "finalToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "memo",
        type: "string"
      }
    ],
    name: "transferOutAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address"
      },
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "vaultAllowance",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var ThorRouter__factory = class {
  static createInterface() {
    return new import_ethers33.utils.Interface(_abi32);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers33.Contract(address2, _abi32, signerOrProvider);
  }
};
ThorRouter__factory.abi = _abi32;

// src/crosschain/contracts/factories/TonBridge__factory.ts
var import_ethers34 = require("ethers");
var _abi33 = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newBridgeChainId",
        type: "uint256"
      }
    ],
    name: "ChangeBridgeChainId",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newBroadcaster",
        type: "address"
      }
    ],
    name: "ChangeBroadcaster",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newBridge",
        type: "address"
      }
    ],
    name: "ChangeSymbiosisBridge",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newBridge",
        type: "address"
      }
    ],
    name: "ChangeTonBridge",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    inputs: [],
    name: "bridgeChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "broadcaster",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        components: [
          {
            internalType: "int8",
            name: "workchain",
            type: "int8"
          },
          {
            internalType: "bytes32",
            name: "address_hash",
            type: "bytes32"
          }
        ],
        internalType: "struct TonBridge.TonAddress",
        name: "_tonAddress",
        type: "tuple"
      }
    ],
    name: "callBridgeRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newBridgeChainId",
        type: "uint256"
      }
    ],
    name: "changeBridgeChainId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newBroadcaster",
        type: "address"
      }
    ],
    name: "changeBroadcaster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newSymbiosisBridge",
        type: "address"
      }
    ],
    name: "changeSymbiosisBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newTonBridge",
        type: "address"
      }
    ],
    name: "changeTonBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tonBridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_symbiosisBridge",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_bridgeChainId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_broadcaster",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbiosisBridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "tonBridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var TonBridge__factory = class {
  static createInterface() {
    return new import_ethers34.utils.Interface(_abi33);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers34.Contract(address2, _abi33, signerOrProvider);
  }
};
TonBridge__factory.abi = _abi33;

// src/crosschain/contracts/factories/UniLikeRouter__factory.ts
var import_ethers35 = require("ethers");
var _abi34 = [
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "addLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256"
      }
    ],
    name: "getAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256"
      }
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      }
    ],
    name: "getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      }
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveB",
        type: "uint256"
      }
    ],
    name: "quote",
    outputs: [
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityETHSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityETHWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "approveMax",
        type: "bool"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "removeLiquidityWithPermit",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapETHForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactETHForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForETH",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactETH",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var UniLikeRouter__factory = class {
  static createInterface() {
    return new import_ethers35.utils.Interface(_abi34);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers35.Contract(address2, _abi34, signerOrProvider);
  }
};
UniLikeRouter__factory.abi = _abi34;

// src/crosschain/contracts/factories/UniV3Factory__factory.ts
var import_ethers36 = require("ethers");
var _abi35 = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        indexed: true,
        internalType: "int24",
        name: "tickSpacing",
        type: "int24"
      }
    ],
    name: "FeeAmountEnabled",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnerChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token0",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "token1",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "int24",
        name: "tickSpacing",
        type: "int24"
      },
      {
        indexed: false,
        internalType: "address",
        name: "pool",
        type: "address"
      }
    ],
    name: "PoolCreated",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      }
    ],
    name: "createPool",
    outputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24"
      }
    ],
    name: "enableFeeAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    name: "feeAmountTickSpacing",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    name: "getPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "parameters",
    outputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "token0",
        type: "address"
      },
      {
        internalType: "address",
        name: "token1",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24"
      },
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address"
      }
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var UniV3Factory__factory = class {
  static createInterface() {
    return new import_ethers36.utils.Interface(_abi35);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers36.Contract(address2, _abi35, signerOrProvider);
  }
};
UniV3Factory__factory.abi = _abi35;

// src/crosschain/contracts/factories/UniV3Quoter__factory.ts
var import_ethers37 = require("ethers");
var _abi36 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_WETH9",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "path",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    name: "quoteExactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint160[]",
        name: "sqrtPriceX96AfterList",
        type: "uint160[]"
      },
      {
        internalType: "uint32[]",
        name: "initializedTicksCrossedList",
        type: "uint32[]"
      },
      {
        internalType: "uint256",
        name: "gasEstimate",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160"
          }
        ],
        internalType: "struct IQuoterV2.QuoteExactInputSingleParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "quoteExactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint160",
        name: "sqrtPriceX96After",
        type: "uint160"
      },
      {
        internalType: "uint32",
        name: "initializedTicksCrossed",
        type: "uint32"
      },
      {
        internalType: "uint256",
        name: "gasEstimate",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "path",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    name: "quoteExactOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint160[]",
        name: "sqrtPriceX96AfterList",
        type: "uint160[]"
      },
      {
        internalType: "uint32[]",
        name: "initializedTicksCrossedList",
        type: "uint32[]"
      },
      {
        internalType: "uint256",
        name: "gasEstimate",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160"
          }
        ],
        internalType: "struct IQuoterV2.QuoteExactOutputSingleParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "quoteExactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint160",
        name: "sqrtPriceX96After",
        type: "uint160"
      },
      {
        internalType: "uint32",
        name: "initializedTicksCrossed",
        type: "uint32"
      },
      {
        internalType: "uint256",
        name: "gasEstimate",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256"
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256"
      },
      {
        internalType: "bytes",
        name: "path",
        type: "bytes"
      }
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "view",
    type: "function"
  }
];
var UniV3Quoter__factory = class {
  static createInterface() {
    return new import_ethers37.utils.Interface(_abi36);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers37.Contract(address2, _abi36, signerOrProvider);
  }
};
UniV3Quoter__factory.abi = _abi36;

// src/crosschain/contracts/factories/UniV3Router__factory.ts
var import_ethers38 = require("ethers");
var _abi37 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "address",
        name: "_WETH9",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256"
          }
        ],
        internalType: "struct ISwapRouter.ExactInputParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "exactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256"
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160"
          }
        ],
        internalType: "struct ISwapRouter.ExactInputSingleParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "exactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256"
          }
        ],
        internalType: "struct ISwapRouter.ExactOutputParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "exactOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256"
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160"
          }
        ],
        internalType: "struct ISwapRouter.ExactOutputSingleParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "exactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256"
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "hyperswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]"
      }
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "refundETH",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "selfPermit",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "selfPermitAllowed",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "selfPermitAllowedIfNecessary",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "selfPermitIfNecessary",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      }
    ],
    name: "sweepToken",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "feeBips",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "sweepTokenWithFee",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      }
    ],
    name: "unwrapWETH9",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "feeBips",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "unwrapWETH9WithFee",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var UniV3Router__factory = class {
  static createInterface() {
    return new import_ethers38.utils.Interface(_abi37);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers38.Contract(address2, _abi37, signerOrProvider);
  }
};
UniV3Router__factory.abi = _abi37;

// src/crosschain/contracts/factories/UniV3Router02__factory.ts
var import_ethers39 = require("ethers");
var _abi38 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryV2",
        type: "address"
      },
      {
        internalType: "address",
        name: "factoryV3",
        type: "address"
      },
      {
        internalType: "address",
        name: "_positionManager",
        type: "address"
      },
      {
        internalType: "address",
        name: "_WETH9",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "approveMax",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "approveMaxMinusOne",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "approveZeroThenMax",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "approveZeroThenMaxMinusOne",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "callPositionManager",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "paths",
        type: "bytes[]"
      },
      {
        internalType: "uint128[]",
        name: "amounts",
        type: "uint128[]"
      },
      {
        internalType: "uint24",
        name: "maximumTickDivergence",
        type: "uint24"
      },
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32"
      }
    ],
    name: "checkOracleSlippage",
    outputs: [],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "path",
        type: "bytes"
      },
      {
        internalType: "uint24",
        name: "maximumTickDivergence",
        type: "uint24"
      },
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32"
      }
    ],
    name: "checkOracleSlippage",
    outputs: [],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256"
          }
        ],
        internalType: "struct IV3SwapRouter.ExactInputParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "exactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256"
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160"
          }
        ],
        internalType: "struct IV3SwapRouter.ExactInputSingleParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "exactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256"
          }
        ],
        internalType: "struct IV3SwapRouter.ExactOutputParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "exactOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address"
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256"
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160"
          }
        ],
        internalType: "struct IV3SwapRouter.ExactOutputSingleParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "exactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "factoryV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "getApprovalType",
    outputs: [
      {
        internalType: "enum IApproveAndCall.ApprovalType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address"
          },
          {
            internalType: "address",
            name: "token1",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount0Min",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount1Min",
            type: "uint256"
          }
        ],
        internalType: "struct IApproveAndCall.IncreaseLiquidityParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "increaseLiquidity",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token0",
            type: "address"
          },
          {
            internalType: "address",
            name: "token1",
            type: "address"
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24"
          },
          {
            internalType: "int24",
            name: "tickLower",
            type: "int24"
          },
          {
            internalType: "int24",
            name: "tickUpper",
            type: "int24"
          },
          {
            internalType: "uint256",
            name: "amount0Min",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount1Min",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          }
        ],
        internalType: "struct IApproveAndCall.MintParams",
        name: "params",
        type: "tuple"
      }
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "previousBlockhash",
        type: "bytes32"
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]"
      }
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]"
      }
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]"
      }
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "positionManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "pull",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "refundETH",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "selfPermit",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "selfPermitAllowed",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "selfPermitAllowedIfNecessary",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8"
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32"
      }
    ],
    name: "selfPermitIfNecessary",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256"
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      }
    ],
    name: "sweepToken",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      }
    ],
    name: "sweepToken",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "feeBips",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "sweepTokenWithFee",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "feeBips",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "sweepTokenWithFee",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256"
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      }
    ],
    name: "unwrapWETH9",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      }
    ],
    name: "unwrapWETH9",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "feeBips",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "unwrapWETH9WithFee",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountMinimum",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "feeBips",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "unwrapWETH9WithFee",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "wrapETH",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];
var UniV3Router02__factory = class {
  static createInterface() {
    return new import_ethers39.utils.Interface(_abi38);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers39.Contract(address2, _abi38, signerOrProvider);
  }
};
UniV3Router02__factory.abi = _abi38;

// src/crosschain/contracts/factories/Unwrapper__factory.ts
var import_ethers40 = require("ethers");
var _abi39 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wrapper",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newWrapper",
        type: "address"
      }
    ],
    name: "setWrapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "unwrap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "wrapper",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var Unwrapper__factory = class {
  static createInterface() {
    return new import_ethers40.utils.Interface(_abi39);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers40.Contract(address2, _abi39, signerOrProvider);
  }
};
Unwrapper__factory.abi = _abi39;

// src/crosschain/contracts/factories/Weth__factory.ts
var import_ethers41 = require("ethers");
var _abi40 = [
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [
      {
        name: "",
        type: "string"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "guy",
        type: "address"
      },
      {
        name: "wad",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "src",
        type: "address"
      },
      {
        name: "dst",
        type: "address"
      },
      {
        name: "wad",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "wad",
        type: "uint256"
      }
    ],
    name: "withdraw",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [
      {
        name: "",
        type: "uint8"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        name: "",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [
      {
        name: "",
        type: "string"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "dst",
        type: "address"
      },
      {
        name: "wad",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [],
    name: "deposit",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        name: "",
        type: "address"
      },
      {
        name: "",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "src",
        type: "address"
      },
      {
        indexed: true,
        name: "guy",
        type: "address"
      },
      {
        indexed: false,
        name: "wad",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "src",
        type: "address"
      },
      {
        indexed: true,
        name: "dst",
        type: "address"
      },
      {
        indexed: false,
        name: "wad",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "dst",
        type: "address"
      },
      {
        indexed: false,
        name: "wad",
        type: "uint256"
      }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "src",
        type: "address"
      },
      {
        indexed: false,
        name: "wad",
        type: "uint256"
      }
    ],
    name: "Withdrawal",
    type: "event"
  }
];
var Weth__factory = class {
  static createInterface() {
    return new import_ethers41.utils.Interface(_abi40);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers41.Contract(address2, _abi40, signerOrProvider);
  }
};
Weth__factory.abi = _abi40;

// src/crosschain/contracts/factories/WithdrawUnlocker__factory.ts
var import_ethers42 = require("ethers");
var _abi41 = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "SafeERC20FailedOperation",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "condition",
        type: "bytes"
      }
    ],
    name: "decodeCondition",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          }
        ],
        internalType: "struct WithdrawUnlocker.Condition",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address"
          }
        ],
        internalType: "struct WithdrawUnlocker.Condition",
        name: "c",
        type: "tuple"
      }
    ],
    name: "encodeCondition",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "encodeSolution",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMetaRouter",
        name: "metarouter",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMetaRouter",
        name: "metarouter",
        type: "address"
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256"
          }
        ],
        internalType: "struct DepositoryTypes.Deposit",
        name: "deposit",
        type: "tuple"
      },
      {
        internalType: "bytes",
        name: "condition",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "solution",
        type: "bytes"
      }
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode14 = "0x608060405234601957604051610ba761001f8239610ba790f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806322c0bff8146100625780635554dbd81461005d578063760bd118146100585780639bbd27b2146100535763f18d03cc0361008857610313565b61028d565b610235565b6101e4565b610144565b6001600160a01b031690565b90565b6001600160a01b0381165b0361008857565b600080fd5b9050359061009a82610076565b565b908160609103126100885790565b909182601f830112156100885781359167ffffffffffffffff831161008857602001926001830284011161008857565b919060c083820312610088576100f0818461008d565b926100fe826020830161009c565b92608082013567ffffffffffffffff8111610088578361011f9184016100aa565b92909360a082013567ffffffffffffffff81116100885761014092016100aa565b9091565b34610088576101636101573660046100da565b949390939291926105fe565b60405180805b0390f35b600091031261008857565b60005b83811061018b5750506000910152565b818101518382015260200161017b565b6101bc6101c56020936101cf936101b0815190565b80835293849260200190565b95869101610178565b601f01601f191690565b0190565b60208082526100739291019061019b565b34610088576101f436600461016d565b6101696101ff610770565b604051918291826101d3565b9060208282031261008857813567ffffffffffffffff81116100885761014092016100aa565b9052565b346100885761016961025161024b36600461020b565b906107e5565b6040519182918290516001600160a01b0316815260200190565b908160209103126100885790565b90602082820312610088576100739161026b565b34610088576101696101ff6102a3366004610279565b610839565b6001600160a01b038116610081565b9050359061009a826102a8565b80610081565b9050359061009a826102c4565b608081830312610088576102eb828261008d565b926100736102fc846020850161008d565b93606061030c82604087016102b7565b94016102ca565b34610088576101636103263660046102d7565b929190916108b6565b6100736100736100739290565b1561034357565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5769746864726177556e6c6f636b657220736f6c7574696f6e2073686f756c6460448201527f20626520656d7074790000000000000000000000000000000000000000000000606482015280608481015b0390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761041e57604052565b6103cd565b9061009a61043060405190565b92836103fc565b67ffffffffffffffff811161041e57602090601f01601f19160190565b9061046661046183610437565b610423565b918252565b6104756022610454565b7f5769746864726177556e6c6f636b65722e756e6c6f636b28726563697069656e60208201527f7429000000000000000000000000000000000000000000000000000000000000604082015290565b61007361046b565b610067610073610073926001600160a01b031690565b610073906104cc565b610073906104e2565b3561007381610076565b35610073816102c4565b61052161051b6100739263ffffffff1690565b60e01b90565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b610231906104eb565b61058b61009a9461057b606094989795610571608086019a6000870190610546565b6020850190610546565b6001600160a01b03166040830152565b0152565b6102319061032f565b61009a946105dd829897956105cd6080966105c66105ea97600060a089019801906001600160a01b03169052565b60208c0152565b6001600160a01b031660408a0152565b878203606089015261019b565b94019061058f565b6040513d6000823e3d90fd5b916106cd6106d26106d8926106406106de959761061f61063b9b60049b5090565b9260009b8c946106356106318761032f565b9190565b1461033c565b6107e5565b019461066361065687516001600160a01b031690565b61065e6104c4565b61090e565b6106cd898801966106be602061068961067b8b6104f4565b93516001600160a01b031690565b9a01996106958b6104fe565b906106a363f18d03cc610508565b93866106ae60405190565b9e8f96602088019081520161054f565b602082018103825203896103fc565b6104eb565b936104f4565b926104fe565b906106e8306104eb565b91813b15610088578580946107338261070060405190565b988997889687957f3add6d5a00000000000000000000000000000000000000000000000000000000875260048701610598565b03925af1801561076b57610745575050565b8161009a92903d10610764575b61075c81836103fc565b81019061016d565b503d610752565b6105f2565b6040516100738160208101805b908103825203826103fc565b6100736020610423565b61079b610789565b9060008252565b610073610793565b9190602083820312610088576107cd9060006107c66020610423565b94016102b7565b8252565b9060208282031261008857610073916107aa565b610073916107f16107a2565b508101906107d1565b506100739060208101906102b7565b61009a919060009061081b90806107fa565b6001600160a01b0316910152565b60208101929161009a9190610809565b61007361084560405190565b809261077d602083019182610829565b61085f6033610454565b7f5769746864726177556e6c6f636b65722e7472616e7366657228746f6b656e2c60208201527f20726563697069656e742c20616d6f756e742900000000000000000000000000604082015290565b610073610855565b906108db61009a9493926106cd85856108ce866104eb565b6108d66108ae565b6109a0565b90610a0b565b929160206108fe61009a936040870190878203600089015261019b565b9401906001600160a01b03169052565b9061096361009a9261095461092260405190565b9384926004602085017f319af333000000000000000000000000000000000000000000000000000000008152016108e1565b602082018103825203826103fc565b610a55565b61058b61009a9461057b61098e606095999896996080860190868203600088015261019b565b6001600160a01b039099166020850152565b61095461009a9461096393946109b560405190565b9586946004602087017f8ef3f39900000000000000000000000000000000000000000000000000000000815201610968565b6001600160a01b0391821681529116602082015260608101929161009a9160400152565b90610a5090610a4161009a95600495610a276323b872dd610508565b93610a3160405190565b97889560208701908152016109e7565b602082018103825203836103fc565b610a60565b61009a906001610b61565b906000602091610a6e600090565b50828151910182855af1156105f2573d90600051600092610a916106318561032f565b03610afc5750610aa0816104eb565b3b610aad6106318461032f565b145b610ab7575050565b6103c9610ac483926104eb565b7f5274afe70000000000000000000000000000000000000000000000000000000083526001600160a01b031660048301526024820190565b610b09610631600161032f565b1415610aaf565b60008091610b266a636f6e736f6c652e6c6f6790565b602082519201905afa50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b600103610b325761009a90610b1056fea26469706673582212201be08d6a83a1a9933f37b101875c39c7aea55d9af053a01792f9c6e742cedf1064736f6c634300081c0033";
var isSuperArgs14 = (xs) => xs.length > 1;
var WithdrawUnlocker__factory = class extends import_ethers42.ContractFactory {
  constructor(...args) {
    var __super = (...args) => {
      super(...args);
    };
    if (isSuperArgs14(args)) {
      __super(...args);
    } else {
      __super(_abi41, _bytecode14, args[0]);
    }
    this.contractName = "WithdrawUnlocker";
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address2) {
    return super.attach(address2);
  }
  connect(signer) {
    return super.connect(signer);
  }
  static createInterface() {
    return new import_ethers42.utils.Interface(_abi41);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers42.Contract(address2, _abi41, signerOrProvider);
  }
};
WithdrawUnlocker__factory.bytecode = _bytecode14;
WithdrawUnlocker__factory.abi = _abi41;

// src/crosschain/contracts/factories/WTON__factory.ts
var import_ethers43 = require("ethers");
var _abi42 = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string"
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string"
      },
      {
        internalType: "address[]",
        name: "initialSet",
        type: "address[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "int256",
        name: "oracleSetHash",
        type: "int256"
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "newOracles",
        type: "address[]"
      }
    ],
    name: "NewOracleSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: false,
        internalType: "int8",
        name: "to_wc",
        type: "int8"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "to_addr_hash",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "SwapEthToTon",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "int8",
        name: "workchain",
        type: "int8"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "ton_address_hash",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "ton_tx_hash",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "lt",
        type: "uint64"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "SwapTonToEth",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [],
    name: "allowBurn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        components: [
          {
            internalType: "int8",
            name: "workchain",
            type: "int8"
          },
          {
            internalType: "bytes32",
            name: "address_hash",
            type: "bytes32"
          }
        ],
        internalType: "struct TonUtils.TonAddress",
        name: "addr",
        type: "tuple"
      }
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        components: [
          {
            internalType: "int8",
            name: "workchain",
            type: "int8"
          },
          {
            internalType: "bytes32",
            name: "address_hash",
            type: "bytes32"
          }
        ],
        internalType: "struct TonUtils.TonAddress",
        name: "addr",
        type: "tuple"
      }
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "digest",
        type: "bytes32"
      },
      {
        components: [
          {
            internalType: "address",
            name: "signer",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes"
          }
        ],
        internalType: "struct TonUtils.Signature",
        name: "sig",
        type: "tuple"
      }
    ],
    name: "checkSignature",
    outputs: [],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256"
      }
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "finishedVotings",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFullOracleSet",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "newBurnStatus",
        type: "bool"
      },
      {
        internalType: "int256",
        name: "nonce",
        type: "int256"
      }
    ],
    name: "getNewBurnStatusId",
    outputs: [
      {
        internalType: "bytes32",
        name: "result",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "oracleSetHash",
        type: "int256"
      },
      {
        internalType: "address[]",
        name: "set",
        type: "address[]"
      }
    ],
    name: "getNewSetId",
    outputs: [
      {
        internalType: "bytes32",
        name: "result",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "receiver",
            type: "address"
          },
          {
            internalType: "uint64",
            name: "amount",
            type: "uint64"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "int8",
                    name: "workchain",
                    type: "int8"
                  },
                  {
                    internalType: "bytes32",
                    name: "address_hash",
                    type: "bytes32"
                  }
                ],
                internalType: "struct TonUtils.TonAddress",
                name: "address_",
                type: "tuple"
              },
              {
                internalType: "bytes32",
                name: "tx_hash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "lt",
                type: "uint64"
              }
            ],
            internalType: "struct TonUtils.TonTxID",
            name: "tx",
            type: "tuple"
          }
        ],
        internalType: "struct TonUtils.SwapData",
        name: "data",
        type: "tuple"
      }
    ],
    name: "getSwapDataId",
    outputs: [
      {
        internalType: "bytes32",
        name: "result",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256"
      }
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "isOracle",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "oraclesSet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "receiver",
            type: "address"
          },
          {
            internalType: "uint64",
            name: "amount",
            type: "uint64"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "int8",
                    name: "workchain",
                    type: "int8"
                  },
                  {
                    internalType: "bytes32",
                    name: "address_hash",
                    type: "bytes32"
                  }
                ],
                internalType: "struct TonUtils.TonAddress",
                name: "address_",
                type: "tuple"
              },
              {
                internalType: "bytes32",
                name: "tx_hash",
                type: "bytes32"
              },
              {
                internalType: "uint64",
                name: "lt",
                type: "uint64"
              }
            ],
            internalType: "struct TonUtils.TonTxID",
            name: "tx",
            type: "tuple"
          }
        ],
        internalType: "struct TonUtils.SwapData",
        name: "data",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "address",
            name: "signer",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes"
          }
        ],
        internalType: "struct TonUtils.Signature[]",
        name: "signatures",
        type: "tuple[]"
      }
    ],
    name: "voteForMinting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "oracleSetHash",
        type: "int256"
      },
      {
        internalType: "address[]",
        name: "newOracles",
        type: "address[]"
      },
      {
        components: [
          {
            internalType: "address",
            name: "signer",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes"
          }
        ],
        internalType: "struct TonUtils.Signature[]",
        name: "signatures",
        type: "tuple[]"
      }
    ],
    name: "voteForNewOracleSet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "newBurnStatus",
        type: "bool"
      },
      {
        internalType: "int256",
        name: "nonce",
        type: "int256"
      },
      {
        components: [
          {
            internalType: "address",
            name: "signer",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes"
          }
        ],
        internalType: "struct TonUtils.Signature[]",
        name: "signatures",
        type: "tuple[]"
      }
    ],
    name: "voteForSwitchBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var WTON__factory = class {
  static createInterface() {
    return new import_ethers43.utils.Interface(_abi42);
  }
  static connect(address2, signerOrProvider) {
    return new import_ethers43.Contract(address2, _abi42, signerOrProvider);
  }
};
WTON__factory.abi = _abi42;

// src/crosschain/sdkError.ts
var SdkError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.message = `[${this.constructor.name}] ${message}`;
    this.name = this.constructor.name;
    if (cause) {
      this.message = `${this.message}. Cause: ${this.unwrapCause(cause)}`;
    }
  }
  unwrapCause(cause) {
    if (cause instanceof AggregateError) {
      const errors = cause.errors.map((e) => {
        return this.unwrapCause(e);
      }).join(", ");
      return `${cause.message} [${errors}]`;
    } else if (cause instanceof Error) {
      return cause.message;
    } else if (typeof cause === "string" && cause.length > 0) {
      return cause;
    } else if (typeof cause === "number") {
      return `${cause}`;
    } else if (typeof cause === "object") {
      return JSON.stringify(cause);
    } else {
      return "Unknown";
    }
  }
};
var RoutingError = class extends SdkError {
};
var NoTransitTokenError = class extends RoutingError {
};
var NoRepresentationFoundError = class extends RoutingError {
};
var LimitError = class extends SdkError {
};
var AmountTooLowError = class extends LimitError {
};
var AmountTooHighError = class extends LimitError {
};
var AmountLessThanFeeError = class extends LimitError {
};
var AdvisorError = class extends SdkError {
};
var ChainFlipError = class extends SdkError {
};
var ThorChainError = class extends SdkError {
};
var TradeError = class extends SdkError {
};
var WrapTradeError = class extends TradeError {
};
var UniV2TradeError = class extends TradeError {
};
var UniV3TradeError = class extends TradeError {
};
var IzumiTradeError = class extends TradeError {
};
var OpenOceanTradeError = class extends TradeError {
};
var OneInchTradeError = class extends TradeError {
};
var DedustTradeError = class extends TradeError {
};
var StonFiTradeError = class extends TradeError {
};
var RaydiumTradeError = class extends TradeError {
};
var JupiterTradeError = class extends TradeError {
};
var aggregatorCategoryPatterns = {
  ["rate_limit" /* RateLimit */]: ["rate limit", "too many requests", "the limit of requests", /\b429\b/],
  ["swap_aggregator_error" /* SwapAggregatorError */]: [
    "swap error",
    // 1inch
    "cannot create trade",
    // uni v2
    "no path found",
    // izumi
    "route not found"
    // uni v3
  ],
  ["oracle_error" /* OracleError */]: ["oneinch oracle"],
  ["exceed_plan" /* ExceedPlan */]: ["plan has been exceeded"],
  ["liquidity_error" /* LiquidityError */]: ["insufficient liquidity", "No avail liquidity"],
  ["bigint_error" /* BigIntError */]: ["converted to bigint", "to a bigint"],
  ["token_error" /* TokenError */]: ["not valid token"],
  ["unknown" /* Unknown */]: ["unknown"]
};
function aggregatorErrorToText(reason) {
  const lowerCaseReason = reason.toLowerCase();
  for (const [category, patterns] of Object.entries(aggregatorCategoryPatterns)) {
    for (const pattern of patterns) {
      if (typeof pattern === "string") {
        if (lowerCaseReason.includes(pattern.toLowerCase()))
          return category;
      } else if (pattern.test(lowerCaseReason)) {
        return category;
      }
    }
  }
  return "unknown" /* Unknown */;
}

// src/crosschain/revert.ts
var import_constants39 = require("@ethersproject/constants");
var import_addresses3 = require("@ethersproject/constants/lib/addresses");
var import_jsbi14 = __toESM(require("jsbi"));

// src/crosschain/chainUtils/btc.ts
var import_bitcoinjs_lib = require("bitcoinjs-lib");
var import_ethers44 = require("ethers");

// src/crosschain/mempool.ts
async function getFastestFee() {
  const response = await fetch("https://mempool.space/api/v1/fees/recommended");
  if (!response.ok) {
    const text = await response.text();
    const json = JSON.parse(text);
    throw new SdkError(json.message ?? text);
  }
  const { fastestFee } = await response.json();
  return fastestFee;
}

// src/crosschain/chainUtils/btc.ts
var getThreshold = async (syBtcAmount, synthesis, cache) => {
  const syBtc = syBtcAmount.token;
  const threshold = await cache.get(
    ["tokenThreshold", synthesis.address, syBtc.address],
    async () => {
      return synthesis.tokenThreshold(syBtc.address);
    },
    24 * 60 * 60
    // 24 hours
  );
  return new TokenAmount(syBtc, threshold.toString());
};
var getToBtcFee = async (syBtcAmount, synthesis, cache) => {
  const syBtc = syBtcAmount.token;
  let fee = await cache.get(
    ["syntToMinFeeBTC", synthesis.address, syBtc.address],
    async () => {
      return synthesis.syntToMinFeeBTC(syBtc.address);
    },
    600
    // 10 minutes
  );
  try {
    const fastestFee = await cache.get(["getFastestFee"], getFastestFee, 60);
    const recommendedFee = import_ethers44.BigNumber.from(fastestFee * 300);
    if (recommendedFee.gt(fee)) {
      fee = recommendedFee;
    }
  } catch {
  }
  return new TokenAmount(syBtc, fee.toString());
};
function isBtcChainId(chainId) {
  if (!chainId)
    return false;
  return chainId in BTC_NETWORKS;
}
var BTC_NETWORKS = {
  [3652501241 /* BTC_MAINNET */]: import_bitcoinjs_lib.networks.bitcoin,
  [2782866891 /* BTC_MUTINY */]: import_bitcoinjs_lib.networks.testnet,
  [675223068 /* BTC_TESTNET4 */]: import_bitcoinjs_lib.networks.testnet
};
function getPkScriptForChain(addr, btcChain) {
  return import_bitcoinjs_lib.address.toOutputScript(addr, btcChain);
}
function getPkScript(addr, btcChainId) {
  const network = BTC_NETWORKS[btcChainId];
  if (!network) {
    throw new Error(`Unknown BTC network ${btcChainId}`);
  }
  return getPkScriptForChain(addr, network);
}
function getAddress3(pkScript, btcChain) {
  return import_bitcoinjs_lib.address.fromOutputScript(Buffer.from(pkScript.substring(2), "hex"), btcChain);
}
async function getPortalSettings(forwarderUrl) {
  const portalApiUrl = new URL(`${forwarderUrl}/portal?kind=2`);
  const response = await fetch(portalApiUrl);
  if (!response.ok) {
    const text = await response.text();
    const json = JSON.parse(text);
    throw new Error(json.message ?? text);
  }
  return response.json();
}
async function getBtcPortalFee(forwarderUrl, cache) {
  let fee = await cache.get(
    ["getMinBtcFee", forwarderUrl],
    async () => {
      const response = await getPortalSettings(forwarderUrl);
      const {
        state: { minBtcFee }
      } = response;
      return Number(minBtcFee);
    },
    600
    // 10 minutes
  );
  try {
    const fastestFee = await cache.get(["getFastestFee"], getFastestFee, 60);
    const recommendedFee = fastestFee * 200;
    if (recommendedFee > fee) {
      fee = recommendedFee;
    }
  } catch {
  }
  return fee.toString();
}
async function getUnwrapDustLimit(forwarderUrl, cache) {
  const unwrapDustLimit = await cache.get(
    ["getUnwrapDustLimit", forwarderUrl],
    async () => {
      const response = await getPortalSettings(forwarderUrl);
      const {
        state: { unwrapDustLimit: unwrapDustLimit2 }
      } = response;
      return Number(unwrapDustLimit2);
    },
    60 * 60
    // 1 hour
  );
  return unwrapDustLimit.toString();
}

// src/crosschain/chainUtils/ton.ts
var import_core = require("@ton/core");
var import_ton = require("@ton/ton");
var import_units = require("@ethersproject/units");
var TON_TOKEN_DECIMALS = 9;
var TON_REFERRAL_ADDRESS = import_core.Address.parse("UQD35aoXN2UbZ1ZrjjjKsLNH-ISdp5Lj42d_0Q_pllYmRth0");
var TON_STONFI_PROXY_ADDRESS = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c";
function isTonChainId(chainId) {
  if (!chainId)
    return false;
  return [85918 /* TON_MAINNET */, 85919 /* TON_TESTNET */].includes(chainId);
}
function callDataToCell(finalCallData) {
  const MAX_BYTES_IN_CELL = 127;
  function padBuffer(buf) {
    const targetLength = Math.ceil(buf.length / 32) * 32;
    const paddingLength = targetLength - buf.length;
    if (paddingLength === 0) {
      return buf;
    }
    const paddedBuffer = Buffer.alloc(targetLength);
    buf.copy(paddedBuffer);
    return paddedBuffer;
  }
  function createCell(buf) {
    const builder = (0, import_core.beginCell)();
    const bytesToStore = buf.subarray(0, MAX_BYTES_IN_CELL);
    builder.storeBuffer(bytesToStore);
    if (buf.length > MAX_BYTES_IN_CELL) {
      const remainingBuffer = buf.subarray(MAX_BYTES_IN_CELL);
      builder.storeRef(createCell(remainingBuffer));
    }
    return builder.endCell();
  }
  return createCell(padBuffer(finalCallData));
}
var Opcodes = {
  EpSynthesize: 2048159929,
  EpMetaSynthesize: 1585287200
};
var EventIds = {
  MPCChanged: BigInt(3246037916),
  BurnCompleted: BigInt(1659197634),
  SetJettonThreshold: BigInt(3303282619),
  OracleRequest: BigInt(2067945553)
};
var Bridge = class {
  constructor(address2, init) {
    this.address = address2;
    this.init = init;
  }
  // Creates forward payload for 'synthesize' endpoint
  static synthesizeMessage({
    stableBridgingFee,
    token,
    amount,
    chain2Address,
    receiveSide,
    oppositeBridge,
    revertableAddress,
    chainId
  }) {
    const payloadCell1 = (0, import_core.beginCell)().storeCoins(stableBridgingFee).storeAddress(token).storeCoins(amount).storeBuffer(chain2Address).storeBuffer(receiveSide).endCell();
    const payloadCell2 = (0, import_core.beginCell)().storeBuffer(oppositeBridge).storeBuffer(revertableAddress).storeUint(chainId, 256).endCell();
    return (0, import_core.beginCell)().storeUint(Opcodes.EpSynthesize, 32).storeRef(payloadCell1).storeRef(payloadCell2).endCell();
  }
  static metaSynthesizeMessage({
    stableBridgingFee,
    token,
    amount,
    chain2Address,
    receiveSide,
    oppositeBridge,
    chainId,
    finalReceiveSide,
    finalOffset,
    revertableAddress,
    swapTokens,
    secondDexRouter,
    secondSwapCallData,
    finalCallData
  }) {
    const payloadCell1 = (0, import_core.beginCell)().storeCoins(stableBridgingFee).storeAddress(token).storeCoins(amount).storeBuffer(chain2Address);
    const payloadCell2 = (0, import_core.beginCell)().storeBuffer(receiveSide).storeBuffer(oppositeBridge).storeUint(chainId, 256).storeBuffer(finalReceiveSide);
    const swapTokensCellBuilder = (0, import_core.beginCell)();
    swapTokens.forEach((tokenAddr) => swapTokensCellBuilder.storeBuffer(tokenAddr));
    const finalCallDataCell = callDataToCell(finalCallData);
    const secondSwapCallDataCell = callDataToCell(secondSwapCallData);
    const payloadCell3 = (0, import_core.beginCell)().storeUint(finalOffset, 256).storeBuffer(revertableAddress).storeUint(finalCallData.length, 64).storeRef(swapTokensCellBuilder.endCell()).storeRef(finalCallDataCell).storeBuffer(secondDexRouter).storeRef(secondSwapCallDataCell).storeUint(secondSwapCallData.length, 64).endCell();
    return (0, import_core.beginCell)().storeUint(Opcodes.EpMetaSynthesize, 32).storeRef(payloadCell1).storeRef(payloadCell2).storeRef(payloadCell3).endCell();
  }
};
var MIN_META_SYNTH_TONS = (0, import_core.toNano)("0.02");
var MIN_META_SYNTH_JETTONS = (0, import_core.toNano)("0.2");
var MIN_SYNTH_TONS = (0, import_core.toNano)("0.015");
var MIN_SYNTH_JETTONS = (0, import_core.toNano)("0.2");
var NOTIFICATION_PAYMENT = (0, import_core.toNano)("0.05");
function isWTon(symbiosis, token) {
  const wton = symbiosis.tokens().find((token2) => isTonChainId(token2.chainId) && token2.symbol?.toLowerCase() === "ton");
  if (!wton) {
    return false;
  }
  return wton.equals(token);
}
async function buildMetaSynthesize(params) {
  const {
    symbiosis,
    fee,
    from,
    to,
    revertableAddress,
    amountIn,
    chainIdOut,
    swapTokens,
    secondDexRouter,
    secondSwapCallData,
    finalReceiveSide,
    finalCallData,
    finalOffset,
    validUntil
  } = params;
  const tonChainConfig = symbiosis.config.chains.find((chain) => chain.id === amountIn.token.chainId);
  if (!tonChainConfig) {
    throw new SdkError(`No TON chain config for chain ${amountIn.token.chainId}`);
  }
  const tonPortal = tonChainConfig.tonPortal;
  if (!tonPortal) {
    throw new SdkError(`No TON portal for chain ${amountIn.token.chainId}`);
  }
  const tonTokenAddress = amountIn.token.tonAddress;
  const metaSynthesizeBody = Bridge.metaSynthesizeMessage({
    stableBridgingFee: BigInt(fee.raw.toString()),
    token: import_core.Address.parse(tonTokenAddress),
    // simulate jetton for gas token TEP-161
    amount: BigInt(amountIn.raw.toString()),
    chain2Address: Buffer.from(to.slice(2), "hex"),
    receiveSide: Buffer.from(symbiosis.synthesis(chainIdOut).address.slice(2), "hex"),
    oppositeBridge: Buffer.from(symbiosis.bridge(chainIdOut).address.slice(2), "hex"),
    chainId: BigInt(chainIdOut),
    revertableAddress: Buffer.from(revertableAddress.slice(2), "hex"),
    swapTokens: swapTokens.map((token) => Buffer.from(token.slice(2), "hex")),
    // sTON, sWTON host chain tokens
    secondDexRouter: Buffer.from(secondDexRouter.slice(2), "hex"),
    secondSwapCallData: Buffer.from(secondSwapCallData.slice(2), "hex"),
    finalCallData: Buffer.from(finalCallData.slice(2), "hex"),
    // metaBurnSyntheticToken host chain (synthesis.sol) hostchain (include extra swap on 3-rd chain)
    finalReceiveSide: Buffer.from(finalReceiveSide.slice(2), "hex"),
    // synthesis host chain address
    finalOffset: BigInt(finalOffset)
  });
  const tonFee = new TokenAmount(amountIn.token, MIN_META_SYNTH_TONS);
  if (isWTon(symbiosis, amountIn.token)) {
    return {
      validUntil,
      messages: [
        {
          address: tonPortal,
          amount: amountIn.add(tonFee).raw.toString(),
          payload: metaSynthesizeBody.toBoc().toString("base64")
        }
      ]
    };
  } else {
    const tonTokenAddress2 = amountIn.token.tonAddress;
    const jettonMaster = import_ton.JettonMaster.create(import_core.Address.parse(tonTokenAddress2));
    const tonClient = await symbiosis.getTonClient();
    const provider = tonClient.provider(jettonMaster.address);
    const jettonWalletAddress = await jettonMaster.getWalletAddress(provider, import_core.Address.parse(from));
    const cell = (0, import_core.beginCell)().storeUint(260734629, 32).storeUint(0, 64).storeCoins(BigInt(amountIn.raw.toString())).storeAddress(import_core.Address.parse(tonPortal)).storeAddress(import_core.Address.parse(from)).storeBit(0).storeCoins(NOTIFICATION_PAYMENT).storeMaybeRef(metaSynthesizeBody).endCell();
    return {
      validUntil,
      messages: [
        {
          address: jettonWalletAddress.toString(),
          amount: MIN_META_SYNTH_JETTONS.toString(),
          payload: cell.toBoc().toString("base64")
        }
      ]
    };
  }
}
async function buildSynthesize(params) {
  const { symbiosis, fee, from, amountIn, to, chainIdOut, validUntil, revertableAddress } = params;
  const tonChainConfig = symbiosis.config.chains.find((chain) => chain.id === amountIn.token.chainId);
  if (!tonChainConfig) {
    throw new SdkError(`No TON chain config for chain ${amountIn.token.chainId}`);
  }
  const tonPortal = tonChainConfig.tonPortal;
  if (!tonPortal) {
    throw new SdkError(`No TON portal for chain ${amountIn.token.chainId}`);
  }
  const tonTokenAddress = amountIn.token.tonAddress;
  const synthesizeMessage = Bridge.synthesizeMessage({
    stableBridgingFee: BigInt(fee.raw.toString()),
    token: import_core.Address.parse(tonTokenAddress),
    amount: BigInt(amountIn.raw.toString()),
    chain2Address: Buffer.from(to.slice(2), "hex"),
    receiveSide: Buffer.from(symbiosis.synthesis(chainIdOut).address.slice(2), "hex"),
    oppositeBridge: Buffer.from(symbiosis.bridge(chainIdOut).address.slice(2), "hex"),
    revertableAddress: Buffer.from(revertableAddress.slice(2), "hex"),
    chainId: BigInt(chainIdOut)
  });
  const tonFee = new TokenAmount(amountIn.token, MIN_SYNTH_TONS);
  if (isWTon(symbiosis, amountIn.token)) {
    return {
      validUntil,
      messages: [
        {
          address: tonPortal,
          amount: amountIn.add(tonFee).raw.toString(),
          payload: synthesizeMessage.toBoc().toString("base64")
        }
      ]
    };
  } else {
    const tonTokenAddress2 = amountIn.token.tonAddress;
    const jettonMaster = import_ton.JettonMaster.create(import_core.Address.parse(tonTokenAddress2));
    const tonClient = await symbiosis.getTonClient();
    const provider = tonClient.provider(jettonMaster.address);
    const jettonWalletAddress = await jettonMaster.getWalletAddress(provider, import_core.Address.parse(from));
    const cell = (0, import_core.beginCell)().storeUint(260734629, 32).storeUint(0, 64).storeCoins(BigInt(amountIn.raw.toString())).storeAddress(import_core.Address.parse(tonPortal)).storeAddress(import_core.Address.parse(from)).storeBit(0).storeCoins(NOTIFICATION_PAYMENT).storeMaybeRef(synthesizeMessage).endCell();
    return {
      validUntil,
      messages: [
        {
          address: jettonWalletAddress.toString(),
          amount: MIN_SYNTH_JETTONS.toString(),
          payload: cell.toBoc().toString("base64")
        }
      ]
    };
  }
}
function tonAdvisorMock(feeToken) {
  let feeRaw = "0.1";
  if (feeToken.symbol?.toLowerCase().includes("usdt")) {
    feeRaw = "0.5";
  }
  if (feeToken.symbol?.toLowerCase().includes("uxlink")) {
    feeRaw = "1";
  }
  if (feeToken.symbol?.toLowerCase().includes("cati")) {
    feeRaw = "1";
  }
  if (feeToken.symbol?.toLowerCase().includes("pineye")) {
    feeRaw = "1000";
  }
  if (feeToken.symbol?.toLowerCase().includes("evaa")) {
    feeRaw = "1";
  }
  return {
    fee: new TokenAmount(feeToken, (0, import_units.parseUnits)(feeRaw, feeToken.decimals).toString()),
    save: new TokenAmount(feeToken, "0")
  };
}

// src/crosschain/chainUtils/evm.ts
var import_units2 = require("@ethersproject/units");
var import_ethers45 = require("ethers");
var import_jsbi9 = __toESM(require("jsbi"));

// src/crosschain/constants.ts
var import_constants16 = require("@ethersproject/constants");
var import_jsbi8 = __toESM(require("jsbi"));
var CROSS_CHAIN_ID = "0x0000000000000000000000000000000000000000000000000000000000000000";
var WETH_ONLY = {
  [1 /* ETH_MAINNET */]: [WETH[1 /* ETH_MAINNET */]],
  [4 /* ETH_RINKEBY */]: [WETH[4 /* ETH_RINKEBY */]],
  [42 /* ETH_KOVAN */]: [WETH[42 /* ETH_KOVAN */]],
  [56 /* BSC_MAINNET */]: [WETH[56 /* BSC_MAINNET */]],
  [97 /* BSC_TESTNET */]: [WETH[97 /* BSC_TESTNET */]],
  [137 /* MATIC_MAINNET */]: [WETH[137 /* MATIC_MAINNET */]],
  [80001 /* MATIC_MUMBAI */]: [WETH[80001 /* MATIC_MUMBAI */]],
  [43114 /* AVAX_MAINNET */]: [WETH[43114 /* AVAX_MAINNET */]],
  [43113 /* AVAX_TESTNET */]: [WETH[43113 /* AVAX_TESTNET */]],
  [128 /* HECO_MAINNET */]: [WETH[128 /* HECO_MAINNET */]],
  [256 /* HECO_TESTNET */]: [WETH[256 /* HECO_TESTNET */]],
  [66 /* OKEX_MAINNET */]: [WETH[66 /* OKEX_MAINNET */]],
  [65 /* OKEX_TESTNET */]: [WETH[65 /* OKEX_TESTNET */]],
  [288 /* BOBA_MAINNET */]: [WETH[288 /* BOBA_MAINNET */]],
  [43288 /* BOBA_AVALANCHE */]: [WETH[43288 /* BOBA_AVALANCHE */]],
  [719095483 /* SYMBIOSIS_TESTNET */]: [WETH[719095483 /* SYMBIOSIS_TESTNET */]],
  [13863860 /* SYMBIOSIS_MAINNET */]: [WETH[13863860 /* SYMBIOSIS_MAINNET */]],
  [28 /* BOBA_RINKEBY */]: [WETH[28 /* BOBA_RINKEBY */]],
  [2001 /* MILKOMEDA_MAINNET */]: [WETH[2001 /* MILKOMEDA_MAINNET */]],
  [200101 /* MILKOMEDA_DEVNET */]: [WETH[200101 /* MILKOMEDA_DEVNET */]],
  [1313161554 /* AURORA_MAINNET */]: [WETH[1313161554 /* AURORA_MAINNET */]],
  [1313161555 /* AURORA_TESTNET */]: [WETH[1313161555 /* AURORA_TESTNET */]],
  [40 /* TELOS_MAINNET */]: [WETH[40 /* TELOS_MAINNET */]],
  [41 /* TELOS_TESTNET */]: [WETH[41 /* TELOS_TESTNET */]],
  [8081 /* SHARDEUM_TESTNET_2 */]: [WETH[8081 /* SHARDEUM_TESTNET_2 */]],
  [2222 /* KAVA_MAINNET */]: [WETH[2222 /* KAVA_MAINNET */]],
  [534351 /* SCROLL_SEPOLIA */]: [WETH[534351 /* SCROLL_SEPOLIA */]],
  [324 /* ZKSYNC_MAINNET */]: [WETH[324 /* ZKSYNC_MAINNET */]],
  [42161 /* ARBITRUM_MAINNET */]: [WETH[42161 /* ARBITRUM_MAINNET */]],
  [42170 /* ARBITRUM_NOVA */]: [WETH[42170 /* ARBITRUM_NOVA */]],
  [10 /* OPTIMISM_MAINNET */]: [WETH[10 /* OPTIMISM_MAINNET */]],
  [7001 /* ZETACHAIN_ATHENS_2 */]: [WETH[7001 /* ZETACHAIN_ATHENS_2 */]],
  [1101 /* POLYGON_ZK */]: [WETH[1101 /* POLYGON_ZK */]],
  [59140 /* LINEA_TESTNET */]: [WETH[59140 /* LINEA_TESTNET */]],
  [59144 /* LINEA_MAINNET */]: [WETH[59144 /* LINEA_MAINNET */]],
  [5e3 /* MANTLE_MAINNET */]: [WETH[5e3 /* MANTLE_MAINNET */]],
  [5001 /* MANTLE_TESTNET */]: [WETH[5001 /* MANTLE_TESTNET */]],
  [8453 /* BASE_MAINNET */]: [WETH[8453 /* BASE_MAINNET */]],
  [728126428 /* TRON_MAINNET */]: [WETH[728126428 /* TRON_MAINNET */]],
  [2494104990 /* TRON_TESTNET */]: [WETH[2494104990 /* TRON_TESTNET */]],
  [534352 /* SCROLL_MAINNET */]: [WETH[534352 /* SCROLL_MAINNET */]],
  [169 /* MANTA_MAINNET */]: [WETH[169 /* MANTA_MAINNET */]],
  [1088 /* METIS_MAINNET */]: [WETH[1088 /* METIS_MAINNET */]],
  [195 /* OKX_X1_TESTNET */]: [WETH[195 /* OKX_X1_TESTNET */]],
  [5165 /* BAHAMUT_MAINNET */]: [WETH[5165 /* BAHAMUT_MAINNET */]],
  [34443 /* MODE_MAINNET */]: [WETH[34443 /* MODE_MAINNET */]],
  [30 /* RSK_MAINNET */]: [WETH[30 /* RSK_MAINNET */]],
  [81457 /* BLAST_MAINNET */]: [WETH[81457 /* BLAST_MAINNET */]],
  [4200 /* MERLIN_MAINNET */]: [WETH[4200 /* MERLIN_MAINNET */]],
  [810180 /* ZKLINK_MAINNET */]: [WETH[810180 /* ZKLINK_MAINNET */]],
  [1116 /* CORE_MAINNET */]: [WETH[1116 /* CORE_MAINNET */]],
  [11155111 /* SEPOLIA_TESTNET */]: [WETH[11155111 /* SEPOLIA_TESTNET */]],
  [167e3 /* TAIKO_MAINNET */]: [WETH[167e3 /* TAIKO_MAINNET */]],
  [1329 /* SEI_EVM_MAINNET */]: [WETH[1329 /* SEI_EVM_MAINNET */]],
  [7e3 /* ZETACHAIN_MAINNET */]: [WETH[7e3 /* ZETACHAIN_MAINNET */]],
  [25 /* CRONOS_MAINNET */]: [WETH[25 /* CRONOS_MAINNET */]],
  [252 /* FRAXTAL_MAINNET */]: [WETH[252 /* FRAXTAL_MAINNET */]],
  [1625 /* GRAVITY_MAINNET */]: [WETH[1625 /* GRAVITY_MAINNET */]],
  [223 /* BSQUARED_MAINNET */]: [WETH[223 /* BSQUARED_MAINNET */]],
  [388 /* CRONOS_ZK_MAINNET */]: [WETH[388 /* CRONOS_ZK_MAINNET */]],
  [2818 /* MORPH_MAINNET */]: [WETH[2818 /* MORPH_MAINNET */]],
  [5426 /* SOLANA_MAINNET */]: [WETH[5426 /* SOLANA_MAINNET */]],
  [2345 /* GOAT_MAINNET */]: [WETH[2345 /* GOAT_MAINNET */]],
  [146 /* SONIC_MAINNET */]: [WETH[146 /* SONIC_MAINNET */]],
  [2741 /* ABSTRACT_MAINNET */]: [WETH[2741 /* ABSTRACT_MAINNET */]],
  [100 /* GNOSIS_MAINNET */]: [WETH[100 /* GNOSIS_MAINNET */]],
  [80094 /* BERACHAIN_MAINNET */]: [WETH[80094 /* BERACHAIN_MAINNET */]],
  [130 /* UNICHAIN_MAINNET */]: [WETH[130 /* UNICHAIN_MAINNET */]],
  [1868 /* SONEIUM_MAINNET */]: [WETH[1868 /* SONEIUM_MAINNET */]],
  [204 /* OPBNB_MAINNET */]: [WETH[204 /* OPBNB_MAINNET */]],
  [999 /* HYPERLIQUID_MAINNET */]: [WETH[999 /* HYPERLIQUID_MAINNET */]],
  [747474 /* KATANA_MAINNET */]: [WETH[747474 /* KATANA_MAINNET */]],
  [33139 /* APECHAIN_MAINNET */]: [WETH[33139 /* APECHAIN_MAINNET */]],
  [9745 /* PLASMA_MAINNET */]: [WETH[9745 /* PLASMA_MAINNET */]]
};
var DEX_TOKENS_TO_CHECK_TRADES_AGAINST = {
  [1 /* ETH_MAINNET */]: [
    new Token2({
      chainId: 1 /* ETH_MAINNET */,
      address: "0x6B175474E89094C44Da98b954EedeAC495271d0F",
      decimals: 18,
      symbol: "DAI",
      name: "Dai Stablecoin"
    }),
    new Token2({
      chainId: 1 /* ETH_MAINNET */,
      address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      decimals: 6,
      symbol: "USDC",
      name: "USD//C"
    }),
    new Token2({
      chainId: 1 /* ETH_MAINNET */,
      address: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      decimals: 6,
      symbol: "USDT",
      name: "Tether USD"
    })
    // new Token({
    //     chainId: ChainId.ETH_MAINNET,
    //     address: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
    //     decimals: 8,
    //     symbol: 'WBTC',
    //     name: 'Wrapped BTC',
    // }),
  ],
  [56 /* BSC_MAINNET */]: [
    // new Token({
    //     chainId: ChainId.BSC_MAINNET,
    //     address: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',
    //     decimals: 18,
    //     symbol: 'CAKE',
    //     name: 'PancakeSwap Token',
    // }),
    new Token2({
      chainId: 56 /* BSC_MAINNET */,
      address: "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
      decimals: 18,
      symbol: "BUSD",
      name: "Binance USD"
    }),
    new Token2({
      chainId: 56 /* BSC_MAINNET */,
      address: "0x55d398326f99059fF775485246999027B3197955",
      decimals: 18,
      symbol: "USDT",
      name: "Tether USD"
    }),
    // new Token({
    //     chainId: ChainId.BSC_MAINNET,
    //     address: '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',
    //     decimals: 18,
    //     symbol: 'BTCB',
    //     name: 'Binance BTC',
    // }),
    // new Token({
    //     chainId: ChainId.BSC_MAINNET,
    //     address: '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',
    //     decimals: 18,
    //     symbol: 'UST',
    //     name: 'Wrapped UST Token',
    // }),
    // new Token({
    //     chainId: ChainId.BSC_MAINNET,
    //     address: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',
    //     decimals: 18,
    //     symbol: 'ETH',
    //     name: 'Binance-Peg Ethereum Token',
    // }),
    new Token2({
      chainId: 56 /* BSC_MAINNET */,
      address: "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
      decimals: 18,
      symbol: "USDC",
      name: "Binance-Peg USD Coin"
    })
  ],
  [43114 /* AVAX_MAINNET */]: [
    // new Token({
    //     chainId: ChainId.AVAX_MAINNET,
    //     address: '0x60781C2586D68229fde47564546784ab3fACA982',
    //     decimals: 18,
    //     symbol: 'PNG',
    //     name: 'Pangolin',
    // }),
    new Token2({
      chainId: 43114 /* AVAX_MAINNET */,
      address: "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
      decimals: 6,
      symbol: "USDT.e",
      name: "Tether USD"
    }),
    new Token2({
      chainId: 43114 /* AVAX_MAINNET */,
      address: "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
      decimals: 18,
      symbol: "DAI.e",
      name: "Dai Stablecoin"
    }),
    new Token2({
      chainId: 43114 /* AVAX_MAINNET */,
      address: "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
      decimals: 6,
      symbol: "USDC.e",
      name: "USD Coin"
    }),
    // new Token({
    //     chainId: ChainId.AVAX_MAINNET,
    //     address: '0x260Bbf5698121EB85e7a74f2E45E16Ce762EbE11',
    //     decimals: 6,
    //     symbol: 'UST',
    //     name: 'Axelar Wrapped UST',
    // }),
    new Token2({
      chainId: 43114 /* AVAX_MAINNET */,
      address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin"
    })
  ],
  [137 /* MATIC_MAINNET */]: [
    new Token2({
      chainId: 137 /* MATIC_MAINNET */,
      address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
      decimals: 6,
      symbol: "USDC",
      name: "USDC"
    }),
    new Token2({
      chainId: 137 /* MATIC_MAINNET */,
      address: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
      decimals: 6,
      symbol: "USDT",
      name: "Tether USD"
    }),
    // new Token({
    //     chainId: ChainId.MATIC_MAINNET,
    //     address: '0x831753DD7087CaC61aB5644b308642cc1c33Dc13',
    //     decimals: 18,
    //     symbol: 'QUICK',
    //     name: 'QuickSwap',
    // }),
    // new Token({
    //     chainId: ChainId.MATIC_MAINNET,
    //     address: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',
    //     decimals: 18,
    //     symbol: 'ETH',
    //     name: 'Ether',
    // }),
    new Token2({
      chainId: 137 /* MATIC_MAINNET */,
      address: "0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6",
      decimals: 18,
      symbol: "wBTC",
      name: "Wrapped Bitcoin"
    }),
    new Token2({
      chainId: 137 /* MATIC_MAINNET */,
      address: "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
      decimals: 18,
      symbol: "DAI",
      name: "Dai Stablecoin"
    })
  ],
  [43288 /* BOBA_AVALANCHE */]: [],
  [719095483 /* SYMBIOSIS_TESTNET */]: [],
  [13863860 /* SYMBIOSIS_MAINNET */]: [],
  [288 /* BOBA_MAINNET */]: [
    new Token2({
      chainId: 288 /* BOBA_MAINNET */,
      symbol: "DAI",
      name: "Dai Stablecoin",
      address: "0xf74195Bb8a5cf652411867c5C2C5b8C2a402be35",
      decimals: 18
    }),
    new Token2({
      chainId: 288 /* BOBA_MAINNET */,
      symbol: "WBTC",
      name: "Wrapped BTC",
      address: "0xdc0486f8bf31DF57a952bcd3c1d3e166e3d9eC8b",
      decimals: 8
    }),
    new Token2({
      chainId: 288 /* BOBA_MAINNET */,
      name: "USD Coin",
      address: "0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc",
      symbol: "USDC",
      decimals: 6
    }),
    new Token2({
      chainId: 288 /* BOBA_MAINNET */,
      symbol: "USDT",
      name: "Tether USD",
      address: "0x5DE1677344D3Cb0D7D465c10b72A8f60699C062d",
      decimals: 6
    }),
    new Token2({
      chainId: 288 /* BOBA_MAINNET */,
      symbol: "BOBA",
      name: "Boba Token",
      address: "0xa18bF3994C0Cc6E3b63ac420308E5383f53120D7",
      decimals: 18
    }),
    new Token2({
      chainId: 288 /* BOBA_MAINNET */,
      symbol: "OLO",
      name: "OolongSwap Token",
      address: "0x5008F837883EA9a07271a1b5eB0658404F5a9610",
      decimals: 18
    })
  ],
  [2001 /* MILKOMEDA_MAINNET */]: [
    new Token2({
      chainId: 2001 /* MILKOMEDA_MAINNET */,
      symbol: "sUSDC",
      name: "USDC from Ethereum",
      address: "0x42110A5133F91B49E32B671Db86E2C44Edc13832",
      decimals: 6
    }),
    new Token2({
      chainId: 2001 /* MILKOMEDA_MAINNET */,
      symbol: "SIS",
      name: "SIS from Ethereum",
      address: "0xedd4D7DAa6bf8746997CEbbF974a60B838757601",
      decimals: 18
    })
  ],
  [1313161554 /* AURORA_MAINNET */]: [
    new Token2({
      chainId: 1313161554 /* AURORA_MAINNET */,
      symbol: "USDC",
      name: "USD Coin",
      address: "0xB12BFcA5A55806AaF64E99521918A4bf0fC40802",
      decimals: 6
    }),
    new Token2({
      chainId: 1313161554 /* AURORA_MAINNET */,
      symbol: "USDT",
      name: "Tether USD",
      address: "0x4988a896b1227218e4A686fdE5EabdcAbd91571f",
      decimals: 6
    }),
    new Token2({
      chainId: 1313161554 /* AURORA_MAINNET */,
      symbol: "wNEAR",
      name: "Wrapped NEAR",
      address: "0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d",
      decimals: 24
    }),
    new Token2({
      chainId: 1313161554 /* AURORA_MAINNET */,
      symbol: "AURORA",
      name: "AURORA",
      address: "0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79",
      decimals: 18
    })
  ],
  [2222 /* KAVA_MAINNET */]: [
    new Token2({
      chainId: 2222 /* KAVA_MAINNET */,
      address: "0xfA9343C3897324496A05fC75abeD6bAC29f8A40f",
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin"
    })
  ],
  [534351 /* SCROLL_SEPOLIA */]: [],
  [324 /* ZKSYNC_MAINNET */]: [
    new Token2({
      chainId: 324 /* ZKSYNC_MAINNET */,
      address: "0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4",
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin"
    })
  ],
  [42161 /* ARBITRUM_MAINNET */]: [
    new Token2({
      chainId: 42161 /* ARBITRUM_MAINNET */,
      address: "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin"
    })
  ],
  [42170 /* ARBITRUM_NOVA */]: [
    new Token2({
      chainId: 42170 /* ARBITRUM_NOVA */,
      address: "0x750ba8b76187092B0D1E87E28daaf484d1b5273b",
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin"
    })
  ],
  [10 /* OPTIMISM_MAINNET */]: [
    new Token2({
      chainId: 10 /* OPTIMISM_MAINNET */,
      address: "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin"
    })
  ],
  [7001 /* ZETACHAIN_ATHENS_2 */]: [],
  [1101 /* POLYGON_ZK */]: [],
  [2494104990 /* TRON_TESTNET */]: [
    new Token2({
      chainId: 2494104990 /* TRON_TESTNET */,
      address: "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs",
      decimals: 6,
      symbol: "USDT",
      name: "Tether USD"
    })
  ],
  [728126428 /* TRON_MAINNET */]: [
    new Token2({
      chainId: 728126428 /* TRON_MAINNET */,
      address: "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t",
      decimals: 6,
      symbol: "USDT",
      name: "Tether USD"
    })
  ],
  [59140 /* LINEA_TESTNET */]: [],
  [59144 /* LINEA_MAINNET */]: [],
  [5e3 /* MANTLE_MAINNET */]: [],
  [5001 /* MANTLE_TESTNET */]: [],
  [8453 /* BASE_MAINNET */]: [],
  [534352 /* SCROLL_MAINNET */]: [],
  [169 /* MANTA_MAINNET */]: [],
  [1088 /* METIS_MAINNET */]: [],
  [195 /* OKX_X1_TESTNET */]: [],
  [5165 /* BAHAMUT_MAINNET */]: [],
  [34443 /* MODE_MAINNET */]: [],
  [30 /* RSK_MAINNET */]: [],
  [81457 /* BLAST_MAINNET */]: [],
  [4200 /* MERLIN_MAINNET */]: [],
  [810180 /* ZKLINK_MAINNET */]: [],
  [1116 /* CORE_MAINNET */]: [],
  [167e3 /* TAIKO_MAINNET */]: [],
  [1329 /* SEI_EVM_MAINNET */]: [],
  [7e3 /* ZETACHAIN_MAINNET */]: [],
  [25 /* CRONOS_MAINNET */]: [],
  [252 /* FRAXTAL_MAINNET */]: [],
  [1625 /* GRAVITY_MAINNET */]: [],
  [223 /* BSQUARED_MAINNET */]: [],
  [388 /* CRONOS_ZK_MAINNET */]: [
    new Token2({
      chainId: 388 /* CRONOS_ZK_MAINNET */,
      address: "0x5b91e29Ae5A71d9052620Acb813d5aC25eC7a4A2",
      decimals: 18,
      symbol: "vUSD",
      name: "Veno USD"
    })
  ],
  [2818 /* MORPH_MAINNET */]: [
    new Token2({
      chainId: 2818 /* MORPH_MAINNET */,
      address: "0xc7D67A9cBB121b3b0b9c053DD9f469523243379A",
      decimals: 18,
      symbol: "USDT",
      name: "Tether USD"
    })
  ],
  [5426 /* SOLANA_MAINNET */]: [],
  [2345 /* GOAT_MAINNET */]: [],
  [146 /* SONIC_MAINNET */]: [],
  [2741 /* ABSTRACT_MAINNET */]: [],
  [100 /* GNOSIS_MAINNET */]: [],
  [80094 /* BERACHAIN_MAINNET */]: [],
  [130 /* UNICHAIN_MAINNET */]: [],
  [1868 /* SONEIUM_MAINNET */]: [],
  [204 /* OPBNB_MAINNET */]: [],
  [999 /* HYPERLIQUID_MAINNET */]: [],
  [747474 /* KATANA_MAINNET */]: [],
  [33139 /* APECHAIN_MAINNET */]: [],
  [9745 /* PLASMA_MAINNET */]: []
};
var BASES_TO_CHECK_TRADES_AGAINST = {
  ...WETH_ONLY,
  [1 /* ETH_MAINNET */]: [WETH[1 /* ETH_MAINNET */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[1 /* ETH_MAINNET */]],
  [56 /* BSC_MAINNET */]: [WETH[56 /* BSC_MAINNET */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[56 /* BSC_MAINNET */]],
  [43114 /* AVAX_MAINNET */]: [WETH[43114 /* AVAX_MAINNET */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[43114 /* AVAX_MAINNET */]],
  [137 /* MATIC_MAINNET */]: [
    WETH[137 /* MATIC_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[137 /* MATIC_MAINNET */]
  ],
  [288 /* BOBA_MAINNET */]: [WETH[288 /* BOBA_MAINNET */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[288 /* BOBA_MAINNET */]],
  [43288 /* BOBA_AVALANCHE */]: [
    WETH[43288 /* BOBA_AVALANCHE */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[43288 /* BOBA_AVALANCHE */]
  ],
  [719095483 /* SYMBIOSIS_TESTNET */]: [
    WETH[719095483 /* SYMBIOSIS_TESTNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[719095483 /* SYMBIOSIS_TESTNET */]
  ],
  [13863860 /* SYMBIOSIS_MAINNET */]: [
    WETH[13863860 /* SYMBIOSIS_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[13863860 /* SYMBIOSIS_MAINNET */]
  ],
  [1313161554 /* AURORA_MAINNET */]: [
    WETH[1313161554 /* AURORA_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[1313161554 /* AURORA_MAINNET */]
  ],
  [2222 /* KAVA_MAINNET */]: [WETH[2222 /* KAVA_MAINNET */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[2222 /* KAVA_MAINNET */]],
  [324 /* ZKSYNC_MAINNET */]: [
    WETH[324 /* ZKSYNC_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[324 /* ZKSYNC_MAINNET */]
  ],
  [42161 /* ARBITRUM_MAINNET */]: [
    WETH[42161 /* ARBITRUM_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[42161 /* ARBITRUM_MAINNET */]
  ],
  [42170 /* ARBITRUM_NOVA */]: [
    WETH[42170 /* ARBITRUM_NOVA */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[42170 /* ARBITRUM_NOVA */]
  ],
  [10 /* OPTIMISM_MAINNET */]: [
    WETH[10 /* OPTIMISM_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[10 /* OPTIMISM_MAINNET */]
  ],
  [1101 /* POLYGON_ZK */]: [WETH[1101 /* POLYGON_ZK */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[1101 /* POLYGON_ZK */]],
  [2494104990 /* TRON_TESTNET */]: [WETH[2494104990 /* TRON_TESTNET */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[2494104990 /* TRON_TESTNET */]],
  [34443 /* MODE_MAINNET */]: [WETH[34443 /* MODE_MAINNET */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[34443 /* MODE_MAINNET */]],
  [30 /* RSK_MAINNET */]: [WETH[30 /* RSK_MAINNET */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[30 /* RSK_MAINNET */]],
  [81457 /* BLAST_MAINNET */]: [
    WETH[81457 /* BLAST_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[81457 /* BLAST_MAINNET */]
  ],
  [4200 /* MERLIN_MAINNET */]: [
    WETH[4200 /* MERLIN_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[4200 /* MERLIN_MAINNET */]
  ],
  [810180 /* ZKLINK_MAINNET */]: [
    WETH[810180 /* ZKLINK_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[810180 /* ZKLINK_MAINNET */]
  ],
  [167e3 /* TAIKO_MAINNET */]: [
    WETH[167e3 /* TAIKO_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[167e3 /* TAIKO_MAINNET */]
  ],
  [1329 /* SEI_EVM_MAINNET */]: [
    WETH[1329 /* SEI_EVM_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[1329 /* SEI_EVM_MAINNET */]
  ],
  [7e3 /* ZETACHAIN_MAINNET */]: [
    WETH[7e3 /* ZETACHAIN_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[7e3 /* ZETACHAIN_MAINNET */]
  ],
  [25 /* CRONOS_MAINNET */]: [
    WETH[25 /* CRONOS_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[25 /* CRONOS_MAINNET */]
  ],
  [252 /* FRAXTAL_MAINNET */]: [
    WETH[252 /* FRAXTAL_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[252 /* FRAXTAL_MAINNET */]
  ],
  [1625 /* GRAVITY_MAINNET */]: [
    WETH[1625 /* GRAVITY_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[1625 /* GRAVITY_MAINNET */]
  ],
  [223 /* BSQUARED_MAINNET */]: [
    WETH[223 /* BSQUARED_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[223 /* BSQUARED_MAINNET */]
  ],
  [388 /* CRONOS_ZK_MAINNET */]: [
    WETH[388 /* CRONOS_ZK_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[388 /* CRONOS_ZK_MAINNET */]
  ],
  [2818 /* MORPH_MAINNET */]: [
    WETH[2818 /* MORPH_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[2818 /* MORPH_MAINNET */]
  ],
  [5426 /* SOLANA_MAINNET */]: [
    WETH[5426 /* SOLANA_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[5426 /* SOLANA_MAINNET */]
  ],
  [2345 /* GOAT_MAINNET */]: [WETH[2345 /* GOAT_MAINNET */], ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[2345 /* GOAT_MAINNET */]],
  [146 /* SONIC_MAINNET */]: [
    WETH[146 /* SONIC_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[146 /* SONIC_MAINNET */]
  ],
  [2741 /* ABSTRACT_MAINNET */]: [
    WETH[2741 /* ABSTRACT_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[2741 /* ABSTRACT_MAINNET */]
  ],
  [100 /* GNOSIS_MAINNET */]: [
    WETH[100 /* GNOSIS_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[100 /* GNOSIS_MAINNET */]
  ],
  [80094 /* BERACHAIN_MAINNET */]: [
    WETH[80094 /* BERACHAIN_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[80094 /* BERACHAIN_MAINNET */]
  ],
  [130 /* UNICHAIN_MAINNET */]: [
    WETH[130 /* UNICHAIN_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[130 /* UNICHAIN_MAINNET */]
  ],
  [1868 /* SONEIUM_MAINNET */]: [
    WETH[1868 /* SONEIUM_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[1868 /* SONEIUM_MAINNET */]
  ],
  [204 /* OPBNB_MAINNET */]: [
    WETH[204 /* OPBNB_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[204 /* OPBNB_MAINNET */]
  ],
  [999 /* HYPERLIQUID_MAINNET */]: [
    WETH[999 /* HYPERLIQUID_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[999 /* HYPERLIQUID_MAINNET */]
  ],
  [747474 /* KATANA_MAINNET */]: [
    WETH[747474 /* KATANA_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[747474 /* KATANA_MAINNET */]
  ],
  [33139 /* APECHAIN_MAINNET */]: [
    WETH[33139 /* APECHAIN_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[33139 /* APECHAIN_MAINNET */]
  ],
  [9745 /* PLASMA_MAINNET */]: [
    WETH[9745 /* PLASMA_MAINNET */],
    ...DEX_TOKENS_TO_CHECK_TRADES_AGAINST[9745 /* PLASMA_MAINNET */]
  ]
};
var CUSTOM_BASES = {
  [56 /* BSC_MAINNET */]: {}
};
var ONE_BIPS = new Percent(import_jsbi8.default.BigInt(1), import_jsbi8.default.BigInt(1e4));
var BIPS_BASE = import_jsbi8.default.BigInt(1e4);
var MULTICALL_ADDRESSES = {
  [1 /* ETH_MAINNET */]: "0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696",
  [4 /* ETH_RINKEBY */]: "0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696",
  [42 /* ETH_KOVAN */]: "0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696",
  [56 /* BSC_MAINNET */]: "0xfF6FD90A470Aaa0c1B8A54681746b07AcdFedc9B",
  [97 /* BSC_TESTNET */]: "0xbC4F726A6dB460DcFE49E6a56886470B94Dfc302",
  [137 /* MATIC_MAINNET */]: "0x275617327c958bD06b5D6b871E7f491D76113dd8",
  [80001 /* MATIC_MUMBAI */]: "0xe9939e7Ea7D7fb619Ac57f648Da7B1D425832631",
  [43114 /* AVAX_MAINNET */]: "0x29b6603d17b9d8f021ecb8845b6fd06e1adf89de",
  [43113 /* AVAX_TESTNET */]: "0x9A9b5Ef5CeAbaC69d3B4A71c4da782554A35B638",
  [128 /* HECO_MAINNET */]: import_constants16.AddressZero,
  [256 /* HECO_TESTNET */]: "0x9a9b5ef5ceabac69d3b4a71c4da782554a35b638",
  [66 /* OKEX_MAINNET */]: import_constants16.AddressZero,
  [65 /* OKEX_TESTNET */]: "0x9A9b5Ef5CeAbaC69d3B4A71c4da782554A35B638",
  [288 /* BOBA_MAINNET */]: "0xaeD5b25BE1c3163c907a471082640450F928DDFE",
  [43288 /* BOBA_AVALANCHE */]: "0x92C5b5B66988E6B8931a8CD3faa418b42003DF2F",
  [719095483 /* SYMBIOSIS_TESTNET */]: "0x7F373f8033D64Abd491ceBeAc2dE070050F97229",
  [13863860 /* SYMBIOSIS_MAINNET */]: "0x6148FD6C649866596C3d8a971fC313E5eCE84882",
  [28 /* BOBA_RINKEBY */]: "0x773ccf8ba321c9f96a100b4b0fa1ecf7046645f5",
  [2001 /* MILKOMEDA_MAINNET */]: "0xa46157Cda2D019Ba4cDcd8cE12A04760c15C355b",
  [200101 /* MILKOMEDA_DEVNET */]: "0x41b5984f45AfB2560a0ED72bB69A98E8b32B3cCA",
  [1313161554 /* AURORA_MAINNET */]: "0xbf69a56d35b8d6f5a8e0e96b245a72f735751e54",
  [1313161555 /* AURORA_TESTNET */]: "0x4a5143B13C84DB00E6d8c19b9EA00f3b91416d20",
  [40 /* TELOS_MAINNET */]: "0x53dC7535028e2fcaCa0d847AD108b9240C0801b1",
  [41 /* TELOS_TESTNET */]: "0x9a01bf917477dd9f5d715d188618fc8b7350cd22",
  [8081 /* SHARDEUM_TESTNET_2 */]: "0x41b5984f45AfB2560a0ED72bB69A98E8b32B3cCA",
  [2222 /* KAVA_MAINNET */]: "0x30A62aA52Fa099C4B227869EB6aeaDEda054d121",
  [534351 /* SCROLL_SEPOLIA */]: "0xF3Cfa393be621097669BcD2bD4923CEC347E1210",
  [324 /* ZKSYNC_MAINNET */]: "0x52192C3De01535a9Ad2743A5Fe4f774868103C20",
  [42161 /* ARBITRUM_MAINNET */]: "0x80c7dd17b01855a6d2347444a0fcc36136a314de",
  [42170 /* ARBITRUM_NOVA */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [10 /* OPTIMISM_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [7001 /* ZETACHAIN_ATHENS_2 */]: "0x9a01bf917477dD9F5D715D188618fc8B7350cd22",
  [1101 /* POLYGON_ZK */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [2494104990 /* TRON_TESTNET */]: "0x00e08cb2cd7480ddf6c54430207dff81ce359887",
  [728126428 /* TRON_MAINNET */]: "0x32A4F47A74A6810BD0BF861CABAB99656A75DE9E",
  [59140 /* LINEA_TESTNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [59144 /* LINEA_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [5e3 /* MANTLE_MAINNET */]: "0xb55cc6B5B402437b66c13c0CEd0EF367aa7c26da",
  [5001 /* MANTLE_TESTNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [8453 /* BASE_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [534352 /* SCROLL_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [169 /* MANTA_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [1088 /* METIS_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [195 /* OKX_X1_TESTNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [5165 /* BAHAMUT_MAINNET */]: "0xa385B1436fD2A6a1c6865E22c522A1aA40CaDCC6",
  [34443 /* MODE_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [30 /* RSK_MAINNET */]: "0xca11bde05977b3631167028862be2a173976ca11",
  [81457 /* BLAST_MAINNET */]: "0xca11bde05977b3631167028862be2a173976ca11",
  [4200 /* MERLIN_MAINNET */]: "0x45CFd6FB7999328F189aaD2739Fba4Be6C45E5bf",
  [810180 /* ZKLINK_MAINNET */]: "0x7E06D0CD8D3fDDBB875345dF389d986f810A49F6",
  [11155111 /* SEPOLIA_TESTNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [1116 /* CORE_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [167e3 /* TAIKO_MAINNET */]: "0x076f5925112b13a4D4c70fc83d9019f1854e4415",
  [1329 /* SEI_EVM_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [7e3 /* ZETACHAIN_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [25 /* CRONOS_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [252 /* FRAXTAL_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [1625 /* GRAVITY_MAINNET */]: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
  [223 /* BSQUARED_MAINNET */]: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
  [388 /* CRONOS_ZK_MAINNET */]: "0x4c398CB4b7D4d31a54D254d8Aed09B9e8353E80E",
  [2818 /* MORPH_MAINNET */]: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
  [5426 /* SOLANA_MAINNET */]: import_constants16.AddressZero,
  [2345 /* GOAT_MAINNET */]: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
  [146 /* SONIC_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [2741 /* ABSTRACT_MAINNET */]: "0xBf63C7944B1635c79a0f0eE7e07b1702837AD1F9",
  [100 /* GNOSIS_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [80094 /* BERACHAIN_MAINNET */]: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
  [130 /* UNICHAIN_MAINNET */]: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
  [1868 /* SONEIUM_MAINNET */]: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
  [204 /* OPBNB_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [999 /* HYPERLIQUID_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [747474 /* KATANA_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab",
  [33139 /* APECHAIN_MAINNET */]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [9745 /* PLASMA_MAINNET */]: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160"
};
var MULTICALL_ROUTER_V2 = {
  [1 /* ETH_MAINNET */]: "0x44487a445a7595446309464A82244B4bD4e325D5",
  [42161 /* ARBITRUM_MAINNET */]: "0x5ad095DE83693ba063941f2f2C5A0dF02383B651",
  [324 /* ZKSYNC_MAINNET */]: "0x7D2172C9bf79263FFf6E456c423a5e3E69F9AA4b",
  [56 /* BSC_MAINNET */]: "0xeB278638fFa33CC776230dE4FF88eD5142ed8c1A",
  [30 /* RSK_MAINNET */]: "0xca506793a420e901bbca8066be5661e3c52c84c2"
};

// src/crosschain/types.ts
var Field = /* @__PURE__ */ ((Field2) => {
  Field2["INPUT"] = "INPUT";
  Field2["OUTPUT"] = "OUTPUT";
  return Field2;
})(Field || {});

// src/crosschain/chainUtils/evm.ts
var import_lodash = __toESM(require("lodash.flatmap"));

// src/crosschain/chainUtils/solana.ts
var import_web3 = require("@solana/web3.js");
function isSolanaChainId(chainId) {
  if (!chainId)
    return false;
  return [5426 /* SOLANA_MAINNET */].includes(chainId);
}
var SOL_USDC = new Token2({
  name: "USDC",
  symbol: "USDC",
  address: "0x0000000000000000000000000000000000000003",
  chainId: 5426 /* SOLANA_MAINNET */,
  decimals: 6,
  icons: {
    large: `https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png`,
    small: `https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png`
  },
  attributes: {
    solana: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
  }
});
function getSolanaConnection() {
  return new import_web3.Connection("https://solana-rpc.publicnode.com");
}
var SOL_FEE_COLLECTOR = "7niUN8QFTN8V3y47fqLpAPs5Hq9T79BrSq8CAVjq6YJX";
var SOL_FEE_AMOUNT = 2e6;
async function addSolanaFee(from, instructions) {
  if (!instructions) {
    throw new Error("Theres is no instructions in solana trade");
  }
  const connection = getSolanaConnection();
  const transferSolInstruction = import_web3.SystemProgram.transfer({
    fromPubkey: new import_web3.PublicKey(from),
    toPubkey: new import_web3.PublicKey(SOL_FEE_COLLECTOR),
    lamports: SOL_FEE_AMOUNT
  });
  const txBuffer = Buffer.from(instructions, "base64");
  const transaction = import_web3.VersionedTransaction.deserialize(txBuffer);
  const lookupTableAccounts = await Promise.all(
    transaction.message.addressTableLookups.map(async (lookup) => {
      const response = await connection.getAddressLookupTable(lookup.accountKey);
      return response.value;
    })
  );
  const message = import_web3.TransactionMessage.decompile(transaction.message, {
    addressLookupTableAccounts: lookupTableAccounts
  });
  message.instructions.unshift(transferSolInstruction);
  transaction.message = message.compileToV0Message(lookupTableAccounts);
  return {
    instructions: Buffer.from(transaction.serialize()).toString("base64"),
    fee: new TokenAmount(GAS_TOKEN[5426 /* SOLANA_MAINNET */], BigInt(SOL_FEE_AMOUNT))
  };
}

// src/crosschain/chainUtils/evm.ts
function isEvmChainId(chainId) {
  if (!chainId)
    return false;
  return !isBtcChainId(chainId) && !isTronChainId(chainId) && !isTonChainId(chainId) && !isSolanaChainId(chainId);
}
function getInternalId({ contractAddress, requestCount, chainId }) {
  return import_ethers45.utils.solidityKeccak256(["address", "uint256", "uint256"], [contractAddress, requestCount, chainId]);
}
function getExternalId({
  internalId,
  contractAddress,
  revertableAddress,
  chainId
}) {
  return import_ethers45.utils.solidityKeccak256(
    ["bytes32", "address", "address", "uint256"],
    [internalId, contractAddress, revertableAddress, chainId]
  );
}
function calculateGasMargin(value) {
  return value.mul(import_ethers45.BigNumber.from(1e4).add(import_ethers45.BigNumber.from(5e3))).div(import_ethers45.BigNumber.from(1e4));
}
function computeTradePriceBreakdown(trade, dexFee) {
  const BASE_FEE = new Percent(import_jsbi9.default.BigInt(dexFee || 30), import_jsbi9.default.BigInt(1e4));
  const ONE_HUNDRED_PERCENT = new Percent(import_jsbi9.default.BigInt(1e4), import_jsbi9.default.BigInt(1e4));
  const INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE);
  const realizedLPFee = !trade ? void 0 : ONE_HUNDRED_PERCENT.subtract(
    trade.route.pairs.reduce(
      (currentFee) => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),
      ONE_HUNDRED_PERCENT
    )
  );
  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : void 0;
  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction ? new Percent(
    import_jsbi9.default.multiply(priceImpactWithoutFeeFraction?.numerator, import_jsbi9.default.BigInt("-1")),
    priceImpactWithoutFeeFraction?.denominator
  ) : void 0;
  const realizedLPFeeAmount = realizedLPFee && trade && new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient);
  return {
    priceImpactWithoutFee: priceImpactWithoutFeePercent,
    realizedLPFee: realizedLPFeeAmount
  };
}
function basisPointsToPercent(num) {
  return new Percent(import_jsbi9.default.BigInt(Math.floor(num)), import_jsbi9.default.BigInt(1e4));
}
function getMinAmount(slippage, amount) {
  const slippageTolerance = basisPointsToPercent(slippage);
  return new Fraction(ONE).subtract(slippageTolerance).multiply(amount).quotient;
}
function computeSlippageAdjustedAmounts(trade, allowedSlippage) {
  const pct = basisPointsToPercent(allowedSlippage);
  return {
    ["INPUT" /* INPUT */]: trade?.maximumAmountIn(pct),
    ["OUTPUT" /* OUTPUT */]: trade?.minimumAmountOut(pct)
  };
}
function calculatePriceImpact(tokenAmountIn, tokenAmountOut) {
  const typedValueParsed = (0, import_units2.parseUnits)(
    tokenAmountOut.toExact(tokenAmountIn.token.decimals),
    tokenAmountIn.token.decimals
  ).toString();
  if (typedValueParsed === "0") {
    throw new SdkError("Cannot parse amountOut with decimals");
  }
  const amountIn = tokenAmountIn.raw;
  const amountOut = import_jsbi9.default.BigInt(typedValueParsed);
  const diff = import_jsbi9.default.subtract(amountOut, amountIn);
  const value = import_jsbi9.default.divide(import_jsbi9.default.multiply(diff, BIPS_BASE), amountIn);
  return new Percent(value, BIPS_BASE);
}
var GetLogTimeoutExceededError = class extends Error {
  constructor(filter) {
    super(`Timed out waiting for logs matching filter: ${JSON.stringify(filter)}`);
    this.filter = filter;
  }
};
var DEFAULT_EXCEED_DELAY = 1e3 * 60 * 20;
function _promiseRaceResolved(promises) {
  let rejectCounter = 0;
  const totalPromises = promises.length;
  return new Promise((resolve, reject) => {
    const onReject = () => {
      rejectCounter++;
      if (rejectCounter === totalPromises) {
        reject(new SdkError("All promises were rejected."));
      }
    };
    promises.forEach((promise) => {
      Promise.resolve(promise).then(resolve).catch(onReject);
    });
  });
}
async function getLogWithTimeout({
  symbiosis,
  chainId,
  filter,
  exceedDelay: exceedTimeout = DEFAULT_EXCEED_DELAY
}) {
  const spareRpcs = symbiosis.config.chains.find((chain) => chain.id === chainId)?.spareRpcs ?? [];
  const spareProviders = spareRpcs.map((rpc) => symbiosis.getProvider(chainId, rpc));
  const provider = symbiosis.getProvider(chainId);
  let activeFilter = filter;
  if (!activeFilter.fromBlock) {
    const fromBlock = await symbiosis.getFromBlockWithOffset(chainId);
    activeFilter = { ...filter, fromBlock };
  }
  return new Promise((resolve, reject) => {
    const period = 1e3 * 10;
    let pastTime = 0;
    let logs = [];
    const getLogs = async () => {
      pastTime += period;
      if (pastTime > exceedTimeout) {
        clearInterval(interval);
        reject(new GetLogTimeoutExceededError(activeFilter));
        return;
      }
      try {
        logs = await provider.getLogs(activeFilter);
      } catch (error) {
        logs = await _promiseRaceResolved(
          spareProviders.map((spareProvider) => spareProvider.getLogs(activeFilter))
        );
      } finally {
        if (logs.length > 0) {
          resolve(logs[0]);
          clearInterval(interval);
        }
      }
    };
    const interval = setInterval(getLogs, period);
  });
}
function getAllPairCombinations(tokenIn, tokenOut) {
  const chainId = tokenIn.chainId;
  const bases = BASES_TO_CHECK_TRADES_AGAINST[chainId] || [];
  const basePairs = (0, import_lodash.default)(
    bases,
    (base) => bases.map((otherBase) => [base, otherBase])
  ).filter(([t0, t1]) => t0.address !== t1.address);
  const [tokenA, tokenB] = [wrappedToken(tokenIn), wrappedToken(tokenOut)];
  if (!tokenA || !tokenB) {
    return [];
  }
  return [
    // the direct pair
    [tokenA, tokenB],
    // token A against all bases
    ...bases.map((base) => [tokenA, base]),
    // token B against all bases
    ...bases.map((base) => [tokenB, base]),
    // each base against all bases
    ...basePairs
  ].filter((tokens) => Boolean(tokens[0] && tokens[1])).filter(([t0, t1]) => t0.address !== t1.address).filter(([t0, t1]) => {
    if (!chainId)
      return true;
    const customBases = CUSTOM_BASES[chainId];
    if (!customBases)
      return true;
    const customBasesA = customBases[t0.address];
    const customBasesB = customBases[t1.address];
    if (!customBasesA && !customBasesB)
      return true;
    if (customBasesA && !customBasesA.find((base) => t1.equals(base)))
      return false;
    if (customBasesB && !customBasesB.find((base) => t0.equals(base)))
      return false;
    return true;
  });
}
function splitSlippage(totalSlippage, hasTradeA, hasTradeC) {
  const minSlippage = 20;
  if (totalSlippage < minSlippage) {
    throw new SdkError(`Slippage cannot be less than ${(minSlippage / 100).toString()}%`);
  }
  let extraSwapsCount = 0;
  if (hasTradeA) {
    extraSwapsCount += 1;
  }
  if (hasTradeC) {
    extraSwapsCount += 1;
  }
  const swapsCount = extraSwapsCount + 1;
  const avg = totalSlippage / swapsCount;
  let addition = 0;
  let symbiosisPoolSlippage = avg;
  const symbiosisPoolMaxSlippage = 20;
  if (avg > symbiosisPoolMaxSlippage) {
    const rest = avg - symbiosisPoolMaxSlippage;
    symbiosisPoolSlippage = symbiosisPoolMaxSlippage;
    addition = extraSwapsCount > 0 ? rest / extraSwapsCount : 0;
  }
  return {
    A: hasTradeA ? Math.floor((avg + addition) * 100) / 100 : 0,
    B: Math.floor(symbiosisPoolSlippage * 100) / 100,
    C: hasTradeC ? Math.floor((avg + addition + symbiosisPoolSlippage) * 100) / 100 : 0
  };
}

// src/crosschain/trade/symbiosisTrade.ts
var import_ethers46 = require("ethers");
var OutNotInitializedError = class extends Error {
  constructor(msg) {
    super(`Out is not initialized: ${msg}`);
  }
};
var SymbiosisTrade = class _SymbiosisTrade {
  constructor({ tokenAmountIn, tokenAmountInMin, tokenOut, to, slippage }) {
    this.tokenAmountIn = tokenAmountIn;
    this.tokenAmountInMin = tokenAmountInMin;
    this.tokenOut = tokenOut;
    this.to = to;
    this.slippage = slippage;
  }
  get tradeType() {
    throw new TradeError("Implement me");
  }
  async init() {
    throw new TradeError("Implement me");
  }
  get amountOut() {
    this.assertOutInitialized("amountOut");
    return this.out.amountOut;
  }
  get amountOutMin() {
    this.assertOutInitialized("amountOutMin");
    return this.out.amountOutMin;
  }
  get routerAddress() {
    this.assertOutInitialized("routerAddress");
    return this.out.routerAddress;
  }
  get value() {
    this.assertOutInitialized("value");
    return this.out.value;
  }
  get route() {
    this.assertOutInitialized("route");
    return this.out.route;
  }
  get callData() {
    this.assertOutInitialized("callData");
    return this.out.callData;
  }
  get callDataOffset() {
    this.assertOutInitialized("callDataOffset");
    return this.out.callDataOffset;
  }
  get minReceivedOffset() {
    this.assertOutInitialized("minReceivedOffset");
    return this.out.minReceivedOffset;
  }
  get minReceivedOffset2() {
    this.assertOutInitialized("minReceivedOffset2");
    return this.out.minReceivedOffset2 || 0;
  }
  get priceImpact() {
    this.assertOutInitialized("priceImpact");
    return this.out.priceImpact;
  }
  get functionSelector() {
    this.assertOutInitialized("functionSelector");
    return this.out.functionSelector;
  }
  get instructions() {
    this.assertOutInitialized("instructions");
    return this.out.instructions;
  }
  get fees() {
    this.assertOutInitialized("fees");
    return this.out.fees;
  }
  applyAmountIn(newAmountIn, newAmountInMin) {
    this.assertOutInitialized("applyAmountIn");
    const amountInBn = import_ethers46.BigNumber.from(this.tokenAmountIn.raw.toString());
    const proportionallyBn = (value) => {
      const newAmountInBn = import_ethers46.BigNumber.from(newAmountIn.raw.toString());
      return value.mul(newAmountInBn).div(amountInBn);
    };
    const proportionally = (value) => {
      return new TokenAmount(value.token, proportionallyBn(import_ethers46.BigNumber.from(value.raw.toString())).toString());
    };
    const newAmountOut = proportionally(this.amountOut);
    const amountInMinBn = import_ethers46.BigNumber.from(this.tokenAmountInMin.raw.toString());
    const proportionallyMinBn = (value) => {
      const newAmountInMinBn = import_ethers46.BigNumber.from(newAmountInMin.raw.toString());
      return value.mul(newAmountInMinBn).div(amountInMinBn);
    };
    const proportionallyMin = (value) => {
      return new TokenAmount(value.token, proportionallyMinBn(import_ethers46.BigNumber.from(value.raw.toString())).toString());
    };
    const newAmountOutMin = proportionallyMin(this.amountOutMin);
    let callData = this.callData;
    if (this.minReceivedOffset > 0) {
      const minReceivedFromCallDataRaw = _SymbiosisTrade.getAmountFromCallData(callData, this.minReceivedOffset);
      callData = _SymbiosisTrade.patchCallData(
        callData,
        this.minReceivedOffset,
        proportionallyMinBn(minReceivedFromCallDataRaw)
      );
    }
    if (this.minReceivedOffset2 > 0) {
      const minReceived2FromCallDataRaw = _SymbiosisTrade.getAmountFromCallData(callData, this.minReceivedOffset2);
      callData = _SymbiosisTrade.patchCallData(
        callData,
        this.minReceivedOffset2,
        proportionallyMinBn(minReceived2FromCallDataRaw)
      );
    }
    if (this.callDataOffset > 0) {
      const amountInFromCallDataRaw = _SymbiosisTrade.getAmountFromCallData(callData, this.callDataOffset);
      callData = _SymbiosisTrade.patchCallData(
        callData,
        this.callDataOffset,
        proportionallyBn(amountInFromCallDataRaw)
      );
    }
    this.tokenAmountIn = newAmountIn;
    this.tokenAmountInMin = newAmountInMin;
    this.out = {
      ...this.out,
      amountOut: newAmountOut,
      amountOutMin: newAmountOutMin,
      callData
    };
  }
  assertOutInitialized(msg) {
    if (!this.out) {
      throw new OutNotInitializedError(msg);
    }
  }
  static getAmountFromCallData(data, bytesOffset) {
    let hexPrefix = 0;
    if (data.startsWith("0x")) {
      hexPrefix += 2;
    }
    const stringOffset = bytesOffset * 2 + hexPrefix;
    const amountWidth = 64;
    const amountString = "0x" + data.substring(stringOffset - amountWidth, stringOffset);
    return import_ethers46.BigNumber.from(amountString);
  }
  static patchCallData(data, bytesOffset, amount) {
    let hexPrefix = 0;
    if (data.startsWith("0x")) {
      hexPrefix += 2;
    }
    const stringOffset = bytesOffset * 2 + hexPrefix;
    if (data.length < stringOffset) {
      throw new TradeError("offset is to big");
    }
    const amountWidth = 64;
    const stringAmount = amount.toHexString().substring(2).padStart(amountWidth, "0").toLowerCase();
    if (stringAmount.length !== amountWidth) {
      throw new TradeError("amount is to wide");
    }
    return data.substring(0, stringOffset - amountWidth) + stringAmount + data.substring(stringOffset);
  }
};

// src/crosschain/multicall.ts
var NoMulticallAddressError = class extends Error {
  constructor(chainId) {
    super(
      `Failed to create Multicall instance. We do not know the multicall address on this network. ChainId: ${chainId}`
    );
  }
};
async function getMulticall(provider) {
  const { chainId } = await provider.getNetwork();
  const address2 = MULTICALL_ADDRESSES[chainId];
  if (!address2) {
    throw new NoMulticallAddressError(chainId);
  }
  return Multicall__factory.connect(address2, provider);
}

// src/crosschain/trade/oneInchTrade.ts
var import_bignumber = require("@ethersproject/bignumber");
var import_units3 = require("@ethersproject/units");
var import_jsbi10 = __toESM(require("jsbi"));
var ONE_INCH_CHAINS = [
  1 /* ETH_MAINNET */,
  56 /* BSC_MAINNET */,
  137 /* MATIC_MAINNET */,
  10 /* OPTIMISM_MAINNET */,
  42161 /* ARBITRUM_MAINNET */,
  43114 /* AVAX_MAINNET */,
  324 /* ZKSYNC_MAINNET */,
  8453 /* BASE_MAINNET */,
  100 /* GNOSIS_MAINNET */
  // ChainId.UNICHAIN_MAINNET, // TODO
  // ChainId.LINEA_MAINNET, // TODO
  // ChainId.SONIC_MAINNET, // TODO
];
var ONE_INCH_ORACLE_MAP = {
  [1 /* ETH_MAINNET */]: "0x00000000000D6FFc74A8feb35aF5827bf57f6786",
  [56 /* BSC_MAINNET */]: "0x00000000000D6FFc74A8feb35aF5827bf57f6786",
  [137 /* MATIC_MAINNET */]: "0x00000000000D6FFc74A8feb35aF5827bf57f6786",
  [10 /* OPTIMISM_MAINNET */]: "0x00000000000D6FFc74A8feb35aF5827bf57f6786",
  [42161 /* ARBITRUM_MAINNET */]: "0x00000000000D6FFc74A8feb35aF5827bf57f6786",
  [43114 /* AVAX_MAINNET */]: "0x00000000000D6FFc74A8feb35aF5827bf57f6786",
  [324 /* ZKSYNC_MAINNET */]: "0x739B4e7a3ad8210B6315F75b24cfe0D3226f6945",
  [8453 /* BASE_MAINNET */]: "0x00000000000D6FFc74A8feb35aF5827bf57f6786",
  [100 /* GNOSIS_MAINNET */]: "0x00000000000D6FFc74A8feb35aF5827bf57f6786"
  // [ChainId.UNICHAIN_MAINNET]: '', // TODO
  // [ChainId.LINEA_MAINNET]: '', // TODO
  // [ChainId.SONIC_MAINNET]: '', // TODO
};
var OneInchTrade = class _OneInchTrade extends SymbiosisTrade {
  constructor(params) {
    super(params);
    const { symbiosis, from, protocols } = params;
    this.symbiosis = symbiosis;
    this.from = from;
    this.protocols = protocols || [];
  }
  static isAvailable(chainId) {
    return ONE_INCH_CHAINS.includes(chainId);
  }
  get tradeType() {
    return "1inch";
  }
  async init() {
    let fromTokenAddress = this.tokenAmountIn.token.address;
    if (this.tokenAmountIn.token.isNative) {
      fromTokenAddress = NATIVE_TOKEN_ADDRESS;
    }
    let toTokenAddress = this.tokenOut.address;
    if (this.tokenOut.isNative) {
      toTokenAddress = NATIVE_TOKEN_ADDRESS;
    }
    const protocolsOrigin = await _OneInchTrade.getProtocols(this.symbiosis, this.tokenAmountIn.token.chainId);
    let protocols = this.protocols.filter((x) => protocolsOrigin.includes(x));
    if (protocols.length === 0) {
      protocols = protocolsOrigin;
    }
    const searchParams = new URLSearchParams();
    searchParams.set("src", fromTokenAddress);
    searchParams.set("dst", toTokenAddress);
    searchParams.set("amount", this.tokenAmountIn.raw.toString());
    searchParams.set("from", this.from);
    searchParams.set("slippage", (this.slippage / 100).toFixed(4));
    searchParams.set("receiver", this.to);
    searchParams.set("disableEstimate", "true");
    searchParams.set("allowPartialFill", "false");
    searchParams.set("usePatching", "true");
    searchParams.set("protocols", protocols.join(","));
    let json;
    try {
      json = await _OneInchTrade.request(this.symbiosis, `${this.tokenAmountIn.token.chainId}/swap`, searchParams);
    } catch (error) {
      let errorText = "Unknown error";
      if (error instanceof Error) {
        try {
          const parsed = JSON.parse(error.message ?? "");
          errorText = `Message: ${parsed.description}`;
        } catch {
          errorText = error?.message ?? "Unknown error";
        }
      }
      throw new OneInchTradeError(`Cannot get swap on chain ${this.tokenAmountIn.token.chainId}: ${errorText}`);
    }
    const tx = json["tx"];
    const callData = tx.data;
    const { amountOffset, minReceivedOffset } = this.getOffsets(callData);
    const amountOutRaw = json["toAmount"];
    const amountOut = new TokenAmount(this.tokenOut, amountOutRaw);
    const amountOutMinRaw = getMinAmount(this.slippage, amountOutRaw);
    const amountOutMin = new TokenAmount(this.tokenOut, amountOutMinRaw);
    const priceImpact = await this.getTradePriceImpact({
      tokenAmountIn: this.tokenAmountIn,
      tokenAmountOut: amountOut
    });
    this.out = {
      amountOut,
      amountOutMin,
      route: [this.tokenAmountIn.token, this.tokenOut],
      routerAddress: tx.to,
      callData,
      callDataOffset: amountOffset,
      minReceivedOffset,
      priceImpact
    };
    return this;
  }
  static async request(symbiosis, method, urlParams) {
    const requestUrl = new URL(method, symbiosis.oneInchConfig.apiUrl);
    if (urlParams) {
      requestUrl.search = urlParams.toString();
    }
    const apiKeys = symbiosis.oneInchConfig.apiKeys;
    const apiKey = apiKeys[Math.floor(Math.random() * apiKeys.length)];
    const response = await fetch(requestUrl.toString(), {
      headers: { Authorization: `Bearer ${apiKey}` }
    });
    if (!response.ok) {
      const text = await response.text();
      throw new OneInchTradeError(text);
    }
    return response.json();
  }
  static async getProtocols(symbiosis, chainId) {
    try {
      const json = await symbiosis.cache.get(
        ["oneInchGetProtocols", chainId.toString()],
        async () => {
          return _OneInchTrade.request(symbiosis, `${chainId}/liquidity-sources`);
        },
        4 * 60 * 60
        // 4h
      );
      return json["protocols"].reduce((acc, protocol) => {
        if (protocol.id.includes("ONE_INCH_LIMIT_ORDER")) {
          return acc;
        }
        if (protocol.id.includes("PMM")) {
          return acc;
        }
        acc.push(protocol.id);
        return acc;
      }, []);
    } catch (error) {
      throw new OneInchTradeError(`Cannot get swap on chain ${chainId}`, error);
    }
  }
  getOffsets(callData) {
    const methods = [
      // V4
      {
        // swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)
        sigHash: "7c025200",
        offset: 260,
        minReceivedOffset: 292
      },
      {
        // clipperSwapTo(address,address,address,uint256,uint256)
        sigHash: "9994dd15",
        offset: 132,
        minReceivedOffset: 164
      },
      {
        // fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address)
        sigHash: "baba5855",
        offset: 292,
        minReceivedOffset: 324
      },
      {
        // uniswapV3SwapTo(address,uint256,uint256,uint256[])
        sigHash: "bc80f1a8",
        offset: 68,
        minReceivedOffset: 100
      },
      // V5
      {
        // clipperSwapTo(address,address,address,address,uint256,uint256,uint256,bytes32,bytes32)
        sigHash: "093d4fa5",
        offset: 164,
        // +
        minReceivedOffset: 196
      },
      {
        // clipperSwap(address,address,address,address,uint256,uint256,uint256,bytes32,bytes32)
        sigHash: "84bd6d29",
        offset: 132,
        // +
        minReceivedOffset: 164
      },
      {
        // swap(address,(address,address,address,address,uint256,uint256,uint256),bytes,bytes)
        sigHash: "12aa3caf",
        offset: 196,
        // +/-
        minReceivedOffset: 228
      },
      {
        // fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,address)
        sigHash: "5a099843",
        offset: 196,
        minReceivedOffset: 228
      },
      {
        // unoswapTo(address,address,uint256,uint256,uint256[])
        sigHash: "f78dc253",
        offset: 100,
        minReceivedOffset: 132
      },
      {
        // unoswap(address,uint256,uint256,uint256[])
        sigHash: "0502b1c5",
        offset: 68,
        minReceivedOffset: 100
      },
      {
        // uniswapV3SwapTo(address,uint256,uint256,uint256[])
        sigHash: "bc80f1a8",
        offset: 68,
        minReceivedOffset: 100
      },
      {
        // uniswapV3Swap(uint256,uint256,uint256[])
        sigHash: "e449022e",
        offset: 36,
        minReceivedOffset: 68
      }
    ];
    const sigHash = callData.slice(2, 10);
    const method = methods.find((i) => {
      return i.sigHash === sigHash;
    });
    if (method === void 0) {
      throw new OneInchTradeError("Unknown swap method encoded to calldata");
    }
    return {
      amountOffset: method.offset,
      minReceivedOffset: method.minReceivedOffset
    };
  }
  async getTradePriceImpact({ tokenAmountIn, tokenAmountOut }) {
    const chainId = tokenAmountIn.token.chainId;
    const provider = this.symbiosis.getProvider(chainId);
    const oracleAddress = ONE_INCH_ORACLE_MAP[chainId];
    if (!oracleAddress) {
      throw new OneInchTradeError(`Could not find off-chain oracle on chain ${chainId}`);
    }
    const oracleInterface = OneInchOracle__factory.createInterface();
    const tokens = [wrappedToken(tokenAmountIn.token), wrappedToken(tokenAmountOut.token)];
    const aggregated = await this.symbiosis.cache.get(
      ["getOneInchRateToEth", chainId.toString(), ...tokens.map((i) => i.address)],
      async () => {
        const calls = tokens.map((token) => ({
          target: oracleAddress,
          callData: oracleInterface.encodeFunctionData(
            "getRateToEth",
            [token.address, true]
            // use wrapper
          )
        }));
        const multicall = await getMulticall(provider);
        return multicall.callStatic.tryAggregate(true, calls);
      },
      10 * 60
      // 10 minutes
    );
    const denominator = import_bignumber.BigNumber.from(10).pow(18);
    const data = aggregated.map(([success, returnData], i) => {
      if (!success || returnData === "0x") {
        return;
      }
      const result = oracleInterface.decodeFunctionResult("getRateToEth", returnData);
      const numerator = import_bignumber.BigNumber.from(10).pow(tokens[i].decimals);
      return import_bignumber.BigNumber.from(result.weightedRate).mul(numerator).div(denominator);
    });
    if (!data[0] || !data[1]) {
      throw new OneInchTradeError("Cannot get rate to ETH from price oracle");
    }
    if (data[0].isZero() || data[1]?.isZero()) {
      return new Percent("0", BIPS_BASE);
    }
    const multiplierPow = 18;
    const multiplier = import_bignumber.BigNumber.from(10).pow(multiplierPow);
    const spot = data[1].mul(multiplier).div(data[0]);
    const inBn = import_bignumber.BigNumber.from(tokenAmountIn.raw.toString()).mul(
      import_bignumber.BigNumber.from(10).pow(tokenAmountOut.token.decimals)
    );
    const outBn = import_bignumber.BigNumber.from(tokenAmountOut.raw.toString()).mul(
      import_bignumber.BigNumber.from(10).pow(tokenAmountIn.token.decimals)
    );
    const real = inBn.mul(multiplier).div(outBn);
    const impact = real.mul(multiplier).div(spot);
    const impactNumber = 1 - Number.parseFloat((0, import_units3.formatUnits)(impact, multiplierPow));
    return new Percent(parseInt(`${impactNumber * import_jsbi10.default.toNumber(BIPS_BASE)}`).toString(), BIPS_BASE);
  }
};

// src/crosschain/trade/openOceanTrade.ts
var import_bignumber2 = __toESM(require("bignumber.js"));
var import_addresses = require("@ethersproject/constants/lib/addresses");
var OPEN_OCEAN_NETWORKS = {
  // ---  1inch supported chains
  // [ChainId.ETH_MAINNET]: {
  //     slug: 'eth',
  //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,
  // },
  // [ChainId.BSC_MAINNET]: {
  //     slug: 'bsc',
  //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,
  // },
  // [ChainId.MATIC_MAINNET]: {
  //     slug: 'polygon',
  //     nativeTokenAddress: '0x0000000000000000000000000000000000001010',
  // },
  // [ChainId.OPTIMISM_MAINNET]: {
  //     slug: 'optimism',
  //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,
  // },
  // [ChainId.ARBITRUM_MAINNET]: {
  //     slug: 'arbitrum',
  //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,
  // },
  // [ChainId.AVAX_MAINNET]: {
  //     slug: 'avax',
  //     nativeTokenAddress: AddressZero,
  // },
  // [ChainId.ZKSYNC_MAINNET]: {
  //     slug: 'zksync',
  //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,
  // },
  // [ChainId.BASE_MAINNET]: {
  //     slug: 'base',
  //     nativeTokenAddress: NATIVE_TOKEN_ADDRESS,
  // },
  // [ChainId.GNOSIS_MAINNET]: {
  //     slug: 'xdai',
  //     nativeTokenAddress: AddressZero,
  // },
  [130 /* UNICHAIN_MAINNET */]: {
    slug: "uni",
    nativeTokenAddress: NATIVE_TOKEN_ADDRESS
  },
  [59144 /* LINEA_MAINNET */]: {
    slug: "linea",
    nativeTokenAddress: NATIVE_TOKEN_ADDRESS
  },
  [146 /* SONIC_MAINNET */]: {
    slug: "sonic",
    nativeTokenAddress: import_addresses.AddressZero
  },
  // --- OpenOcean supported only chains
  [2222 /* KAVA_MAINNET */]: {
    slug: "kava",
    nativeTokenAddress: import_addresses.AddressZero
  },
  [1101 /* POLYGON_ZK */]: {
    slug: "polygon_zkevm",
    nativeTokenAddress: NATIVE_TOKEN_ADDRESS
  },
  [534352 /* SCROLL_MAINNET */]: {
    slug: "scroll",
    nativeTokenAddress: NATIVE_TOKEN_ADDRESS
  },
  [5e3 /* MANTLE_MAINNET */]: {
    slug: "mantle",
    nativeTokenAddress: import_addresses.AddressZero
  },
  [169 /* MANTA_MAINNET */]: {
    slug: "manta",
    nativeTokenAddress: NATIVE_TOKEN_ADDRESS
  },
  [1088 /* METIS_MAINNET */]: {
    slug: "metis",
    nativeTokenAddress: "0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000"
  },
  [81457 /* BLAST_MAINNET */]: {
    slug: "blast",
    nativeTokenAddress: NATIVE_TOKEN_ADDRESS
  },
  [34443 /* MODE_MAINNET */]: {
    slug: "mode",
    nativeTokenAddress: NATIVE_TOKEN_ADDRESS
  },
  [30 /* RSK_MAINNET */]: {
    slug: "rootstock",
    nativeTokenAddress: NATIVE_TOKEN_ADDRESS
  },
  [25 /* CRONOS_MAINNET */]: {
    slug: "cronos",
    nativeTokenAddress: import_addresses.AddressZero
  },
  [1329 /* SEI_EVM_MAINNET */]: {
    slug: "sei",
    nativeTokenAddress: import_addresses.AddressZero
  },
  [40 /* TELOS_MAINNET */]: {
    slug: "telos",
    nativeTokenAddress: import_addresses.AddressZero
  },
  [1625 /* GRAVITY_MAINNET */]: {
    slug: "gravity",
    nativeTokenAddress: import_addresses.AddressZero
  },
  [80094 /* BERACHAIN_MAINNET */]: {
    slug: "bera",
    nativeTokenAddress: import_addresses.AddressZero
  },
  [204 /* OPBNB_MAINNET */]: {
    slug: "opbnb",
    nativeTokenAddress: NATIVE_TOKEN_ADDRESS
  },
  [33139 /* APECHAIN_MAINNET */]: {
    slug: "ape",
    nativeTokenAddress: import_addresses.AddressZero
  },
  [9745 /* PLASMA_MAINNET */]: {
    slug: "plasma",
    nativeTokenAddress: import_addresses.AddressZero
  },
  [999 /* HYPERLIQUID_MAINNET */]: {
    slug: "hyperevm",
    nativeTokenAddress: import_addresses.AddressZero
  }
};
var OpenOceanTrade = class extends SymbiosisTrade {
  constructor(params) {
    super(params);
    const chainId = this.tokenAmountIn.token.chainId;
    const chain = OPEN_OCEAN_NETWORKS[chainId];
    if (!chain) {
      throw new OpenOceanTradeError("Unsupported chain");
    }
    this.chain = chain;
    this.symbiosis = params.symbiosis;
    this.endpoint = `${params.symbiosis.openOceanConfig.apiUrl}/${chainId}`;
  }
  static isAvailable(chainId) {
    return Object.keys(OPEN_OCEAN_NETWORKS).includes(chainId.toString());
  }
  get tradeType() {
    return "open-ocean";
  }
  async init() {
    let fromTokenAddress = this.tokenAmountIn.token.address;
    if (this.tokenAmountIn.token.isNative) {
      fromTokenAddress = this.chain.nativeTokenAddress;
    }
    let toTokenAddress = this.tokenOut.address;
    if (this.tokenOut.isNative) {
      toTokenAddress = this.chain.nativeTokenAddress;
    }
    const apiKeys = this.symbiosis.openOceanConfig.apiKeys;
    const apiKey = apiKeys[Math.floor(Math.random() * apiKeys.length)];
    const gasPrice = await this.getGasPrice(apiKey);
    const url = new URL(`${this.endpoint}/swap`);
    url.searchParams.set("inTokenAddress", fromTokenAddress);
    url.searchParams.set("outTokenAddress", toTokenAddress);
    url.searchParams.set("amountDecimals", this.tokenAmountIn.raw.toString());
    url.searchParams.set("gasPriceDecimals", gasPrice.toString());
    url.searchParams.set("slippage", (this.slippage / 100).toString());
    url.searchParams.set("account", this.to);
    url.searchParams.set("referrer", "0x3254aE00947e44B7fD03F50b93B9acFEd59F9620");
    url.searchParams.set("disableRfq", "true");
    const response = await this.symbiosis.fetch(url.toString(), {
      headers: {
        apikey: apiKey,
        "Content-Type": "application/json"
      }
    });
    if (!response.ok) {
      let errorText;
      try {
        const jsonError = JSON.parse(await response.text());
        errorText = jsonError?.message ?? "Unknown error";
      } catch (e) {
        errorText = await response.text();
      }
      throw new OpenOceanTradeError(
        `Cannot build trade for chain ${this.tokenAmountIn.token.chainId}: Message: ${errorText}`
      );
    }
    const json = await response.json();
    if (json.code !== 200) {
      const errorJson = json;
      throw new OpenOceanTradeError(
        `Cannot build trade for chain ${this.tokenAmountIn.token.chainId}. Message: ${errorJson?.error ?? errorJson.errorMsg}`
      );
    }
    const { data, outAmount, to, price_impact: priceImpactString } = json.data;
    const { amountOffset, minReceivedOffset } = this.getOffsets(data);
    const amountOut = new TokenAmount(this.tokenOut, outAmount);
    const amountOutMinRaw = getMinAmount(this.slippage, outAmount);
    const amountOutMin = new TokenAmount(this.tokenOut, amountOutMinRaw);
    this.out = {
      amountOut,
      amountOutMin,
      routerAddress: to,
      route: [this.tokenAmountIn.token, this.tokenOut],
      callData: data,
      callDataOffset: amountOffset,
      minReceivedOffset,
      priceImpact: this.convertPriceImpact(priceImpactString)
    };
    return this;
  }
  getOffsets(callData) {
    const methods = [
      {
        // swap
        sigHash: "90411a32",
        amountOffset: 260,
        minReceivedOffset: 292
      },
      {
        // uniswapV3SwapTo
        sigHash: "bc80f1a8",
        amountOffset: 68,
        minReceivedOffset: 100
      },
      {
        // callUniswapTo
        sigHash: "6b58f2f0",
        amountOffset: 68,
        minReceivedOffset: 100
      }
    ];
    const sigHash = callData.slice(2, 10);
    const method = methods.find((i) => {
      return i.sigHash === sigHash;
    });
    if (method === void 0) {
      throw new OpenOceanTradeError("Unknown swap method encoded to calldata");
    }
    return {
      amountOffset: method.amountOffset,
      minReceivedOffset: method.minReceivedOffset
    };
  }
  convertPriceImpact(value) {
    const zeroPercent = new Percent("0", BIPS_BASE);
    if (!value) {
      return zeroPercent;
    }
    const number = new import_bignumber2.default(value.split("%")[0]);
    if (number.isNaN()) {
      return zeroPercent;
    }
    if (!number.isFinite()) {
      return zeroPercent;
    }
    return new Percent(number.multipliedBy(100).integerValue().toString(), BIPS_BASE);
  }
  async getGasPrice(apiKey) {
    const isMainnet = this.tokenAmountIn.token.chainId === 1 /* ETH_MAINNET */;
    return this.symbiosis.cache.get(
      ["openOceanGasPrice", this.endpoint],
      async () => {
        const response = await fetch(`${this.endpoint}/gasPrice`, {
          headers: {
            apiKey,
            "Content-Type": "application/json"
          }
        });
        if (!response.ok) {
          throw new OpenOceanTradeError("Failed to get gas price");
        }
        const json = await response.json();
        if (isMainnet) {
          return json.data.standard.legacyGasPrice;
        }
        return json.data.standard;
      },
      600
      // 10 minutes
    );
  }
};

// src/crosschain/trade/izumiTrade.ts
var import_bignumber3 = __toESM(require("bignumber.js"));
var import_ethers47 = require("ethers");
var import_utils7 = require("ethers/lib/utils");
var POSSIBLE_FEES = [100, 400, 500, 2e3, 3e3, 1e4];
var IZUMI_ADDRESSES = {
  [5e3 /* MANTLE_MAINNET */]: {
    factory: "0x45e5F26451CDB01B0fA1f8582E0aAD9A6F27C218",
    quoter: "0x032b241De86a8660f1Ae0691a4760B426EA246d7",
    swap: "0x25C030116Feb2E7BbA054b9de0915E5F51b03e31",
    baseTokens: [
      new Token2({
        chainId: 5e3 /* MANTLE_MAINNET */,
        address: "0x201eba5cc46d216ce6dc03f6a759e8e766e956ae",
        decimals: 6,
        symbol: "USDT",
        name: "USDT"
      }),
      new Token2({
        chainId: 5e3 /* MANTLE_MAINNET */,
        address: "0xdeaddeaddeaddeaddeaddeaddeaddeaddead1111",
        decimals: 18,
        symbol: "WETH",
        name: "Wrapped Ether"
      }),
      new Token2({
        chainId: 5e3 /* MANTLE_MAINNET */,
        address: "0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8",
        decimals: 18,
        symbol: "WMNT",
        name: "WMNT"
      }),
      new Token2({
        chainId: 5e3 /* MANTLE_MAINNET */,
        address: "0x0a3bb08b3a15a19b4de82f8acfc862606fb69a2d",
        decimals: 18,
        symbol: "iUSD",
        name: "iZUMi Bond USD"
      })
    ]
  },
  [59144 /* LINEA_MAINNET */]: {
    factory: "0x45e5F26451CDB01B0fA1f8582E0aAD9A6F27C218",
    quoter: "0xe6805638db944eA605e774e72c6F0D15Fb6a1347",
    swap: "0x032b241De86a8660f1Ae0691a4760B426EA246d7",
    baseTokens: [
      new Token2({
        chainId: 59144 /* LINEA_MAINNET */,
        name: "Wrapped Ether",
        symbol: "WETH",
        address: "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
        decimals: 18
      }),
      new Token2({
        chainId: 59144 /* LINEA_MAINNET */,
        name: "iZUMi Bond USD",
        symbol: "iUSD",
        address: "0x0a3bb08b3a15a19b4de82f8acfc862606fb69a2d",
        decimals: 18
      })
    ]
  },
  [534352 /* SCROLL_MAINNET */]: {
    factory: "0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08",
    quoter: "0x33531bDBFE34fa6Fd5963D0423f7699775AacaaF",
    swap: "0x2db0AFD0045F3518c77eC6591a542e326Befd3D7",
    baseTokens: [
      new Token2({
        chainId: 534352 /* SCROLL_MAINNET */,
        name: "Wrapped Ether",
        symbol: "WETH",
        address: "0x5300000000000000000000000000000000000004",
        decimals: 18
      }),
      new Token2({
        chainId: 534352 /* SCROLL_MAINNET */,
        name: "USD Coin",
        symbol: "USDC",
        address: "0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4",
        decimals: 18
      })
    ]
  },
  [195 /* OKX_X1_TESTNET */]: {
    factory: "0x64c2F1306b4ED3183E7B345158fd01c19C0d8c5E",
    quoter: "0xF6FFe4f3FdC8BBb7F70FFD48e61f17D1e343dDfD",
    swap: "0xa9754f0D9055d14EB0D2d196E4C51d8B2Ee6f4d3",
    baseTokens: [
      new Token2({
        name: "WETH",
        symbol: "WETH",
        address: "0xbec7859bc3d0603bec454f7194173e36bf2aa5c8",
        chainId: 195 /* OKX_X1_TESTNET */,
        decimals: 18,
        icons: {
          large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
          small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
        }
      }),
      new Token2({
        chainId: 195 /* OKX_X1_TESTNET */,
        address: "0x67A1f4A939b477A6b7c5BF94D97E45dE87E608eF",
        decimals: 18,
        symbol: "WOKB",
        isNative: false,
        name: "Wrapped OKB",
        icons: {
          small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png",
          large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3897.png"
        }
      })
    ]
  },
  [4200 /* MERLIN_MAINNET */]: {
    swap: "0x1aFa5D7f89743219576Ef48a9826261bE6378a68",
    factory: "0xE29a6620DAc789B8a76e9b9eC8fE9B7cf2B663D5",
    quoter: "0x2569bcE69287618e2cd004f785d016F7DF29232F",
    baseTokens: [
      new Token2({
        chainId: 4200 /* MERLIN_MAINNET */,
        name: "Wrapped BTC",
        symbol: "WBTC",
        address: "0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA",
        decimals: 18
      }),
      new Token2({
        chainId: 4200 /* MERLIN_MAINNET */,
        name: "iZUMi Bond USD",
        symbol: "iUSD",
        address: "0x0A3BB08b3a15A19b4De82F8AcFc862606FB69A2D",
        decimals: 18
      })
    ]
  },
  [810180 /* ZKLINK_MAINNET */]: {
    swap: "0x377EC7c9ae5a0787F384668788a1654249059dD6",
    factory: "0x33D9936b7B7BC155493446B5E6dDC0350EB83AEC",
    quoter: "0x3EC82C07981D6D213DA9bd35A0ba4cd324feA438",
    baseTokens: [
      new Token2({
        chainId: 810180 /* ZKLINK_MAINNET */,
        name: "Wrapped ETH",
        symbol: "WETH",
        address: "0x8280a4e7D5B3B658ec4580d3Bc30f5e50454F169",
        decimals: 18
      }),
      new Token2({
        chainId: 810180 /* ZKLINK_MAINNET */,
        name: "Tether USD (Ethereum)",
        symbol: "USDT.Eth",
        address: "0x0ace5E8e1Be0d3Df778f639d79fa8231b376b9F1",
        decimals: 6
      }),
      new Token2({
        chainId: 810180 /* ZKLINK_MAINNET */,
        name: "USD Coin (Ethereum)",
        symbol: "USDC.Eth",
        address: "0x220B1C622c8c169a9174f42CEA89a9E2f83B63F6",
        decimals: 6
      }),
      new Token2({
        chainId: 810180 /* ZKLINK_MAINNET */,
        name: "USD Coin (Arbitrum)",
        symbol: "USDC.Arbi",
        address: "0x7581469cb53E786F39ff26E8aF6Fd750213dAcEd",
        decimals: 6
      })
    ]
  },
  [7e3 /* ZETACHAIN_MAINNET */]: {
    swap: "0x34bc1b87f60e0a30c0e24FD7Abada70436c71406",
    factory: "0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08",
    quoter: "0x3F559139C2Fc7B97Ad6FE9B4d1f75149F551DB18",
    baseTokens: [
      new Token2({
        chainId: 7e3 /* ZETACHAIN_MAINNET */,
        name: "Wrapped ZETA",
        symbol: "WZETA",
        address: "0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf",
        decimals: 18
      }),
      new Token2({
        chainId: 7e3 /* ZETACHAIN_MAINNET */,
        name: "ZetaChain ZRC20 USDT on ETH",
        symbol: "USDT.ETH",
        address: "0x7c8dDa80bbBE1254a7aACf3219EBe1481c6E01d7",
        decimals: 6
      }),
      new Token2({
        chainId: 7e3 /* ZETACHAIN_MAINNET */,
        name: "ZetaChain ZRC20 USDC on ETH",
        symbol: "USDC.ETH",
        address: "0x0cbe0dF132a6c6B4a2974Fa1b7Fb953CF0Cc798a",
        decimals: 6
      }),
      new Token2({
        chainId: 7e3 /* ZETACHAIN_MAINNET */,
        name: "ZetaChain ZRC20 ETH-eth_mainnet",
        symbol: "ETH.ETH",
        address: "0xd97B1de3619ed2c6BEb3860147E30cA8A7dC9891",
        decimals: 18
      })
    ]
  },
  [167e3 /* TAIKO_MAINNET */]: {
    swap: "0x04830cfCED9772b8ACbAF76Cfc7A630Ad82c9148",
    factory: "0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08",
    quoter: "0x2C6Df0fDbCE9D2Ded2B52A117126F2Dc991f770f",
    baseTokens: []
  },
  [1625 /* GRAVITY_MAINNET */]: {
    swap: "0x3EF68D3f7664b2805D4E88381b64868a56f88bC4",
    factory: "0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08",
    quoter: "0x33531bDBFE34fa6Fd5963D0423f7699775AacaaF",
    baseTokens: []
  },
  [2818 /* MORPH_MAINNET */]: {
    swap: "0x3EF68D3f7664b2805D4E88381b64868a56f88bC4",
    factory: "0x8c7d3063579BdB0b90997e18A770eaE32E1eBb08",
    quoter: "0x33531bDBFE34fa6Fd5963D0423f7699775AacaaF",
    baseTokens: []
  }
};
var IzumiTrade = class extends SymbiosisTrade {
  constructor(params) {
    super(params);
    const { symbiosis, deadline } = params;
    this.symbiosis = symbiosis;
    this.deadline = deadline;
  }
  static isSupported(chainId) {
    return !!IZUMI_ADDRESSES[chainId];
  }
  get tradeType() {
    return "izumi";
  }
  async init() {
    const addresses = IZUMI_ADDRESSES[this.tokenAmountIn.token.chainId];
    if (!addresses) {
      throw new IzumiTradeError("Unsupported chain");
    }
    const { quoter, swap } = addresses;
    const allRoutes = [];
    const tokenIn = this.tokenAmountIn.token;
    const tokenOut = this.tokenOut;
    POSSIBLE_FEES.forEach((fee) => {
      const path2 = getTokenChainPath([tokenIn, tokenOut], [fee]);
      allRoutes.push({ tokens: [tokenIn, tokenOut], path: path2, fees: [fee] });
    });
    const wrappedTokenIn = wrappedToken(tokenIn);
    const wrappedTokenOut = wrappedToken(tokenOut);
    for (const baseToken of addresses.baseTokens) {
      if (baseToken.equals(wrappedTokenIn) || baseToken.equals(wrappedTokenOut)) {
        continue;
      }
      POSSIBLE_FEES.forEach((firstFee) => {
        POSSIBLE_FEES.forEach((secondFee) => {
          const fees = [firstFee, secondFee];
          const path2 = getTokenChainPath([tokenIn, baseToken, tokenOut], fees);
          allRoutes.push({ tokens: [tokenIn, baseToken, tokenOut], path: path2, fees });
        });
      });
    }
    const provider = this.symbiosis.getProvider(this.tokenAmountIn.token.chainId);
    const multicall = await getMulticall(provider);
    const quoterInterface = IzumiQuoter__factory.createInterface();
    const calls = allRoutes.map(({ path: path2 }) => ({
      target: quoter,
      callData: quoterInterface.encodeFunctionData("swapAmount", [this.tokenAmountIn.raw.toString(), path2])
    }));
    const maxChunkLength = 100;
    const chunks = Math.floor(calls.length / maxChunkLength) + 1;
    let results = [];
    for (let i = 0; i < chunks; i++) {
      const from = i * maxChunkLength;
      let to = (i + 1) * maxChunkLength;
      if (to > calls.length) {
        to = calls.length;
      }
      const callsPart = calls.slice(from, to);
      const part = await multicall.callStatic.tryAggregate(false, callsPart);
      results = [...results, ...part];
    }
    let bestRoute;
    let bestOutput;
    for (let i = 0; i < results.length; i++) {
      const [success, returnData] = results[i];
      if (!success) {
        continue;
      }
      const { acquire } = quoterInterface.decodeFunctionResult("swapAmount", returnData);
      if (!bestOutput || import_ethers47.BigNumber.from(acquire).gt(bestOutput)) {
        bestRoute = allRoutes[i];
        bestOutput = acquire;
      }
    }
    if (!bestRoute || !bestOutput) {
      throw new IzumiTradeError("No path found");
    }
    const { path, tokens } = bestRoute;
    const pointsBefore = await this.getCurrentPoolPoints(bestRoute);
    const initDecimalPriceEndByStart = getPriceDecimalEndByStart(bestRoute, pointsBefore);
    const initDecimalPriceEndByStartTrimmed = new import_bignumber3.default(initDecimalPriceEndByStart.toFixed(4));
    let priceImpact = new Percent("0", BIPS_BASE);
    if (!initDecimalPriceEndByStartTrimmed.isEqualTo("0")) {
      const spotPriceBNJS = new import_bignumber3.default(this.tokenAmountIn.raw.toString()).dividedBy(10 ** this.tokenAmountIn.token.decimals).dividedBy(initDecimalPriceEndByStart);
      const bestOutputBNJS = new import_bignumber3.default(bestOutput.toString()).dividedBy(10 ** this.tokenOut.decimals);
      const impactBNJS = spotPriceBNJS.minus(bestOutputBNJS).div(bestOutputBNJS).negated();
      priceImpact = new Percent(impactBNJS.times(BIPS_BASE.toString()).toFixed(0).toString(), BIPS_BASE);
    }
    const amountOut = new TokenAmount(this.tokenOut, bestOutput.toString());
    const minAcquired = getMinAmount(this.slippage, bestOutput.toString());
    const amountOutMin = new TokenAmount(this.tokenOut, minAcquired.toString());
    const outputToken = tokens[tokens.length - 1];
    const finalRecipientAddress = this.to;
    const innerRecipientAddress = outputToken.isNative ? "0x0000000000000000000000000000000000000000" : finalRecipientAddress;
    const swapInterface = IzumiSwap__factory.createInterface();
    const swapCalls = [];
    const swapData = swapInterface.encodeFunctionData("swapAmount", [
      {
        path,
        recipient: innerRecipientAddress,
        amount: this.tokenAmountIn.raw.toString(),
        minAcquired: minAcquired.toString(),
        deadline: this.deadline
      }
    ]);
    swapCalls.push(swapData);
    if (outputToken.isNative) {
      swapCalls.push(swapInterface.encodeFunctionData("unwrapWETH9", ["0", finalRecipientAddress]));
    }
    let callData;
    if (swapCalls.length === 1) {
      callData = swapCalls[0];
    } else {
      callData = swapInterface.encodeFunctionData("multicall", [swapCalls]);
    }
    const abiCoder = new import_utils7.AbiCoder();
    const amountInCallData = abiCoder.encode(["uint128"], [this.tokenAmountIn.raw.toString()]).replace("0x", "");
    const amountPosition = callData.indexOf(amountInCallData) + amountInCallData.length;
    const callDataOffset = (amountPosition - 2) / 2;
    const minReceivedCallData = abiCoder.encode(["uint128"], [minAcquired.toString()]).replace("0x", "");
    const minReceivedPosition = callData.indexOf(minReceivedCallData) + minReceivedCallData.length;
    const minReceivedOffset = (minReceivedPosition - 2) / 2;
    this.out = {
      amountOut,
      amountOutMin,
      routerAddress: swap,
      route: tokens,
      callData,
      callDataOffset,
      minReceivedOffset,
      priceImpact
    };
    return this;
  }
  async getCurrentPoolPoints({ fees, tokens }) {
    const addresses = IZUMI_ADDRESSES[this.tokenAmountIn.token.chainId];
    if (!addresses) {
      throw new IzumiTradeError("Unsupported chain");
    }
    const provider = this.symbiosis.getProvider(this.tokenAmountIn.token.chainId);
    const multicall = await getMulticall(provider);
    const factoryInterface = IzumiFactory__factory.createInterface();
    const getPoolAddressesCalls = [];
    for (let i = 0; i < fees.length; i++) {
      getPoolAddressesCalls.push({
        target: addresses.factory,
        callData: factoryInterface.encodeFunctionData("pool", [
          wrappedToken(tokens[i]).address,
          wrappedToken(tokens[i + 1]).address,
          fees[i]
        ])
      });
    }
    const getPoolAddressesResults = await multicall.callStatic.tryAggregate(false, getPoolAddressesCalls);
    const poolsAddresses = getPoolAddressesResults.map(
      ([, returnData]) => factoryInterface.decodeFunctionResult("pool", returnData)[0]
    );
    const poolInterface = IzumiPool__factory.createInterface();
    const statesResults = await multicall.callStatic.tryAggregate(
      false,
      poolsAddresses.map((poolAddress) => ({
        target: poolAddress,
        callData: poolInterface.encodeFunctionData("state")
      }))
    );
    const points = statesResults.map(
      ([, returnData]) => poolInterface.decodeFunctionResult("state", returnData).currentPoint
    );
    return points;
  }
};
function num2Hex(n) {
  if (n < 10) {
    return String(n);
  }
  const str = "ABCDEF";
  return str[n - 10];
}
function appendHex(hexString, newHexString) {
  return hexString + newHexString.slice(2);
}
function fee2Hex(fee) {
  const n0 = fee % 16;
  const n1 = Math.floor(fee / 16) % 16;
  const n2 = Math.floor(fee / 256) % 16;
  const n3 = Math.floor(fee / 4096) % 16;
  const n4 = 0;
  const n5 = 0;
  return "0x" + num2Hex(n5) + num2Hex(n4) + num2Hex(n3) + num2Hex(n2) + num2Hex(n1) + num2Hex(n0);
}
var getTokenChainPath = (tokenChain, feeChain) => {
  let hexString = wrappedToken(tokenChain[0]).address;
  for (let i = 0; i < feeChain.length; i++) {
    hexString = appendHex(hexString, fee2Hex(feeChain[i]));
    hexString = appendHex(hexString, wrappedToken(tokenChain[i + 1]).address);
  }
  return hexString;
};
var getTokenXYFromToken = (tokenA, tokenB) => {
  const addressA = wrappedToken(tokenA).address;
  const addressB = wrappedToken(tokenB).address;
  if (addressA.toLowerCase() < addressB.toLowerCase()) {
    return { tokenX: tokenA, tokenY: tokenB };
  }
  return { tokenX: tokenB, tokenY: tokenA };
};
var priceUndecimal2PriceDecimal = (tokenA, tokenB, priceUndecimalAByB) => {
  return Number(priceUndecimalAByB.times(10 ** tokenA.decimals).div(10 ** tokenB.decimals));
};
var point2PriceDecimal = (tokenA, tokenB, point) => {
  let priceDecimal = 0;
  let needReverse = false;
  const { tokenX, tokenY } = getTokenXYFromToken(tokenA, tokenB);
  const addressA = wrappedToken(tokenA).address;
  const addressB = wrappedToken(tokenB).address;
  if (point > 0) {
    priceDecimal = priceUndecimal2PriceDecimal(tokenX, tokenY, new import_bignumber3.default(1.0001 ** point));
    needReverse = addressA.toLowerCase() > addressB.toLowerCase();
  } else {
    priceDecimal = priceUndecimal2PriceDecimal(tokenY, tokenX, new import_bignumber3.default(1.0001 ** -point));
    needReverse = addressA.toLowerCase() < addressB.toLowerCase();
  }
  if (needReverse) {
    priceDecimal = 1 / priceDecimal;
  }
  return priceDecimal;
};
function getPriceDecimalEndByStart(route, points) {
  const { tokens, fees } = route;
  let decimalPriceEndByStart = 1;
  for (let i = 0; i < fees.length; i++) {
    const decimalPriceBackByFront = point2PriceDecimal(tokens[i + 1], tokens[i], points[i]);
    decimalPriceEndByStart *= decimalPriceBackByFront;
  }
  return decimalPriceEndByStart;
}

// src/crosschain/trade/uniV2Trade.ts
var import_jsbi11 = __toESM(require("jsbi"));
var import_addresses2 = require("@ethersproject/constants/lib/addresses");
var UniV2Trade = class _UniV2Trade extends SymbiosisTrade {
  constructor(params) {
    super(params);
    const { symbiosis, deadline } = params;
    this.symbiosis = symbiosis;
    this.deadline = deadline;
  }
  static isSupported(symbiosis, chainId) {
    return symbiosis.chainConfig(chainId).router !== import_addresses2.AddressZero;
  }
  get tradeType() {
    return "uni-v2";
  }
  async init() {
    const { chainId } = this.tokenAmountIn.token;
    let router = this.uniV2Router(chainId);
    if (chainId === 43114 /* AVAX_MAINNET */) {
      router = this.avaxRouter(chainId);
    }
    if ([200101 /* MILKOMEDA_DEVNET */, 2001 /* MILKOMEDA_MAINNET */].includes(chainId)) {
      router = this.adaRouter(chainId);
    }
    if ([2222 /* KAVA_MAINNET */].includes(chainId)) {
      router = this.kavaRouter(chainId);
    }
    if ([34443 /* MODE_MAINNET */].includes(chainId)) {
      router = this.kimRouter(chainId);
    }
    if ([999 /* HYPERLIQUID_MAINNET */].includes(chainId)) {
      router = this.hyperSwapRouter(chainId);
    }
    if ([1329 /* SEI_EVM_MAINNET */].includes(chainId)) {
      router = this.dragonSwapRouter(chainId);
    }
    this.router = router;
    const pairs = await this.symbiosis.cache.get(
      ["getPairs", chainId.toString(), this.tokenAmountIn.token.address, this.tokenOut.address],
      async () => {
        return _UniV2Trade.getPairs(this.router.provider, this.tokenAmountIn.token, this.tokenOut);
      },
      60
      // 1 minute
    );
    let trade;
    try {
      const [t] = Trade.bestTradeExactIn(pairs, this.tokenAmountIn, this.tokenOut, {
        maxHops: 3,
        maxNumResults: 1
      });
      trade = t;
    } catch (e) {
      throw new UniV2TradeError(`bestTradeExactIn failed ${e.message}`);
    }
    if (!trade) {
      throw new UniV2TradeError("Cannot create trade");
    }
    const dexFee = this.symbiosis.dexFee(chainId);
    const priceImpact = computeTradePriceBreakdown(trade, dexFee).priceImpactWithoutFee;
    if (!priceImpact) {
      throw new UniV2TradeError("Cannot calculate priceImpact");
    }
    const amountOutMin = computeSlippageAdjustedAmounts(trade, this.slippage).OUTPUT;
    if (!amountOutMin) {
      throw new UniV2TradeError("Cannot compute amountOutMin");
    }
    const { data, offset, minReceivedOffset, functionSelector } = this.buildCallData(trade);
    if (!data) {
      throw new UniV2TradeError("Cannot build callData");
    }
    this.out = {
      amountOut: trade.outputAmount,
      amountOutMin,
      routerAddress: this.router.address,
      route: trade.route.path,
      callData: data,
      callDataOffset: offset,
      minReceivedOffset,
      priceImpact,
      functionSelector
    };
    return this;
  }
  buildCallData(trade) {
    const { methodName, args, offset, minReceivedOffset } = Router.swapCallParameters(trade, {
      allowedSlippage: new Percent(import_jsbi11.default.BigInt(Math.floor(this.slippage)), BIPS_BASE),
      recipient: this.to,
      ttl: this.deadline,
      feeOnTransfer: [34443 /* MODE_MAINNET */, 999 /* HYPERLIQUID_MAINNET */].includes(
        trade.inputAmount.token.chainId
      )
    });
    let method = methodName;
    if (trade.inputAmount.token.chainId === 43114 /* AVAX_MAINNET */) {
      method = methodName.replace("ETH", "AVAX");
    } else if ([200101 /* MILKOMEDA_DEVNET */, 2001 /* MILKOMEDA_MAINNET */].includes(trade.inputAmount.token.chainId)) {
      method = methodName.replace("ETH", "ADA");
    } else if ([1329 /* SEI_EVM_MAINNET */].includes(trade.inputAmount.token.chainId)) {
      method = methodName.replace("ETH", "SEI");
    }
    const functionAbi = this.router.interface.getFunction(method);
    return {
      functionSelector: getFunctionSelector(functionAbi),
      data: this.router.interface.encodeFunctionData(method, args),
      offset,
      minReceivedOffset
    };
  }
  static async getPairs(provider, tokenIn, tokenOut) {
    const allPairCombinations = getAllPairCombinations(tokenIn, tokenOut);
    return await _UniV2Trade.allPairs(provider, allPairCombinations);
  }
  static async allPairs(provider, tokens) {
    const wrappedTokens = tokens.map(([tokenA, tokenB]) => [wrappedToken(tokenA), wrappedToken(tokenB)]);
    const multicall = await getMulticall(provider);
    const pairAddresses = wrappedTokens.map(([tokenA, tokenB]) => {
      if (!tokenA || !tokenB) {
        throw new UniV2TradeError("tokenA or tokenB is null");
      }
      if (tokenA.chainId !== tokenB.chainId) {
        throw new UniV2TradeError("tokenA and tokenB are not on the same chain");
      }
      if (tokenA.equals(tokenB)) {
        throw new UniV2TradeError("tokenA and tokenB are the same");
      }
      return Pair.getAddress(tokenA, tokenB);
    });
    const pairInterface = Pair__factory.createInterface();
    const getReservesData = pairInterface.encodeFunctionData("getReserves");
    const calls = pairAddresses.map((pairAddress) => ({
      target: pairAddress,
      callData: getReservesData
    }));
    const aggregateResult = await multicall.callStatic.tryAggregate(false, calls);
    const validPairs = /* @__PURE__ */ new Map();
    aggregateResult.forEach(([success, returnData], i) => {
      if (!success || returnData === "0x") {
        return;
      }
      const tokenA = wrappedTokens[i][0];
      const tokenB = wrappedTokens[i][1];
      if (!tokenA || !tokenB || tokenA.equals(tokenB)) {
        return;
      }
      const reserve = pairInterface.decodeFunctionResult("getReserves", returnData);
      const { reserve0, reserve1 } = reserve;
      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];
      const pair = new Pair(
        new TokenAmount(token0, reserve0.toString()),
        new TokenAmount(token1, reserve1.toString())
      );
      validPairs.set(pair.liquidityToken.address, pair);
    });
    return Array.from(validPairs.values());
  }
  uniV2Router(chainId) {
    const { address: address2, provider } = this.getRouterConfig(chainId);
    return UniLikeRouter__factory.connect(address2, provider);
  }
  avaxRouter(chainId) {
    const { address: address2, provider } = this.getRouterConfig(chainId);
    return AvaxRouter__factory.connect(address2, provider);
  }
  adaRouter(chainId) {
    const { address: address2, provider } = this.getRouterConfig(chainId);
    return AdaRouter__factory.connect(address2, provider);
  }
  kavaRouter(chainId) {
    const { address: address2, provider } = this.getRouterConfig(chainId);
    return KavaRouter__factory.connect(address2, provider);
  }
  kimRouter(chainId) {
    const { address: address2, provider } = this.getRouterConfig(chainId);
    return KimRouter__factory.connect(address2, provider);
  }
  hyperSwapRouter(chainId) {
    const { address: address2, provider } = this.getRouterConfig(chainId);
    return HyperSwapRouter__factory.connect(address2, provider);
  }
  dragonSwapRouter(chainId) {
    const { address: address2, provider } = this.getRouterConfig(chainId);
    return DragonswapRouter__factory.connect(address2, provider);
  }
  getRouterConfig(chainId) {
    const address2 = this.symbiosis.chainConfig(chainId).router;
    const provider = this.symbiosis.getProvider(chainId);
    return { address: address2, provider };
  }
};

// src/crosschain/trade/uniV3Trade.ts
var import_v3_sdk3 = require("@uniswap/v3-sdk");

// node_modules/@uniswap/v3-core/artifacts/contracts/interfaces/IUniswapV3Pool.sol/IUniswapV3Pool.json
var IUniswapV3Pool_default = {
  _format: "hh-sol-artifact-1",
  contractName: "IUniswapV3Pool",
  sourceName: "contracts/interfaces/IUniswapV3Pool.sol",
  abi: [
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "owner",
          type: "address"
        },
        {
          indexed: true,
          internalType: "int24",
          name: "tickLower",
          type: "int24"
        },
        {
          indexed: true,
          internalType: "int24",
          name: "tickUpper",
          type: "int24"
        },
        {
          indexed: false,
          internalType: "uint128",
          name: "amount",
          type: "uint128"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "amount0",
          type: "uint256"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "amount1",
          type: "uint256"
        }
      ],
      name: "Burn",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "owner",
          type: "address"
        },
        {
          indexed: false,
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          indexed: true,
          internalType: "int24",
          name: "tickLower",
          type: "int24"
        },
        {
          indexed: true,
          internalType: "int24",
          name: "tickUpper",
          type: "int24"
        },
        {
          indexed: false,
          internalType: "uint128",
          name: "amount0",
          type: "uint128"
        },
        {
          indexed: false,
          internalType: "uint128",
          name: "amount1",
          type: "uint128"
        }
      ],
      name: "Collect",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "sender",
          type: "address"
        },
        {
          indexed: true,
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          indexed: false,
          internalType: "uint128",
          name: "amount0",
          type: "uint128"
        },
        {
          indexed: false,
          internalType: "uint128",
          name: "amount1",
          type: "uint128"
        }
      ],
      name: "CollectProtocol",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "sender",
          type: "address"
        },
        {
          indexed: true,
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "amount0",
          type: "uint256"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "amount1",
          type: "uint256"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "paid0",
          type: "uint256"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "paid1",
          type: "uint256"
        }
      ],
      name: "Flash",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "uint16",
          name: "observationCardinalityNextOld",
          type: "uint16"
        },
        {
          indexed: false,
          internalType: "uint16",
          name: "observationCardinalityNextNew",
          type: "uint16"
        }
      ],
      name: "IncreaseObservationCardinalityNext",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "uint160",
          name: "sqrtPriceX96",
          type: "uint160"
        },
        {
          indexed: false,
          internalType: "int24",
          name: "tick",
          type: "int24"
        }
      ],
      name: "Initialize",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "address",
          name: "sender",
          type: "address"
        },
        {
          indexed: true,
          internalType: "address",
          name: "owner",
          type: "address"
        },
        {
          indexed: true,
          internalType: "int24",
          name: "tickLower",
          type: "int24"
        },
        {
          indexed: true,
          internalType: "int24",
          name: "tickUpper",
          type: "int24"
        },
        {
          indexed: false,
          internalType: "uint128",
          name: "amount",
          type: "uint128"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "amount0",
          type: "uint256"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "amount1",
          type: "uint256"
        }
      ],
      name: "Mint",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: false,
          internalType: "uint8",
          name: "feeProtocol0Old",
          type: "uint8"
        },
        {
          indexed: false,
          internalType: "uint8",
          name: "feeProtocol1Old",
          type: "uint8"
        },
        {
          indexed: false,
          internalType: "uint8",
          name: "feeProtocol0New",
          type: "uint8"
        },
        {
          indexed: false,
          internalType: "uint8",
          name: "feeProtocol1New",
          type: "uint8"
        }
      ],
      name: "SetFeeProtocol",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "sender",
          type: "address"
        },
        {
          indexed: true,
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          indexed: false,
          internalType: "int256",
          name: "amount0",
          type: "int256"
        },
        {
          indexed: false,
          internalType: "int256",
          name: "amount1",
          type: "int256"
        },
        {
          indexed: false,
          internalType: "uint160",
          name: "sqrtPriceX96",
          type: "uint160"
        },
        {
          indexed: false,
          internalType: "uint128",
          name: "liquidity",
          type: "uint128"
        },
        {
          indexed: false,
          internalType: "int24",
          name: "tick",
          type: "int24"
        }
      ],
      name: "Swap",
      type: "event"
    },
    {
      inputs: [
        {
          internalType: "int24",
          name: "tickLower",
          type: "int24"
        },
        {
          internalType: "int24",
          name: "tickUpper",
          type: "int24"
        },
        {
          internalType: "uint128",
          name: "amount",
          type: "uint128"
        }
      ],
      name: "burn",
      outputs: [
        {
          internalType: "uint256",
          name: "amount0",
          type: "uint256"
        },
        {
          internalType: "uint256",
          name: "amount1",
          type: "uint256"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          internalType: "int24",
          name: "tickLower",
          type: "int24"
        },
        {
          internalType: "int24",
          name: "tickUpper",
          type: "int24"
        },
        {
          internalType: "uint128",
          name: "amount0Requested",
          type: "uint128"
        },
        {
          internalType: "uint128",
          name: "amount1Requested",
          type: "uint128"
        }
      ],
      name: "collect",
      outputs: [
        {
          internalType: "uint128",
          name: "amount0",
          type: "uint128"
        },
        {
          internalType: "uint128",
          name: "amount1",
          type: "uint128"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          internalType: "uint128",
          name: "amount0Requested",
          type: "uint128"
        },
        {
          internalType: "uint128",
          name: "amount1Requested",
          type: "uint128"
        }
      ],
      name: "collectProtocol",
      outputs: [
        {
          internalType: "uint128",
          name: "amount0",
          type: "uint128"
        },
        {
          internalType: "uint128",
          name: "amount1",
          type: "uint128"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [],
      name: "factory",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "fee",
      outputs: [
        {
          internalType: "uint24",
          name: "",
          type: "uint24"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "feeGrowthGlobal0X128",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "feeGrowthGlobal1X128",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "amount0",
          type: "uint256"
        },
        {
          internalType: "uint256",
          name: "amount1",
          type: "uint256"
        },
        {
          internalType: "bytes",
          name: "data",
          type: "bytes"
        }
      ],
      name: "flash",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "uint16",
          name: "observationCardinalityNext",
          type: "uint16"
        }
      ],
      name: "increaseObservationCardinalityNext",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "uint160",
          name: "sqrtPriceX96",
          type: "uint160"
        }
      ],
      name: "initialize",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [],
      name: "liquidity",
      outputs: [
        {
          internalType: "uint128",
          name: "",
          type: "uint128"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "maxLiquidityPerTick",
      outputs: [
        {
          internalType: "uint128",
          name: "",
          type: "uint128"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          internalType: "int24",
          name: "tickLower",
          type: "int24"
        },
        {
          internalType: "int24",
          name: "tickUpper",
          type: "int24"
        },
        {
          internalType: "uint128",
          name: "amount",
          type: "uint128"
        },
        {
          internalType: "bytes",
          name: "data",
          type: "bytes"
        }
      ],
      name: "mint",
      outputs: [
        {
          internalType: "uint256",
          name: "amount0",
          type: "uint256"
        },
        {
          internalType: "uint256",
          name: "amount1",
          type: "uint256"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "index",
          type: "uint256"
        }
      ],
      name: "observations",
      outputs: [
        {
          internalType: "uint32",
          name: "blockTimestamp",
          type: "uint32"
        },
        {
          internalType: "int56",
          name: "tickCumulative",
          type: "int56"
        },
        {
          internalType: "uint160",
          name: "secondsPerLiquidityCumulativeX128",
          type: "uint160"
        },
        {
          internalType: "bool",
          name: "initialized",
          type: "bool"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "uint32[]",
          name: "secondsAgos",
          type: "uint32[]"
        }
      ],
      name: "observe",
      outputs: [
        {
          internalType: "int56[]",
          name: "tickCumulatives",
          type: "int56[]"
        },
        {
          internalType: "uint160[]",
          name: "secondsPerLiquidityCumulativeX128s",
          type: "uint160[]"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "bytes32",
          name: "key",
          type: "bytes32"
        }
      ],
      name: "positions",
      outputs: [
        {
          internalType: "uint128",
          name: "_liquidity",
          type: "uint128"
        },
        {
          internalType: "uint256",
          name: "feeGrowthInside0LastX128",
          type: "uint256"
        },
        {
          internalType: "uint256",
          name: "feeGrowthInside1LastX128",
          type: "uint256"
        },
        {
          internalType: "uint128",
          name: "tokensOwed0",
          type: "uint128"
        },
        {
          internalType: "uint128",
          name: "tokensOwed1",
          type: "uint128"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "protocolFees",
      outputs: [
        {
          internalType: "uint128",
          name: "token0",
          type: "uint128"
        },
        {
          internalType: "uint128",
          name: "token1",
          type: "uint128"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "uint8",
          name: "feeProtocol0",
          type: "uint8"
        },
        {
          internalType: "uint8",
          name: "feeProtocol1",
          type: "uint8"
        }
      ],
      name: "setFeeProtocol",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [],
      name: "slot0",
      outputs: [
        {
          internalType: "uint160",
          name: "sqrtPriceX96",
          type: "uint160"
        },
        {
          internalType: "int24",
          name: "tick",
          type: "int24"
        },
        {
          internalType: "uint16",
          name: "observationIndex",
          type: "uint16"
        },
        {
          internalType: "uint16",
          name: "observationCardinality",
          type: "uint16"
        },
        {
          internalType: "uint16",
          name: "observationCardinalityNext",
          type: "uint16"
        },
        {
          internalType: "uint8",
          name: "feeProtocol",
          type: "uint8"
        },
        {
          internalType: "bool",
          name: "unlocked",
          type: "bool"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "int24",
          name: "tickLower",
          type: "int24"
        },
        {
          internalType: "int24",
          name: "tickUpper",
          type: "int24"
        }
      ],
      name: "snapshotCumulativesInside",
      outputs: [
        {
          internalType: "int56",
          name: "tickCumulativeInside",
          type: "int56"
        },
        {
          internalType: "uint160",
          name: "secondsPerLiquidityInsideX128",
          type: "uint160"
        },
        {
          internalType: "uint32",
          name: "secondsInside",
          type: "uint32"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          internalType: "bool",
          name: "zeroForOne",
          type: "bool"
        },
        {
          internalType: "int256",
          name: "amountSpecified",
          type: "int256"
        },
        {
          internalType: "uint160",
          name: "sqrtPriceLimitX96",
          type: "uint160"
        },
        {
          internalType: "bytes",
          name: "data",
          type: "bytes"
        }
      ],
      name: "swap",
      outputs: [
        {
          internalType: "int256",
          name: "amount0",
          type: "int256"
        },
        {
          internalType: "int256",
          name: "amount1",
          type: "int256"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "int16",
          name: "wordPosition",
          type: "int16"
        }
      ],
      name: "tickBitmap",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "tickSpacing",
      outputs: [
        {
          internalType: "int24",
          name: "",
          type: "int24"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "int24",
          name: "tick",
          type: "int24"
        }
      ],
      name: "ticks",
      outputs: [
        {
          internalType: "uint128",
          name: "liquidityGross",
          type: "uint128"
        },
        {
          internalType: "int128",
          name: "liquidityNet",
          type: "int128"
        },
        {
          internalType: "uint256",
          name: "feeGrowthOutside0X128",
          type: "uint256"
        },
        {
          internalType: "uint256",
          name: "feeGrowthOutside1X128",
          type: "uint256"
        },
        {
          internalType: "int56",
          name: "tickCumulativeOutside",
          type: "int56"
        },
        {
          internalType: "uint160",
          name: "secondsPerLiquidityOutsideX128",
          type: "uint160"
        },
        {
          internalType: "uint32",
          name: "secondsOutside",
          type: "uint32"
        },
        {
          internalType: "bool",
          name: "initialized",
          type: "bool"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "token0",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "token1",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address"
        }
      ],
      stateMutability: "view",
      type: "function"
    }
  ],
  bytecode: "0x",
  deployedBytecode: "0x",
  linkReferences: {},
  deployedLinkReferences: {}
};

// src/crosschain/trade/uniV3Trade/pool.ts
var import_v3_sdk = require("@uniswap/v3-sdk");
var import_ethers48 = require("ethers");
var import_sdk_core = require("@uniswap/sdk-core");
async function getPool(factory, tokenA, tokenB, fee, initCodeHash) {
  const currentPoolAddress = (0, import_v3_sdk.computePoolAddress)({
    factoryAddress: factory.address,
    tokenA,
    tokenB,
    fee,
    initCodeHashManualOverride: initCodeHash
  });
  const poolContract = new import_ethers48.ethers.Contract(currentPoolAddress, IUniswapV3Pool_default.abi, factory.provider);
  const [token0, token1, liquidity, slot0] = await Promise.all([
    poolContract.token0(),
    poolContract.token1(),
    poolContract.liquidity(),
    poolContract.slot0()
  ]);
  if (liquidity.isZero()) {
    throw new Error(`Liquidity pool is empty: ${tokenA.address}/${tokenB.address}/${fee}`);
  }
  const tokens = {
    [tokenA.address]: tokenA,
    [tokenB.address]: tokenB
  };
  return new import_v3_sdk.Pool(
    new import_sdk_core.Token(tokens[token0].chainId, token0, tokens[token0].decimals),
    new import_sdk_core.Token(tokens[token1].chainId, token1, tokens[token1].decimals),
    fee,
    slot0[0].toString(),
    // sqrtPriceX96
    liquidity.toString(),
    slot0[1]
    // tick
  );
}

// src/crosschain/trade/uniV3Trade.ts
var import_sdk_core5 = require("@uniswap/sdk-core");

// src/crosschain/trade/uniV3Trade/getOutputQuote.ts
var import_sdk_core2 = require("@uniswap/sdk-core");
var import_v3_sdk2 = require("@uniswap/v3-sdk");
var import_ethers49 = require("ethers");
async function getOutputQuote(quoter, currencyAmount, route) {
  const { calldata } = await import_v3_sdk2.SwapQuoter.quoteCallParameters(route, currencyAmount, import_sdk_core2.TradeType.EXACT_INPUT, {
    useQuoterV2: true
  });
  const quoteCallReturnData = await quoter.provider.call({
    to: quoter.address,
    data: calldata
  });
  return import_ethers49.ethers.utils.defaultAbiCoder.decode(["uint256"], quoteCallReturnData);
}

// src/crosschain/trade/uniV3Trade.ts
var import_jsbi12 = __toESM(require("jsbi"));

// src/crosschain/trade/uniV3Trade/toUniTypes.ts
var import_sdk_core4 = require("@uniswap/sdk-core");

// src/crosschain/trade/uniV3Trade/gasToken.ts
var import_sdk_core3 = require("@uniswap/sdk-core");
var import_tiny_invariant10 = __toESM(require("tiny-invariant"));
var _GasToken = class _GasToken extends import_sdk_core3.NativeCurrency {
  constructor(chainId) {
    super(chainId, 18, "GAS", "GAS");
  }
  get wrapped() {
    const weth9 = WETH[this.chainId];
    (0, import_tiny_invariant10.default)(!!weth9, "WRAPPED");
    return toUniToken(weth9);
  }
  static onChain(chainId) {
    return this._cache[chainId] ?? (this._cache[chainId] = new _GasToken(chainId));
  }
  equals(other) {
    return other.isNative && other.chainId === this.chainId;
  }
};
_GasToken._cache = {};
var GasToken = _GasToken;

// src/crosschain/trade/uniV3Trade/toUniTypes.ts
function toUniToken(token) {
  return new import_sdk_core4.Token(token.chainId, token.address, token.decimals);
}
function toUniCurrency(token) {
  if (token.isNative) {
    return GasToken.onChain(token.chainId);
  }
  return toUniToken(token);
}
function toUniCurrencyAmount(tokenAmount) {
  const currency = toUniCurrency(tokenAmount.token);
  return import_sdk_core4.CurrencyAmount.fromRawAmount(currency, tokenAmount.raw.toString());
}

// src/crosschain/trade/uniV3Trade.ts
var import_tiny_invariant11 = __toESM(require("tiny-invariant"));
var POSSIBLE_FEES2 = [import_v3_sdk3.FeeAmount.LOWEST, import_v3_sdk3.FeeAmount.LOW, import_v3_sdk3.FeeAmount.MEDIUM, import_v3_sdk3.FeeAmount.HIGH];
var DEPLOYMENT_ADDRESSES = {
  [130 /* UNICHAIN_MAINNET */]: {
    factory: "0x1f98400000000000000000000000000000000003",
    quoter: "0x385a5cf5f83e99f7bb2852b6a19c3538b9fa7658",
    swap02: "0x73855d06de49d0fe4a9c42636ba96c62da12ff9c",
    baseTokens: [
      new Token2({
        name: "USD Coin",
        symbol: "USDC",
        address: "0x078D782b760474a361dDA0AF3839290b0EF57AD6",
        chainId: 130 /* UNICHAIN_MAINNET */,
        decimals: 6
      }),
      new Token2({
        name: "Wrapped ETH",
        symbol: "WETH",
        address: "0x4200000000000000000000000000000000000006",
        chainId: 130 /* UNICHAIN_MAINNET */,
        decimals: 18
      })
    ]
  },
  [1868 /* SONEIUM_MAINNET */]: {
    factory: "0x3E4ff8662820E3dec3DACDb66ef1FFad5Dc5Ab83",
    quoter: "0x715BE426a0c8E0A14aBc0130f08F06aa41B1f218",
    swap02: "0xd2DdF58Bcc188F335061e41C73ED2A8894c2dD98",
    baseTokens: [
      new Token2({
        name: "ASTR",
        symbol: "ASTR",
        address: "0x2CAE934a1e84F693fbb78CA5ED3B0A6893259441",
        chainId: 1868 /* SONEIUM_MAINNET */,
        decimals: 18
      }),
      new Token2({
        name: "USD Coin",
        symbol: "USDC",
        address: "0xbA9986D2381edf1DA03B0B9c1f8b00dc4AacC369",
        chainId: 1868 /* SONEIUM_MAINNET */,
        decimals: 6
      }),
      new Token2({
        name: "Wrapped ETH",
        symbol: "WETH",
        address: "0x4200000000000000000000000000000000000006",
        chainId: 1868 /* SONEIUM_MAINNET */,
        decimals: 18
      })
    ]
  },
  [999 /* HYPERLIQUID_MAINNET */]: {
    factory: "0xB1c0fa0B789320044A6F623cFe5eBda9562602E3",
    quoter: "0x03A918028f22D9E1473B7959C927AD7425A45C7C",
    swap02: "0x6D99e7f6747AF2cDbB5164b6DD50e40D4fDe1e77",
    initCodeHash: "0xe3572921be1688dba92df30c6781b8770499ff274d20ae9b325f4242634774fb",
    baseTokens: [
      new Token2({
        name: "Wrapped HYPE",
        symbol: "WHYPE",
        address: "0x5555555555555555555555555555555555555555",
        chainId: 999 /* HYPERLIQUID_MAINNET */,
        decimals: 18
      })
    ]
  },
  [80094 /* BERACHAIN_MAINNET */]: {
    factory: "0xD84CBf0B02636E7f53dB9E5e45A616E05d710990",
    quoter: "0x644C8D6E501f7C994B74F5ceA96abe65d0BA662B",
    swap02: "0xe301E48F77963D3F7DbD2a4796962Bd7f3867Fb4",
    initCodeHash: "0xd8e2091bc519b509176fc39aeb148cc8444418d3ce260820edc44e806c2c2339",
    baseTokens: [
      new Token2({
        name: "Wrapped BERA",
        symbol: "WBERA",
        address: "0x6969696969696969696969696969696969696969",
        chainId: 80094 /* BERACHAIN_MAINNET */,
        decimals: 18
      })
    ]
  }
};
var UniV3Trade = class _UniV3Trade extends SymbiosisTrade {
  constructor(params) {
    super(params);
    const { symbiosis, deadline } = params;
    this.symbiosis = symbiosis;
    this.deadline = deadline;
  }
  static isSupported(chainId) {
    return !!DEPLOYMENT_ADDRESSES[chainId];
  }
  get tradeType() {
    return "uni-v3";
  }
  async init() {
    const chainId = this.tokenAmountIn.token.chainId;
    const addresses = DEPLOYMENT_ADDRESSES[chainId];
    if (!addresses) {
      throw new UniV3TradeError("Unsupported chain");
    }
    const provider = this.symbiosis.getProvider(chainId);
    const { quoter, swap02: routerAddress, factory, initCodeHash, baseTokens } = addresses;
    const currencyIn = toUniCurrency(this.tokenAmountIn.token);
    const currencyOut = toUniCurrency(this.tokenOut);
    const factoryContract = UniV3Factory__factory.connect(factory, provider);
    const quoterContract = UniV3Quoter__factory.connect(quoter, provider);
    const routePromises = POSSIBLE_FEES2.map(async (fee) => {
      const pool = await getPool(factoryContract, currencyIn.wrapped, currencyOut.wrapped, fee, initCodeHash);
      return new import_v3_sdk3.Route([pool], currencyIn, currencyOut);
    });
    const extraRoutePromises = baseTokens.map((baseToken) => {
      const baseCurrency = toUniCurrency(baseToken).wrapped;
      if (baseCurrency.equals(currencyIn.wrapped) || baseCurrency.equals(currencyOut.wrapped)) {
        return;
      }
      return POSSIBLE_FEES2.map(async (baseFee) => {
        const results = await Promise.allSettled([
          getPool(factoryContract, currencyIn.wrapped, baseCurrency, baseFee, initCodeHash),
          getPool(factoryContract, baseCurrency, currencyOut.wrapped, baseFee, initCodeHash)
        ]);
        const extraPools = results.map((result) => {
          if (result.status === "rejected") {
            return;
          }
          return result.value;
        }).filter(Boolean);
        if (extraPools.length < 2) {
          return;
        }
        return new import_v3_sdk3.Route(extraPools, currencyIn, currencyOut);
      });
    }).flat();
    const routesResults = await Promise.allSettled([...routePromises, ...extraRoutePromises]);
    const routes = routesResults.map((result) => {
      if (result.status === "rejected") {
        return;
      }
      return result.value;
    }).filter(Boolean);
    const quotaResults = await Promise.allSettled(
      routes.map(async (route) => {
        const quota = await getOutputQuote(quoterContract, toUniCurrencyAmount(this.tokenAmountIn), route);
        return {
          route,
          amountOut: import_jsbi12.default.BigInt(quota.toString())
        };
      })
    );
    let bestRoute = void 0;
    let bestAmountOut = void 0;
    const errors = [];
    for (const result of quotaResults) {
      if (result.status === "rejected") {
        errors.push(new UniV3TradeError(JSON.stringify(result.reason?.toString())));
        continue;
      }
      if (!result.value) {
        continue;
      }
      const { amountOut: amountOut2, route } = result.value;
      if (!bestAmountOut || import_jsbi12.default.greaterThan(amountOut2, bestAmountOut)) {
        bestAmountOut = amountOut2;
        bestRoute = route;
      }
    }
    if (!bestAmountOut || !bestRoute) {
      throw new AggregateError(errors, "UniV3Route not found");
    }
    const amountOut = new TokenAmount(this.tokenOut, bestAmountOut.toString());
    const trade = import_v3_sdk3.Trade.createUncheckedTrade({
      route: bestRoute,
      inputAmount: import_sdk_core5.CurrencyAmount.fromRawAmount(currencyIn, this.tokenAmountIn.raw.toString()),
      outputAmount: import_sdk_core5.CurrencyAmount.fromRawAmount(currencyOut, bestAmountOut),
      tradeType: import_sdk_core5.TradeType.EXACT_INPUT
    });
    const slippageTolerance = new import_sdk_core5.Percent(this.slippage, BIPS_BASE);
    const options = {
      slippageTolerance,
      deadline: this.deadline,
      recipient: this.to
    };
    const methodParameters = _UniV3Trade.swapCallParameters([trade], options, routerAddress);
    const amountOutMinRaw = getMinAmount(this.slippage, bestAmountOut);
    const amountOutMin = new TokenAmount(this.tokenOut, amountOutMinRaw);
    const priceImpact = new Percent(
      import_jsbi12.default.multiply(trade.priceImpact.numerator, import_jsbi12.default.BigInt("-1")),
      trade.priceImpact.denominator
    );
    const callData = methodParameters.calldata;
    const { amountOffset, minReceivedOffset, minReceivedOffset2 } = _UniV3Trade.getOffsets(callData);
    this.out = {
      amountOut,
      amountOutMin,
      routerAddress,
      route: [this.tokenAmountIn.token, this.tokenOut],
      callData,
      callDataOffset: amountOffset,
      minReceivedOffset,
      minReceivedOffset2,
      priceImpact
    };
    return this;
  }
  static getOffsets(callData) {
    const methods = [
      {
        // exactInputSingle
        sigHash: "04e45aaf",
        offset: 4 + 5 * 32,
        minReceivedOffset: 4 + 6 * 32,
        minReceivedOffset2: void 0
      },
      {
        // exactInput
        sigHash: "b858183f",
        offset: 4 + 4 * 32,
        minReceivedOffset: 4 + 5 * 32,
        minReceivedOffset2: void 0
      },
      {
        // multicall
        sigHash: "ac9650d8",
        offset: 328,
        minReceivedOffset: 360,
        minReceivedOffset2: 488
      }
    ];
    const sigHash = callData.slice(2, 10);
    const method = methods.find((i) => {
      return i.sigHash === sigHash;
    });
    if (method === void 0) {
      throw new UniV3TradeError("Unknown swap method encoded to calldata");
    }
    return {
      amountOffset: method.offset,
      minReceivedOffset: method.minReceivedOffset,
      minReceivedOffset2: method.minReceivedOffset2
    };
  }
  static swapCallParameters(trades, options, routerAddress) {
    if (!Array.isArray(trades)) {
      trades = [trades];
    }
    const sampleTrade = trades[0];
    const tokenIn = sampleTrade.inputAmount.currency.wrapped;
    const tokenOut = sampleTrade.outputAmount.currency.wrapped;
    (0, import_tiny_invariant11.default)(
      trades.every((trade) => trade.inputAmount.currency.wrapped.equals(tokenIn)),
      "TOKEN_IN_DIFF"
    );
    (0, import_tiny_invariant11.default)(
      trades.every((trade) => trade.outputAmount.currency.wrapped.equals(tokenOut)),
      "TOKEN_OUT_DIFF"
    );
    const calldatas = [];
    const ZERO_IN = import_sdk_core5.CurrencyAmount.fromRawAmount(trades[0].inputAmount.currency, 0);
    const ZERO_OUT = import_sdk_core5.CurrencyAmount.fromRawAmount(trades[0].outputAmount.currency, 0);
    const totalAmountOut = trades.reduce(
      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),
      ZERO_OUT
    );
    const mustRefund = sampleTrade.inputAmount.currency.isNative && sampleTrade.tradeType === import_sdk_core5.TradeType.EXACT_OUTPUT;
    const inputIsNative = sampleTrade.inputAmount.currency.isNative;
    const outputIsNative = sampleTrade.outputAmount.currency.isNative;
    const routerMustCustody = outputIsNative || !!options.fee;
    const totalValue = inputIsNative ? trades.reduce((sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)), ZERO_IN) : ZERO_IN;
    if (options.inputTokenPermit) {
      (0, import_tiny_invariant11.default)(sampleTrade.inputAmount.currency.isToken, "NON_TOKEN_PERMIT");
      calldatas.push(import_v3_sdk3.SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit));
    }
    const recipient = (0, import_sdk_core5.validateAndParseAddress)(options.recipient);
    for (const trade of trades) {
      for (const { route, inputAmount, outputAmount } of trade.swaps) {
        const amountIn = (0, import_v3_sdk3.toHex)(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient);
        const amountOut = (0, import_v3_sdk3.toHex)(
          trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient
        );
        const singleHop = route.pools.length === 1;
        if (singleHop) {
          if (trade.tradeType === import_sdk_core5.TradeType.EXACT_INPUT) {
            const exactInputSingleParams = {
              tokenIn: route.tokenPath[0].address,
              tokenOut: route.tokenPath[1].address,
              fee: route.pools[0].fee,
              recipient: routerMustCustody ? routerAddress : recipient,
              amountIn,
              amountOutMinimum: amountOut,
              sqrtPriceLimitX96: (0, import_v3_sdk3.toHex)(options.sqrtPriceLimitX96 ?? 0)
            };
            calldatas.push(
              UniV3Router02__factory.createInterface().encodeFunctionData("exactInputSingle", [
                exactInputSingleParams
              ])
            );
          } else {
            const exactOutputSingleParams = {
              tokenIn: route.tokenPath[0].address,
              tokenOut: route.tokenPath[1].address,
              fee: route.pools[0].fee,
              recipient: routerMustCustody ? routerAddress : recipient,
              amountOut,
              amountInMaximum: amountIn,
              sqrtPriceLimitX96: (0, import_v3_sdk3.toHex)(options.sqrtPriceLimitX96 ?? 0)
            };
            calldatas.push(
              UniV3Router02__factory.createInterface().encodeFunctionData("exactOutputSingle", [
                exactOutputSingleParams
              ])
            );
          }
        } else {
          (0, import_tiny_invariant11.default)(options.sqrtPriceLimitX96 === void 0, "MULTIHOP_PRICE_LIMIT");
          const path = (0, import_v3_sdk3.encodeRouteToPath)(route, trade.tradeType === import_sdk_core5.TradeType.EXACT_OUTPUT);
          if (trade.tradeType === import_sdk_core5.TradeType.EXACT_INPUT) {
            const exactInputParams = {
              path,
              recipient: routerMustCustody ? routerAddress : recipient,
              amountIn,
              amountOutMinimum: amountOut
            };
            calldatas.push(
              UniV3Router02__factory.createInterface().encodeFunctionData("exactInput", [
                exactInputParams
              ])
            );
          } else {
            const exactOutputParams = {
              path,
              recipient: routerMustCustody ? routerAddress : recipient,
              amountOut,
              amountInMaximum: amountIn
            };
            calldatas.push(
              UniV3Router02__factory.createInterface().encodeFunctionData("exactOutput", [
                exactOutputParams
              ])
            );
          }
        }
      }
    }
    if (routerMustCustody) {
      if (options.fee) {
        if (outputIsNative) {
          calldatas.push(import_v3_sdk3.Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient, options.fee));
        } else {
          calldatas.push(
            import_v3_sdk3.Payments.encodeSweepToken(
              sampleTrade.outputAmount.currency.wrapped,
              totalAmountOut.quotient,
              recipient,
              options.fee
            )
          );
        }
      } else {
        calldatas.push(import_v3_sdk3.Payments.encodeUnwrapWETH9(totalAmountOut.quotient, recipient));
      }
    }
    if (mustRefund) {
      calldatas.push(import_v3_sdk3.Payments.encodeRefundETH());
    }
    return {
      calldata: import_v3_sdk3.Multicall.encodeMulticall(calldatas),
      value: (0, import_v3_sdk3.toHex)(totalValue.quotient)
    };
  }
};

// src/crosschain/trade/aggregatorTrade.ts
var import_ethers50 = require("ethers");
var TradeNotInitializedError = class extends Error {
  constructor(msg) {
    super(`Trade is not initialized: ${msg}`);
  }
};
var AggregatorTrade = class extends SymbiosisTrade {
  constructor(params) {
    super(params);
    this.params = params;
    this.preferOneInchUsage = params.preferOneInchUsage || false;
  }
  get tradeType() {
    this.assertTradeInitialized("tradeType");
    return this.trade.tradeType;
  }
  async init() {
    const { from, slippage, symbiosis, deadline, to, tokenAmountIn, tokenAmountInMin, tokenOut, oneInchProtocols } = this.params;
    const trades = [];
    const errors = [];
    function successTrade(trade) {
      trades.push(trade);
    }
    function failTrade(e) {
      trades.push(void 0);
      errors.push(e);
    }
    const clientId = import_ethers50.utils.parseBytes32String(symbiosis.clientId);
    const isOneInchClient = clientId === "1inch";
    const isOpenOceanClient = clientId === "openocean";
    const isOtherClient = !isOneInchClient && !isOpenOceanClient;
    const isOneInchAvailable = OneInchTrade.isAvailable(tokenAmountIn.token.chainId) && !isOpenOceanClient;
    const isOpenOceanAvailable = OpenOceanTrade.isAvailable(tokenAmountIn.token.chainId) && !isOneInchClient;
    let isOneInchUsage = isOneInchAvailable;
    let isOpenOceanUsage = isOpenOceanAvailable;
    const isSignificantAmount = tokenAmountIn.token.symbol?.includes("USD") && parseFloat(tokenAmountIn.toSignificant()) >= 1e4 || tokenAmountIn.token.symbol?.includes("ETH") && parseFloat(tokenAmountIn.toSignificant()) >= 2.5;
    if (this.preferOneInchUsage && isOneInchAvailable) {
      isOpenOceanUsage = false;
    } else if (!isSignificantAmount) {
      const aggregators = [];
      if (isOneInchAvailable) {
        aggregators.push("1inch");
      }
      if (isOpenOceanAvailable) {
        aggregators.push("open-ocean");
      }
      const i = Math.floor(Math.random() * aggregators.length);
      isOneInchUsage = aggregators[i] === "1inch";
      isOpenOceanUsage = aggregators[i] === "open-ocean";
    }
    let tradesCount = 0;
    if (isOneInchUsage) {
      const oneInchTrade = new OneInchTrade({
        symbiosis,
        tokenAmountIn,
        tokenAmountInMin,
        tokenOut,
        from,
        to,
        slippage,
        protocols: oneInchProtocols
      });
      tradesCount += 1;
      oneInchTrade.init().then(successTrade).catch((e) => {
        symbiosis.trackAggregatorError({
          provider: "1inch",
          reason: e.message,
          chain_id: String(tokenOut.chain?.id)
        });
        failTrade(e);
      });
    }
    if (isOpenOceanUsage) {
      const openOceanTrade = new OpenOceanTrade({
        symbiosis,
        to,
        tokenAmountIn,
        tokenAmountInMin,
        tokenOut,
        slippage
      });
      tradesCount += 1;
      openOceanTrade.init().then(successTrade).catch((e) => {
        symbiosis.trackAggregatorError({
          provider: "OpenOcean",
          reason: e.message,
          chain_id: String(tokenOut.chain?.id)
        });
        failTrade(e);
      });
    }
    if (isOtherClient && IzumiTrade.isSupported(tokenAmountIn.token.chainId)) {
      const izumiTrade = new IzumiTrade({
        symbiosis,
        tokenAmountIn,
        tokenAmountInMin,
        tokenOut,
        slippage,
        deadline,
        to
      });
      tradesCount += 1;
      izumiTrade.init().then(successTrade).catch(failTrade);
    }
    if (isOtherClient && UniV3Trade.isSupported(tokenAmountIn.token.chainId)) {
      const uniV3Trade = new UniV3Trade({
        symbiosis,
        tokenAmountIn,
        tokenAmountInMin,
        tokenOut,
        slippage,
        deadline,
        to
      });
      tradesCount += 1;
      uniV3Trade.init().then(successTrade).catch(failTrade);
    }
    if (isOtherClient && UniV2Trade.isSupported(symbiosis, tokenAmountIn.token.chainId)) {
      const uniV2Trade = new UniV2Trade({
        symbiosis,
        tokenAmountIn,
        tokenAmountInMin,
        tokenOut,
        to,
        slippage,
        deadline
      });
      tradesCount += 1;
      uniV2Trade.init().then(successTrade).catch(failTrade);
    }
    this.trade = await new Promise((resolve, reject) => {
      const startTime = Date.now();
      const intervalId = setInterval(() => {
        const diff = Date.now() - startTime;
        const timeout = diff >= 2e3;
        const allTradesFinished = trades.length === tradesCount;
        const successTrades = trades.filter(Boolean);
        if (allTradesFinished || timeout) {
          const theBestTrade = this.selectTheBestTrade(successTrades);
          if (theBestTrade) {
            resolve(theBestTrade);
          } else {
            reject(new AggregateError(errors, "Aggregator trade failed"));
          }
          clearInterval(intervalId);
          return;
        } else if (diff >= 500) {
          const oneInch = successTrades.find((trade) => trade.constructor.name === OneInchTrade.name);
          const openOcean = successTrades.find((trade) => trade.constructor.name === OpenOceanTrade.name);
          if (oneInch || openOcean) {
            resolve(this.selectTheBestTrade(successTrades));
            clearInterval(intervalId);
          }
        }
      }, 50);
    });
    return this;
  }
  selectTheBestTrade(trades) {
    let bestTrade = void 0;
    for (const trade of trades) {
      if (!bestTrade) {
        bestTrade = trade;
        continue;
      }
      if (trade.amountOut.greaterThan(bestTrade.amountOut)) {
        bestTrade = trade;
      }
    }
    return bestTrade;
  }
  get amountOut() {
    this.assertTradeInitialized("amountOut");
    return this.trade.amountOut;
  }
  get amountOutMin() {
    this.assertTradeInitialized("amountOutMin");
    return this.trade.amountOutMin;
  }
  get routerAddress() {
    this.assertTradeInitialized("routerAddress");
    return this.trade.routerAddress;
  }
  get route() {
    this.assertTradeInitialized("route");
    return this.trade.route;
  }
  get callData() {
    this.assertTradeInitialized("callData");
    return this.trade.callData;
  }
  get callDataOffset() {
    this.assertTradeInitialized("callDataOffset");
    return this.trade.callDataOffset;
  }
  get minReceivedOffset() {
    this.assertTradeInitialized("minReceivedOffset");
    return this.trade.minReceivedOffset;
  }
  get priceImpact() {
    this.assertTradeInitialized("priceImpact");
    return this.trade.priceImpact;
  }
  get functionSelector() {
    this.assertTradeInitialized("functionSelector");
    return this.trade.functionSelector;
  }
  applyAmountIn(newAmountIn, newAmountInMin) {
    this.assertTradeInitialized("applyAmountIn");
    this.trade.applyAmountIn(newAmountIn, newAmountInMin);
  }
  get fees() {
    this.assertTradeInitialized("fees");
    return this.trade.fees;
  }
  assertTradeInitialized(msg) {
    if (!this.trade) {
      throw new TradeNotInitializedError(msg);
    }
  }
};

// src/crosschain/trade/octoPoolTrade.ts
var import_ethers51 = require("ethers");
var OctoPoolTrade = class extends SymbiosisTrade {
  constructor(params) {
    super(params);
    const { symbiosis, omniPoolConfig, deadline } = params;
    this.symbiosis = symbiosis;
    this.deadline = deadline;
    this.poolConfig = omniPoolConfig;
  }
  get tradeType() {
    return "octopool";
  }
  async init() {
    const indexIn = this.symbiosis.getOmniPoolTokenIndex(this.poolConfig, this.tokenAmountIn.token);
    const indexOut = this.symbiosis.getOmniPoolTokenIndex(this.poolConfig, this.tokenOut);
    const amountIn = import_ethers51.BigNumber.from(this.tokenAmountIn.raw.toString());
    const amountInMin = import_ethers51.BigNumber.from(this.tokenAmountInMin.raw.toString());
    const quote = await this.quote(indexIn, indexOut, amountIn);
    let quoteMin = quote;
    if (amountInMin.lt(amountIn)) {
      quoteMin = quote.mul(amountInMin).div(amountIn);
    }
    quoteMin = import_ethers51.BigNumber.from(getMinAmount(this.slippage, quoteMin.toString()).toString());
    const callData = OmniPool__factory.createInterface().encodeFunctionData("swap", [
      indexIn,
      indexOut,
      amountIn.toString(),
      quoteMin.toString(),
      this.to,
      this.deadline
    ]);
    const amountOut = new TokenAmount(this.tokenOut, quote.toString());
    const amountOutMin = new TokenAmount(this.tokenOut, quoteMin.toString());
    const priceImpact = calculatePriceImpact(this.tokenAmountIn, amountOut);
    this.symbiosis.trackPriceImpactSwap({
      name_from: `${this.tokenAmountIn.token.symbol}(${(this.tokenAmountIn.token.chainFrom || this.tokenAmountIn.token.chain)?.name})`,
      name_to: `${this.tokenOut.symbol}(${(this.tokenOut.chainFrom || this.tokenOut.chain)?.name})`,
      token_amount: Number(this.tokenAmountIn.toSignificant(4)),
      price_impact: Math.abs(+priceImpact.toSignificant(2))
    });
    this.out = {
      amountOut,
      amountOutMin,
      routerAddress: this.poolConfig.address,
      route: [this.tokenAmountIn.token, this.tokenOut],
      callData,
      callDataOffset: 100,
      minReceivedOffset: 132,
      priceImpact
    };
    return this;
  }
  async quote(indexIn, indexOut, amountIn) {
    const poolOracle = this.symbiosis.omniPoolOracle(this.poolConfig);
    const { actualToAmount } = await poolOracle.quoteFrom(indexIn, indexOut, amountIn);
    return actualToAmount;
  }
};

// src/crosschain/trade/wrapTrade.ts
var UNWRAP_ADDRESSES = {
  [1 /* ETH_MAINNET */]: "0x5ad095DE83693ba063941f2f2C5A0dF02383B651",
  [169 /* MANTA_MAINNET */]: "0xf39D9A9ABb98593ceaC395D7A37c572Da48fCfD5",
  [59144 /* LINEA_MAINNET */]: "0xF5b0861e787706195c98E2F0d2D6EFBDAC1D1e08",
  [1101 /* POLYGON_ZK */]: "0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C",
  [8453 /* BASE_MAINNET */]: "0x8e1d36F9da8CFe842bCf8670A12ACd51c26d195D",
  [534352 /* SCROLL_MAINNET */]: "0x42Cd64f48496dDdfEfF8F3704df9175dbe20d325",
  [42161 /* ARBITRUM_MAINNET */]: "0x5Eb4ED9F745531221FAE41906e11d37642B15da6",
  [42170 /* ARBITRUM_NOVA */]: "0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C",
  [10 /* OPTIMISM_MAINNET */]: "0x88139ad1199e8c78a0804d4bEBF4FbAD89EF9D89",
  [324 /* ZKSYNC_MAINNET */]: "0x1Cd08E632DfC63998add8840c8B9c97A4cA6DAb4",
  [288 /* BOBA_MAINNET */]: "0xA257F3FE4E4032291516DC355eDF90664e9eB932",
  [34443 /* MODE_MAINNET */]: "0xE75C7E85FE6ADd07077467064aD15847E6ba9877",
  [81457 /* BLAST_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [30 /* RSK_MAINNET */]: "0x5b1bab64961cf72822817ef32950ff7fcab28b62",
  [4200 /* MERLIN_MAINNET */]: "0x8a7F930003BedD63A1ebD99C5917FD6aE7E3dedf",
  [810180 /* ZKLINK_MAINNET */]: "0xd17Ee77a10376Dab561d947F5e5FC5cf6de67441",
  [534351 /* SCROLL_SEPOLIA */]: "0x97A5B271421b443b3F53F3DF485B2716Db85fA4b",
  [11155111 /* SEPOLIA_TESTNET */]: "0x97A5B271421b443b3F53F3DF485B2716Db85fA4b",
  [167e3 /* TAIKO_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab",
  [1625 /* GRAVITY_MAINNET */]: "0x1cEaeda3D17936916D0F3E866Aa5Ef861F544840",
  [223 /* BSQUARED_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab",
  [2818 /* MORPH_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab",
  [2345 /* GOAT_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab",
  [2741 /* ABSTRACT_MAINNET */]: "0xaEab9b650cd1e14b60a147B6F55f313E8d6644D5",
  [130 /* UNICHAIN_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab",
  [1868 /* SONEIUM_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab",
  [56 /* BSC_MAINNET */]: "0xda5b1347D43C5b8BF4e334C0bB6f01D1F1070994",
  [204 /* OPBNB_MAINNET */]: "0x45CFd6FB7999328F189aaD2739Fba4Be6C45E5bf",
  [13863860 /* SYMBIOSIS_MAINNET */]: "0x1ebE940c8c0E7D628192Ba6253699e8ce4B876b3",
  [747474 /* KATANA_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [33139 /* APECHAIN_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab"
};
var WrapTrade = class extends SymbiosisTrade {
  static isSupported(tokenIn, tokenOut) {
    const wrappedInToken = wrappedToken(tokenIn);
    if (tokenIn.isNative && wrappedInToken.equals(tokenOut)) {
      return true;
    }
    const unwrapAddress = UNWRAP_ADDRESSES[tokenIn.chainId];
    const wrappedOutToken = wrappedToken(tokenOut);
    return !!unwrapAddress && tokenOut.isNative && wrappedOutToken.equals(tokenIn);
  }
  constructor(params) {
    super({ ...params, slippage: 0 });
  }
  get tradeType() {
    return "wrap";
  }
  async init() {
    const route = [this.tokenAmountIn.token, this.tokenOut];
    const priceImpact = new Percent("0", BIPS_BASE);
    if (this.tokenAmountIn.token.isNative) {
      const wethToken = wrappedToken(this.tokenAmountIn.token);
      const amountOut2 = new TokenAmount(wethToken, this.tokenAmountIn.raw);
      const amountOutMin2 = new TokenAmount(wethToken, this.tokenAmountInMin.raw);
      const wethInterface = Weth__factory.createInterface();
      const callData2 = wethInterface.encodeFunctionData("deposit");
      const functionSelector2 = getFunctionSelector(wethInterface.getFunction("deposit"));
      this.out = {
        amountOut: amountOut2,
        amountOutMin: amountOutMin2,
        routerAddress: wethToken.address,
        route,
        callData: callData2,
        functionSelector: functionSelector2,
        callDataOffset: 0,
        minReceivedOffset: 0,
        priceImpact
      };
      return this;
    }
    const unwrapperAddress = UNWRAP_ADDRESSES[this.tokenAmountIn.token.chainId];
    if (!unwrapperAddress) {
      throw new WrapTradeError("Cannot unwrap on this network");
    }
    const amountOut = new TokenAmount(this.tokenOut, this.tokenAmountIn.raw);
    const amountOutMin = new TokenAmount(this.tokenOut, this.tokenAmountInMin.raw);
    const unwrapperInterface = Unwrapper__factory.createInterface();
    const callData = unwrapperInterface.encodeFunctionData("unwrap", [this.tokenAmountIn.raw.toString(), this.to]);
    const functionSelector = getFunctionSelector(unwrapperInterface.getFunction("unwrap"));
    this.out = {
      amountOut,
      amountOutMin,
      routerAddress: unwrapperAddress,
      route,
      callData,
      functionSelector,
      callDataOffset: 4 + 32,
      minReceivedOffset: 0,
      priceImpact
    };
    return this;
  }
};

// src/crosschain/trade/raydiumTrade.ts
var import_web32 = require("@solana/web3.js");
var import_raydium_sdk_v2 = require("@raydium-io/raydium-sdk-v2");
var import_spl_token = require("@solana/spl-token");
var RaydiumTrade = class extends SymbiosisTrade {
  constructor(params) {
    super(params);
    const { symbiosis, to } = params;
    this.symbiosis = symbiosis;
    this.solanaToPubkey = new import_web32.PublicKey(to);
  }
  get tradeType() {
    return "raydium";
  }
  async init() {
    const txVersion = "V0";
    const inputMint = this.tokenAmountIn.token.isNative ? import_spl_token.NATIVE_MINT.toBase58() : this.tokenAmountIn.token.solAddress;
    const outputMint = this.tokenOut.isNative ? import_spl_token.NATIVE_MINT.toBase58() : this.tokenOut.solAddress;
    if (!inputMint || !outputMint) {
      throw new RaydiumTradeError("Solana address not found");
    }
    const quoteResponse = await fetch(
      `${import_raydium_sdk_v2.API_URLS.SWAP_HOST}/compute/swap-base-in?inputMint=${inputMint}&outputMint=${outputMint}&amount=${this.tokenAmountIn.raw.toString()}&slippageBps=${this.slippage}&txVersion=${txVersion}`
    ).then((res) => res.json());
    if (!quoteResponse.success) {
      throw new RaydiumTradeError("Failed to get quote");
    }
    const instructionsResponse = await this.buildInstructions({
      inputMint,
      outputMint,
      txVersion,
      quoteResponse
    });
    const amountOut = new TokenAmount(this.tokenOut, quoteResponse.data.outputAmount);
    const amountOutMin = new TokenAmount(this.tokenOut, quoteResponse.data.otherAmountThreshold);
    const priceImpact = new Percent(BigInt(quoteResponse.data.priceImpactPct * -100), BigInt(1e4));
    this.out = {
      amountOut,
      amountOutMin,
      route: [this.tokenAmountIn.token, this.tokenOut],
      priceImpact,
      routerAddress: "",
      callData: "",
      callDataOffset: 0,
      minReceivedOffset: 0,
      instructions: instructionsResponse[0]
      // all instructions will be in the first array element
    };
    return this;
  }
  async buildInstructions({ inputMint, outputMint, txVersion, quoteResponse }) {
    const isInputSol = this.tokenAmountIn.token.isNative;
    const isOutputSol = this.tokenOut.isNative;
    const priorityFee = await fetch(`${import_raydium_sdk_v2.API_URLS.BASE_HOST}${import_raydium_sdk_v2.API_URLS.PRIORITY_FEE}`).then(
      (res) => res.json()
    );
    const { tokenAccounts: tokenAccountsFrom } = await this.fetchTokenAccountData(this.solanaToPubkey);
    const inputTokenAcc = tokenAccountsFrom.find((a) => a.mint.toBase58() === inputMint)?.publicKey;
    const outputTokenAcc = tokenAccountsFrom.find((a) => a.mint.toBase58() === outputMint)?.publicKey;
    if (!inputTokenAcc && !isInputSol) {
      throw new RaydiumTradeError(
        `Do not have input token account for ${this.tokenAmountIn.token.symbol} ${inputMint}`
      );
    }
    try {
      const swapTransactions = await fetch(`${import_raydium_sdk_v2.API_URLS.SWAP_HOST}/transaction/swap-base-in`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          computeUnitPriceMicroLamports: String(priorityFee.data.default.h),
          swapResponse: quoteResponse,
          txVersion,
          wallet: this.solanaToPubkey,
          wrapSol: isInputSol,
          unwrapSol: isOutputSol,
          inputAccount: isInputSol ? void 0 : inputTokenAcc,
          outputAccount: isOutputSol ? void 0 : outputTokenAcc
        })
      }).then((res) => res.json());
      return swapTransactions.data.map((tx) => tx.transaction);
    } catch (e) {
      throw new RaydiumTradeError(`Failed to fetch swap transactions`, e);
    }
  }
  async fetchTokenAccountData(publicKey) {
    const connection = getSolanaConnection();
    const [solAccountResp, tokenAccountResp, token2022Resp] = await Promise.all([
      connection.getAccountInfo(publicKey),
      connection.getTokenAccountsByOwner(publicKey, {
        programId: import_spl_token.TOKEN_PROGRAM_ID
      }),
      connection.getTokenAccountsByOwner(publicKey, {
        programId: import_spl_token.TOKEN_2022_PROGRAM_ID
      })
    ]);
    const tokenAccountData = (0, import_raydium_sdk_v2.parseTokenAccountResp)({
      owner: publicKey,
      solAccountResp,
      tokenAccountResp: {
        context: tokenAccountResp.context,
        value: [...tokenAccountResp.value, ...token2022Resp.value]
      }
    });
    return tokenAccountData;
  }
};

// src/crosschain/trade/stonfiTrade.ts
var import_sdk = require("@ston-fi/sdk");
var import_api = require("@ston-fi/api");
var StonfiTrade = class extends SymbiosisTrade {
  constructor(params) {
    super(params);
    this.tonClient = null;
    this.routerMetadata = null;
    this.dexContracts = null;
    this.router = null;
    this.symbiosis = params.symbiosis;
    this.deadline = params.deadline;
    this.from = params.from;
    this.stonClient = new import_api.StonApiClient();
  }
  get tradeType() {
    return "stonfi";
  }
  async init() {
    this.tonClient = await this.symbiosis.getTonClient();
    const quote = await this.stonClient.simulateSwap({
      offerAddress: this.tokenAmountIn.token.isNative ? TON_STONFI_PROXY_ADDRESS : this.tokenAmountIn.token.tonAddress,
      offerUnits: this.tokenAmountIn.raw.toString(),
      askAddress: this.tokenOut.isNative ? TON_STONFI_PROXY_ADDRESS : this.tokenOut.tonAddress,
      slippageTolerance: (this.slippage / 1e4).toString()
      // 0.01 is 1%
    });
    await this.initRouterAndContracts(quote.routerAddress);
    const txParams = await this.buildCalldata(this.tokenAmountIn, this.tokenOut, quote.minAskUnits);
    if (!txParams) {
      throw new StonFiTradeError("Failed to build TON swap");
    }
    const amountOut = new TokenAmount(this.tokenOut, quote.askUnits);
    const amountOutMin = new TokenAmount(this.tokenOut, quote.minAskUnits);
    const priceImpact = new Percent(BigInt(Math.ceil(-quote.priceImpact * 1e4)), "10000");
    this.out = {
      amountOut,
      amountOutMin,
      route: [this.tokenAmountIn.token, this.tokenOut],
      priceImpact,
      routerAddress: txParams.to.toString(),
      callData: txParams.body?.toBoc().toString("base64") ?? "",
      callDataOffset: 0,
      minReceivedOffset: 0,
      value: txParams.value,
      fees: [
        {
          provider: "stonfi",
          description: "Stonfi fee",
          value: new TokenAmount(this.tokenOut, quote.feeUnits)
        }
      ]
    };
    return this;
  }
  async initRouterAndContracts(routerAddress) {
    const metadata = await this.stonClient.getRouter(routerAddress);
    this.routerMetadata = metadata;
    this.dexContracts = (0, import_sdk.dexFactory)(metadata);
    if (!this.dexContracts) {
      throw new StonFiTradeError("Failed to get dex contracts");
    }
    const routerContract = this.dexContracts.Router.create(metadata.address);
    this.router = this.tonClient.open(routerContract);
  }
  async buildCalldata(tokenAmountIn, tokenOut, minAskUnits) {
    if (!this.router || !this.dexContracts || !this.routerMetadata) {
      throw new StonFiTradeError("Trade is not initialized");
    }
    const queryId = Math.floor(Math.random() * 1e5);
    const referralParams = {
      referralAddress: TON_REFERRAL_ADDRESS,
      referralValue: 25,
      // 0.25%
      queryId
    };
    if (tokenAmountIn.token.isNative) {
      return this.router.getSwapTonToJettonTxParams({
        userWalletAddress: this.from,
        proxyTon: this.dexContracts.pTON.create(this.routerMetadata.ptonMasterAddress),
        offerAmount: tokenAmountIn.raw.toString(),
        askJettonAddress: tokenOut.tonAddress,
        minAskAmount: minAskUnits,
        ...referralParams
      });
    } else if (tokenOut.isNative) {
      return this.router.getSwapJettonToTonTxParams({
        userWalletAddress: this.from,
        offerJettonAddress: tokenAmountIn.token.tonAddress,
        offerAmount: tokenAmountIn.raw.toString(),
        minAskAmount: minAskUnits,
        proxyTon: this.dexContracts.pTON.create(this.routerMetadata.ptonMasterAddress),
        ...referralParams
      });
    } else {
      return this.router.getSwapJettonToJettonTxParams({
        userWalletAddress: this.from,
        offerJettonAddress: tokenAmountIn.token.tonAddress,
        offerAmount: tokenAmountIn.raw.toString(),
        askJettonAddress: tokenOut.tonAddress,
        minAskAmount: minAskUnits,
        ...referralParams
      });
    }
  }
};

// src/crosschain/trade/dedustTrade.ts
var import_core2 = require("@ton/core");
var import_sdk2 = require("@dedust/sdk");

// src/crosschain/coingecko/constants.ts
var COINGECKO_PLATFORMS = {
  [8453 /* BASE_MAINNET */]: "base",
  [1 /* ETH_MAINNET */]: "ethereum",
  [56 /* BSC_MAINNET */]: "binance-smart-chain",
  [43114 /* AVAX_MAINNET */]: "avalanche",
  [137 /* MATIC_MAINNET */]: "polygon-pos",
  [40 /* TELOS_MAINNET */]: "telos",
  [288 /* BOBA_MAINNET */]: "boba",
  [2222 /* KAVA_MAINNET */]: "kava",
  [324 /* ZKSYNC_MAINNET */]: "zksync",
  [42161 /* ARBITRUM_MAINNET */]: "arbitrum-one",
  [10 /* OPTIMISM_MAINNET */]: "optimistic-ethereum",
  [42170 /* ARBITRUM_NOVA */]: "arbitrum-nova",
  [1101 /* POLYGON_ZK */]: "polygon-zkevm",
  [59144 /* LINEA_MAINNET */]: "linea",
  [5e3 /* MANTLE_MAINNET */]: "mantle",
  [534352 /* SCROLL_MAINNET */]: "scroll",
  [169 /* MANTA_MAINNET */]: "manta-pacific",
  [1088 /* METIS_MAINNET */]: "metis-andromeda",
  [34443 /* MODE_MAINNET */]: "mode",
  [30 /* RSK_MAINNET */]: "rootstock",
  [81457 /* BLAST_MAINNET */]: "blast",
  [4200 /* MERLIN_MAINNET */]: "merlin-chain",
  [810180 /* ZKLINK_MAINNET */]: "zklink-nova",
  [85918 /* TON_MAINNET */]: "the-open-network",
  [3652501241 /* BTC_MAINNET */]: "bitcoin",
  [728126428 /* TRON_MAINNET */]: "tron",
  [167e3 /* TAIKO_MAINNET */]: "taiko",
  [7e3 /* ZETACHAIN_MAINNET */]: "zetachain",
  [25 /* CRONOS_MAINNET */]: "cronos",
  [252 /* FRAXTAL_MAINNET */]: "fraxtal",
  [1625 /* GRAVITY_MAINNET */]: "gravity-alpha",
  [223 /* BSQUARED_MAINNET */]: "bsquared-network",
  [388 /* CRONOS_ZK_MAINNET */]: "cronos-zkevm",
  [2818 /* MORPH_MAINNET */]: "morph-l2",
  [5426 /* SOLANA_MAINNET */]: "solana",
  [100 /* GNOSIS_MAINNET */]: "xdai",
  [146 /* SONIC_MAINNET */]: "sonic",
  [1116 /* CORE_MAINNET */]: "core",
  [2741 /* ABSTRACT_MAINNET */]: "abstract",
  [5165 /* BAHAMUT_MAINNET */]: "bahamut",
  [80094 /* BERACHAIN_MAINNET */]: "berachain",
  [130 /* UNICHAIN_MAINNET */]: "unichain",
  [1868 /* SONEIUM_MAINNET */]: "soneium",
  [204 /* OPBNB_MAINNET */]: "opbnb",
  [999 /* HYPERLIQUID_MAINNET */]: "hyperevm",
  [747474 /* KATANA_MAINNET */]: "katana",
  [33139 /* APECHAIN_MAINNET */]: "apechain",
  [9745 /* PLASMA_MAINNET */]: "plasma"
};
var COINGECKO_GAS_TOKEN_IDS = {
  [8453 /* BASE_MAINNET */]: "ethereum",
  [1 /* ETH_MAINNET */]: "ethereum",
  [56 /* BSC_MAINNET */]: "binancecoin",
  [43114 /* AVAX_MAINNET */]: "avalanche-2",
  [137 /* MATIC_MAINNET */]: "matic-network",
  [40 /* TELOS_MAINNET */]: "telos",
  [288 /* BOBA_MAINNET */]: "ethereum",
  [2222 /* KAVA_MAINNET */]: "kava",
  [324 /* ZKSYNC_MAINNET */]: "ethereum",
  [42161 /* ARBITRUM_MAINNET */]: "ethereum",
  [10 /* OPTIMISM_MAINNET */]: "ethereum",
  [42170 /* ARBITRUM_NOVA */]: "ethereum",
  [1101 /* POLYGON_ZK */]: "ethereum",
  [59144 /* LINEA_MAINNET */]: "ethereum",
  [5e3 /* MANTLE_MAINNET */]: "mantle",
  [534352 /* SCROLL_MAINNET */]: "ethereum",
  [169 /* MANTA_MAINNET */]: "ethereum",
  [1088 /* METIS_MAINNET */]: "metis-token",
  [34443 /* MODE_MAINNET */]: "ethereum",
  [30 /* RSK_MAINNET */]: "rootstock",
  [81457 /* BLAST_MAINNET */]: "ethereum",
  [4200 /* MERLIN_MAINNET */]: "bitcoin",
  [810180 /* ZKLINK_MAINNET */]: "ethereum",
  [85918 /* TON_MAINNET */]: "the-open-network",
  [3652501241 /* BTC_MAINNET */]: "bitcoin",
  [728126428 /* TRON_MAINNET */]: "tron",
  [167e3 /* TAIKO_MAINNET */]: "ethereum",
  [1329 /* SEI_EVM_MAINNET */]: "sei-network",
  [7e3 /* ZETACHAIN_MAINNET */]: "zetachain",
  [25 /* CRONOS_MAINNET */]: "crypto-com-chain",
  [252 /* FRAXTAL_MAINNET */]: "frax-share",
  [1625 /* GRAVITY_MAINNET */]: "g-token",
  [223 /* BSQUARED_MAINNET */]: "bitcoin",
  [388 /* CRONOS_ZK_MAINNET */]: "cronos-zkevm-cro",
  [2818 /* MORPH_MAINNET */]: "weth",
  [5426 /* SOLANA_MAINNET */]: "solana",
  [100 /* GNOSIS_MAINNET */]: "xdai",
  [146 /* SONIC_MAINNET */]: "sonic-3",
  [1116 /* CORE_MAINNET */]: "coredaoorg",
  [2741 /* ABSTRACT_MAINNET */]: "ethereum",
  [5165 /* BAHAMUT_MAINNET */]: "fasttoken",
  [80094 /* BERACHAIN_MAINNET */]: "berachain-bera",
  [130 /* UNICHAIN_MAINNET */]: "ethereum",
  [1868 /* SONEIUM_MAINNET */]: "ethereum",
  [204 /* OPBNB_MAINNET */]: "binancecoin",
  [999 /* HYPERLIQUID_MAINNET */]: "hyperliquid",
  [747474 /* KATANA_MAINNET */]: "ethereum",
  [33139 /* APECHAIN_MAINNET */]: "apecoin",
  [9745 /* PLASMA_MAINNET */]: "plasma"
};

// src/crosschain/coingecko/getTokenPriceUsd.ts
var import_tronweb2 = __toESM(require("tronweb"));
var getTokenPriceFromAdvisor = async (token) => {
  const isWrappedToken = WETH[token.chainId].equals(token);
  const isGasToken = GAS_TOKEN[token.chainId].equals(token);
  const address2 = isWrappedToken || isGasToken ? "" : token.address;
  const raw = JSON.stringify([
    {
      address: address2,
      chain_id: token.chainId
    }
  ]);
  const myHeaders = new Headers();
  myHeaders.append("Content-Type", "application/json");
  const response = await fetch(`https://api.symbiosis.finance/calculations/v1/token/price`, {
    method: "POST",
    body: raw,
    headers: myHeaders
  });
  if (!response.ok) {
    const text = await response.text();
    const json2 = JSON.parse(text);
    throw new AdvisorError(`Failed to get token price: ${json2.message ?? text}`);
  }
  const json = await response.json();
  const price = json[0]["price"];
  if (!price) {
    throw new AdvisorError(`Unknown price for token ${token.chainId}.${token.address}`);
  }
  return price;
};
var getGasTokenPrice = async (token) => {
  const { chainId } = token;
  const tokenId = COINGECKO_GAS_TOKEN_IDS[chainId];
  if (!tokenId) {
    console.error("CoinGecko: cannot find tokenId");
    return 0;
  }
  const vs = "usd";
  const API_URL = "https://api.coingecko.com";
  const url = new URL(`/api/v3/simple/price`, API_URL);
  url.searchParams.set("ids", tokenId);
  url.searchParams.set("vs_currencies", vs);
  const response = await fetch(url.toString());
  if (!response.ok) {
    console.error("CoinGecko: failed to get gas token price");
    return 0;
  }
  const json = await response.json();
  if (!json[tokenId]) {
    console.error("CoinGecko: cannot find address");
    return 0;
  }
  return parseFloat(json[tokenId][vs]);
};
var getTokenPrice = async (token, map) => {
  const newAddress = map?.get(token.address);
  if (newAddress) {
    token = new Token2({
      address: newAddress,
      chainId: token.chainId,
      decimals: token.decimals
    });
  }
  const platform = COINGECKO_PLATFORMS[token.chainId];
  if (!platform) {
    console.error("CoinGecko: cannot find asset platform");
    return 0;
  }
  let address2 = token.address.toLowerCase();
  if (isTronToken(token)) {
    address2 = import_tronweb2.default.address.fromHex(address2);
  } else if (isTonChainId(token.chainId)) {
    address2 = token.tonAddress;
  } else if (isSolanaChainId(token.chainId)) {
    address2 = token.solAddress;
  }
  const vs = "usd";
  const API_URL = "https://api.coingecko.com";
  const url = new URL(`/api/v3/simple/token_price/${platform}`, API_URL);
  url.searchParams.set("contract_addresses", address2);
  url.searchParams.set("vs_currencies", vs);
  const response = await fetch(url.toString());
  if (!response.ok) {
    console.error("CoinGecko: failed to get token price");
    return 0;
  }
  const json = await response.json();
  if (!json[address2]) {
    console.error("CoinGecko: cannot find address");
    return 0;
  }
  return parseFloat(json[address2][vs]);
};
var getTokenPriceUsd = async (token, map) => {
  try {
    return await getTokenPriceFromAdvisor(token);
  } catch (e) {
    const isWrappedToken = WETH[token.chainId].equals(token);
    const isGasToken = GAS_TOKEN[token.chainId].equals(token);
    if (isGasToken || isWrappedToken) {
      return getGasTokenPrice(token);
    }
    return getTokenPrice(token, map);
  }
};
var getTokenAmountUsd = (tokenAmount, price) => {
  return parseFloat((parseFloat(tokenAmount.toSignificant()) * price).toFixed(2));
};

// src/crosschain/trade/dedustTrade.ts
var import_jsbi13 = __toESM(require("jsbi"));
var DedustTrade = class extends SymbiosisTrade {
  constructor(params) {
    super(params);
    const { symbiosis, deadline, to, from } = params;
    this.symbiosis = symbiosis;
    this.deadline = deadline;
    this.to = to;
    this.from = from;
  }
  get tradeType() {
    return "dedust";
  }
  async init() {
    const { expectedAmountOut, minAmountOut, to, body, value, fees } = await this.buildCalldata(
      this.tokenAmountIn,
      this.tokenOut
    );
    const amountOut = new TokenAmount(this.tokenOut, expectedAmountOut);
    const amountOutMin = new TokenAmount(this.tokenOut, minAmountOut);
    const priceImpact = await this.getPriceImpact(this.tokenAmountIn, amountOut);
    this.out = {
      amountOut,
      amountOutMin,
      route: [this.tokenAmountIn.token, this.tokenOut],
      priceImpact,
      routerAddress: to.toString() ?? "",
      callData: body?.toBoc().toString("base64") ?? "",
      callDataOffset: 0,
      minReceivedOffset: 0,
      value,
      fees
    };
    return this;
  }
  async getTokenPrice(token) {
    return this.symbiosis.cache.get(
      ["getTokenPriceUsd", token.chainId.toString(), token.address],
      () => {
        return getTokenPriceUsd(token);
      },
      600
      // 10 minutes
    );
  }
  async getPriceImpact(tokenAmountIn, tokenAmountOut) {
    try {
      const [tokenInPrice, tokenOutPrice] = await Promise.all([
        this.getTokenPrice(tokenAmountIn.token),
        this.getTokenPrice(tokenAmountOut.token)
      ]);
      const tokenAmountInUsd = getTokenAmountUsd(tokenAmountIn, tokenInPrice);
      const tokenAmountOutUsd = getTokenAmountUsd(tokenAmountOut, tokenOutPrice);
      const impactNumber = -(1 - tokenAmountOutUsd / tokenAmountInUsd);
      return new Percent(parseInt(`${impactNumber * import_jsbi13.default.toNumber(BIPS_BASE)}`).toString(), BIPS_BASE);
    } catch {
      return new Percent("0", BIPS_BASE);
    }
  }
  async findPool(tokenAmountIn, tokenOut) {
    const client = await this.symbiosis.getTonClient();
    const factory = client.open(import_sdk2.Factory.createFromAddress(import_sdk2.MAINNET_FACTORY_ADDR));
    let pool;
    let secondPool = null;
    if (tokenAmountIn.token.isNative) {
      const tonVault = client.open(await factory.getNativeVault());
      const tokenB = import_sdk2.Asset.jetton(import_core2.Address.parse(tokenOut.tonAddress));
      pool = client.open(await factory.getPool(import_sdk2.PoolType.VOLATILE, [import_sdk2.Asset.native(), tokenB]));
      if (await tonVault.getReadinessStatus() !== import_sdk2.ReadinessStatus.READY) {
        throw new DedustTradeError("Vault (TON) Dedust does not exist.");
      }
    } else if (tokenOut.isNative) {
      const tokenA = import_sdk2.Asset.jetton(import_core2.Address.parse(tokenAmountIn.token.tonAddress));
      pool = client.open(await factory.getPool(import_sdk2.PoolType.VOLATILE, [tokenA, import_sdk2.Asset.native()]));
    } else {
      const tokenA = import_sdk2.Asset.jetton(import_core2.Address.parse(tokenAmountIn.token.tonAddress));
      const tokenB = import_sdk2.Asset.jetton(import_core2.Address.parse(tokenOut.tonAddress));
      pool = client.open(await factory.getPool(import_sdk2.PoolType.VOLATILE, [tokenA, tokenB]));
      if (await pool.getReadinessStatus() !== import_sdk2.ReadinessStatus.READY) {
        const [poolTonOut, poolTonIn] = await Promise.all([
          client.open(
            await factory.getPool(import_sdk2.PoolType.VOLATILE, [
              import_sdk2.Asset.jetton(import_core2.Address.parse(tokenAmountIn.token.tonAddress)),
              import_sdk2.Asset.native()
            ])
          ),
          client.open(
            await factory.getPool(import_sdk2.PoolType.VOLATILE, [
              import_sdk2.Asset.native(),
              import_sdk2.Asset.jetton(import_core2.Address.parse(tokenOut.tonAddress))
            ])
          )
        ]);
        if (await poolTonIn.getReadinessStatus() === import_sdk2.ReadinessStatus.READY && await poolTonOut.getReadinessStatus() === import_sdk2.ReadinessStatus.READY) {
          pool = poolTonOut;
          secondPool = poolTonIn;
        } else {
          throw new DedustTradeError("Cannot find pool for this trade");
        }
      }
    }
    return { pool, secondPool };
  }
  async buildCalldata(tokenAmountIn, tokenOut) {
    const client = await this.symbiosis.getTonClient();
    const factory = client.open(import_sdk2.Factory.createFromAddress(import_sdk2.MAINNET_FACTORY_ADDR));
    const tonVault = client.open(await factory.getNativeVault());
    const isTonIn = tokenAmountIn.token.isNative;
    const tokenIn = isTonIn ? import_sdk2.Asset.native() : import_sdk2.Asset.jetton(import_core2.Address.parse(tokenAmountIn.token.tonAddress));
    const { pool, secondPool } = await this.findPool(tokenAmountIn, tokenOut);
    let expectedAmountOut;
    let minAmountOut;
    let minAmountTon = BigInt(0);
    const fees = [];
    if (secondPool) {
      const {
        amountOut: tonAmountOut,
        assetOut: tonOut,
        tradeFee: firstPoolTradeFee
      } = await pool.getEstimatedSwapOut({
        assetIn: tokenIn,
        amountIn: BigInt(tokenAmountIn.raw.toString())
      });
      minAmountTon = tonAmountOut * BigInt(1e4 - this.slippage / 2) / BigInt(1e4);
      const { amountOut: estimatedAmountOut, tradeFee: secondPoolTradeFee } = await secondPool.getEstimatedSwapOut({
        assetIn: tonOut,
        amountIn: tonAmountOut
      });
      fees.push({
        provider: "dedust",
        value: new TokenAmount(GAS_TOKEN[85918 /* TON_MAINNET */], firstPoolTradeFee),
        description: "Dedust fee"
      });
      fees.push({
        provider: "dedust",
        value: new TokenAmount(tokenOut, secondPoolTradeFee),
        description: "Dedust fee"
      });
      minAmountOut = estimatedAmountOut * BigInt(1e4 - this.slippage / 2) / BigInt(1e4);
      expectedAmountOut = estimatedAmountOut;
    } else {
      const { amountOut: estimatedAmountOut, tradeFee } = await pool.getEstimatedSwapOut({
        assetIn: tokenIn,
        amountIn: BigInt(tokenAmountIn.raw.toString())
      });
      fees.push({
        provider: "dedust",
        value: new TokenAmount(tokenOut, tradeFee),
        description: "Dedust fee"
      });
      minAmountOut = estimatedAmountOut * BigInt(1e4 - this.slippage) / BigInt(1e4);
      expectedAmountOut = estimatedAmountOut;
    }
    let txParams = null;
    let tokenInWalletAddress = null;
    if (isTonIn) {
      if (await tonVault.getReadinessStatus() !== import_sdk2.ReadinessStatus.READY) {
        throw new DedustTradeError("Vault (TON) does not exist.");
      }
      txParams = this.buildTonSwapCalldata({
        queryId: 0,
        poolAddress: pool.address,
        value: BigInt(tokenAmountIn.raw.toString()),
        minAmountOut
      });
    } else if (tokenOut.isNative && tokenIn.address) {
      const tokenInVault = client.open(await factory.getJettonVault(tokenIn.address));
      const tokenInRoot = client.open(import_sdk2.JettonRoot.createFromAddress(tokenIn.address));
      tokenInWalletAddress = client.open(await tokenInRoot.getWallet(import_core2.Address.parse(this.from))).address;
      txParams = this.buildJettonSwapCalldata({
        queryId: 0,
        poolAddress: pool.address,
        destination: tokenInVault.address,
        amountIn: BigInt(tokenAmountIn.raw.toString()),
        responseAddress: import_core2.Address.parse(this.from),
        minAmountOut
      });
    } else if (tokenIn.address) {
      const tokenInVault = client.open(await factory.getJettonVault(tokenIn.address));
      const tokenInRoot = client.open(import_sdk2.JettonRoot.createFromAddress(tokenIn.address));
      tokenInWalletAddress = client.open(await tokenInRoot.getWallet(import_core2.Address.parse(this.from))).address;
      if (secondPool) {
        txParams = this.buildMultiHopSwapCalldata({
          queryId: 0,
          amountIn: BigInt(tokenAmountIn.raw.toString()),
          destination: tokenInVault.address,
          poolAddressTonOut: pool.address,
          poolAddressTonIn: secondPool.address,
          responseAddress: import_core2.Address.parse(this.from),
          minAmountTon,
          minAmountOut
        });
      } else {
        txParams = this.buildJettonSwapCalldata({
          queryId: 0,
          poolAddress: pool.address,
          destination: tokenInVault.address,
          amountIn: BigInt(tokenAmountIn.raw.toString()),
          responseAddress: import_core2.Address.parse(this.from),
          minAmountOut
        });
      }
    } else {
      throw new DedustTradeError("Failed to build calldata");
    }
    if (!txParams) {
      throw new DedustTradeError("Doesn't support this trade");
    }
    return {
      expectedAmountOut,
      minAmountOut,
      to: tokenInWalletAddress ? tokenInWalletAddress : tonVault.address,
      body: txParams?.body,
      value: txParams?.value,
      fees
    };
  }
  buildTonSwapCalldata({ queryId, poolAddress, value, minAmountOut }) {
    return {
      body: (0, import_core2.beginCell)().storeUint(import_sdk2.VaultNative.SWAP, 32).storeUint(queryId ?? 0, 64).storeCoins(value).storeAddress(poolAddress).storeUint(0, 1).storeCoins(minAmountOut).storeMaybeRef(null).storeRef(
        (0, import_core2.beginCell)().storeUint(0, 32).storeAddress(import_core2.Address.parse(this.to)).storeAddress(TON_REFERRAL_ADDRESS).storeMaybeRef(null).storeMaybeRef(null).endCell()
      ).endCell(),
      value: value + (0, import_core2.toNano)("0.25")
    };
  }
  buildJettonSwapCalldata({
    queryId,
    amountIn,
    destination,
    responseAddress,
    poolAddress,
    minAmountOut
  }) {
    return {
      value: (0, import_core2.toNano)("0.3"),
      body: (0, import_core2.beginCell)().storeUint(import_sdk2.JettonWallet.TRANSFER, 32).storeUint(queryId ?? 0, 64).storeCoins(amountIn).storeAddress(destination).storeAddress(responseAddress).storeMaybeRef(null).storeCoins((0, import_core2.toNano)("0.25")).storeMaybeRef(
        import_sdk2.VaultJetton.createSwapPayload({
          poolAddress,
          limit: minAmountOut,
          swapParams: {
            recipientAddress: import_core2.Address.parse(this.to),
            referralAddress: TON_REFERRAL_ADDRESS
          }
        })
      ).endCell()
    };
  }
  buildMultiHopSwapCalldata({
    queryId,
    amountIn,
    destination,
    responseAddress,
    poolAddressTonOut,
    poolAddressTonIn,
    minAmountTon,
    minAmountOut
  }) {
    return {
      value: (0, import_core2.toNano)("0.3"),
      body: (0, import_core2.beginCell)().storeUint(import_sdk2.JettonWallet.TRANSFER, 32).storeUint(queryId ?? 0, 64).storeCoins(amountIn).storeAddress(destination).storeAddress(responseAddress).storeMaybeRef(null).storeCoins((0, import_core2.toNano)("0.25")).storeMaybeRef(
        import_sdk2.VaultJetton.createSwapPayload({
          poolAddress: poolAddressTonOut,
          limit: minAmountTon,
          swapParams: {
            recipientAddress: import_core2.Address.parse(this.to),
            referralAddress: TON_REFERRAL_ADDRESS
          },
          next: {
            poolAddress: poolAddressTonIn,
            limit: minAmountOut
          }
        })
      ).endCell()
    };
  }
};

// src/crosschain/trade/jupiterTrade.ts
var import_web33 = require("@solana/web3.js");
var import_spl_token2 = require("@solana/spl-token");
var JUPITER_API_URL = "https://lite-api.jup.ag/swap/v1";
var JupiterTrade = class extends SymbiosisTrade {
  constructor(params) {
    super(params);
    const { symbiosis, to } = params;
    this.symbiosis = symbiosis;
    this.solanaToPubKey = new import_web33.PublicKey(to);
  }
  get tradeType() {
    return "jupiter";
  }
  async init() {
    const inputMint = this.tokenAmountIn.token.isNative ? import_spl_token2.NATIVE_MINT.toBase58() : this.tokenAmountIn.token.solAddress;
    const outputMint = this.tokenOut.isNative ? import_spl_token2.NATIVE_MINT.toBase58() : this.tokenOut.solAddress;
    const quoteResponse = await fetch(
      `${JUPITER_API_URL}/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${this.tokenAmountIn.raw.toString()}&slippageBps=${this.slippage}&restrictIntermediateTokens=true`
    ).then((res) => res.json());
    if (!quoteResponse?.outAmount) {
      throw new JupiterTradeError("Failed to get quote");
    }
    const instructionsResponse = await this.buildInstructions(quoteResponse);
    const amountOut = new TokenAmount(this.tokenOut, quoteResponse.outAmount);
    const amountOutMin = new TokenAmount(this.tokenOut, quoteResponse.otherAmountThreshold);
    const priceImpact = new Percent(
      BigInt(+Number(quoteResponse.priceImpactPct).toFixed(4) * -1e4),
      BigInt(1e4)
    );
    this.out = {
      amountOut,
      amountOutMin,
      route: [this.tokenAmountIn.token, this.tokenOut],
      priceImpact,
      routerAddress: "",
      callData: "",
      callDataOffset: 0,
      minReceivedOffset: 0,
      instructions: instructionsResponse.swapTransaction
    };
    return this;
  }
  async buildInstructions(quoteResponse) {
    const swapResponse = await (await fetch(`${JUPITER_API_URL}/swap`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        quoteResponse,
        userPublicKey: this.solanaToPubKey.toBase58(),
        prioritizationFeeLamports: {
          priorityLevelWithMaxLamports: {
            maxLamports: 1e7,
            // 0.01 SOL
            priorityLevel: "high"
          }
        }
      })
    })).json();
    return swapResponse;
  }
};

// src/crosschain/tronAbis/tronPortalAbi.ts
var TRON_PORTAL_ABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_wrapper",
        type: "address"
      },
      {
        internalType: "address",
        name: "_whitelistedToken",
        type: "address"
      },
      {
        internalType: "contract IMetaRouter",
        name: "_metaRouter",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "crossChainID",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bridgingFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "BurnCompleted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "clientId",
        type: "bytes32"
      }
    ],
    name: "ClientIdLog",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "MetaRevertRequest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "RevertBurnRequest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bridgingFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "RevertSynthesizeCompleted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "tokens",
        type: "address[]"
      }
    ],
    name: "SetBalanceOf",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "metaRouter",
        type: "address"
      }
    ],
    name: "SetMetaRouter",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "timelock",
        type: "address"
      }
    ],
    name: "SetTimelock",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "threshold",
        type: "uint256"
      }
    ],
    name: "SetTokenThreshold",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "activate",
        type: "bool"
      }
    ],
    name: "SetWhitelistToken",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "chainID",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "revertableAddress",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "SynthesizeRequest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "portal",
        type: "address"
      }
    ],
    name: "TokenTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getChainID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "internalID",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "address",
            name: "managerChainBridge",
            type: "address"
          },
          {
            internalType: "address",
            name: "sourceChainBridge",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "managerChainId",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "sourceChainId",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "router",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "swapCalldata",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "sourceChainSynthesis",
            type: "address"
          },
          {
            internalType: "address",
            name: "burnToken",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "burnCalldata",
            type: "bytes"
          },
          {
            internalType: "bytes32",
            name: "clientID",
            type: "bytes32"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaRevertTransaction",
        name: "_metaRevertTransaction",
        type: "tuple"
      }
    ],
    name: "metaRevertRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "metaRouter",
    outputs: [
      {
        internalType: "contract IMetaRouter",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "rtoken",
            type: "address"
          },
          {
            internalType: "address",
            name: "chain2address",
            type: "address"
          },
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "address",
            name: "oppositeBridge",
            type: "address"
          },
          {
            internalType: "address",
            name: "syntCaller",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256"
          },
          {
            internalType: "address[]",
            name: "swapTokens",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "finalCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "revertableAddress",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "clientID",
            type: "bytes32"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaSynthesizeTransaction",
        name: "_metaSynthesizeTransaction",
        type: "tuple"
      }
    ],
    name: "metaSynthesize",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_crossChainID",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_rToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "_finalReceiveSide",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_finalCalldata",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "_finalOffset",
        type: "uint256"
      }
    ],
    name: "metaUnsynthesize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "requestCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "requests",
    outputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "address",
        name: "chain2address",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "rtoken",
        type: "address"
      },
      {
        internalType: "enum Portal.RequestState",
        name: "state",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_internalID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "revertBurnRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      }
    ],
    name: "revertSynthesize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]"
      }
    ],
    name: "setBalanceOf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IMetaRouter",
        name: "_metaRouter",
        type: "address"
      }
    ],
    name: "setMetaRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_timelock",
        type: "address"
      }
    ],
    name: "setTimelock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256"
      }
    ],
    name: "setTokenThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "bool",
        name: "_activate",
        type: "bool"
      }
    ],
    name: "setWhitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_chain2address",
        type: "address"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_revertableAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "synthesize",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_chain2address",
        type: "address"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "address",
        name: "_oppositeBridge",
        type: "address"
      },
      {
        internalType: "address",
        name: "_revertableAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_chainID",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_clientID",
        type: "bytes32"
      }
    ],
    name: "synthesizeNative",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "approvalData",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "token",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "chain2address",
            type: "address"
          },
          {
            internalType: "address",
            name: "receiveSide",
            type: "address"
          },
          {
            internalType: "address",
            name: "oppositeBridge",
            type: "address"
          },
          {
            internalType: "address",
            name: "revertableAddress",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "clientID",
            type: "bytes32"
          }
        ],
        internalType: "struct Portal.SynthesizeWithPermitTransaction",
        name: "_syntWithPermitTx",
        type: "tuple"
      }
    ],
    name: "synthesizeWithPermit",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "timelock",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "tokenThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "tokenWhitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_portal",
        type: "address"
      },
      {
        internalType: "address",
        name: "_token",
        type: "address"
      }
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stableBridgingFee",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_externalID",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "_crossChainID",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "unsynthesize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "unsynthesizeStates",
    outputs: [
      {
        internalType: "enum Portal.UnsynthesizeState",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "versionRecipient",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "wrapper",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/crosschain/tronAbis/tronTRC20Abi.ts
var TRON_TRC20_ABI = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      { indexed: true, name: "owner", type: "address" },
      { indexed: true, name: "spender", type: "address" },
      { name: "value", type: "uint256" }
    ],
    name: "Approval",
    type: "event"
  },
  {
    inputs: [
      { indexed: true, name: "from", type: "address" },
      { indexed: true, name: "to", type: "address" },
      { name: "value", type: "uint256" }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    outputs: [{ type: "uint256" }],
    constant: true,
    inputs: [
      { name: "owner", type: "address" },
      { name: "spender", type: "address" }
    ],
    name: "allowance",
    stateMutability: "view",
    type: "function"
  },
  {
    outputs: [{ type: "bool" }],
    inputs: [
      { name: "spender", type: "address" },
      { name: "value", type: "uint256" }
    ],
    name: "approve",
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    outputs: [{ type: "uint256" }],
    constant: true,
    inputs: [{ name: "account", type: "address" }],
    name: "balanceOf",
    stateMutability: "view",
    type: "function"
  },
  {
    outputs: [{ type: "uint8" }],
    inputs: [],
    constant: true,
    name: "decimals",
    stateMutability: "view",
    type: "function"
  },
  {
    outputs: [{ type: "bool" }],
    inputs: [
      { name: "spender", type: "address" },
      { name: "subtractedValue", type: "uint256" }
    ],
    name: "decreaseAllowance",
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    outputs: [{ type: "bool" }],
    inputs: [
      { name: "spender", type: "address" },
      { name: "addedValue", type: "uint256" }
    ],
    name: "increaseAllowance",
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    outputs: [{ type: "string" }],
    constant: true,
    name: "name",
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    outputs: [{ type: "string" }],
    constant: true,
    name: "symbol",
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    outputs: [{ type: "uint256" }],
    constant: true,
    name: "totalSupply",
    stateMutability: "view",
    type: "function"
  },
  {
    outputs: [{ type: "bool" }],
    inputs: [
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    name: "transfer",
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    outputs: [{ type: "bool" }],
    inputs: [
      { name: "sender", type: "address" },
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    name: "transferFrom",
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/crosschain/tronAbis/tronMetaRouterAbi.ts
var TRON_METAROUTER_ABI = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "TransitTokenSent",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_receiveSide",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "_offset",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "externalCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stableBridgingFee",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "crossChainID",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "externalID",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "tokenReal",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "chainID",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "address[]",
            name: "swapTokens",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes"
          },
          {
            internalType: "address",
            name: "finalReceiveSide",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "finalCalldata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "finalOffset",
            type: "uint256"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaMintTransaction",
        name: "_metaMintTransaction",
        type: "tuple"
      }
    ],
    name: "metaMintSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "firstSwapCalldata",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "secondSwapCalldata",
            type: "bytes"
          },
          {
            internalType: "address[]",
            name: "approvedTokens",
            type: "address[]"
          },
          {
            internalType: "address",
            name: "firstDexRouter",
            type: "address"
          },
          {
            internalType: "address",
            name: "secondDexRouter",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "bool",
            name: "nativeIn",
            type: "bool"
          },
          {
            internalType: "address",
            name: "relayRecipient",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "otherSideCalldata",
            type: "bytes"
          }
        ],
        internalType: "struct MetaRouteStructs.MetaRouteTransaction",
        name: "_metarouteTransaction",
        type: "tuple"
      }
    ],
    name: "metaRoute",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "metaRouterGateway",
    outputs: [
      {
        internalType: "contract MetaRouterGateway",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_router",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_swapCalldata",
        type: "bytes"
      },
      {
        internalType: "address",
        name: "_burnToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "_synthesis",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "_burnCalldata",
        type: "bytes"
      }
    ],
    name: "returnSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/crosschain/revert.ts
var RevertPending = class {
  constructor(symbiosis, request) {
    this.symbiosis = symbiosis;
    this.request = request;
    const token = this.request.fromTokenAmount.token;
    const omniPoolConfig = symbiosis.getOmniPoolByToken(token);
    if (!omniPoolConfig) {
      throw new SdkError(`Cannot find omni pool config by token ${token.address}`);
    }
    this.omniPoolConfig = omniPoolConfig;
    this.multicallRouter = this.symbiosis.multicallRouter(this.omniPoolConfig.chainId);
  }
  async revert(slippage, deadline) {
    this.slippage = slippage;
    this.deadline = deadline;
    if (this.request.type === "burn-v2") {
      this.transitTokenFrom = this.symbiosis.transitToken(this.request.chainIdFrom, this.omniPoolConfig);
      this.transitTokenTo = this.symbiosis.transitToken(this.request.chainIdTo, this.omniPoolConfig);
    }
    const fee = await this.getFee();
    const feeV2 = this.request.type === "burn-v2" ? await this.getFeeV2() : void 0;
    const transactionRequest = await this.getTransactionRequest(fee, feeV2);
    if ("call_value" in transactionRequest) {
      return {
        type: "tron",
        fee,
        transactionRequest
      };
    }
    return {
      type: "evm",
      fee,
      transactionRequest
    };
  }
  async getFeeV2() {
    const feeToken = this.transitTokenFrom;
    const [receiveSide, calldata] = await this.feeBurnCallDataV2();
    const { price: fee } = await this.symbiosis.getBridgeFee({
      receiveSide,
      calldata,
      chainIdFrom: this.omniPoolConfig.chainId,
      chainIdTo: this.request.chainIdFrom
    });
    return new TokenAmount(feeToken, fee);
  }
  async feeBurnCallDataV2() {
    const chainIdIn = this.omniPoolConfig.chainId;
    const chainIdOut = this.request.chainIdFrom;
    const { revertableAddress, fromTokenAmount } = this.request;
    const synthesis = this.symbiosis.synthesis(chainIdIn);
    const portal = this.symbiosis.portal(chainIdOut);
    const internalId = getInternalId({
      contractAddress: synthesis.address,
      requestCount: import_constants39.MaxUint256,
      chainId: chainIdIn
    });
    const externalId = getExternalId({
      internalId,
      contractAddress: portal.address,
      revertableAddress,
      chainId: chainIdOut
    });
    const calldata = portal.interface.encodeFunctionData("metaUnsynthesize", [
      "0",
      // _stableBridgingFee
      CROSS_CHAIN_ID,
      // crossChainID
      externalId,
      // _externalID,
      revertableAddress,
      // _to
      fromTokenAmount.raw.toString(),
      // _amount
      this.transitTokenFrom.address,
      // _rToken
      import_addresses3.AddressZero,
      // _finalReceiveSide
      [],
      // _finalCalldata
      0
      // _finalOffset
    ]);
    return [portal.address, calldata];
  }
  buildMetaBurnCalldata(feeV2) {
    const { from, chainIdFrom } = this.request;
    const synthesis = this.symbiosis.synthesis(this.omniPoolConfig.chainId);
    const synth = this.getSyntheticToken(this.transitTokenFrom);
    if (!synth) {
      throw new SdkError(`Cannot find synthetic token between mChain and ${chainIdFrom}`);
    }
    const metarouter = this.symbiosis.metaRouter(this.omniPoolConfig.chainId);
    let revertableAddress;
    if (isTronChainId(chainIdFrom)) {
      revertableAddress = this.symbiosis.getRevertableAddress(chainIdFrom);
    } else {
      revertableAddress = from;
    }
    const calldata = synthesis.interface.encodeFunctionData("metaBurnSyntheticToken", [
      {
        stableBridgingFee: feeV2 ? feeV2.raw.toString() : "0",
        amount: "0",
        crossChainID: CROSS_CHAIN_ID,
        syntCaller: metarouter.address,
        finalReceiveSide: import_addresses3.AddressZero,
        sToken: synth.address,
        finalCallData: [],
        finalOffset: 0,
        chain2address: from,
        // NOTE: funds will be returned there if got stuck
        receiveSide: this.symbiosis.portal(chainIdFrom).address,
        oppositeBridge: this.symbiosis.bridge(chainIdFrom).address,
        revertableAddress,
        chainID: chainIdFrom,
        clientID: this.symbiosis.clientId
      }
    ]);
    return [synth.address, calldata];
  }
  async getFee() {
    const { type, chainIdTo, chainIdFrom, internalId, revertableAddress } = this.request;
    const externalId = this.getExternalId();
    let receiveSide;
    let calldata;
    let advisorChainIdFrom = chainIdTo;
    let advisorChainIdTo = chainIdFrom;
    const feeToken = this.request.originalFromTokenAmount.token;
    if (type === "synthesize") {
      const portal = this.symbiosis.portal(chainIdFrom);
      calldata = portal.interface.encodeFunctionData("revertSynthesize", ["0", externalId]);
      receiveSide = portal.address;
    } else if (type === "burn") {
      const synthesis = this.symbiosis.synthesis(chainIdFrom);
      calldata = synthesis.interface.encodeFunctionData("revertBurn", ["0", externalId]);
      receiveSide = synthesis.address;
    } else if (type === "synthesize-v2") {
      advisorChainIdFrom = chainIdFrom;
      advisorChainIdTo = chainIdTo;
      const synthesis = this.symbiosis.synthesis(chainIdTo);
      calldata = synthesis.interface.encodeFunctionData("revertSynthesizeRequestByBridge", [
        "0",
        internalId,
        this.symbiosis.portal(chainIdFrom).address,
        // _receiveSide
        this.symbiosis.bridge(chainIdFrom).address,
        // _oppositeBridge
        chainIdFrom,
        // _chainId
        revertableAddress,
        // _sender
        this.symbiosis.clientId
        // _clientId
      ]);
      receiveSide = synthesis.address;
    } else if (type === "burn-v2") {
      advisorChainIdTo = this.omniPoolConfig.chainId;
      const synthesis = this.symbiosis.synthesis(this.omniPoolConfig.chainId);
      const [router, swapCalldata] = await this.buildSwapCalldata();
      const [burnToken, burnCalldata] = this.buildMetaBurnCalldata();
      calldata = synthesis.interface.encodeFunctionData("revertMetaBurn", [
        "0",
        // stableBridgingFee
        externalId,
        router,
        swapCalldata,
        synthesis.address,
        burnToken,
        burnCalldata
      ]);
      receiveSide = synthesis.address;
    } else {
      const synthesis = this.symbiosis.synthesis(chainIdFrom);
      calldata = synthesis.interface.encodeFunctionData("revertBurnAndBurn", [
        "0",
        // stableBridgingFee
        externalId,
        this.symbiosis.portal(chainIdTo).address,
        // _receiveSide
        this.symbiosis.bridge(chainIdTo).address,
        // _oppositeBridge
        chainIdTo,
        // _chainId
        revertableAddress
        // _revertableAddress
      ]);
      receiveSide = synthesis.address;
    }
    const { price: fee } = await this.symbiosis.getBridgeFee({
      receiveSide,
      calldata,
      chainIdFrom: advisorChainIdFrom,
      chainIdTo: advisorChainIdTo
    });
    const feeTokenAmount = new TokenAmount(feeToken, fee);
    if (this.request.originalFromTokenAmount.lessThan(feeTokenAmount) || this.request.originalFromTokenAmount.equalTo(feeTokenAmount)) {
      throw new AmountLessThanFeeError(
        `Amount ${this.request.fromTokenAmount.toSignificant()} ${this.request.fromTokenAmount.token.symbol} less than fee ${feeTokenAmount.toSignificant()} ${feeTokenAmount.token.symbol}`
      );
    }
    return feeTokenAmount;
  }
  async getTransactionRequest(fee, feeV2) {
    if (this.request.type === "synthesize") {
      return this.getRevertSynthesizeTransactionRequest(fee);
    }
    if (this.request.type === "synthesize-v2") {
      return this.getRevertSynthesizeTransactionRequestV2(fee);
    }
    if (this.request.type === "burn") {
      return this.getRevertBurnTransactionRequest(fee);
    }
    if (this.request.type === "burn-v2") {
      return await this.getRevertBurnTransactionRequestV2(fee, feeV2);
    }
    return await this.getRevertBurnTransactionRequestV2Revert(fee);
  }
  getRevertSynthesizeTransactionRequestV2(fee) {
    const { internalId, chainIdFrom, revertableAddress } = this.request;
    const portal = this.symbiosis.portal(chainIdFrom);
    const params = {
      stableBridgingFee: fee.raw.toString(),
      internalID: internalId,
      receiveSide: portal.address,
      managerChainBridge: this.symbiosis.bridge(this.omniPoolConfig.chainId).address,
      sourceChainBridge: this.symbiosis.bridge(chainIdFrom).address,
      managerChainId: this.omniPoolConfig.chainId,
      sourceChainId: chainIdFrom,
      router: import_addresses3.AddressZero,
      // multicall router
      swapCalldata: [],
      // swapCalldata,
      sourceChainSynthesis: this.symbiosis.synthesis(this.omniPoolConfig.chainId).address,
      burnToken: import_addresses3.AddressZero,
      //burnToken,
      burnCalldata: [],
      // burnCalldata,
      clientID: this.symbiosis.clientId
    };
    if (isTronChainId(chainIdFrom)) {
      return prepareTronTransaction({
        chainId: chainIdFrom,
        tronWeb: this.symbiosis.tronWeb(chainIdFrom),
        abi: TRON_PORTAL_ABI,
        contractAddress: portal.address,
        functionName: "metaRevertRequest",
        params: [
          [
            fee.raw.toString(),
            // stableBridgingFee, uint256
            internalId,
            // internalID, bytes32
            portal.address,
            // receiveSide, address
            this.symbiosis.bridge(this.omniPoolConfig.chainId).address,
            // managerChainBridge, address
            this.symbiosis.bridge(chainIdFrom).address,
            // sourceChainBridge, address
            this.omniPoolConfig.chainId,
            // managerChainId, uint256
            chainIdFrom,
            // sourceChainId, uint256
            import_addresses3.AddressZero,
            // router, address
            [],
            // swapCalldata, bytes
            this.symbiosis.synthesis(this.omniPoolConfig.chainId).address,
            // sourceChainSynthesis, address
            import_addresses3.AddressZero,
            // burnToken, address
            [],
            // burnCalldata, bytes
            this.symbiosis.clientId
            // clientID, bytes32
          ]
        ],
        ownerAddress: revertableAddress,
        value: 0
      });
    }
    return {
      to: portal.address,
      data: portal.interface.encodeFunctionData("metaRevertRequest", [params]),
      chainId: chainIdFrom
    };
  }
  getRevertSynthesizeTransactionRequest(fee) {
    const { internalId, chainIdTo, chainIdFrom } = this.request;
    const synthesis = this.symbiosis.synthesis(chainIdTo);
    const otherPortal = this.symbiosis.portal(chainIdFrom);
    const otherBridge = this.symbiosis.bridge(chainIdFrom);
    return {
      to: synthesis.address,
      data: synthesis.interface.encodeFunctionData("revertSynthesizeRequest", [
        fee.raw.toString(),
        internalId,
        otherPortal.address,
        otherBridge.address,
        chainIdFrom,
        this.symbiosis.clientId
      ]),
      chainId: chainIdTo
    };
  }
  getRevertBurnTransactionRequest(fee) {
    const { internalId, chainIdTo, chainIdFrom } = this.request;
    const otherBridge = this.symbiosis.bridge(chainIdFrom);
    const portal = this.symbiosis.portal(chainIdTo);
    const otherSynthesis = this.symbiosis.synthesis(chainIdFrom);
    const params = [
      fee.raw.toString(),
      internalId,
      otherSynthesis.address,
      otherBridge.address,
      chainIdFrom,
      this.symbiosis.clientId
    ];
    if (isTronChainId(chainIdTo)) {
      return prepareTronTransaction({
        chainId: chainIdTo,
        tronWeb: this.symbiosis.tronWeb(chainIdTo),
        abi: TRON_PORTAL_ABI,
        contractAddress: portal.address,
        functionName: "revertBurnRequest",
        params,
        ownerAddress: this.request.revertableAddress,
        value: 0
      });
    }
    return {
      to: portal.address,
      data: portal.interface.encodeFunctionData("revertBurnRequest", params),
      chainId: chainIdTo
    };
  }
  getSyntheticToken(realToken) {
    return this.symbiosis.getRepresentation(realToken, this.omniPoolConfig.chainId);
  }
  async buildSwapCalldata(fee) {
    const { originalFromTokenAmount, chainIdFrom, chainIdTo } = this.request;
    const tokenIn = this.getSyntheticToken(this.transitTokenTo);
    if (!tokenIn) {
      throw new SdkError(`Cannot find synthetic token between mChain and ${chainIdTo}`);
    }
    const tokenAmountIn = new TokenAmount(tokenIn, originalFromTokenAmount.raw);
    const amount = fee ? new TokenAmount(tokenIn, import_jsbi14.default.subtract(tokenAmountIn.raw, fee.raw)) : tokenAmountIn;
    const tokenOut = this.getSyntheticToken(this.transitTokenFrom);
    if (!tokenOut) {
      throw new SdkError(`Cannot find synthetic token between mChain and ${chainIdFrom}`);
    }
    const to = this.symbiosis.metaRouter(this.omniPoolConfig.chainId).address;
    const octoPoolTrade = new OctoPoolTrade({
      tokenAmountIn: amount,
      tokenAmountInMin: amount,
      // amountInMin
      tokenOut,
      slippage: this.slippage,
      deadline: this.deadline,
      symbiosis: this.symbiosis,
      to,
      omniPoolConfig: this.omniPoolConfig
    });
    await octoPoolTrade.init();
    return [
      this.multicallRouter.address,
      this.multicallRouter.interface.encodeFunctionData("multicall", [
        amount.raw.toString(),
        [octoPoolTrade.callData],
        // calldata
        [octoPoolTrade.routerAddress],
        // receiveSides
        [tokenIn.address, tokenOut.address],
        // path
        [100],
        // offset
        to
      ])
    ];
  }
  async getRevertBurnTransactionRequestV2(fee, feeV2) {
    const { internalId, chainIdTo } = this.request;
    const mChainBridge = this.symbiosis.bridge(this.omniPoolConfig.chainId);
    const portal = this.symbiosis.portal(chainIdTo);
    const mChainSynthesis = this.symbiosis.synthesis(this.omniPoolConfig.chainId);
    const [router, swapCalldata] = await this.buildSwapCalldata(fee);
    const [burnToken, burnCalldata] = this.buildMetaBurnCalldata(feeV2);
    const params = {
      stableBridgingFee: fee.raw.toString(),
      internalID: internalId,
      receiveSide: mChainSynthesis.address,
      managerChainBridge: mChainBridge.address,
      managerChainId: this.omniPoolConfig.chainId,
      sourceChainBridge: import_addresses3.AddressZero,
      sourceChainId: this.request.chainIdFrom,
      sourceChainSynthesis: mChainSynthesis.address,
      router,
      // multicall router
      swapCalldata,
      burnToken,
      burnCalldata,
      clientID: this.symbiosis.clientId
    };
    if (isTronChainId(chainIdTo)) {
      return prepareTronTransaction({
        chainId: chainIdTo,
        tronWeb: this.symbiosis.tronWeb(chainIdTo),
        abi: TRON_PORTAL_ABI,
        contractAddress: portal.address,
        functionName: "metaRevertRequest",
        params: [
          [
            fee.raw.toString(),
            // stableBridgingFee, uint256
            internalId,
            // internalID, bytes32
            mChainSynthesis.address,
            // receiveSide, address
            mChainBridge.address,
            // managerChainBridge, address
            import_addresses3.AddressZero,
            // sourceChainBridge, address
            this.omniPoolConfig.chainId,
            // managerChainId, uint256
            this.request.chainIdFrom,
            // sourceChainId, uint256
            router,
            // router, address
            swapCalldata,
            // swapCalldata, bytes
            mChainSynthesis.address,
            // sourceChainSynthesis, address
            burnToken,
            // burnToken, address
            burnCalldata,
            // burnCalldata, bytes
            this.symbiosis.clientId
            // clientID, bytes32
          ]
        ],
        ownerAddress: this.request.revertableAddress,
        // correct??
        value: 0
      });
    }
    return {
      to: portal.address,
      data: portal.interface.encodeFunctionData("metaRevertRequest", [params]),
      chainId: chainIdTo
    };
  }
  async getRevertBurnTransactionRequestV2Revert(fee) {
    const { internalId, chainIdTo } = this.request;
    const portal = this.symbiosis.portal(chainIdTo);
    const params = {
      stableBridgingFee: fee.raw.toString(),
      internalID: internalId,
      receiveSide: portal.address,
      managerChainBridge: this.symbiosis.bridge(this.omniPoolConfig.chainId).address,
      sourceChainBridge: import_addresses3.AddressZero,
      managerChainId: this.omniPoolConfig.chainId,
      sourceChainId: chainIdTo,
      router: import_addresses3.AddressZero,
      // multicall router
      swapCalldata: [],
      sourceChainSynthesis: this.symbiosis.synthesis(this.omniPoolConfig.chainId).address,
      burnToken: import_addresses3.AddressZero,
      burnCalldata: "0x00",
      // any not empty calldata
      clientID: this.symbiosis.clientId
    };
    if (isTronChainId(chainIdTo)) {
      return prepareTronTransaction({
        chainId: chainIdTo,
        tronWeb: this.symbiosis.tronWeb(chainIdTo),
        abi: TRON_PORTAL_ABI,
        contractAddress: portal.address,
        functionName: "metaRevertRequest",
        params: [
          [
            fee.raw.toString(),
            // stableBridgingFee, uint256
            internalId,
            // internalID, bytes32
            portal.address,
            // receiveSide, address
            this.symbiosis.bridge(this.omniPoolConfig.chainId).address,
            // managerChainBridge, address
            import_addresses3.AddressZero,
            // sourceChainBridge, address
            this.omniPoolConfig.chainId,
            // managerChainId, uint256
            chainIdTo,
            // sourceChainId, uint256
            import_addresses3.AddressZero,
            // multicall router, address
            [],
            // swapCalldata, bytes
            this.symbiosis.synthesis(this.omniPoolConfig.chainId).address,
            // sourceChainSynthesis, address
            import_addresses3.AddressZero,
            // burnToken, address
            "0x00",
            // burnCalldata, bytes, any not empty calldata
            this.symbiosis.clientId
            // clientID, bytes32
          ]
        ],
        ownerAddress: this.request.revertableAddress,
        value: 0
      });
    }
    return {
      to: portal.address,
      data: portal.interface.encodeFunctionData("metaRevertRequest", [params]),
      chainId: chainIdTo
    };
  }
  getExternalId() {
    const { type, internalId, chainIdTo, revertableAddress } = this.request;
    let contractAddress;
    if (type === "synthesize" || type === "synthesize-v2") {
      contractAddress = this.symbiosis.synthesis(chainIdTo).address;
    } else {
      contractAddress = this.symbiosis.portal(chainIdTo).address;
    }
    return getExternalId({ internalId, chainId: chainIdTo, revertableAddress, contractAddress });
  }
};

// src/crosschain/zapping.ts
var import_addresses4 = require("@ethersproject/constants/lib/addresses");
var import_constants41 = require("@ethersproject/constants");
var import_ethers52 = require("ethers");
var import_jsbi15 = __toESM(require("jsbi"));

// src/crosschain/omniLiquidity.ts
var OmniLiquidity = class {
  constructor(tokenAmountIn, to, slippage, deadline, pool, poolOracle) {
    this.tokenAmountIn = tokenAmountIn;
    this.to = to;
    this.slippage = slippage;
    this.deadline = deadline;
    this.pool = pool;
    this.poolOracle = poolOracle;
    this.callDataOffset = 4 + 32 * 2;
  }
  async init() {
    const network = await this.pool.provider.getNetwork();
    const index = await this.pool.assetToIndex(this.tokenAmountIn.token.address);
    const depositEstimate = await this.poolOracle.quoteDeposit(index, this.tokenAmountIn.raw.toString());
    const lpToken = new Token2({
      address: this.pool.address,
      decimals: 18,
      chainId: network.chainId
    });
    this.amountOut = new TokenAmount(lpToken, depositEstimate.lpTokenToMint.toString());
    const slippageAdjustedAmountOut = getMinAmount(this.slippage, this.amountOut.raw);
    this.callData = this.pool.interface.encodeFunctionData("deposit", [
      index,
      this.tokenAmountIn.raw.toString(),
      slippageAdjustedAmountOut.toString(),
      this.to,
      this.deadline
    ]);
    return this;
  }
};

// src/crosschain/zapping.ts
var Zapping = class {
  constructor(symbiosis, omniPoolConfig) {
    this.symbiosis = symbiosis;
    this.omniPoolConfig = omniPoolConfig;
    this.pool = this.symbiosis.omniPool(omniPoolConfig);
    this.poolOracle = this.symbiosis.omniPoolOracle(omniPoolConfig);
    this.multicallRouter = this.symbiosis.multicallRouter(omniPoolConfig.chainId);
  }
  async exactIn({
    tokenAmountIn,
    from,
    to,
    slippage,
    deadline
  }) {
    this.tokenAmountIn = tokenAmountIn;
    this.from = tronAddressToEvm(from);
    this.to = tronAddressToEvm(to);
    this.slippage = slippage;
    this.deadline = deadline;
    if (isTronToken(this.tokenAmountIn.token)) {
      this.revertableAddress = this.symbiosis.getRevertableAddress(this.omniPoolConfig.chainId);
    } else if (isTonChainId(this.tokenAmountIn.token.chainId)) {
      this.revertableAddress = this.symbiosis.getRevertableAddress(this.omniPoolConfig.chainId);
    } else {
      this.revertableAddress = this.from;
    }
    const targetPool = this.symbiosis.getOmniPoolByConfig(this.omniPoolConfig);
    if (!targetPool) {
      throw new SdkError(`Unknown pool ${this.omniPoolConfig.address}`);
    }
    const wrapped = wrappedToken(tokenAmountIn.token);
    const tokenPool = this.symbiosis.getOmniPoolByToken(wrapped);
    if (tokenPool?.id === targetPool.id) {
      this.transitTokenIn = wrapped;
    } else {
      this.transitTokenIn = this.symbiosis.transitToken(tokenAmountIn.token.chainId, this.omniPoolConfig);
    }
    if (!this.transitTokenIn.equals(tokenAmountIn.token)) {
      this.tradeA = this.buildTradeA();
      await this.tradeA.init();
    }
    this.synthToken = await this.getSynthToken();
    this.omniLiquidity = this.buildOmniLiquidity();
    await this.omniLiquidity.init();
    const fee = await this.getFee();
    this.omniLiquidity = this.buildOmniLiquidity(fee);
    await this.omniLiquidity.init();
    let payload;
    if (isTronChainId(this.tokenAmountIn.token.chainId)) {
      const transactionRequest = this.getTronTransactionRequest(fee);
      payload = {
        transactionType: "tron",
        transactionRequest
      };
    } else if (isTonChainId(this.tokenAmountIn.token.chainId)) {
      const transactionRequest = await this.getTonTransactionRequest(fee);
      payload = {
        transactionType: "ton",
        transactionRequest
      };
    } else {
      const transactionRequest = this.getEvmTransactionRequest(fee);
      payload = {
        transactionType: "evm",
        transactionRequest
      };
    }
    const routes = [];
    if (this.tradeA) {
      routes.push({
        provider: this.tradeA.tradeType,
        tokens: [this.tradeA.tokenAmountIn.token, this.tradeA.amountOut.token]
      });
    }
    routes.push({
      provider: "symbiosis",
      tokens: [this.getPortalTokenAmountIn().token, this.omniLiquidity.tokenAmountIn.token]
    });
    return {
      ...payload,
      fees: [
        {
          provider: "symbiosis",
          value: fee
        }
      ],
      routes,
      kind: "crosschain-swap",
      approveTo: this.symbiosis.chainConfig(tokenAmountIn.token.chainId).metaRouterGateway,
      priceImpact: this.calculatePriceImpact(),
      amountInUsd: this.getSynthAmount(fee),
      tokenAmountOut: this.omniLiquidity.amountOut,
      tokenAmountOutMin: this.omniLiquidity.amountOut
    };
  }
  async getTonTransactionRequest(fee) {
    return buildMetaSynthesize({
      symbiosis: this.symbiosis,
      fee,
      validUntil: this.deadline,
      from: this.from,
      to: this.to,
      revertableAddress: this.revertableAddress,
      amountIn: this.tokenAmountIn,
      chainIdOut: this.omniPoolConfig.chainId,
      secondDexRouter: this.multicallRouter.address,
      secondSwapCallData: this.getMulticallData(),
      swapTokens: [this.synthToken.address, this.synthToken.address],
      finalCallData: "",
      finalReceiveSide: import_addresses4.AddressZero,
      finalOffset: 0
    });
  }
  getEvmTransactionRequest(fee) {
    const [relayRecipient, otherSideCalldata] = this.otherSideSynthCallData(fee);
    let firstToken = this.tradeA ? this.tradeA.tokenAmountIn.token.address : this.tokenAmountIn.token.address;
    if (!firstToken) {
      firstToken = import_addresses4.AddressZero;
    }
    const approvedTokens = [firstToken, this.getPortalTokenAmountIn().token.address];
    const value = this.tradeA && this.tokenAmountIn.token.isNative ? import_ethers52.BigNumber.from(this.tradeA.tokenAmountIn.raw.toString()) : void 0;
    const params = {
      firstSwapCalldata: this.tradeA?.callData || [],
      secondSwapCalldata: [],
      approvedTokens,
      firstDexRouter: this.tradeA?.routerAddress || import_addresses4.AddressZero,
      secondDexRouter: import_addresses4.AddressZero,
      amount: this.tokenAmountIn.raw.toString(),
      nativeIn: this.tokenAmountIn.token.isNative,
      relayRecipient,
      otherSideCalldata
    };
    const { chainId } = this.tokenAmountIn.token;
    const metaRouter = this.symbiosis.metaRouter(chainId);
    const data = metaRouter.interface.encodeFunctionData("metaRoute", [params]);
    return {
      chainId,
      to: metaRouter.address,
      data,
      value
    };
  }
  getTronTransactionRequest(fee) {
    const [relayRecipient, otherSideCalldata] = this.otherSideSynthCallData(fee);
    let firstToken = this.tradeA ? this.tradeA.tokenAmountIn.token.address : this.tokenAmountIn.token.address;
    if (!firstToken) {
      firstToken = import_addresses4.AddressZero;
    }
    const approvedTokens = [firstToken, this.getPortalTokenAmountIn().token.address];
    const { chainId } = this.tokenAmountIn.token;
    const metaRouter = this.symbiosis.metaRouter(chainId);
    return prepareTronTransaction({
      chainId,
      tronWeb: this.symbiosis.tronWeb(chainId),
      abi: TRON_METAROUTER_ABI,
      contractAddress: metaRouter.address,
      functionName: "metaRoute",
      params: [
        [
          this.tradeA?.callData || [],
          [],
          approvedTokens,
          this.tradeA?.routerAddress || import_addresses4.AddressZero,
          import_addresses4.AddressZero,
          this.tokenAmountIn.raw.toString(),
          this.tokenAmountIn.token.isNative,
          relayRecipient,
          otherSideCalldata
        ]
      ],
      ownerAddress: this.from,
      value: 0
    });
  }
  calculatePriceImpact() {
    const zero = new Percent(import_jsbi15.default.BigInt(0), BIPS_BASE);
    let pi = this.tradeA?.priceImpact || zero;
    const max = new Percent(import_jsbi15.default.BigInt(1e4), BIPS_BASE);
    if (pi.greaterThan(max))
      pi = max;
    return new Percent(pi.numerator, pi.denominator);
  }
  getPortalTokenAmountIn() {
    return this.tradeA ? this.tradeA.amountOut : this.tokenAmountIn;
  }
  getSynthAmount(fee) {
    let synthAmount = new TokenAmount(this.synthToken, this.getPortalTokenAmountIn().raw);
    if (fee) {
      if (synthAmount.lessThan(fee) || synthAmount.equalTo(fee)) {
        throw new AmountLessThanFeeError(
          `Amount ${synthAmount.toSignificant()} ${synthAmount.token.symbol} less than fee ${fee.toSignificant()} ${fee.token.symbol}`
        );
      }
      synthAmount = synthAmount.subtract(fee);
    }
    return synthAmount;
  }
  buildTradeA() {
    const chainId = this.tokenAmountIn.token.chainId;
    const tokenOut = this.transitTokenIn;
    const from = this.symbiosis.metaRouter(chainId).address;
    const to = from;
    if (WrapTrade.isSupported(this.tokenAmountIn.token, tokenOut)) {
      return new WrapTrade({
        tokenAmountIn: this.tokenAmountIn,
        tokenAmountInMin: this.tokenAmountIn,
        // correct as it is tradeA
        tokenOut,
        to: this.to
      });
    }
    return new AggregatorTrade({
      tokenAmountIn: this.tokenAmountIn,
      tokenAmountInMin: this.tokenAmountIn,
      tokenOut,
      from,
      to,
      slippage: this.slippage / 100,
      symbiosis: this.symbiosis,
      clientId: this.symbiosis.clientId,
      deadline: this.deadline
    });
  }
  buildOmniLiquidity(fee) {
    const tokenAmountIn = this.getSynthAmount(fee);
    return new OmniLiquidity(tokenAmountIn, this.to, this.slippage, this.deadline, this.pool, this.poolOracle);
  }
  getMulticallData() {
    return this.multicallRouter.interface.encodeFunctionData("multicall", [
      "0",
      // amount will be patched
      [this.omniLiquidity.callData],
      // _calldata
      [this.pool.address],
      // _receiveSides
      [this.synthToken.address],
      // _path
      [this.omniLiquidity.callDataOffset],
      // _offset
      this.to
      // _to
    ]);
  }
  otherSideSynthCallData(fee) {
    if (!this.tokenAmountIn) {
      throw new SdkError("Token is not set");
    }
    const chainIdIn = this.tokenAmountIn.token.chainId;
    const chainIdOut = this.omniPoolConfig.chainId;
    const tokenAmount = this.getPortalTokenAmountIn();
    const portal = this.symbiosis.portal(chainIdIn);
    return [
      portal.address,
      portal.interface.encodeFunctionData("metaSynthesize", [
        {
          stableBridgingFee: fee.raw.toString(),
          amount: tokenAmount.raw.toString(),
          rtoken: tokenAmount.token.address,
          chain2address: this.to,
          receiveSide: this.symbiosis.synthesis(chainIdOut).address,
          oppositeBridge: this.symbiosis.bridge(chainIdOut).address,
          syntCaller: this.from,
          chainID: chainIdOut,
          swapTokens: [this.synthToken.address, this.synthToken.address],
          secondDexRouter: this.multicallRouter.address,
          secondSwapCalldata: this.getMulticallData(),
          finalReceiveSide: import_addresses4.AddressZero,
          finalCalldata: [],
          finalOffset: 0,
          revertableAddress: this.revertableAddress,
          clientID: this.symbiosis.clientId
        }
      ])
    ];
  }
  async getSynthToken() {
    const chainIdOut = this.omniPoolConfig.chainId;
    const rep = this.symbiosis.getRepresentation(this.transitTokenIn, chainIdOut);
    if (!rep) {
      throw new NoRepresentationFoundError(
        `Representation of ${this.transitTokenIn.symbol} in chain ${chainIdOut} not found`
      );
    }
    return rep;
  }
  async getFee() {
    const chainIdIn = this.tokenAmountIn.token.chainId;
    const chainIdOut = this.omniPoolConfig.chainId;
    const portal = this.symbiosis.portal(chainIdIn);
    const synthesis = this.symbiosis.synthesis(chainIdOut);
    const amount = this.getPortalTokenAmountIn();
    const internalId = getInternalId({
      contractAddress: portal.address,
      requestCount: import_constants41.MaxUint256,
      chainId: chainIdIn
    });
    const externalId = getExternalId({
      internalId,
      contractAddress: synthesis.address,
      revertableAddress: this.revertableAddress,
      chainId: chainIdOut
    });
    const calldata = synthesis.interface.encodeFunctionData("metaMintSyntheticToken", [
      {
        stableBridgingFee: "1",
        amount: amount.raw.toString(),
        crossChainID: CROSS_CHAIN_ID,
        externalID: externalId,
        tokenReal: amount.token.address,
        chainID: chainIdIn,
        to: this.to,
        swapTokens: [this.synthToken.address, this.synthToken.address],
        secondDexRouter: this.multicallRouter.address,
        secondSwapCalldata: this.getMulticallData(),
        finalReceiveSide: import_addresses4.AddressZero,
        finalCalldata: [],
        finalOffset: 0
      }
    ]);
    const { price: fee } = await this.symbiosis.getBridgeFee({
      receiveSide: synthesis.address,
      calldata,
      chainIdFrom: this.tokenAmountIn.token.chainId,
      chainIdTo: chainIdOut
    });
    return new TokenAmount(this.synthToken, fee);
  }
};

// src/crosschain/config/mainnet.ts
var config = {
  advisor: {
    url: "https://api.symbiosis.finance/calculations"
  },
  limits: [],
  omniPools: [
    {
      // USD
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0xC3255E317481B95A3e61844c274dE8BAF8eDF397",
      oracle: "0xbBFb7cb70f84fb6fE1Cb13e42A0B71EFDe769428",
      generalPurpose: true,
      coinGeckoId: "usd-coin"
    },
    {
      // ETH
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0x2d877Fe148dBCB056Bf71ED5232E8d580195c0f1",
      oracle: "0x61ab82B6Cfe17E8b242E024DE7Fc936c10e35327",
      generalPurpose: true,
      coinGeckoId: "weth"
    },
    {
      // BTC
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0xBf084Ee3E5C73129167167Bd5DB9FE8513d8F7e0",
      oracle: "0x597282d7F75Cf34450395D92a087C71F597024f5",
      generalPurpose: false,
      coinGeckoId: "bitcoin"
    },
    {
      // LADYS
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0xAF8Ba1498e1EddD602Aab9cDe4BC6A3a83400165",
      oracle: "0x422A0A054Eb5a7424d9E3042862546a3F04e3596",
      generalPurpose: false,
      coinGeckoId: "milady-meme-coin"
    },
    {
      // FRAX
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0x92114294E42A96C9eF3163DA18Ee7eFdbA6cc661",
      oracle: "0xd29bfF100F5599522D94E7aEDf2d6B65357c7516",
      generalPurpose: false,
      coinGeckoId: "frax"
    },
    {
      // G
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0x20C54Cc697329333fe00DeD49C7dCA8c83dcE65b",
      oracle: "0xDC636B062AB02C51b79cFaA6C5De7B7fFeAc2717",
      generalPurpose: false,
      coinGeckoId: "g-token"
    },
    {
      // WTON
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0x7E60A78518E7c9267ae0795E9914F19Cd7CdA168",
      oracle: "0xAa444c22297b0dBd97bBf316dC0b7C64b33aa64C",
      generalPurpose: false,
      coinGeckoId: "wrapped-ton"
    },
    {
      // CATI
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0x53a9dbeA6013B22A8AF3Ae8AAac8Fd31759aD287",
      oracle: "0x9C15664C49065b8E20EcE570f0818a68b71A00DA",
      generalPurpose: false,
      coinGeckoId: "catizen"
    },
    {
      // UXLINK
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0xcd5a0263DD8e29D9727865dcaD0f9D56C6e1Db93",
      oracle: "0x8d448bDb0c7a5fFf6A4ddf4b815bD517727E0aE5",
      generalPurpose: false,
      coinGeckoId: "uxlink"
    },
    {
      // PINEYE
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0xb2EF74C1120C662984f907ea08096eDAAD94D54E",
      oracle: "0x4E73aF5663c997A796FF2cc1AD8C5d406541b4F2",
      generalPurpose: false,
      coinGeckoId: "pineye"
    },
    {
      // WBNB
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0x095B362957B3E3638AE1eb7A957f392cD3Dc3c7C",
      oracle: "0xCCc50a096E3078508FCb14Ac0B4DF3330C32BD96",
      generalPurpose: false,
      coinGeckoId: "binancecoin"
    },
    {
      // SIS
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0x3E6A3EbbC9D88ACC192221797ad90BF72d391778",
      oracle: "0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C",
      generalPurpose: false,
      coinGeckoId: "symbiosis-finance"
    },
    {
      // APE
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0x0b01139C59D6bc2C8323FDbb4824e4aa5Ff4DE7C",
      oracle: "0x258EF63a81bade0c31c7C4ae75d2CD5332034bEE",
      generalPurpose: false,
      coinGeckoId: "apecoin"
    },
    {
      // EVAA
      chainId: 13863860 /* SYMBIOSIS_MAINNET */,
      address: "0xd40750043100501ea75cAc2386f23Bcf7554cB9A",
      oracle: "0x3930C108ae8e85aAdc0d833D2096b8778eaf4432",
      generalPurpose: false,
      coinGeckoId: "evaa-protocol"
    }
  ],
  revertableAddress: {
    [728126428 /* TRON_MAINNET */]: "0xd99ac0681b904991169a4f398B9043781ADbe0C3",
    default: "0xd99ac0681b904991169a4f398B9043781ADbe0C3"
  },
  refundAddress: "0xd99ac0681b904991169a4f398B9043781ADbe0C3",
  btcConfigs: [
    {
      btc: new Token2({
        deprecated: true,
        name: "Bitcoin",
        symbol: "BTC",
        address: "0xc102C66D4a1e1865Ee962084626Cf4c27D5BFc74",
        chainId: 3652501241 /* BTC_MAINNET */,
        decimals: 8,
        icons: {
          large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
          small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
        }
      }),
      symBtc: {
        address: "0x49731d3c7234619a74B4c095838AfbC19cC44f28",
        chainId: 324 /* ZKSYNC_MAINNET */
      },
      forwarderUrl: "https://btc-forwarder.symbiosis.finance/zksync/forwarder/api/v1"
    },
    {
      btc: new Token2({
        name: "Bitcoin",
        symbol: "BTC",
        address: "0x1dfc1e32d75b3f4cb2f2b1bcecad984e99eeba05",
        chainId: 3652501241 /* BTC_MAINNET */,
        decimals: 8,
        icons: {
          large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
          small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
        }
      }),
      symBtc: {
        address: "0xa1262496e84a9663b7AB64ed96C152A23d0B7214",
        chainId: 56 /* BSC_MAINNET */
      },
      forwarderUrl: "https://btc-forwarder.symbiosis.finance/bsc/forwarder/api/v1"
    },
    {
      btc: new Token2({
        name: "Bitcoin",
        symbol: "BTC",
        address: "0x334524a0adb21425afcf77ac40580d68e30e51d8",
        chainId: 3652501241 /* BTC_MAINNET */,
        decimals: 8,
        icons: {
          large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
          small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
        }
      }),
      symBtc: {
        address: "0xc17d768bf4fdc6f20a4a0d8be8767840d106d077",
        chainId: 30 /* RSK_MAINNET */
      },
      forwarderUrl: "https://btc-forwarder.symbiosis.finance/rsk/forwarder/api/v1"
    }
  ],
  chains: [
    {
      id: 3652501241 /* BTC_MAINNET */,
      rpc: "https://mempool.space/api",
      filterBlockOffset: 0,
      stables: [],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x0000000000000000000000000000000000000000",
      metaRouterGateway: "0x0000000000000000000000000000000000000000",
      bridge: "0x0000000000000000000000000000000000000000",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x0000000000000000000000000000000000000000",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x0000000000000000000000000000000000000000"
    },
    {
      id: 1 /* ETH_MAINNET */,
      rpc: "https://ethereum-rpc.publicnode.com",
      spareRpcs: ["https://rpc.ankr.com/eth", "https://eth.llamarpc.com", "https://eth-pokt.nodies.app"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
          symbol: "USDC",
          decimals: 6,
          chainId: 1 /* ETH_MAINNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Symbiosis",
          symbol: "SIS",
          address: "0xd38BB40815d2B0c2d2c866e0c72c5728ffC76dd9",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
          }
        },
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "Tether USD",
          symbol: "USDT",
          address: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
          }
        },
        {
          deprecated: false,
          name: "Wrapped BTC",
          symbol: "WBTC",
          address: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 8,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png"
          }
        },
        {
          name: "Milady Meme Coin",
          symbol: "LADYS",
          address: "0x12970E6868f88f6557B76120662c1B3E50A646bf",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png"
          }
        },
        {
          name: "pufETH",
          symbol: "pufETH",
          address: "0xD9A442856C234a39a81a089C06451EBAa4306a72",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
          }
        },
        {
          name: "Frax",
          symbol: "FRAX",
          address: "0x853d955aCEf822Db058eb8505911ED77F175b99e",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png"
          }
        },
        {
          name: "Gravity",
          symbol: "G",
          address: "0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
          }
        },
        {
          deprecated: true,
          name: "Wrapped TON",
          symbol: "WTON",
          address: "0x582d872A1B094FC48F5DE31D3B73F2D9bE47def1",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 9,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
          }
        },
        {
          name: "ApeCoin",
          symbol: "APE",
          address: "0x4d224452801ACEd8B2F0aebE155379bb5D594381",
          chainId: 1 /* ETH_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xf621Fb08BBE51aF70e7E0F4EA63496894166Ff7F",
      metaRouterGateway: "0xfCEF2Fe72413b65d3F393d278A714caD87512bcd",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x49d3Fc00f3ACf80FABCb42D7681667B20F60889A"
    },
    {
      id: 56 /* BSC_MAINNET */,
      rpc: "https://bsc-rpc.publicnode.com",
      spareRpcs: ["https://rpc.ankr.com/bsc", "https://binance.llamarpc.com"],
      filterBlockOffset: 1e3,
      partnerFeeCollector: "0xc6a2C8D42086B13A577e1c300663451Ae405b767",
      stables: [
        {
          name: "USD Coin",
          address: "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
          symbol: "USDC",
          decimals: 18,
          chainId: 56 /* BSC_MAINNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          deprecated: true,
          name: "BUSD Token",
          address: "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
          symbol: "BUSD",
          decimals: 18,
          chainId: 56 /* BSC_MAINNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png"
          }
        },
        {
          name: "Ethereum Token",
          symbol: "ETH",
          address: "0x2170ed0880ac9a755fd29b2688956bd959f933f8",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "Binance-Peg BTCB Token",
          symbol: "BTCB",
          address: "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4023.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/4023.png"
          }
        },
        {
          name: "Symbiosis",
          symbol: "SIS",
          address: "0xF98b660AdF2ed7d9d9D9dAACC2fb0CAce4F21835",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
          }
        },
        {
          name: "Gravity",
          symbol: "G",
          address: "0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
          }
        },
        {
          deprecated: true,
          name: "Wrapped TON",
          symbol: "WTON",
          address: "0x76A797A59Ba2C17726896976B7B3747BfD1d220f",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 9,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
          }
        },
        {
          name: "GPT Wars",
          symbol: "GPTW",
          address: "0xB3F4D70C6a18cC0F2D1205dbF3B21cB73e1B0592",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893",
            small: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893"
          }
        },
        {
          name: "Symbiosis BTC",
          symbol: "syBTC",
          address: "0xA67c48F86Fc6d0176Dca38883CA8153C76a532c7",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 8,
          icons: {
            large: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200",
            small: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200"
          }
        },
        {
          name: "PinEye",
          symbol: "PINEYE",
          address: "0x4b3a2187648902082db0a44e8235d57F3f23DD10",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png"
          }
        },
        {
          name: "Wrapped BNB",
          symbol: "WBNB",
          address: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png"
          }
        },
        {
          name: "EVAA",
          symbol: "EVAA",
          address: "0xaa036928c9c0Df07d525B55ea8EE690Bb5a628C1",
          chainId: 56 /* BSC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png"
          }
        }
      ],
      router: "0x10ED43C718714eb63d5aA57B78B54704E256024E",
      dexFee: 25,
      metaRouter: "0x44487a445a7595446309464A82244B4bD4e325D5",
      // metaRouter: '0x5aaaAc8dB525277A821Bf0cE3eD8A7E4b22Bd9e7',
      metaRouterGateway: "0x5c97D726bf5130AE15408cE32bc764e458320D2f",
      bridge: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8",
      synthesis: "0x6B1bbd301782FF636601fC594Cd7Bfe74871bfaA",
      portal: "0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4",
      fabric: "0xc17d768Bf4FdC6f20a4A0d8Be8767840D106D077",
      multicallRouter: "0x44b5d0F16Ad55c4e7113310614745e8771b963bB"
      // depository: {
      //     depository: '0x056E5FaBCD478995d6aA7958006cDA042C551656',
      //     withdrawUnlocker: '0x89d5140C4E0B3a0B42Bb532CFBF9Da378ee7C11C',
      //     swapUnlocker: '0x37f5ba9F15A2547473F7172e45907F898D72eCCF',
      //     btcRefundUnlocker: '0xbC405EAf2Ee0420ab5D72774b66330D4712dE4A2',
      //     branchedUnlocker: '0x3bA0365C6Bd3D106570e192E29BAAc4b70690249',
      // },
    },
    {
      id: 43114 /* AVAX_MAINNET */,
      rpc: "https://avalanche-c-chain-rpc.publicnode.com",
      spareRpcs: ["https://rpc.ankr.com/avalanche", "https://api.avax.network/ext/bc/C/rpc"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
          symbol: "USDC",
          decimals: 6,
          chainId: 43114 /* AVAX_MAINNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          deprecated: true,
          name: "USD Coin",
          address: "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
          symbol: "USDC.e",
          decimals: 6,
          chainId: 43114 /* AVAX_MAINNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        }
      ],
      router: "0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106",
      dexFee: 30,
      metaRouter: "0x6F0f6393e45fE0E7215906B6f9cfeFf53EA139cf",
      metaRouterGateway: "0x4cfA66497Fa84D739a0f785FBcEe9196f1C64e4a",
      bridge: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0xE75C7E85FE6ADd07077467064aD15847E6ba9877",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xDc9a6a26209A450caC415fb78487e907c660cf6a"
    },
    {
      id: 137 /* MATIC_MAINNET */,
      rpc: "https://polygon-bor-rpc.publicnode.com",
      spareRpcs: ["https://rpc.ankr.com/polygon", "https://polygon.llamarpc.com", "https://polygon.meowrpc.com"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin (PoS) (USDC.e)",
          address: "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
          symbol: "USDC.e",
          decimals: 6,
          chainId: 137 /* MATIC_MAINNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
          chainId: 137 /* MATIC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "Frax",
          symbol: "FRAX",
          address: "0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89",
          chainId: 137 /* MATIC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png"
          }
        }
      ],
      router: "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff",
      dexFee: 30,
      metaRouter: "0xa260E3732593E4EcF9DdC144fD6C4c5fe7077978",
      metaRouterGateway: "0xAb83653fd41511D638b69229afBf998Eb9B0F30c",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xc5B61b9abC3C6229065cAD0e961aF585C5E0135c"
    },
    {
      id: 40 /* TELOS_MAINNET */,
      rpc: "https://rpc.telos.net",
      spareRpcs: ["https://rpc.ankr.com/telos"],
      filterBlockOffset: 3e3,
      stables: [
        {
          name: "syUSDC",
          address: "0xe6E5f3d264117E030C21920356641DbD5B3d660c",
          symbol: "USDC",
          decimals: 6,
          chainId: 40 /* TELOS_MAINNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        }
      ],
      router: "0x9b1adec00a25fffd87a5bb17f61916e1c26f6844",
      dexFee: 25,
      metaRouter: "0x8097f0B9f06C27AF9579F75762F971D745bb222F",
      metaRouterGateway: "0x4949e74094D6F9C06D68e5Ffe388f6542C4b1A34",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8",
      portal: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8",
      fabric: "0x8a7F930003BedD63A1ebD99C5917FD6aE7E3dedf",
      multicallRouter: "0xcB28fbE3E9C0FEA62E0E63ff3f232CECfE555aD4"
    },
    {
      id: 2222 /* KAVA_MAINNET */,
      rpc: "https://rpc.ankr.com/kava_evm",
      spareRpcs: ["https://kava-evm-rpc.publicnode.com", "https://evm.kava.io", "https://evm.kava-rpc.com"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Tether USDt",
          symbol: "USDt",
          address: "0x919C1c267BC06a7039e03fcc2eF738525769109c",
          chainId: 2222 /* KAVA_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
          }
        }
      ],
      router: "0xA7544C409d772944017BB95B99484B6E0d7B6388",
      dexFee: 30,
      metaRouter: "0x77Ed285AD9d1c8C0307eA23DcE68B8a5A6AfB39A",
      metaRouterGateway: "0x0c4313a5dD4990f2fC15c6aA4d287D4602645a05",
      bridge: "0xda8057acB94905eb6025120cB2c38415Fd81BfEB",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 288 /* BOBA_MAINNET */,
      rpc: "https://lightning-replica.boba.network",
      spareRpcs: ["https://replica.boba.network", "https://1rpc.io/boba/eth", "https://mainnet.boba.network"],
      filterBlockOffset: 3e3,
      stables: [
        {
          name: "USD Coin",
          address: "0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc",
          symbol: "USDC",
          decimals: 6,
          chainId: 288 /* BOBA_MAINNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        }
      ],
      router: "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
      dexFee: 30,
      metaRouter: "0xca506793A420E901BbCa8066be5661E3C52c84c2",
      metaRouterGateway: "0xd92Ca299F1C2518E78E48C207b64591BA6E9b9a8",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x506803495B1876FE1fA6Cd9dC65fB060057A4Cc3"
    },
    {
      id: 13863860 /* SYMBIOSIS_MAINNET */,
      rpc: "https://symbiosis.calderachain.xyz/http",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      partnerFeeCollector: "0x783EE304C54d4658f59EAefb73b32D37ee466e23",
      stables: [
        {
          chainId: 13863860 /* SYMBIOSIS_MAINNET */,
          address: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
          decimals: 18,
          symbol: "WSIS",
          name: "Wrapped SIS",
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
      metaRouterGateway: "0x13F2C77D83258C3038cF59FD024bD94A95B2A0D8",
      bridge: "0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8",
      synthesis: "0x45CFd6FB7999328F189aaD2739Fba4Be6C45E5bf",
      portal: "0x0000000000000000000000000000000000000000",
      fabric: "0xf85FC807D05d3Ab2309364226970aAc57b4e1ea4",
      multicallRouter: "0xBbAD2fe9558e55EbfA04b3B5Bff0b6c4E2ffDD2C"
    },
    {
      id: 324 /* ZKSYNC_MAINNET */,
      rpc: "https://mainnet.era.zksync.io",
      spareRpcs: ["https://rpc.ankr.com/zksync_era", "https://zksync.meowrpc.com", "https://zksync.drpc.org"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC.e",
          address: "0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4",
          chainId: 324 /* ZKSYNC_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          deprecated: true,
          name: "USD Coin",
          symbol: "USDC",
          address: "0x1d17CBcF0D6D143135aE902365D2E5e2A16538D4",
          chainId: 324 /* ZKSYNC_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x5aea5775959fbc2557cc8789bc1bf90a239d9a91",
          chainId: 324 /* ZKSYNC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          deprecated: true,
          name: "Wrapped BTC",
          symbol: "WBTC",
          address: "0xBBeB516fb02a01611cBBE0453Fe3c580D7281011",
          chainId: 324 /* ZKSYNC_MAINNET */,
          decimals: 8,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png"
          }
        },
        {
          name: "Symbiosis",
          symbol: "SIS",
          address: "0xdd9f72afED3631a6C85b5369D84875e6c42f1827",
          chainId: 324 /* ZKSYNC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
          }
        },
        {
          deprecated: true,
          name: "Symbiosis BTC",
          symbol: "syBTC",
          address: "0xED0c95EBe5a3E687cB2224687024FeC6518E683e",
          chainId: 324 /* ZKSYNC_MAINNET */,
          decimals: 8,
          icons: {
            large: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200",
            small: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200"
          }
        }
      ],
      router: "0x8B791913eB07C32779a16750e3868aA8495F5964",
      dexFee: 30,
      metaRouter: "0x38307CB291Af47Af9847c134a34E9477c939Ca28",
      metaRouterGateway: "0x8cA239448AdD34b057D1CB5934F12AC899DB66e1",
      bridge: "0x51eE73BEC8521E88042b426F31864f456f2a866e",
      synthesis: "0x07bffC25011901CB01a00127518A154b47eB6e80",
      portal: "0x4f5456d4d0764473DfCA1ffBB8524C151c4F19b9",
      fabric: "0xa43772bC9EA21625A2B0070B7bf006324B7A7FAE",
      multicallRouter: "0xe004DE550074856bD64Cc1A89A8B3b56bD3eAf31"
    },
    {
      id: 42161 /* ARBITRUM_MAINNET */,
      rpc: "https://arb1.arbitrum.io/rpc",
      spareRpcs: ["https://rpc.ankr.com/arbitrum", "https://arbitrum.llamarpc.com", "https://1rpc.io/arb"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
          chainId: 42161 /* ARBITRUM_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          deprecated: true,
          name: "USD Coin (Arb1)",
          symbol: "USDC.e",
          address: "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
          chainId: 42161 /* ARBITRUM_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
          chainId: 42161 /* ARBITRUM_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "Symbiosis",
          symbol: "SIS",
          address: "0x9E758B8a98a42d612b3D38B66a22074DC03D7370",
          chainId: 42161 /* ARBITRUM_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
          }
        },
        {
          name: "Milady Meme Coin",
          symbol: "LADYS",
          address: "0x3b60FF35D3f7F62d636b067dD0dC0dFdAd670E4E",
          chainId: 42161 /* ARBITRUM_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png"
          }
        },
        {
          name: "Frax",
          symbol: "FRAX",
          address: "0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F",
          chainId: 42161 /* ARBITRUM_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png"
          }
        },
        {
          name: "UXLINK Token",
          symbol: "UXLINK",
          address: "0x1A6B3A62391ECcaaa992ade44cd4AFe6bEC8CfF1",
          chainId: 42161 /* ARBITRUM_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png"
          }
        },
        {
          name: "ApeCoin",
          symbol: "APE",
          address: "0x7f9FBf9bDd3F4105C478b996B648FE6e828a1e98",
          chainId: 42161 /* ARBITRUM_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png"
          }
        }
      ],
      router: "0xD01319f4b65b79124549dE409D36F25e04B3e551",
      dexFee: 30,
      metaRouter: "0xf7e96217347667064DEE8f20DB747B1C7df45DDe",
      metaRouterGateway: "0x80ddDDa846e779cceE463bDC0BCc2Ae296feDaF9",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x326adbE46D7E6C1B3927e9309B96DF478bda6D16",
      portal: "0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9",
      fabric: "0x2eE9559387b806E88fd46b9DA160D64A29CE7Da0",
      multicallRouter: "0xda8057acB94905eb6025120cB2c38415Fd81BfEB"
    },
    {
      id: 10 /* OPTIMISM_MAINNET */,
      rpc: "https://optimism-rpc.publicnode.com",
      spareRpcs: ["https://mainnet.optimism.io", "https://rpc.ankr.com/optimism"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC.e",
          address: "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
          chainId: 10 /* OPTIMISM_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x4200000000000000000000000000000000000006",
          chainId: 10 /* OPTIMISM_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x0f91052dc5B4baE53d0FeA5DAe561A117268f5d2",
      metaRouterGateway: "0x200a0fe876421DC49A26508e3Efd0a1008fD12B5",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 42170 /* ARBITRUM_NOVA */,
      rpc: "https://arbitrum-nova-rpc.publicnode.com",
      spareRpcs: [
        "https://nova.arbitrum.io/rpc",
        "https://rpc.ankr.com/arbitrumnova",
        "https://arbitrum-nova.drpc.org"
      ],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0x750ba8b76187092B0D1E87E28daaf484d1b5273b",
          chainId: 42170 /* ARBITRUM_NOVA */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x722e8bdd2ce80a4422e880164f2079488e115365",
          chainId: 42170 /* ARBITRUM_NOVA */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0xEe01c0CD76354C383B8c7B4e65EA88D00B06f36f",
      dexFee: 30,
      metaRouter: "0xca506793A420E901BbCa8066be5661E3C52c84c2",
      metaRouterGateway: "0xd92Ca299F1C2518E78E48C207b64591BA6E9b9a8",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 1101 /* POLYGON_ZK */,
      rpc: "https://rpc.ankr.com/polygon_zkevm",
      spareRpcs: [
        "https://polygon-zkevm.drpc.org",
        "https://zkevm-rpc.com",
        "https://polygon-zkevm-mainnet.public.blastapi.io"
      ],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035",
          chainId: 1101 /* POLYGON_ZK */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          deprecated: true,
          name: "USD Coin",
          symbol: "USDC.e",
          address: "0x37eAA0eF3549a5Bb7D431be78a3D99BD360d19e5",
          chainId: 1101 /* POLYGON_ZK */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x4f9a0e7fd2bf6067db6994cf12e4495df938e6e9",
          chainId: 1101 /* POLYGON_ZK */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 30,
      metaRouter: "0xb91d3060C90aac7c4c706aef2B37997b3b2a1DcF",
      metaRouterGateway: "0x668961F4923A4FB96b22ad1F18aE215bB2694593",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 59144 /* LINEA_MAINNET */,
      rpc: "https://rpc.linea.build",
      spareRpcs: ["https://1rpc.io/linea", "https://linea.drpc.org", "https://linea.decubate.com"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f",
          chainId: 59144 /* LINEA_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0x176211869cA2b568f2A7D4EE941E073a821EE1ff",
          chainId: 59144 /* LINEA_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Symbiosis",
          symbol: "SIS",
          address: "0x6EF95B6f3b0F39508e3E04054Be96D5eE39eDE0d",
          chainId: 59144 /* LINEA_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 30,
      metaRouter: "0x9A31bAC4b3B958C835C243800B474818D04393dd",
      metaRouterGateway: "0x83f71AabdDBb9F0E3B6462Cc7635b6fFAD0f2f2e",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 5e3 /* MANTLE_MAINNET */,
      rpc: "https://mantle-rpc.publicnode.com",
      spareRpcs: ["https://rpc.mantle.xyz", "https://rpc.ankr.com/mantle"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0x09Bc4E0D864854c6aFB6eB9A9cdF58aC190D0dF9",
          chainId: 5e3 /* MANTLE_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111",
          chainId: 5e3 /* MANTLE_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "Catizen",
          symbol: "CATI",
          address: "0x1Bdd8878252DaddD3Af2ba30628813271294eDc0",
          chainId: 5e3 /* MANTLE_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png"
          }
        },
        {
          name: "UXLINK Token",
          symbol: "UXLINK",
          address: "0x482deB2F7B9608a80eA91E71F06380E9891501C6",
          chainId: 5e3 /* MANTLE_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png"
          }
        }
      ],
      router: "0xDd0840118bF9CCCc6d67b2944ddDfbdb995955FD",
      dexFee: 30,
      metaRouter: "0xca506793A420E901BbCa8066be5661E3C52c84c2",
      metaRouterGateway: "0xd92Ca299F1C2518E78E48C207b64591BA6E9b9a8",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 8453 /* BASE_MAINNET */,
      rpc: "https://mainnet.base.org",
      spareRpcs: ["https://base-rpc.publicnode.com", "https://rpc.ankr.com/base"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x4200000000000000000000000000000000000006",
          chainId: 8453 /* BASE_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "USD Base Coin",
          symbol: "USDbC",
          address: "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA",
          chainId: 8453 /* BASE_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Gravity",
          symbol: "G",
          address: "0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649",
          chainId: 8453 /* BASE_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
          }
        }
      ],
      router: "0x327Df1E6de05895d2ab08513aaDD9313Fe505d86",
      dexFee: 0,
      metaRouter: "0x691df9C4561d95a4a726313089c8536dd682b946",
      metaRouterGateway: "0x41Ae964d0F61Bb5F5e253141A462aD6F3b625B92",
      bridge: "0x8097f0B9f06C27AF9579F75762F971D745bb222F",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0xEE981B2459331AD268cc63CE6167b446AF4161f8",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9"
    },
    {
      id: 728126428 /* TRON_MAINNET */,
      rpc: "https://api.trongrid.io",
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Tether USDt",
          symbol: "USDT",
          address: "0xa614f803b6fd780986a42c78ec9c7f77e6ded13c",
          chainId: 728126428 /* TRON_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
          }
        }
      ],
      router: "0x6E0617948FE030A7E4970F8389D4AD295F249B7E",
      dexFee: 30,
      metaRouter: "0x0863786bbf4561f4a2a8be5a9ddf152afd8ae25c",
      metaRouterGateway: "0x49e1816a2cf475515e7c80c9f0f0e16ae499198b",
      bridge: "0xc5a6517050c44ba78295f57f4754bb68f8705321",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0xd83b5752b42856a08087748de6095af0be52d299",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x354ed0e8616678f2829feb2e2e9a0e0869fa82fb"
    },
    {
      id: 534352 /* SCROLL_MAINNET */,
      rpc: "https://rpc.scroll.io",
      spareRpcs: ["https://scroll-rpc.publicnode.com", "https://rpc.ankr.com/scroll"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x5300000000000000000000000000000000000004",
          chainId: 534352 /* SCROLL_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4",
          chainId: 534352 /* SCROLL_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "Symbiosis",
          symbol: "SIS",
          address: "0x1467b62A6AE5CdcB10A6a8173cfe187DD2C5a136",
          chainId: 534352 /* SCROLL_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
          }
        },
        {
          name: "pufETH",
          symbol: "pufETH",
          address: "0xc4d46E8402F476F269c379677C99F18E22Ea030e",
          chainId: 534352 /* SCROLL_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x624FFe62eBa13e6057878bCA1D7A9E35651E1D9c",
      metaRouterGateway: "0x49952ff32FcBc3408D447E1E91Da2b44BD2D1AFE",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9"
    },
    {
      id: 169 /* MANTA_MAINNET */,
      rpc: "https://pacific-rpc.manta.network/http",
      spareRpcs: ["https://manta-atlantic-rpc.publicnode.com"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x0Dc808adcE2099A9F62AA87D9670745AbA741746",
          chainId: 169 /* MANTA_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0xb73603C5d87fA094B7314C74ACE2e64D165016fb",
          chainId: 169 /* MANTA_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        },
        {
          name: "pufETH",
          symbol: "pufETH",
          address: "0xA53E005Cecd3D7C89A4AE814617cC14828b6527E",
          chainId: 169 /* MANTA_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x318C2B9a03C37702742C3d40C72e4056e430135A",
      metaRouterGateway: "0x027cc92c6892de323Ba664F0B3bA8B602d4116B6",
      bridge: "0xda8057acB94905eb6025120cB2c38415Fd81BfEB",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2"
    },
    {
      id: 1088 /* METIS_MAINNET */,
      rpc: "https://andromeda.metis.io/?owner=1088",
      spareRpcs: [
        "https://metis.drpc.org",
        "https://metis-pokt.nodies.app",
        "https://metis-mainnet.public.blastapi.io"
      ],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x420000000000000000000000000000000000000A",
          chainId: 1088 /* METIS_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xf85FC807D05d3Ab2309364226970aAc57b4e1ea4",
      metaRouterGateway: "0xcd7C056b39DdFB568E451923ABEDb9B6a7Aeb885",
      bridge: "0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4"
    },
    {
      id: 5165 /* BAHAMUT_MAINNET */,
      rpc: "https://bahamut-eu-1.nodes.guru",
      spareRpcs: ["https://bahamut-rpc.publicnode.com", "https://rpc.ankr.com/bahamut"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Tether USD",
          symbol: "USDT",
          address: "0xdef886c55a79830c47108eeb9c37e78a49684e41",
          chainId: 5165 /* BAHAMUT_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
          }
        },
        {
          deprecated: true,
          name: "USD Coin",
          symbol: "USDC",
          address: "0x4237e0A5b55233D5B6D6d1D9BF421723954130D8",
          chainId: 5165 /* BAHAMUT_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
          }
        }
      ],
      router: "0xF660558a4757Fb5953d269FF32E228Ae3d5f6c68",
      // silkswap
      dexFee: 30,
      metaRouter: "0xf85FC807D05d3Ab2309364226970aAc57b4e1ea4",
      metaRouterGateway: "0xcd7C056b39DdFB568E451923ABEDb9B6a7Aeb885",
      bridge: "0x1ac4C50080871D7a24DD705dE9eFe5FF14bC0Ea2",
      synthesis: "0xB79A4F5828eb55c10D7abF4bFe9a9f5d11aA84e0",
      portal: "0x318C2B9a03C37702742C3d40C72e4056e430135A",
      fabric: "0xA257F3FE4E4032291516DC355eDF90664e9eB932",
      multicallRouter: "0x3E6A3EbbC9D88ACC192221797ad90BF72d391778"
    },
    {
      id: 34443 /* MODE_MAINNET */,
      rpc: "https://mainnet.mode.network",
      spareRpcs: ["https://1rpc.io/mode", "https://mode.drpc.org"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0x4200000000000000000000000000000000000006",
          chainId: 34443 /* MODE_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x5D61c537393cf21893BE619E36fC94cd73C77DD3",
      dexFee: 30,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 30 /* RSK_MAINNET */,
      rpc: "https://public-node.rsk.co",
      spareRpcs: ["https://go.getblock.io/a4cf9dc5a3e347aaa1bb46315f2b874d", "https://mycrypto.rsk.co"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD\u20AE0",
          symbol: "USD\u20AE0",
          address: "0x779ded0c9e1022225f8e0630b35a9b54be713736",
          chainId: 30 /* RSK_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/825.png"
          }
        },
        {
          deprecated: true,
          name: "Tether USD",
          symbol: "rUSDT",
          address: "0xef213441a85df4d7acbdae0cf78004e1e486bb96",
          chainId: 30 /* RSK_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/825.png"
          }
        },
        {
          deprecated: true,
          name: "Bridged USDC (Stargate)",
          symbol: "USDC.e",
          address: "0x74c9f2b00581f1b11aa7ff05aa9f608b7389de67",
          chainId: 30 /* RSK_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        },
        {
          name: "Wrapped RBTC",
          symbol: "WRBTC",
          address: "0x542fda317318ebf1d3deaf76e0b632741a7e677d",
          chainId: 30 /* RSK_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32702.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32702.png"
          }
        },
        {
          name: "Symbiosis BTC",
          symbol: "syBTC",
          address: "0xB52E582263c1d0189b3cc1402c1B7205b7F2E9Ba",
          chainId: 30 /* RSK_MAINNET */,
          decimals: 8,
          icons: {
            large: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200",
            small: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x7057ab3fb2bee9c18e0cde4240de4ff7f159e365",
      metaRouterGateway: "0xfffdb2a69abcbbf55ecb2f6b348e0bd3d0f9f2e1",
      bridge: "0xda8057acb94905eb6025120cb2c38415fd81bfeb",
      synthesis: "0xf8504d2ca2f0bbad9d36927e3d32e278abadada0",
      portal: "0x5aa5f7f84ed0e5db0a4a85c3947ea16b53352fd4",
      fabric: "0x7775b274f0c3fa919b756b22a4d9674e55927ab8",
      multicallRouter: "0x01a3c8e513b758ebb011f7afaf6c37616c9c24d9"
    },
    {
      id: 81457 /* BLAST_MAINNET */,
      rpc: "https://blast-rpc.publicnode.com",
      spareRpcs: ["https://rpc.blast.io", "https://rpc.ankr.com/blast"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped ETH",
          symbol: "WETH",
          address: "0x4300000000000000000000000000000000000004",
          chainId: 81457 /* BLAST_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x7057aB3fB2BeE9c18e0cDe4240DE4ff7f159E365",
      metaRouterGateway: "0xa0079829B9F1Edc5DD0DE3eC104f281745C4bD81",
      bridge: "0xda8057acB94905eb6025120cB2c38415Fd81BfEB",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9"
    },
    {
      id: 4200 /* MERLIN_MAINNET */,
      rpc: "https://rpc.merlinchain.io",
      spareRpcs: ["https://merlin.blockpi.network/v1/rpc/public"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped BTC",
          symbol: "WBTC",
          address: "0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA",
          chainId: 4200 /* MERLIN_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 810180 /* ZKLINK_MAINNET */,
      rpc: "https://rpc.zklink.io",
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped ETH",
          symbol: "WETH",
          address: "0x8280a4e7D5B3B658ec4580d3Bc30f5e50454F169",
          chainId: 810180 /* ZKLINK_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "pufETH",
          symbol: "pufETH",
          address: "0x1B49eCf1A8323Db4abf48b2F5EFaA33F7DdAB3FC",
          chainId: 810180 /* ZKLINK_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xAcb35C2D11FEA8849cd9f5Ff6fBC56bB5296641B",
      metaRouterGateway: "0xe4E794C74558057E09e9131705f5F92aAfD8Dd31",
      bridge: "0x2E818E50b913457015E1277B43E469b63AC5D3d7",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x8Dc71561414CDcA6DcA7C1dED1ABd04AF474D189",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x4c398CB4b7D4d31a54D254d8Aed09B9e8353E80E"
    },
    {
      id: 1116 /* CORE_MAINNET */,
      rpc: "https://rpc.coredao.org",
      spareRpcs: ["https://rpc.ankr.com/core", "https://1rpc.io/core"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Core Wrapped BTC Token",
          symbol: "coreBTC",
          address: "0x8034aB88C3512246Bf7894f57C834DdDBd1De01F",
          chainId: 1116 /* CORE_MAINNET */,
          decimals: 8,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1.png"
          }
        }
      ],
      router: "0x4ddDD324F205e5989bAF8aD0FFCa41f4E5d9841D",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 167e3 /* TAIKO_MAINNET */,
      rpc: "https://rpc.mainnet.taiko.xyz",
      spareRpcs: ["https://taiko-rpc.publicnode.com", "https://rpc.ankr.com/taiko"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Ether",
          symbol: "WETH",
          address: "0xA51894664A773981C6C112C43ce576f315d5b1B6",
          chainId: 167e3 /* TAIKO_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x7057aB3fB2BeE9c18e0cDe4240DE4ff7f159E365",
      metaRouterGateway: "0xa0079829B9F1Edc5DD0DE3eC104f281745C4bD81",
      bridge: "0xda8057acB94905eb6025120cB2c38415Fd81BfEB",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9"
    },
    {
      id: 1329 /* SEI_EVM_MAINNET */,
      rpc: "https://evm-rpc.sei-apis.com",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin via Noble",
          symbol: "USDC.n",
          address: "0x3894085Ef7Ff0f0aeDf52E2A2704928d1Ec074F1",
          chainId: 1329 /* SEI_EVM_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        },
        {
          deprecated: true,
          name: "USDT",
          symbol: "USDT",
          address: "0xB75D0B03c06A926e488e2659DF1A861F860bD3d1",
          chainId: 1329 /* SEI_EVM_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/825.png"
          }
        },
        {
          name: "GPT Wars",
          symbol: "GPTW",
          address: "0xcB0DdC112EF317271266c83D7179Bf9186b9C658",
          chainId: 1329 /* SEI_EVM_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893",
            small: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893"
          }
        }
      ],
      router: "0xa4cF2F53D1195aDDdE9e4D3aCa54f556895712f2",
      dexFee: 30,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 7e3 /* ZETACHAIN_MAINNET */,
      rpc: "https://zetachain-evm.blockpi.network/v1/rpc/public",
      spareRpcs: ["https://zetachain-mainnet-archive.allthatnode.com:8545"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "pufETH",
          symbol: "pufETH",
          address: "0x1e4bF3CaBD7707089138dD5a545B077413FA83Fc",
          chainId: 7e3 /* ZETACHAIN_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
          }
        },
        {
          name: "ZetaChain ZRC20 USDC on ETH",
          symbol: "USDC.ETH",
          address: "0x0cbe0dF132a6c6B4a2974Fa1b7Fb953CF0Cc798a",
          chainId: 7e3 /* ZETACHAIN_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        }
      ],
      router: "0x2ca7d64A7EFE2D62A725E2B35Cf7230D6677FfEe",
      dexFee: 0,
      metaRouter: "0x01A3c8E513B758EBB011F7AFaf6C37616c9C24d9",
      metaRouterGateway: "0xcB341279c0A071bfC14e69450Add47c568c4ddAC",
      bridge: "0x5Aa5f7f84eD0E5db0a4a85C3947eA16B53352FD4",
      synthesis: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
      portal: "0x8a7F930003BedD63A1ebD99C5917FD6aE7E3dedf",
      fabric: "0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8",
      multicallRouter: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160"
    },
    {
      id: 25 /* CRONOS_MAINNET */,
      rpc: "https://evm.cronos.org",
      spareRpcs: ["https://rpc.nebkas.ro", "https://cronos-evm-rpc.publicnode.com"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0xc21223249ca28397b4b6541dffaecc539bff0c59",
          chainId: 25 /* CRONOS_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0xE75C7E85FE6ADd07077467064aD15847E6ba9877",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62"
    },
    {
      id: 252 /* FRAXTAL_MAINNET */,
      rpc: "https://rpc.frax.com",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped ETH",
          symbol: "WETH",
          address: "0xA8a59D73388D0c4344a7b0Ba287ddb654227c38a",
          chainId: 252 /* FRAXTAL_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "Frax USD",
          symbol: "frxUSD",
          address: "0xfc00000000000000000000000000000000000001",
          chainId: 252 /* FRAXTAL_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png"
          }
        }
      ],
      router: "0x000000008096D9dED037d4dB3fe57764B996BC86",
      dexFee: 30,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 1625 /* GRAVITY_MAINNET */,
      rpc: "https://rpc.gravity.xyz",
      spareRpcs: ["https://rpc.ankr.com/gravity"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Bridged USDC (Stargate)",
          symbol: "USDC.e",
          address: "0xFbDa5F676cB37624f28265A144A48B0d6e87d3b6",
          chainId: 1625 /* GRAVITY_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        },
        {
          name: "Gravity",
          symbol: "wG",
          address: "0xBB859E225ac8Fb6BE1C7e38D87b767e95Fef0EbD",
          chainId: 1625 /* GRAVITY_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
          }
        }
      ],
      router: "0x18E621B64d7808c3C47bccbbD7485d23F257D26f",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 223 /* BSQUARED_MAINNET */,
      rpc: "https://rpc.bsquared.network",
      spareRpcs: ["https://b2-mainnet.alt.technology"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped BTC",
          symbol: "WBTC",
          address: "0x4200000000000000000000000000000000000006",
          chainId: 223 /* BSQUARED_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 85918 /* TON_MAINNET */,
      rpc: "https://mainnet-v4.tonhubapi.com",
      filterBlockOffset: 0,
      stables: [
        {
          name: "USDt",
          symbol: "USDT",
          address: "0x9328Eb759596C38a25f59028B146Fecdc3621Dfe",
          chainId: 85918 /* TON_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
          },
          attributes: {
            ton: "EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs"
          }
        },
        {
          name: "UXLINK Token",
          symbol: "UXLINK",
          address: "0x678F2a82c73C69338a00d1Cf2BA8aB7887BD3293",
          chainId: 85918 /* TON_MAINNET */,
          decimals: 9,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png"
          },
          attributes: {
            ton: "EQBh9XACT0B60U8Q48VnjyqCxzxpM4oA0c8rqKt4h70yk1V5"
          }
        },
        {
          name: "Catizen",
          symbol: "CATI",
          address: "0x73f9a6D3AD10BaB08E6dbC7bEfa5e42b695F5400",
          chainId: 85918 /* TON_MAINNET */,
          decimals: 9,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png"
          },
          attributes: {
            ton: "EQD-cvR0Nz6XAyRBvbhz-abTrRC6sI5tvHvvpeQraV9UAAD7"
          }
        },
        {
          name: "PinEye",
          symbol: "PINEYE",
          address: "0x0d2d353642cFFC051A2694C51B6C00e787EB4590",
          chainId: 85918 /* TON_MAINNET */,
          decimals: 9,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png"
          },
          attributes: {
            ton: "EQDY2MzMJY_9OWm9UyQNLTU2Qs_8BRomlMUbbADnh-tFkLaU"
          }
        },
        {
          name: "EVAA",
          symbol: "EVAA",
          address: "0xB1c95672B453fBFCA2A7cc6BFA274D6419cEf681",
          chainId: 85918 /* TON_MAINNET */,
          decimals: 9,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png"
          },
          attributes: {
            ton: "EQBKMfjX_a_dsOLm-juxyVZytFP7_KKnzGv6J01kGc72gVBp"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x0000000000000000000000000000000000000000",
      metaRouterGateway: "0x0000000000000000000000000000000000000000",
      bridge: "0x0000000000000000000000000000000000000000",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x0000000000000000000000000000000000000000",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x0000000000000000000000000000000000000000",
      tonPortal: "EQBZh9CpLZyNlwI7am0PHpVy8T8zdJxAhlG3m3xMi0BoVaUh"
    },
    {
      id: 388 /* CRONOS_ZK_MAINNET */,
      rpc: "https://mainnet.zkevm.cronos.org",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0xaa5b845f8c9c047779bedf64829601d8b264076c",
          chainId: 388 /* CRONOS_ZK_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        }
      ],
      router: "0x39ad8c3067281e60045df041846ee01c1dd3a853",
      // H2 Finance
      dexFee: 30,
      metaRouter: "0x681BeeF15D68E4abae4d912ACF3Df5D589fe61B9",
      metaRouterGateway: "0x17D51F08C2044fAbFeFE2C58564Bd89BF2DE1C4d",
      bridge: "0xe004DE550074856bD64Cc1A89A8B3b56bD3eAf31",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x2E818E50b913457015E1277B43E469b63AC5D3d7",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xAcb35C2D11FEA8849cd9f5Ff6fBC56bB5296641B"
    },
    {
      id: 2818 /* MORPH_MAINNET */,
      rpc: "https://rpc.morphl2.io",
      spareRpcs: ["https://rpc-quicknode.morphl2.io"],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0xe34c91815d7fc18A9e2148bcD4241d0a5848b693",
          chainId: 2818 /* MORPH_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        }
      ],
      router: "0x81606E6f8aAD6C75c2f383Ea595c2b9f8ce8aE3a",
      // bulba swap
      dexFee: 35,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 5426 /* SOLANA_MAINNET */,
      rpc: "https://solana-rpc.publicnode.com",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x0000000000000000000000000000000000000000",
      metaRouterGateway: "0x0000000000000000000000000000000000000000",
      bridge: "0x0000000000000000000000000000000000000000",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x0000000000000000000000000000000000000000",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x0000000000000000000000000000000000000000"
    },
    {
      id: 2345 /* GOAT_MAINNET */,
      rpc: "https://rpc.goat.network",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Goat BTC",
          symbol: "WGBTC",
          address: "0xbC10000000000000000000000000000000000000",
          chainId: 2345 /* GOAT_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 146 /* SONIC_MAINNET */,
      rpc: "https://rpc.soniclabs.com",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Ethereum",
          symbol: "WETH",
          address: "0x50c42dEAcD8Fc9773493ED674b675bE577f2634b",
          chainId: 146 /* SONIC_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xda8057acB94905eb6025120cB2c38415Fd81BfEB",
      metaRouterGateway: "0xb7aF032a0C8d350705eD7E4E3802377731a0cA07",
      bridge: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0xE75C7E85FE6ADd07077467064aD15847E6ba9877",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62"
    },
    {
      id: 2741 /* ABSTRACT_MAINNET */,
      rpc: "https://api.mainnet.abs.xyz",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped Ethereum",
          symbol: "WETH",
          address: "0x3439153eb7af838ad19d56e1571fbd09333c2809",
          chainId: 2741 /* ABSTRACT_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x2E818E50b913457015E1277B43E469b63AC5D3d7",
      metaRouterGateway: "0x664376638fE57642342009f49E1Ca4caf74b26D3",
      bridge: "0xAcb35C2D11FEA8849cd9f5Ff6fBC56bB5296641B",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x8Dc71561414CDcA6DcA7C1dED1ABd04AF474D189",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x4c398CB4b7D4d31a54D254d8Aed09B9e8353E80E"
    },
    {
      id: 100 /* GNOSIS_MAINNET */,
      rpc: "https://rpc.gnosischain.com",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "USD Coin",
          symbol: "USDC.e",
          address: "0x2a22f9c3b484c3629090feed35f17ff8f88f76f0",
          chainId: 100 /* GNOSIS_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        },
        {
          name: "Wrapped Ethereum",
          symbol: "WETH",
          address: "0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1",
          chainId: 100 /* GNOSIS_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 80094 /* BERACHAIN_MAINNET */,
      rpc: "https://rpc.berachain.com",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped ETH",
          symbol: "WETH",
          address: "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",
          chainId: 80094 /* BERACHAIN_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0xd91dd58387Ccd9B66B390ae2d7c66dBD46BC6022",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 130 /* UNICHAIN_MAINNET */,
      rpc: "https://unichain-rpc.publicnode.com",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped ETH",
          symbol: "WETH",
          address: "0x4200000000000000000000000000000000000006",
          chainId: 130 /* UNICHAIN_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x284f11109359a7e1306c3e447ef14d38400063ff",
      dexFee: 30,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 1868 /* SONEIUM_MAINNET */,
      rpc: "https://rpc.soneium.org",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped ETH",
          symbol: "WETH",
          address: "0x4200000000000000000000000000000000000006",
          chainId: 1868 /* SONEIUM_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        }
      ],
      router: "0x3c56C7C1Bfd9dbC14Ab04935f409d49D3b7A802E",
      dexFee: 30,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 204 /* OPBNB_MAINNET */,
      rpc: "https://opbnb-rpc.publicnode.com/",
      spareRpcs: [],
      filterBlockOffset: 1e3,
      stables: [
        {
          name: "Wrapped ETH",
          symbol: "WETH",
          address: "0xE7798f023fC62146e8Aa1b36Da45fb70855a77Ea",
          chainId: 204 /* OPBNB_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "Wrapped BNB",
          symbol: "WBNB",
          address: "0x4200000000000000000000000000000000000006",
          chainId: 204 /* OPBNB_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 999 /* HYPERLIQUID_MAINNET */,
      rpc: "https://rpc.hyperliquid.xyz/evm",
      spareRpcs: [],
      filterBlockOffset: 500,
      stables: [
        {
          name: "Unit ETH",
          symbol: "UETH",
          address: "0xbe6727b535545c67d5caa73dea54865b92cf7907",
          chainId: 999 /* HYPERLIQUID_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0xb88339CB7199b77E23DB6E890353E22632Ba630f",
          chainId: 999 /* HYPERLIQUID_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        },
        {
          name: "ApeCoin",
          symbol: "APE",
          address: "0xab11329560fa9c9c860bb21a9342215a1265bbb0",
          chainId: 999 /* HYPERLIQUID_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png"
          }
        }
      ],
      router: "0xb4a9C4e6Ea8E2191d2FA5B380452a634Fb21240A",
      dexFee: 30,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 747474 /* KATANA_MAINNET */,
      rpc: "https://rpc.katana.network",
      spareRpcs: [],
      filterBlockOffset: 500,
      stables: [
        {
          deprecated: true,
          name: "Wrapped ETH",
          symbol: "WETH",
          address: "0x4200000000000000000000000000000000000006",
          chainId: 747474 /* KATANA_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "Wrapped ETH",
          symbol: "WETH",
          address: "0xEE7D8BCFb72bC1880D0Cf19822eB0A2e6577aB62",
          chainId: 747474 /* KATANA_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
          }
        },
        {
          name: "USD Coin",
          symbol: "USDC",
          address: "0x203A662b0BD271A6ed5a60EdFbd04bFce608FD36",
          chainId: 747474 /* KATANA_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 33139 /* APECHAIN_MAINNET */,
      rpc: "https://rpc.apechain.com",
      spareRpcs: [],
      filterBlockOffset: 500,
      stables: [
        {
          name: "Wrapped APE",
          symbol: "WAPE",
          address: "0x48b62137edfa95a428d35c09e44256a739f6b557",
          chainId: 33139 /* APECHAIN_MAINNET */,
          decimals: 18,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    },
    {
      id: 9745 /* PLASMA_MAINNET */,
      rpc: "https://rpc.plasma.to",
      spareRpcs: [],
      filterBlockOffset: 500,
      stables: [
        {
          name: "Tether USD",
          symbol: "USDT0",
          address: "0xB8CE59FC3717ada4C02eaDF9682A9e934F625ebb",
          chainId: 9745 /* PLASMA_MAINNET */,
          decimals: 6,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xcE8f24A58D85eD5c5A6824f7be1F8d4711A0eb4C",
      metaRouterGateway: "0xAdB2d3b711Bb8d8Ea92ff70292c466140432c278",
      bridge: "0x5523985926Aa12BA58DC5Ad00DDca99678D7227E",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x292fC50e4eB66C3f6514b9E402dBc25961824D62",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8"
    }
  ]
};

// src/crosschain/config/testnet.ts
var config2 = {
  advisor: {
    url: "https://api.testnet.symbiosis.finance/calculations"
  },
  limits: [],
  omniPools: [
    {
      chainId: 97 /* BSC_TESTNET */,
      address: "0xFC385a59b2728cA437057E3cDBA4a2611B75c406",
      // BTC octopool
      oracle: "0xfdF3dBF16a7Dc8078FE4E9D0c1ac391dfb8B19aF",
      generalPurpose: true,
      coinGeckoId: "btc-mutiny"
    },
    // {
    //     chainId: ChainId.BSC_TESTNET,
    //     address: '0x3E524E5dbcEc08C3712D7Ac877Ad83cb8dAfCe8D', // BTC mainnet octopool
    //     oracle: '0x7a62416f10cd039cb538953953f94316FE1c32FA',
    //     generalPurpose: true,
    // },
    {
      chainId: 97 /* BSC_TESTNET */,
      address: "0x2826c540065C8eD792d7100ca89628E986f2F42E",
      // TON octopool
      oracle: "0xaF123f922b9cAe0F525c2E5A95314D7E8E229413",
      generalPurpose: true,
      // maybe in prod false, eth -\-> ton
      coinGeckoId: "wrapped-ton"
    }
  ],
  revertableAddress: {
    [2494104990 /* TRON_TESTNET */]: "0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5",
    default: "0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5"
  },
  refundAddress: "0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5",
  btcConfigs: [
    {
      btc: new Token2({
        name: "Bitcoin Mutiny",
        symbol: "muBTC",
        address: "0x41540e95B10383408cfE201974c88E6C3ef9323A",
        chainId: 2782866891 /* BTC_MUTINY */,
        decimals: 8,
        icons: {
          large: "https://faucet.mutinynet.com/favicon.svg",
          small: "https://faucet.mutinynet.com/favicon.svg"
        }
      }),
      symBtc: {
        address: "0xEa3f6885Ef517EcaBB2888b0ef9c6873c97f24d4",
        chainId: 11155111 /* SEPOLIA_TESTNET */
      },
      forwarderUrl: "https://relayers.testnet.symbiosis.finance/mutinynet/forwarder/api/v1"
    }
  ],
  chains: [
    {
      // NOTE host chain is better to be first in the config
      id: 97 /* BSC_TESTNET */,
      rpc: "https://bsc-testnet-rpc.publicnode.com",
      filterBlockOffset: 2e3,
      stables: [
        {
          name: "WTON(BSC)",
          symbol: "WTON(BSC)",
          address: "0xe015581A4e36eEbf170a3F4a686fa7606d511b13",
          chainId: 97 /* BSC_TESTNET */,
          decimals: 9,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
          }
        }
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0xCc9f8896896c6eF44f2504A6A29e6057aDBfF179",
      metaRouterGateway: "0xaa067db6103E4b792bbE09540B5a7757F79d582a",
      bridge: "0xB299eee0Ed46b7a34C01F2a01fc83a0B45aA88AF",
      synthesis: "0x08f5c28ff0622FeF758c2C3c2a5EAEeb63D60D4c",
      portal: "0x0000000000000000000000000000000000000000",
      fabric: "0x9B8D0e0765cDa999910ff31A2204080E1192EfC7",
      multicallRouter: "0x086D8d30822086941729DF294f0e52E42EdC17F9"
    },
    {
      id: 2782866891 /* BTC_MUTINY */,
      rpc: "https://mutinynet.com/api",
      filterBlockOffset: 0,
      stables: [],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 0,
      metaRouter: "0x0000000000000000000000000000000000000000",
      metaRouterGateway: "0x0000000000000000000000000000000000000000",
      bridge: "0x0000000000000000000000000000000000000000",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x0000000000000000000000000000000000000000",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x0000000000000000000000000000000000000000"
    },
    {
      id: 11155111 /* SEPOLIA_TESTNET */,
      rpc: "https://sepolia.gateway.tenderly.co",
      filterBlockOffset: 2e3,
      stables: [
        {
          name: "mutSymBtc",
          address: "0x41540e95B10383408cfE201974c88E6C3ef9323A",
          symbol: "mutSymBtc",
          decimals: 8,
          chainId: 11155111 /* SEPOLIA_TESTNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
          }
        },
        {
          name: "t4SymBtc",
          address: "0x04cd23122a21f6c5F912FC7B9aBC508302899Dfb",
          symbol: "t4SymBtc",
          decimals: 8,
          chainId: 11155111 /* SEPOLIA_TESTNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
          }
        },
        {
          name: "mSymBtc",
          address: "0xeD86914A9478a066d82b2bE3E5B99A38BAaE23ce",
          symbol: "mSymBtc",
          decimals: 8,
          chainId: 11155111 /* SEPOLIA_TESTNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
          }
        },
        {
          name: "TONCOIN",
          symbol: "TONCOIN",
          address: "0x331f40cc27aC106e1d5242CE633dc6436626a6F8",
          chainId: 11155111 /* SEPOLIA_TESTNET */,
          decimals: 9,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
          }
        }
      ],
      router: "0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008",
      dexFee: 30,
      metaRouter: "0x8b03ad402ab3f1477bdfa64647718e5c537c0029",
      metaRouterGateway: "0xc3b59B4a7961EF8FD24C9838731D1f598884F53d",
      bridge: "0x7dc13B605508F91Fcd3bf7803C2b96B43941B4E8",
      synthesis: "0x3e6235b91c6734821b4037E6459f861E465D4192",
      portal: "0xBC4454Ee01EC5B6517333bD716f5135042ca1e38",
      fabric: "0xb4ADe33Bba3512c8c0B489cbd03aAd3557EC49Ca",
      multicallRouter: "0xF3Cfa393be621097669BcD2bD4923CEC347E1210"
    },
    {
      id: 43113 /* AVAX_TESTNET */,
      rpc: "https://api.avax-test.network/ext/bc/C/rpc",
      spareRpcs: [
        "https://avalanche-fuji-c-chain-rpc.publicnode.com",
        "https://ava-testnet.public.blastapi.io/ext/bc/C/rpc"
      ],
      filterBlockOffset: 2e3,
      stables: [
        {
          name: "Wrapped BTC",
          address: "0x9374Ea7A11c5B185A6631effF22c015E71c67581",
          symbol: "WBTC",
          decimals: 8,
          chainId: 43113 /* AVAX_TESTNET */,
          icons: {
            large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
            small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
          }
        }
        // {
        //     name: 'Wrapped BTC',
        //     address: '0xE34EBC0DE48F2947510cFf88a13F1c0B11FD1109',
        //     symbol: 'WBTC(Mainnet)',
        //     decimals: 8,
        //     chainId: ChainId.AVAX_TESTNET,
        //     icons: {
        //         large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',
        //         small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1.png',
        //     },
        // },
        // {
        //     name: 'WTON',
        //     address: '0xCc9f8896896c6eF44f2504A6A29e6057aDBfF179',
        //     symbol: 'WTON(Mainnet)',
        //     decimals: 9,
        //     chainId: ChainId.AVAX_TESTNET,
        //     icons: {
        //         large: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',
        //         small: 'https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png',
        //     },
        // },
      ],
      router: "0x0000000000000000000000000000000000000000",
      dexFee: 30,
      // 0.03%
      metaRouter: "0x0EB4Bb54E1551Db887ADdDAbD2562da13fE57D14",
      metaRouterGateway: "0xbA2269b1E4b2eb62FdaA2c7D7bbaC052d4FD05cE",
      bridge: "0xcC0DB081360Eb259bdf6911976c51cAF1B72e845",
      synthesis: "0x0000000000000000000000000000000000000000",
      portal: "0x78Bb4D4872121f162BB3e938F0d10cf34E999648",
      fabric: "0x0000000000000000000000000000000000000000",
      multicallRouter: "0x8C9D3CE1D59d73259018dBC9859F6eBe62Bbf862"
    }
  ]
};

// src/crosschain/config/dev.ts
var config3 = {
  advisor: {
    url: "https://api.dev.symbiosis.finance/calculations"
  },
  limits: [],
  omniPools: [
    {
      chainId: 97,
      address: "0x789001A80a8EdBBEE07876b0dF58c3eAdEE89877",
      oracle: "0x2cD94CB0F4cBC4a51c3e9c4b88d03B982bE24608",
      generalPurpose: true,
      coinGeckoId: "usd-coin"
    }
  ],
  revertableAddress: {
    [2494104990 /* TRON_TESTNET */]: "0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5",
    default: "0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5"
  },
  refundAddress: "0x1b5D6DDF6086Bb06616f58274F894099c31e9DB5",
  btcConfigs: [],
  chains: [
    {
      id: 97,
      rpc: "https://bsc-testnet-rpc.publicnode.com",
      filterBlockOffset: 2e3,
      stables: [],
      router: "0xD99D1c33F9fC3444f8101754aBC46c52416550D1",
      dexFee: 30,
      metaRouter: "0x87BFB71bBd221a57826489DD247EB103a0cc7482",
      metaRouterGateway: "0x27022ad33b09f49BEE2dCC482F4604FD2560A862",
      bridge: "0x9708C5b89F9B166c080B8F5BBcDEC27D5Fa92eE8",
      synthesis: "0xD67940D8414E09F84eBEa85cd021dbc011A94Bc8",
      portal: "0x0000000000000000000000000000000000000000",
      fabric: "0x167C52B035D7cfA2D8199A2Af450B3493C51576C",
      multicallRouter: "0xF77c766DEB09f424228Be0b679E3F8326b9d7741"
    }
  ]
};

// src/crosschain/config/cache/mainnet.json
var mainnet_default = {
  omniPools: [
    {
      chainId: 13863860,
      address: "0xC3255E317481B95A3e61844c274dE8BAF8eDF397",
      oracle: "0xbBFb7cb70f84fb6fE1Cb13e42A0B71EFDe769428",
      generalPurpose: true,
      coinGeckoId: "usd-coin",
      id: 0,
      tokens: [
        { index: 0, tokenId: 131 },
        { index: 1, tokenId: 141 },
        { index: 2, tokenId: 151 },
        { index: 3, tokenId: 152 },
        { index: 4, tokenId: 157 },
        { index: 5, tokenId: 140 },
        { index: 6, tokenId: 158 },
        { index: 7, tokenId: 165 },
        { index: 8, tokenId: 172 },
        { index: 9, tokenId: 174 },
        { index: 10, tokenId: 176 },
        { index: 11, tokenId: 164 },
        { index: 12, tokenId: 150 },
        { index: 13, tokenId: 182 },
        { index: 14, tokenId: 156 },
        { index: 15, tokenId: 187 },
        { index: 16, tokenId: 180 },
        { index: 17, tokenId: 155 },
        { index: 18, tokenId: 189 },
        { index: 19, tokenId: 191 },
        { index: 20, tokenId: 194 },
        { index: 21, tokenId: 177 },
        { index: 22, tokenId: 200 },
        { index: 23, tokenId: 197 },
        { index: 24, tokenId: 159 },
        { index: 25, tokenId: 208 },
        { index: 26, tokenId: 209 },
        { index: 27, tokenId: 211 },
        { index: 28, tokenId: 210 },
        { index: 29, tokenId: 214 },
        { index: 30, tokenId: 217 },
        { index: 31, tokenId: 222 },
        { index: 32, tokenId: 223 },
        { index: 33, tokenId: 227 },
        { index: 34, tokenId: 201 },
        { index: 35, tokenId: 199 },
        { index: 36, tokenId: 239 },
        { index: 37, tokenId: 196 },
        { index: 38, tokenId: 241 },
        { index: 39, tokenId: 235 }
      ]
    },
    {
      chainId: 13863860,
      address: "0x2d877Fe148dBCB056Bf71ED5232E8d580195c0f1",
      oracle: "0x61ab82B6Cfe17E8b242E024DE7Fc936c10e35327",
      generalPurpose: true,
      coinGeckoId: "weth",
      id: 1,
      tokens: [
        { index: 0, tokenId: 160 },
        { index: 1, tokenId: 178 },
        { index: 2, tokenId: 166 },
        { index: 3, tokenId: 153 },
        { index: 4, tokenId: 142 },
        { index: 5, tokenId: 173 },
        { index: 6, tokenId: 175 },
        { index: 7, tokenId: 133 },
        { index: 8, tokenId: 179 },
        { index: 9, tokenId: 183 },
        { index: 10, tokenId: 186 },
        { index: 11, tokenId: 190 },
        { index: 12, tokenId: 193 },
        { index: 13, tokenId: 195 },
        { index: 14, tokenId: 198 },
        { index: 15, tokenId: 203 },
        { index: 16, tokenId: 205 },
        { index: 17, tokenId: 207 },
        { index: 18, tokenId: 212 },
        { index: 19, tokenId: 225 },
        { index: 20, tokenId: 226 },
        { index: 21, tokenId: 228 },
        { index: 22, tokenId: 229 },
        { index: 23, tokenId: 230 },
        { index: 24, tokenId: 231 },
        { index: 25, tokenId: 232 },
        { index: 26, tokenId: 234 },
        { index: 27, tokenId: 237 },
        { index: 28, tokenId: 238 }
      ]
    },
    {
      chainId: 13863860,
      address: "0xBf084Ee3E5C73129167167Bd5DB9FE8513d8F7e0",
      oracle: "0x597282d7F75Cf34450395D92a087C71F597024f5",
      generalPurpose: false,
      coinGeckoId: "wrapped-bitcoin",
      id: 2,
      tokens: [
        { index: 0, tokenId: 134 },
        { index: 1, tokenId: 143 },
        { index: 2, tokenId: 161 },
        { index: 3, tokenId: 202 },
        { index: 4, tokenId: 204 },
        { index: 5, tokenId: 206 },
        { index: 6, tokenId: 163 },
        { index: 7, tokenId: 216 },
        { index: 8, tokenId: 224 }
      ]
    },
    {
      chainId: 13863860,
      address: "0xAF8Ba1498e1EddD602Aab9cDe4BC6A3a83400165",
      oracle: "0x422A0A054Eb5a7424d9E3042862546a3F04e3596",
      generalPurpose: false,
      coinGeckoId: "milady-meme-coin",
      id: 3,
      tokens: [
        { index: 0, tokenId: 135 },
        { index: 1, tokenId: 168 }
      ]
    },
    {
      chainId: 13863860,
      address: "0x92114294E42A96C9eF3163DA18Ee7eFdbA6cc661",
      oracle: "0xd29bfF100F5599522D94E7aEDf2d6B65357c7516",
      generalPurpose: false,
      coinGeckoId: "frax",
      id: 4,
      tokens: [
        { index: 0, tokenId: 136 },
        { index: 1, tokenId: 154 },
        { index: 2, tokenId: 169 },
        { index: 3, tokenId: 213 }
      ]
    },
    {
      chainId: 13863860,
      address: "0x20C54Cc697329333fe00DeD49C7dCA8c83dcE65b",
      oracle: "0xDC636B062AB02C51b79cFaA6C5De7B7fFeAc2717",
      generalPurpose: false,
      coinGeckoId: "g-token",
      id: 5,
      tokens: [
        { index: 0, tokenId: 137 },
        { index: 1, tokenId: 145 },
        { index: 2, tokenId: 215 },
        { index: 3, tokenId: 188 }
      ]
    },
    {
      chainId: 13863860,
      address: "0x7E60A78518E7c9267ae0795E9914F19Cd7CdA168",
      oracle: "0xAa444c22297b0dBd97bBf316dC0b7C64b33aa64C",
      generalPurpose: false,
      coinGeckoId: "wrapped-ton",
      id: 6,
      tokens: [
        { index: 0, tokenId: 138 },
        { index: 1, tokenId: 146 }
      ]
    },
    {
      chainId: 13863860,
      address: "0x53a9dbeA6013B22A8AF3Ae8AAac8Fd31759aD287",
      oracle: "0x9C15664C49065b8E20EcE570f0818a68b71A00DA",
      generalPurpose: false,
      coinGeckoId: "catizen",
      id: 7,
      tokens: [
        { index: 0, tokenId: 219 },
        { index: 1, tokenId: 184 }
      ]
    },
    {
      chainId: 13863860,
      address: "0xcd5a0263DD8e29D9727865dcaD0f9D56C6e1Db93",
      oracle: "0x8d448bDb0c7a5fFf6A4ddf4b815bD517727E0aE5",
      generalPurpose: false,
      coinGeckoId: "uxlink",
      id: 8,
      tokens: [
        { index: 0, tokenId: 218 },
        { index: 1, tokenId: 170 },
        { index: 2, tokenId: 185 }
      ]
    },
    {
      chainId: 13863860,
      address: "0xb2EF74C1120C662984f907ea08096eDAAD94D54E",
      oracle: "0x4E73aF5663c997A796FF2cc1AD8C5d406541b4F2",
      generalPurpose: false,
      coinGeckoId: "pineye",
      id: 9,
      tokens: [
        { index: 0, tokenId: 147 },
        { index: 1, tokenId: 220 }
      ]
    },
    {
      chainId: 13863860,
      address: "0x095B362957B3E3638AE1eb7A957f392cD3Dc3c7C",
      oracle: "0xCCc50a096E3078508FCb14Ac0B4DF3330C32BD96",
      generalPurpose: false,
      coinGeckoId: "binancecoin",
      id: 10,
      tokens: [
        { index: 0, tokenId: 148 },
        { index: 1, tokenId: 233 }
      ]
    },
    {
      chainId: 13863860,
      address: "0x3E6A3EbbC9D88ACC192221797ad90BF72d391778",
      oracle: "0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C",
      generalPurpose: false,
      coinGeckoId: "symbiosis-finance",
      id: 11,
      tokens: [
        { index: 0, tokenId: 132 },
        { index: 1, tokenId: 167 },
        { index: 2, tokenId: 144 },
        { index: 3, tokenId: 162 },
        { index: 4, tokenId: 181 },
        { index: 5, tokenId: 192 },
        { index: 6, tokenId: 31 }
      ]
    },
    {
      chainId: 13863860,
      address: "0x0b01139C59D6bc2C8323FDbb4824e4aa5Ff4DE7C",
      oracle: "0x258EF63a81bade0c31c7C4ae75d2CD5332034bEE",
      generalPurpose: false,
      coinGeckoId: "apecoin",
      id: 12,
      tokens: [
        { index: 0, tokenId: 139 },
        { index: 1, tokenId: 171 },
        { index: 2, tokenId: 240 },
        { index: 3, tokenId: 236 }
      ]
    },
    {
      chainId: 13863860,
      address: "0xd40750043100501ea75cAc2386f23Bcf7554cB9A",
      oracle: "0x3930C108ae8e85aAdc0d833D2096b8778eaf4432",
      generalPurpose: false,
      coinGeckoId: "evaa-protocol",
      id: 13,
      tokens: [
        { index: 0, tokenId: 149 },
        { index: 1, tokenId: 221 }
      ]
    }
  ],
  tokens: [
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      id: 0
    },
    {
      decimals: 18,
      symbol: "SIS",
      name: "Symbiosis",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      deprecated: false,
      address: "0xd38BB40815d2B0c2d2c866e0c72c5728ffC76dd9",
      id: 1
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      id: 2
    },
    {
      decimals: 6,
      symbol: "USDT",
      name: "Tether USD",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      deprecated: false,
      address: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      id: 3
    },
    {
      decimals: 8,
      symbol: "WBTC",
      name: "Wrapped BTC",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png"
      },
      deprecated: false,
      address: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
      id: 4
    },
    {
      decimals: 18,
      symbol: "LADYS",
      name: "Milady Meme Coin",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png"
      },
      deprecated: false,
      address: "0x12970E6868f88f6557B76120662c1B3E50A646bf",
      id: 5
    },
    {
      decimals: 18,
      symbol: "pufETH",
      name: "pufETH",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
      },
      deprecated: false,
      address: "0xD9A442856C234a39a81a089C06451EBAa4306a72",
      id: 6
    },
    {
      decimals: 18,
      symbol: "FRAX",
      name: "Frax",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png"
      },
      deprecated: false,
      address: "0x853d955aCEf822Db058eb8505911ED77F175b99e",
      id: 7
    },
    {
      decimals: 18,
      symbol: "G",
      name: "Gravity",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
      },
      deprecated: false,
      address: "0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649",
      id: 8
    },
    {
      decimals: 9,
      symbol: "WTON",
      name: "Wrapped TON",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
      },
      deprecated: true,
      address: "0x582d872A1B094FC48F5DE31D3B73F2D9bE47def1",
      id: 9
    },
    {
      decimals: 18,
      symbol: "APE",
      name: "ApeCoin",
      chainId: 1,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png"
      },
      deprecated: false,
      address: "0x4d224452801ACEd8B2F0aebE155379bb5D594381",
      id: 10
    },
    {
      decimals: 18,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
      id: 11
    },
    {
      decimals: 18,
      symbol: "BUSD",
      name: "BUSD Token",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png"
      },
      deprecated: true,
      address: "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
      id: 12
    },
    {
      decimals: 18,
      symbol: "ETH",
      name: "Ethereum Token",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x2170Ed0880ac9A755fd29B2688956BD959F933F8",
      id: 13
    },
    {
      decimals: 18,
      symbol: "BTCB",
      name: "Binance-Peg BTCB Token",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4023.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/4023.png"
      },
      deprecated: false,
      address: "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
      id: 14
    },
    {
      decimals: 18,
      symbol: "SIS",
      name: "Symbiosis",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      deprecated: false,
      address: "0xF98b660AdF2ed7d9d9D9dAACC2fb0CAce4F21835",
      id: 15
    },
    {
      decimals: 18,
      symbol: "G",
      name: "Gravity",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
      },
      deprecated: false,
      address: "0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649",
      id: 16
    },
    {
      decimals: 9,
      symbol: "WTON",
      name: "Wrapped TON",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
      },
      deprecated: true,
      address: "0x76A797A59Ba2C17726896976B7B3747BfD1d220f",
      id: 17
    },
    {
      decimals: 18,
      symbol: "GPTW",
      name: "GPT Wars",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893",
        small: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893"
      },
      deprecated: false,
      address: "0xB3F4D70C6a18cC0F2D1205dbF3B21cB73e1B0592",
      id: 18
    },
    {
      decimals: 8,
      symbol: "syBTC",
      name: "Symbiosis BTC",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200",
        small: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200"
      },
      deprecated: false,
      address: "0xA67c48F86Fc6d0176Dca38883CA8153C76a532c7",
      id: 19
    },
    {
      decimals: 18,
      symbol: "PINEYE",
      name: "PinEye",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png"
      },
      deprecated: false,
      address: "0x4b3a2187648902082db0a44e8235d57F3f23DD10",
      id: 20
    },
    {
      decimals: 18,
      symbol: "WBNB",
      name: "Wrapped BNB",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png"
      },
      deprecated: false,
      address: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
      id: 21
    },
    {
      decimals: 18,
      symbol: "EVAA",
      name: "EVAA",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png"
      },
      deprecated: false,
      address: "0xaa036928c9c0Df07d525B55ea8EE690Bb5a628C1",
      id: 22
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 43114,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
      id: 23
    },
    {
      decimals: 6,
      symbol: "USDC.e",
      name: "USD Coin",
      chainId: 43114,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: true,
      address: "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
      id: 24
    },
    {
      decimals: 6,
      symbol: "USDC.e",
      name: "USD Coin (PoS) (USDC.e)",
      chainId: 137,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
      id: 25
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 137,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
      id: 26
    },
    {
      decimals: 18,
      symbol: "FRAX",
      name: "Frax",
      chainId: 137,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png"
      },
      deprecated: false,
      address: "0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89",
      id: 27
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "syUSDC",
      chainId: 40,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0xe6E5f3d264117E030C21920356641DbD5B3d660c",
      id: 28
    },
    {
      decimals: 6,
      symbol: "USDt",
      name: "Tether USDt",
      chainId: 2222,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      deprecated: false,
      address: "0x919C1c267BC06a7039e03fcc2eF738525769109c",
      id: 29
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 288,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc",
      id: 30
    },
    {
      decimals: 18,
      symbol: "WSIS",
      name: "Wrapped SIS",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png"
      },
      deprecated: false,
      address: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
      id: 31
    },
    {
      decimals: 6,
      symbol: "USDC.e",
      name: "USD Coin",
      chainId: 324,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4",
      id: 32
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 324,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: true,
      address: "0x1d17CBcF0D6D143135aE902365D2E5e2A16538D4",
      id: 33
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 324,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91",
      id: 34
    },
    {
      decimals: 8,
      symbol: "WBTC",
      name: "Wrapped BTC",
      chainId: 324,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png"
      },
      deprecated: true,
      address: "0xBBeB516fb02a01611cBBE0453Fe3c580D7281011",
      id: 35
    },
    {
      decimals: 18,
      symbol: "SIS",
      name: "Symbiosis",
      chainId: 324,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      deprecated: false,
      address: "0xdd9f72afED3631a6C85b5369D84875e6c42f1827",
      id: 36
    },
    {
      decimals: 8,
      symbol: "syBTC",
      name: "Symbiosis BTC",
      chainId: 324,
      isNative: false,
      icons: {
        large: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200",
        small: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200"
      },
      deprecated: true,
      address: "0xED0c95EBe5a3E687cB2224687024FeC6518E683e",
      id: 37
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 42161,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
      id: 38
    },
    {
      decimals: 6,
      symbol: "USDC.e",
      name: "USD Coin (Arb1)",
      chainId: 42161,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: true,
      address: "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
      id: 39
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 42161,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      id: 40
    },
    {
      decimals: 18,
      symbol: "SIS",
      name: "Symbiosis",
      chainId: 42161,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      deprecated: false,
      address: "0x9E758B8a98a42d612b3D38B66a22074DC03D7370",
      id: 41
    },
    {
      decimals: 18,
      symbol: "LADYS",
      name: "Milady Meme Coin",
      chainId: 42161,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png"
      },
      deprecated: false,
      address: "0x3b60FF35D3f7F62d636b067dD0dC0dFdAd670E4E",
      id: 42
    },
    {
      decimals: 18,
      symbol: "FRAX",
      name: "Frax",
      chainId: 42161,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png"
      },
      deprecated: false,
      address: "0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F",
      id: 43
    },
    {
      decimals: 18,
      symbol: "UXLINK",
      name: "UXLINK Token",
      chainId: 42161,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png"
      },
      deprecated: false,
      address: "0x1A6B3A62391ECcaaa992ade44cd4AFe6bEC8CfF1",
      id: 44
    },
    {
      decimals: 18,
      symbol: "APE",
      name: "ApeCoin",
      chainId: 42161,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png"
      },
      deprecated: false,
      address: "0x7f9FBf9bDd3F4105C478b996B648FE6e828a1e98",
      id: 45
    },
    {
      decimals: 6,
      symbol: "USDC.e",
      name: "USD Coin",
      chainId: 10,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
      id: 46
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 10,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x4200000000000000000000000000000000000006",
      id: 47
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 42170,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0x750ba8b76187092B0D1E87E28daaf484d1b5273b",
      id: 48
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 42170,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x722E8BdD2ce80A4422E880164f2079488e115365",
      id: 49
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 1101,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035",
      id: 50
    },
    {
      decimals: 6,
      symbol: "USDC.e",
      name: "USD Coin",
      chainId: 1101,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: true,
      address: "0x37eAA0eF3549a5Bb7D431be78a3D99BD360d19e5",
      id: 51
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 1101,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9",
      id: 52
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 59144,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f",
      id: 53
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 59144,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0x176211869cA2b568f2A7D4EE941E073a821EE1ff",
      id: 54
    },
    {
      decimals: 18,
      symbol: "SIS",
      name: "Symbiosis",
      chainId: 59144,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      deprecated: false,
      address: "0x6EF95B6f3b0F39508e3E04054Be96D5eE39eDE0d",
      id: 55
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 5e3,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0x09Bc4E0D864854c6aFB6eB9A9cdF58aC190D0dF9",
      id: 56
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 5e3,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111",
      id: 57
    },
    {
      decimals: 18,
      symbol: "CATI",
      name: "Catizen",
      chainId: 5e3,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png"
      },
      deprecated: false,
      address: "0x1Bdd8878252DaddD3Af2ba30628813271294eDc0",
      id: 58
    },
    {
      decimals: 18,
      symbol: "UXLINK",
      name: "UXLINK Token",
      chainId: 5e3,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png"
      },
      deprecated: false,
      address: "0x482deB2F7B9608a80eA91E71F06380E9891501C6",
      id: 59
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 8453,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x4200000000000000000000000000000000000006",
      id: 60
    },
    {
      decimals: 6,
      symbol: "USDbC",
      name: "USD Base Coin",
      chainId: 8453,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA",
      id: 61
    },
    {
      decimals: 18,
      symbol: "G",
      name: "Gravity",
      chainId: 8453,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
      },
      deprecated: false,
      address: "0x9C7BEBa8F6eF6643aBd725e45a4E8387eF260649",
      id: 62
    },
    {
      decimals: 6,
      symbol: "USDT",
      name: "Tether USDt",
      chainId: 728126428,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      deprecated: false,
      address: "0xa614f803b6fd780986a42c78ec9c7f77e6ded13c",
      id: 63
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 534352,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x5300000000000000000000000000000000000004",
      id: 64
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 534352,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4",
      id: 65
    },
    {
      decimals: 18,
      symbol: "SIS",
      name: "Symbiosis",
      chainId: 534352,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      deprecated: false,
      address: "0x1467b62A6AE5CdcB10A6a8173cfe187DD2C5a136",
      id: 66
    },
    {
      decimals: 18,
      symbol: "pufETH",
      name: "pufETH",
      chainId: 534352,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
      },
      deprecated: false,
      address: "0xc4d46E8402F476F269c379677C99F18E22Ea030e",
      id: 67
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 169,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x0Dc808adcE2099A9F62AA87D9670745AbA741746",
      id: 68
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 169,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: false,
      address: "0xb73603C5d87fA094B7314C74ACE2e64D165016fb",
      id: 69
    },
    {
      decimals: 18,
      symbol: "pufETH",
      name: "pufETH",
      chainId: 169,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
      },
      deprecated: false,
      address: "0xA53E005Cecd3D7C89A4AE814617cC14828b6527E",
      id: 70
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 1088,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x420000000000000000000000000000000000000A",
      id: 71
    },
    {
      decimals: 6,
      symbol: "USDT",
      name: "Tether USD",
      chainId: 5165,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      deprecated: false,
      address: "0xDeF886C55a79830C47108eeb9c37e78a49684e41",
      id: 72
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 5165,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      deprecated: true,
      address: "0x4237e0A5b55233D5B6D6d1D9BF421723954130D8",
      id: 73
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 34443,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x4200000000000000000000000000000000000006",
      id: 74
    },
    {
      decimals: 6,
      symbol: "USD\u20AE0",
      name: "USD\u20AE0",
      chainId: 30,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/825.png"
      },
      deprecated: false,
      address: "0x779Ded0c9e1022225f8E0630b35a9b54bE713736",
      id: 75
    },
    {
      decimals: 18,
      symbol: "rUSDT",
      name: "Tether USD",
      chainId: 30,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/825.png"
      },
      deprecated: true,
      address: "0xef213441A85dF4d7ACbDaE0Cf78004e1E486bB96",
      id: 76
    },
    {
      decimals: 6,
      symbol: "USDC.e",
      name: "Bridged USDC (Stargate)",
      chainId: 30,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: true,
      address: "0x74c9f2b00581F1B11AA7ff05aa9F608B7389De67",
      id: 77
    },
    {
      decimals: 18,
      symbol: "WRBTC",
      name: "Wrapped RBTC",
      chainId: 30,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32702.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32702.png"
      },
      deprecated: false,
      address: "0x542fDA317318eBF1d3DEAf76E0b632741A7e677d",
      id: 78
    },
    {
      decimals: 8,
      symbol: "syBTC",
      name: "Symbiosis BTC",
      chainId: 30,
      isNative: false,
      icons: {
        large: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200",
        small: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200"
      },
      deprecated: false,
      address: "0xB52E582263c1d0189b3cc1402c1B7205b7F2E9Ba",
      id: 79
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped ETH",
      chainId: 81457,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x4300000000000000000000000000000000000004",
      id: 80
    },
    {
      decimals: 18,
      symbol: "WBTC",
      name: "Wrapped BTC",
      chainId: 4200,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png"
      },
      deprecated: false,
      address: "0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA",
      id: 81
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped ETH",
      chainId: 810180,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x8280a4e7D5B3B658ec4580d3Bc30f5e50454F169",
      id: 82
    },
    {
      decimals: 18,
      symbol: "pufETH",
      name: "pufETH",
      chainId: 810180,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
      },
      deprecated: false,
      address: "0x1B49eCf1A8323Db4abf48b2F5EFaA33F7DdAB3FC",
      id: 83
    },
    {
      decimals: 8,
      symbol: "coreBTC",
      name: "Core Wrapped BTC Token",
      chainId: 1116,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1.png"
      },
      deprecated: false,
      address: "0x8034aB88C3512246Bf7894f57C834DdDBd1De01F",
      id: 84
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 167e3,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0xA51894664A773981C6C112C43ce576f315d5b1B6",
      id: 85
    },
    {
      decimals: 6,
      symbol: "USDC.n",
      name: "USD Coin via Noble",
      chainId: 1329,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: false,
      address: "0x3894085Ef7Ff0f0aeDf52E2A2704928d1Ec074F1",
      id: 86
    },
    {
      decimals: 6,
      symbol: "USDT",
      name: "USDT",
      chainId: 1329,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/825.png"
      },
      deprecated: true,
      address: "0xB75D0B03c06A926e488e2659DF1A861F860bD3d1",
      id: 87
    },
    {
      decimals: 18,
      symbol: "GPTW",
      name: "GPT Wars",
      chainId: 1329,
      isNative: false,
      icons: {
        large: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893",
        small: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893"
      },
      deprecated: false,
      address: "0xcB0DdC112EF317271266c83D7179Bf9186b9C658",
      id: 88
    },
    {
      decimals: 18,
      symbol: "pufETH",
      name: "pufETH",
      chainId: 7e3,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
      },
      deprecated: false,
      address: "0x1e4bF3CaBD7707089138dD5a545B077413FA83Fc",
      id: 89
    },
    {
      decimals: 6,
      symbol: "USDC.ETH",
      name: "ZetaChain ZRC20 USDC on ETH",
      chainId: 7e3,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: false,
      address: "0x0cbe0dF132a6c6B4a2974Fa1b7Fb953CF0Cc798a",
      id: 90
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 25,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: false,
      address: "0xc21223249CA28397B4B6541dfFaEcC539BfF0c59",
      id: 91
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped ETH",
      chainId: 252,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0xA8a59D73388D0c4344a7b0Ba287ddb654227c38a",
      id: 92
    },
    {
      decimals: 18,
      symbol: "frxUSD",
      name: "Frax USD",
      chainId: 252,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png"
      },
      deprecated: false,
      address: "0xFc00000000000000000000000000000000000001",
      id: 93
    },
    {
      decimals: 6,
      symbol: "USDC.e",
      name: "Bridged USDC (Stargate)",
      chainId: 1625,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: false,
      address: "0xFbDa5F676cB37624f28265A144A48B0d6e87d3b6",
      id: 94
    },
    {
      decimals: 18,
      symbol: "wG",
      name: "Gravity",
      chainId: 1625,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
      },
      deprecated: false,
      address: "0xBB859E225ac8Fb6BE1C7e38D87b767e95Fef0EbD",
      id: 95
    },
    {
      decimals: 18,
      symbol: "WBTC",
      name: "Wrapped BTC",
      chainId: 223,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png"
      },
      deprecated: false,
      address: "0x4200000000000000000000000000000000000006",
      id: 96
    },
    {
      decimals: 6,
      symbol: "USDT",
      name: "USDt",
      chainId: 85918,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      deprecated: false,
      attributes: { ton: "EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs" },
      address: "0x9328Eb759596C38a25f59028B146Fecdc3621Dfe",
      id: 97
    },
    {
      decimals: 9,
      symbol: "UXLINK",
      name: "UXLINK Token",
      chainId: 85918,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png"
      },
      deprecated: false,
      attributes: { ton: "EQBh9XACT0B60U8Q48VnjyqCxzxpM4oA0c8rqKt4h70yk1V5" },
      address: "0x678F2a82c73C69338a00d1Cf2BA8aB7887BD3293",
      id: 98
    },
    {
      decimals: 9,
      symbol: "CATI",
      name: "Catizen",
      chainId: 85918,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png"
      },
      deprecated: false,
      attributes: { ton: "EQD-cvR0Nz6XAyRBvbhz-abTrRC6sI5tvHvvpeQraV9UAAD7" },
      address: "0x73f9a6D3AD10BaB08E6dbC7bEfa5e42b695F5400",
      id: 99
    },
    {
      decimals: 9,
      symbol: "PINEYE",
      name: "PinEye",
      chainId: 85918,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png"
      },
      deprecated: false,
      attributes: { ton: "EQDY2MzMJY_9OWm9UyQNLTU2Qs_8BRomlMUbbADnh-tFkLaU" },
      address: "0x0d2d353642cFFC051A2694C51B6C00e787EB4590",
      id: 100
    },
    {
      decimals: 9,
      symbol: "EVAA",
      name: "EVAA",
      chainId: 85918,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png"
      },
      deprecated: false,
      attributes: { ton: "EQBKMfjX_a_dsOLm-juxyVZytFP7_KKnzGv6J01kGc72gVBp" },
      address: "0xB1c95672B453fBFCA2A7cc6BFA274D6419cEf681",
      id: 101
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 388,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: false,
      address: "0xaa5b845F8C9c047779bEDf64829601d8B264076c",
      id: 102
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 2818,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: false,
      address: "0xe34c91815d7fc18A9e2148bcD4241d0a5848b693",
      id: 103
    },
    {
      decimals: 18,
      symbol: "WGBTC",
      name: "Wrapped Goat BTC",
      chainId: 2345,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1.png"
      },
      deprecated: false,
      address: "0xbC10000000000000000000000000000000000000",
      id: 104
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ethereum",
      chainId: 146,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x50c42dEAcD8Fc9773493ED674b675bE577f2634b",
      id: 105
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ethereum",
      chainId: 2741,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x3439153EB7AF838Ad19d56E1571FBD09333C2809",
      id: 106
    },
    {
      decimals: 6,
      symbol: "USDC.e",
      name: "USD Coin",
      chainId: 100,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: false,
      address: "0x2a22f9c3b484c3629090FeED35F17Ff8F88f76F0",
      id: 107
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ethereum",
      chainId: 100,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1",
      id: 108
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped ETH",
      chainId: 80094,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",
      id: 109
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped ETH",
      chainId: 130,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x4200000000000000000000000000000000000006",
      id: 110
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped ETH",
      chainId: 1868,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0x4200000000000000000000000000000000000006",
      id: 111
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped ETH",
      chainId: 204,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0xE7798f023fC62146e8Aa1b36Da45fb70855a77Ea",
      id: 112
    },
    {
      decimals: 18,
      symbol: "WBNB",
      name: "Wrapped BNB",
      chainId: 204,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png"
      },
      deprecated: false,
      address: "0x4200000000000000000000000000000000000006",
      id: 113
    },
    {
      decimals: 18,
      symbol: "UETH",
      name: "Unit ETH",
      chainId: 999,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0xBe6727B535545C67d5cAa73dEa54865B92CF7907",
      id: 114
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 999,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: false,
      address: "0xb88339CB7199b77E23DB6E890353E22632Ba630f",
      id: 115
    },
    {
      decimals: 18,
      symbol: "APE",
      name: "ApeCoin",
      chainId: 999,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png"
      },
      deprecated: false,
      address: "0xab11329560Fa9C9c860Bb21A9342215a1265BBB0",
      id: 116
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped ETH",
      chainId: 747474,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: true,
      address: "0x4200000000000000000000000000000000000006",
      id: 117
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped ETH",
      chainId: 747474,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      deprecated: false,
      address: "0xEE7D8BCFb72bC1880D0Cf19822eB0A2e6577aB62",
      id: 118
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 747474,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      deprecated: false,
      address: "0x203A662b0BD271A6ed5a60EdFbd04bFce608FD36",
      id: 119
    },
    {
      decimals: 18,
      symbol: "WAPE",
      name: "Wrapped APE",
      chainId: 33139,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png"
      },
      deprecated: false,
      address: "0x48b62137EdfA95a428D35C09E44256a739F6B557",
      id: 120
    },
    {
      decimals: 6,
      symbol: "USDT0",
      name: "Tether USD",
      chainId: 9745,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      deprecated: false,
      address: "0xB8CE59FC3717ada4C02eaDF9682A9e934F625ebb",
      id: 121
    },
    {
      decimals: 8,
      symbol: "BTC",
      name: "Bitcoin",
      chainId: 3652501241,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      deprecated: true,
      address: "0xc102C66D4a1e1865Ee962084626Cf4c27D5BFc74",
      id: 122
    },
    {
      decimals: 8,
      symbol: "BTC",
      name: "Bitcoin",
      chainId: 3652501241,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      deprecated: false,
      address: "0x1DfC1e32d75b3f4Cb2F2B1BCEcAD984E99eeba05",
      id: 123
    },
    {
      decimals: 8,
      symbol: "BTC",
      name: "Bitcoin",
      chainId: 3652501241,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      deprecated: false,
      address: "0x334524A0ADB21425afCF77aC40580D68e30E51d8",
      id: 124
    },
    {
      decimals: 18,
      symbol: "SIS",
      name: "Symbiosis",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0xF98b660AdF2ed7d9d9D9dAACC2fb0CAce4F21835",
      id: 125,
      originalId: 1
    },
    {
      decimals: 18,
      symbol: "GPTW",
      name: "GPT Wars",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893",
        small: "https://assets.coingecko.com/coins/images/51157/standard/GPTW_200x200.png?1730238893"
      },
      chainFromId: 1329,
      deprecated: false,
      address: "0xB3F4D70C6a18cC0F2D1205dbF3B21cB73e1B0592",
      id: 126,
      originalId: 88
    },
    {
      decimals: 8,
      symbol: "syBTC",
      name: "syBTC",
      chainId: 56,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      chainFromId: 3652501241,
      deprecated: false,
      address: "0xA67c48F86Fc6d0176Dca38883CA8153C76a532c7",
      id: 127,
      originalId: 123
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "syUSDC",
      chainId: 40,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0xe6E5f3d264117E030C21920356641DbD5B3d660c",
      id: 128,
      originalId: 0
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "syWETH",
      chainId: 40,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0x63d71E79AdF0886c989A23b04a0E86F1489b6BC3",
      id: 129,
      originalId: 2
    },
    {
      decimals: 6,
      symbol: "USDT",
      name: "syUSDT",
      chainId: 40,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0x7bD3ffe9f0C9CF08FD60e102FEa455A6EA580276",
      id: 130,
      originalId: 3
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin from Ethereum",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0xFAEb87361cB1925aFdd1967BD896F0c8FeacB890",
      id: 131,
      originalId: 0
    },
    {
      decimals: 18,
      symbol: "sSIS",
      name: "Synthetic SIS token from Ethereum",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0xcd7C056b39DdFB568E451923ABEDb9B6a7Aeb885",
      id: 132,
      originalId: 1
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Ethereum)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0x7477490b64b64d9d014D4003AfB053cBf62689e1",
      id: 133,
      originalId: 2
    },
    {
      decimals: 8,
      symbol: "sWBTC",
      name: "Synthetic WBTC From Ethereum",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0xDBe47ce2c0d1Fd3793D29ac6cCb928C306E10a80",
      id: 134,
      originalId: 4
    },
    {
      decimals: 18,
      symbol: "sLADYS",
      name: "Synthetic Milady Coin (Ethereum)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0x7c53c182534f585B48BC7759e94E2606C87A5703",
      id: 135,
      originalId: 5
    },
    {
      decimals: 18,
      symbol: "sFRAX",
      name: "Synthetic Frax (Ethereum)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0xb7F32D4B660B040d4407f3d3cccc3Abf44d5a087",
      id: 136,
      originalId: 7
    },
    {
      decimals: 18,
      symbol: "sG",
      name: "Synthetic G (Ethereum)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0x5e92d4082027aCE6202049D3c1C2607DE137F942",
      id: 137,
      originalId: 8
    },
    {
      decimals: 9,
      symbol: "sWTON",
      name: "Synthetic WTON From Ethereum",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
      },
      chainFromId: 1,
      deprecated: true,
      address: "0x31EE88E4d61C5452893fCEF729dFb026a9e9B897",
      id: 138,
      originalId: 9
    },
    {
      decimals: 18,
      symbol: "sAPE",
      name: "Synthetic APE (Ethereum)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0x844E02f164Ac1AB59493867a4e07BbB7b2C78f97",
      id: 139,
      originalId: 10
    },
    {
      decimals: 18,
      symbol: "sUSDC",
      name: "Synthetic Binance-Peg USD Coin from BSC",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 56,
      deprecated: false,
      address: "0x076Cb7BEee7D1507DE7B964c29cbC849acaD5022",
      id: 140,
      originalId: 11
    },
    {
      decimals: 18,
      symbol: "sBUSD",
      name: "Synthetic Binance-Peg BUSD Token from BSC",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png"
      },
      chainFromId: 56,
      deprecated: true,
      address: "0x33BB09Ec59AAd4CC7F16892E7dD4892EAB1925F4",
      id: 141,
      originalId: 12
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Binance)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 56,
      deprecated: false,
      address: "0x3c4454B723C0144f9E30eF7cc2F419cc88051D45",
      id: 142,
      originalId: 13
    },
    {
      decimals: 18,
      symbol: "sWBTC",
      name: "Synthetic WBTC From BSC",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/4023.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/4023.png"
      },
      chainFromId: 56,
      deprecated: false,
      address: "0x62107978F7942650e1d78598c32228D1f4885a30",
      id: 143,
      originalId: 14
    },
    {
      decimals: 18,
      symbol: "sSIS",
      name: "Synthetic SIS token from Binance",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      chainFromId: 56,
      deprecated: false,
      address: "0xd747F3c877Eb2736c06DD9A852480058A24e01Ce",
      id: 144,
      originalId: 15
    },
    {
      decimals: 18,
      symbol: "sG",
      name: "Synthetic G (BNB)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
      },
      chainFromId: 56,
      deprecated: false,
      address: "0xe83427C242897B98441aCE3DFab8A549039B9cba",
      id: 145,
      originalId: 16
    },
    {
      decimals: 9,
      symbol: "sWTON",
      name: "Synthetic WTON From BNB",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
      },
      chainFromId: 56,
      deprecated: true,
      address: "0x33A269e3F826af65c644Bf77c00556143F737F7a",
      id: 146,
      originalId: 17
    },
    {
      decimals: 18,
      symbol: "sPINEYE",
      name: "Synthetic PINEYE (BSC)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png"
      },
      chainFromId: 56,
      deprecated: false,
      address: "0xF11cBDEf4b47B264cB372E5e80eD44ea37f7e382",
      id: 147,
      originalId: 20
    },
    {
      decimals: 18,
      symbol: "sWBNB",
      name: "Synthetic WBNB (BNB)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png"
      },
      chainFromId: 56,
      deprecated: false,
      address: "0x1b93c5FFd926F84F48F31d19AB88E6FD0B5acF19",
      id: 148,
      originalId: 21
    },
    {
      decimals: 18,
      symbol: "sEVAA",
      name: "Synthetic EVAA From BSC",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png"
      },
      chainFromId: 56,
      deprecated: false,
      address: "0x6259bd4433f5461D4CCAbf3067DF4e7e7914a89d",
      id: 149,
      originalId: 22
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin From Avalanche",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 43114,
      deprecated: false,
      address: "0xD67c69aBAE457729fE2c03649A7F83a2DD8eb885",
      id: 150,
      originalId: 23
    },
    {
      decimals: 6,
      symbol: "sUSDC.e",
      name: "Synthetic USD Coin from Avalanche",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 43114,
      deprecated: true,
      address: "0x3F63925f40d29AC80302D7D359254f9451D62C52",
      id: 151,
      originalId: 24
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin from Polygon",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 137,
      deprecated: false,
      address: "0xAf11A323741fc0670a6De095794f61eE9c52B622",
      id: 152,
      originalId: 25
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Arbitrum Nova)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 137,
      deprecated: false,
      address: "0xb1691B61e8369B79e4d9fd6deC55AC31E34009ba",
      id: 153,
      originalId: 26
    },
    {
      decimals: 18,
      symbol: "sFRAX",
      name: "Synthetic Frax (Polygon)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png"
      },
      chainFromId: 137,
      deprecated: false,
      address: "0x9049d84152F59D72b67bAD30638eDd80D623a997",
      id: 154,
      originalId: 27
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic syUSDC From Telos",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 40,
      deprecated: false,
      address: "0x66281EE570B0E59715eEb198C0921b0728459d09",
      id: 155,
      originalId: 28
    },
    {
      decimals: 6,
      symbol: "sUSDT",
      name: "Synthetic USDT From Kava",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      chainFromId: 2222,
      deprecated: false,
      address: "0xF08F72715f85b768C8d77A0D7f09F74238F7933A",
      id: 156,
      originalId: 29
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin from Boba ETH",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 288,
      deprecated: false,
      address: "0xc12670ddC913eC6d551afc8cDf186B9E4eBAa832",
      id: 157,
      originalId: 30
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin From ZkSync Era Mainnet",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 324,
      deprecated: false,
      address: "0x1Ac827DBaA75b2Ac5c32b746748B73a0f7B0aF7E",
      id: 158,
      originalId: 32
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USDC token from zkSync",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 324,
      deprecated: true,
      address: "0x2C4e1C5B08A6d154Bd5F0e9E0De323b5570Fb501",
      id: 159,
      originalId: 33
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (zkSync Era)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 324,
      deprecated: false,
      address: "0xce5CaFcf82fDb326e03378750c272efabAfb1D7f",
      id: 160,
      originalId: 34
    },
    {
      decimals: 8,
      symbol: "sWBTC",
      name: "Synthetic WBTC From zkSync",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png"
      },
      chainFromId: 324,
      deprecated: true,
      address: "0xfB64E541C7ededc97ed0652405444aa47b91C1C1",
      id: 161,
      originalId: 35
    },
    {
      decimals: 18,
      symbol: "sSIS",
      name: "Synthetic SIS token from zkSync Era",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      chainFromId: 324,
      deprecated: false,
      address: "0x05157cbb1BB7bF1F982F72acCC97DCB22214fA1B",
      id: 162,
      originalId: 36
    },
    {
      decimals: 8,
      symbol: "ssyBTC",
      name: "Synthetic syBTC (zkSync)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200",
        small: "https://assets.coingecko.com/coins/images/50472/standard/NewOption_06.png?1727849200"
      },
      chainFromId: 324,
      deprecated: true,
      address: "0x1Aac380230382D6382c8a7FfEe3E24A26ab917cf",
      id: 163,
      originalId: 37
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin From Arbitrum One",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 42161,
      deprecated: false,
      address: "0xc317169a336b484f65B0AB4A794bBe66a7491E83",
      id: 164,
      originalId: 38
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin From Arbitrum One",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 42161,
      deprecated: true,
      address: "0x1a8a88e24Fa680cC596d233A2c86a88DFE0EB45a",
      id: 165,
      originalId: 39
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Arbitrum One)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 42161,
      deprecated: false,
      address: "0xb8d63Ff43B72C481c8cCD77d5c03092B63C81B34",
      id: 166,
      originalId: 40
    },
    {
      decimals: 18,
      symbol: "sSIS",
      name: "Synthetic SIS token from Arbitrum One",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      chainFromId: 42161,
      deprecated: false,
      address: "0xB0424444f1C5Ab2D7A1cbd422cBE1CA0cF425aE4",
      id: 167,
      originalId: 41
    },
    {
      decimals: 18,
      symbol: "sLADYS",
      name: "Synthetic Milady Coin (Arbitrum)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/25023.png"
      },
      chainFromId: 42161,
      deprecated: false,
      address: "0xAD87744e87344306BBcfa23F6ae36c69B968e0A4",
      id: 168,
      originalId: 42
    },
    {
      decimals: 18,
      symbol: "sFRAX",
      name: "Synthetic Frax (Arbitrum One)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/6952.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/6952.png"
      },
      chainFromId: 42161,
      deprecated: false,
      address: "0x72c12938e7b8a4c2f18Ae1b4948E32D64F52a68B",
      id: 169,
      originalId: 43
    },
    {
      decimals: 18,
      symbol: "sUXLINK",
      name: "Synthetic UXLINK (Arbitrum)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png"
      },
      chainFromId: 42161,
      deprecated: false,
      address: "0xF909804F4aE12b37c39F8916f84D0629461F0F76",
      id: 170,
      originalId: 44
    },
    {
      decimals: 18,
      symbol: "sAPE",
      name: "Synthetic APE (Arbitrum)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png"
      },
      chainFromId: 42161,
      deprecated: false,
      address: "0x3a0aB171629c940797777c9dC9691C09130F7d55",
      id: 171,
      originalId: 45
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin From Optimism",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 10,
      deprecated: false,
      address: "0xf17b21B78C1422afaC2cA88886463b4C28d3D520",
      id: 172,
      originalId: 46
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Optimism)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 10,
      deprecated: false,
      address: "0x7a74C122831E1221b32162569f95Ff1d01e099dE",
      id: 173,
      originalId: 47
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin From Arbitrum Nova",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 42170,
      deprecated: false,
      address: "0xf84d80134ff1566502801dB28a62d1888C3F80a7",
      id: 174,
      originalId: 48
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Arbitrum Nova)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 42170,
      deprecated: false,
      address: "0x06A0c3d0Cf4b12412F48E1746bd440842a14375a",
      id: 175,
      originalId: 49
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin From Polygon zkEVM",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 1101,
      deprecated: false,
      address: "0x39d3625D07FE1b9267ef7F7891D27f3c9D39Dd2E",
      id: 176,
      originalId: 50
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USDC From Polygon zkEVM",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 1101,
      deprecated: true,
      address: "0x41E1525F93b3A9C70a7824E6C16Ca6B944180A6a",
      id: 177,
      originalId: 51
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Polygon zkEVM)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 1101,
      deprecated: false,
      address: "0xd687ff0122669ce5A0bE89143a9B926BA9a72Df3",
      id: 178,
      originalId: 52
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Linea)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 59144,
      deprecated: false,
      address: "0x840531DA82E31B4Ff535Bc8F3A16f6f0C48B3861",
      id: 179,
      originalId: 53
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin From Linea",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 59144,
      deprecated: false,
      address: "0x6e8AE8b7735Ff7eb4145Ad881087Dc14fB494d45",
      id: 180,
      originalId: 54
    },
    {
      decimals: 18,
      symbol: "sSIS",
      name: "Synthetic SIS token from Linea",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      chainFromId: 59144,
      deprecated: false,
      address: "0x923db084ce63aBbc581b5c9b3b0DA1c40B10d387",
      id: 181,
      originalId: 55
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD Coin From Mantle",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 5e3,
      deprecated: false,
      address: "0xf87516b6665553D700E67a158d68bc627408Dc08",
      id: 182,
      originalId: 56
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Mantle)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 5e3,
      deprecated: false,
      address: "0x0C16952C588f859e797C7c9497304db0F5239c51",
      id: 183,
      originalId: 57
    },
    {
      decimals: 18,
      symbol: "sCATI",
      name: "Synthetic CATI (Mantle)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32966.png"
      },
      chainFromId: 5e3,
      deprecated: false,
      address: "0x4c5A6c3fDc33BEF6a84acD42bF77a2F1f2e6AB9E",
      id: 184,
      originalId: 58
    },
    {
      decimals: 18,
      symbol: "sUXLINK",
      name: "Synthetic UXLINK (Mantle)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png"
      },
      chainFromId: 5e3,
      deprecated: false,
      address: "0xaC159831FFD470dfeB11359433076800DA2bA01D",
      id: 185,
      originalId: 59
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Base)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 8453,
      deprecated: false,
      address: "0x7B7aD875f336ffD27A3872b243c025E60A028732",
      id: 186,
      originalId: 60
    },
    {
      decimals: 6,
      symbol: "sUSDbC",
      name: "Synthetic USDbC From Base",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 8453,
      deprecated: false,
      address: "0xFBe80e8C3FbFf0bC314b33d1C6185230aC319309",
      id: 187,
      originalId: 61
    },
    {
      decimals: 18,
      symbol: "sG",
      name: "Synthetic G (Base)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
      },
      chainFromId: 8453,
      deprecated: false,
      address: "0x47FFc26a7A452df343F68Cc1A66353a2e8541AC0",
      id: 188,
      originalId: 62
    },
    {
      decimals: 6,
      symbol: "sUSDT",
      name: "Synthetic USDT From Tron",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      chainFromId: 728126428,
      deprecated: false,
      address: "0x4e7498c4db259065b73d21c81A5b41cadbEc7d4D",
      id: 189,
      originalId: 63
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Scroll)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 534352,
      deprecated: false,
      address: "0x7792FC1975f324fd3A4Cc4Ca8186087D73ffB9fc",
      id: 190,
      originalId: 64
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USDC From Scroll",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 534352,
      deprecated: false,
      address: "0x23A8a10664068012C5046F32925083B5aC25aAc3",
      id: 191,
      originalId: 65
    },
    {
      decimals: 18,
      symbol: "sSIS",
      name: "Synthetic SIS token from Scroll",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      chainFromId: 534352,
      deprecated: false,
      address: "0xD1E42b4Fdd2559e93B761c51Bb8ce644a688a78b",
      id: 192,
      originalId: 66
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Manta)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 169,
      deprecated: false,
      address: "0x4C9edbc90e9006ac909ae7090C51c69ddE1B7C3b",
      id: 193,
      originalId: 68
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USDC From Manta",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 169,
      deprecated: false,
      address: "0x55519D93513dD0271dd041CEe49389a1A6c7e881",
      id: 194,
      originalId: 69
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Metis)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 1088,
      deprecated: false,
      address: "0x7520d0D46D2027745E3837103E9Eb2bb372A869D",
      id: 195,
      originalId: 71
    },
    {
      decimals: 6,
      symbol: "sUSDT",
      name: "Synthetic USDT From Bahamut",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      chainFromId: 5165,
      deprecated: false,
      address: "0x20E4aE4922ef5c464C23D5CD08B507BC13890397",
      id: 196,
      originalId: 72
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD\u0421 From Bahamut",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 5165,
      deprecated: true,
      address: "0x8b1B60b23153aD184Cde4241F9B604e233D04fcb",
      id: 197,
      originalId: 73
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Mode)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 34443,
      deprecated: false,
      address: "0xE7671eC0E57322D254159e0595c2F6b179038203",
      id: 198,
      originalId: 74
    },
    {
      decimals: 6,
      symbol: "sUSDT",
      name: "Synthetic USDT From Rootstock",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/825.png"
      },
      chainFromId: 30,
      deprecated: false,
      address: "0x7a4CC805464b69C077daBadD48841E91134B988D",
      id: 199,
      originalId: 75
    },
    {
      decimals: 18,
      symbol: "sUSDT",
      name: "Synthetic rUSDT From RSK",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/825.png"
      },
      chainFromId: 30,
      deprecated: true,
      address: "0xB30caE10bC040D2Ab365351D35a7Dcbf0e922b54",
      id: 200,
      originalId: 76
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD\u0421.e From Rootstock",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 30,
      deprecated: true,
      address: "0xd5b73579D1f190Ad443f80b6160A49FE5C2Cda69",
      id: 201,
      originalId: 77
    },
    {
      decimals: 18,
      symbol: "sWRBTC",
      name: "Synthetic Wrapped RBTC (Rootstock)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32702.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32702.png"
      },
      chainFromId: 30,
      deprecated: false,
      address: "0x4d58c7C43F16D7E562030DC6f7fBebC5C59c3430",
      id: 202,
      originalId: 78
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Blast)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 81457,
      deprecated: false,
      address: "0x5DE7bb0E90E4D3860762B1E90758B839b056130F",
      id: 203,
      originalId: 80
    },
    {
      decimals: 18,
      symbol: "sWBTC",
      name: "Synthetic Wrapped BTC (Merlin)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png"
      },
      chainFromId: 4200,
      deprecated: false,
      address: "0x25BaD96fc7c70d1A22F99bC768db8f2B6fbfDa92",
      id: 204,
      originalId: 81
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped ETH (zkLink)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 810180,
      deprecated: false,
      address: "0x8bbEaa343Ee881A85758595648aA67A41e661C6d",
      id: 205,
      originalId: 82
    },
    {
      decimals: 8,
      symbol: "sWBTC",
      name: "Synthetic Wrapped BTC (Core)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1.png"
      },
      chainFromId: 1116,
      deprecated: false,
      address: "0xA8Cd384E4B10c9Ec05c5436E005BD8b64569796a",
      id: 206,
      originalId: 84
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Taiko)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 167e3,
      deprecated: false,
      address: "0xf834AD6385c3CfACee18593BBdE4E65A0f29ea32",
      id: 207,
      originalId: 85
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD\u0421 From Sei",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 1329,
      deprecated: false,
      address: "0x90CaF0F3FE4Ae3282F8F97A2aA691b0CB8d48c13",
      id: 208,
      originalId: 86
    },
    {
      decimals: 6,
      symbol: "sUSDT",
      name: "Synthetic USDT From Sei",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/825.png"
      },
      chainFromId: 1329,
      deprecated: true,
      address: "0x7649EeeA77e9464019392D5Ab40d4862435B3bD2",
      id: 209,
      originalId: 87
    },
    {
      decimals: 6,
      symbol: "sUSDC.ETH",
      name: "Synthetic USD\u0421.ETH (Zetachain)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 7e3,
      deprecated: false,
      address: "0x82f331A1740A0d1AE4549d9d571396b25B6c33bc",
      id: 210,
      originalId: 90
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD\u0421 From Cronos",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 25,
      deprecated: false,
      address: "0xB84f68Bfa9Ba0d1Ab8C6Ffe7429951629eC9ed1c",
      id: 211,
      originalId: 91
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Fraxtal)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 252,
      deprecated: false,
      address: "0xBe535CC7270864e30851578ca0A24AA15795d35C",
      id: 212,
      originalId: 92
    },
    {
      decimals: 18,
      symbol: "sFRAX",
      name: "Synthetic Frax (Fraxtal)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/36039.png"
      },
      chainFromId: 252,
      deprecated: false,
      address: "0x4B61bD8180F16124AEc1b875401D4c51a9A7DDbF",
      id: 213,
      originalId: 93
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD\u0421 From Gravity",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 1625,
      deprecated: false,
      address: "0x73e5a4d03b25b79A6a00eba696c59DFc94c822D8",
      id: 214,
      originalId: 94
    },
    {
      decimals: 18,
      symbol: "swG",
      name: "Synthetic wG (Gravity)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32120.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/32120.png"
      },
      chainFromId: 1625,
      deprecated: false,
      address: "0x5037A5c6961a19baaA90314c3f6B9B72849ceB9a",
      id: 215,
      originalId: 95
    },
    {
      decimals: 18,
      symbol: "sWBTC",
      name: "Synthetic WBTC (bsquared)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3717.png"
      },
      chainFromId: 223,
      deprecated: false,
      address: "0xae0d8173B888757889Ba125A7f0b43CA30DF98dC",
      id: 216,
      originalId: 96
    },
    {
      decimals: 6,
      symbol: "sUSDT",
      name: "Synthetic USDT From TON",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      chainFromId: 85918,
      deprecated: false,
      attributes: { ton: "EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs" },
      address: "0x8D8Ce7Bf0C7f7a368Bb92087Fc9D474d2DffC072",
      id: 217,
      originalId: 97
    },
    {
      decimals: 9,
      symbol: "sUXLINK",
      name: "Synthetic UXLINK (TON)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/32257.png"
      },
      chainFromId: 85918,
      deprecated: false,
      attributes: { ton: "EQBh9XACT0B60U8Q48VnjyqCxzxpM4oA0c8rqKt4h70yk1V5" },
      address: "0xd3aa3C34A322DBeD3b9EcA30ade18F5F0E1A5280",
      id: 218,
      originalId: 98
    },
    {
      decimals: 9,
      symbol: "sCATI",
      name: "Synthetic CATI (TON)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33057.png"
      },
      chainFromId: 85918,
      deprecated: false,
      attributes: { ton: "EQD-cvR0Nz6XAyRBvbhz-abTrRC6sI5tvHvvpeQraV9UAAD7" },
      address: "0x639F17BEDaADa19Dd6e83f36552a3168CD683Fcd",
      id: 219,
      originalId: 99
    },
    {
      decimals: 9,
      symbol: "sPINEYE",
      name: "Synthetic PINEYE (TON)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/33862.png"
      },
      chainFromId: 85918,
      deprecated: false,
      attributes: { ton: "EQDY2MzMJY_9OWm9UyQNLTU2Qs_8BRomlMUbbADnh-tFkLaU" },
      address: "0x91Ddc82b6C1841570B7c1277Ead216df204aa323",
      id: 220,
      originalId: 100
    },
    {
      decimals: 9,
      symbol: "sEVAA",
      name: "Synthetic EVAA From TON",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/38376.png"
      },
      chainFromId: 85918,
      deprecated: false,
      attributes: { ton: "EQBKMfjX_a_dsOLm-juxyVZytFP7_KKnzGv6J01kGc72gVBp" },
      address: "0x2F67Edc00CA81F4D087a1f2D041428aF6c691630",
      id: 221,
      originalId: 101
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD\u0421 From Cronos zkEVM",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 388,
      deprecated: false,
      address: "0x9D3Dbda42C15de4cF60aD3Eec78A0AA239399b1e",
      id: 222,
      originalId: 102
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD\u0421 From Morph",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 2818,
      deprecated: false,
      address: "0xd518ff6A6122D1ed4f193CefD7C361f52B5A6Cb6",
      id: 223,
      originalId: 103
    },
    {
      decimals: 18,
      symbol: "sBTC",
      name: "Synthetic Wrapped BTC (GOAT)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1.png"
      },
      chainFromId: 2345,
      deprecated: false,
      address: "0xFD638c0965B008A39A36f561a8e69388115F8F9d",
      id: 224,
      originalId: 104
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Sonic)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 146,
      deprecated: false,
      address: "0x9F2f60BaDE978BbEA32E4e2f282C86C0c2874fF5",
      id: 225,
      originalId: 105
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Abstract)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 2741,
      deprecated: false,
      address: "0xE1FF01476d1693881c85a23c65F9522579eB8398",
      id: 226,
      originalId: 106
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USD\u0421 From Gnosis",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 100,
      deprecated: false,
      address: "0xcfe415238cb13029B9D574BdF635D7d7D6571e63",
      id: 227,
      originalId: 107
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Gnosis)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 100,
      deprecated: false,
      address: "0x97B1c455D59373059f8fa92DEa00e7399FF3F5cC",
      id: 228,
      originalId: 108
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Berachain)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 80094,
      deprecated: false,
      address: "0x3c210C8b287CFdbc71c1CcF06Ee84c7926276835",
      id: 229,
      originalId: 109
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Unichain)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 130,
      deprecated: false,
      address: "0x73Bbd1031ac1265eb1b2Db33372d58444B6F63e3",
      id: 230,
      originalId: 110
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (Soneium)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 1868,
      deprecated: false,
      address: "0x3BbdE4396811f8643A3C1e98fb4CFFC74Ae01FB0",
      id: 231,
      originalId: 111
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether (opBNB)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 204,
      deprecated: false,
      address: "0xCE1b5b011ec7Ae1A410FEf94b0A721CDbE990f8e",
      id: 232,
      originalId: 112
    },
    {
      decimals: 18,
      symbol: "sWBNB",
      name: "Synthetic WBNB (opBNB)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/7192.png"
      },
      chainFromId: 204,
      deprecated: false,
      address: "0x59D786c1eC521E522Dbd33753Ef984eF2232F4d2",
      id: 233,
      originalId: 113
    },
    {
      decimals: 18,
      symbol: "sETH",
      name: "Synthetic Unit Ethereum (Hyperliquid)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 999,
      deprecated: false,
      address: "0x3D0c6c3F1fC9A8a434f2e9f35Eaf04FEACd959ED",
      id: 234,
      originalId: 114
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USDC From HyperEVM",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 999,
      deprecated: false,
      address: "0x872b42a47519Fb1d39c2a1bf98151B85E7F73bD4",
      id: 235,
      originalId: 115
    },
    {
      decimals: 18,
      symbol: "sAPE",
      name: "Synthetic APE From HyperEVM",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png"
      },
      chainFromId: 999,
      deprecated: false,
      address: "0xd288E185671ac16ad23834e3344760AeF91b3fC2",
      id: 236,
      originalId: 116
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic Wrapped Ether",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 747474,
      deprecated: true,
      address: "0x590500bc694654FeF4Ba396f998e48AD4A131171",
      id: 237,
      originalId: 117
    },
    {
      decimals: 18,
      symbol: "sWETH",
      name: "Synthetic WETH From Katana",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 747474,
      deprecated: false,
      address: "0x3D20098E8Ed873E04f19731d96AaafFA2aC2e760",
      id: 238,
      originalId: 118
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic USDC From Katana",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/3408.png"
      },
      chainFromId: 747474,
      deprecated: false,
      address: "0x95716Ec1002Cd8999169febfCD41D647E5c2FFFf",
      id: 239,
      originalId: 119
    },
    {
      decimals: 18,
      symbol: "sWAPE",
      name: "Synthetic Wrapped APE (ApeChain)",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/18876.png"
      },
      chainFromId: 33139,
      deprecated: false,
      address: "0xcF463CaF51b2e30b2d253b5F10FE533C17B80331",
      id: 240,
      originalId: 120
    },
    {
      decimals: 6,
      symbol: "sUSDT0",
      name: "Synthetic USDT0 From Plasma",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      chainFromId: 9745,
      deprecated: false,
      address: "0xEB24dCb196ac5B93E1600e2dE66d07Eec13Ed243",
      id: 241,
      originalId: 121
    },
    {
      decimals: 18,
      symbol: "sSIS",
      name: "Synthetic SIS token from Binance",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/15084.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/15084.png"
      },
      chainFromId: 56,
      deprecated: false,
      address: "0xd747F3c877Eb2736c06DD9A852480058A24e01Ce",
      id: 242,
      originalId: 125
    },
    {
      decimals: 6,
      symbol: "sUSDC",
      name: "Synthetic syUSDC From Telos",
      chainId: 13863860,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 40,
      deprecated: false,
      address: "0x66281EE570B0E59715eEb198C0921b0728459d09",
      id: 243,
      originalId: 128
    },
    {
      decimals: 8,
      symbol: "syBTC",
      name: "syBTC",
      chainId: 324,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      chainFromId: 3652501241,
      deprecated: true,
      address: "0xED0c95EBe5a3E687cB2224687024FeC6518E683e",
      id: 244,
      originalId: 122
    },
    {
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
      chainId: 5165,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0x4237e0A5b55233D5B6D6d1D9BF421723954130D8",
      id: 245,
      originalId: 0
    },
    {
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
      chainId: 5165,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/1027.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0xE5b3562A0fa9eC3e718C96FfE349e1280D2Be591",
      id: 246,
      originalId: 2
    },
    {
      decimals: 6,
      symbol: "USDT",
      name: "Tether USD",
      chainId: 5165,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/825.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0xDeF886C55a79830C47108eeb9c37e78a49684e41",
      id: 247,
      originalId: 3
    },
    {
      decimals: 8,
      symbol: "WBTC",
      name: "Wrapped BTC",
      chainId: 5165,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3717.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0x6B6301dcBA742E2320dD083A8d8fDbaB9527484B",
      id: 248,
      originalId: 4
    },
    {
      decimals: 8,
      symbol: "syBTC",
      name: "syBTC",
      chainId: 30,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      chainFromId: 3652501241,
      deprecated: false,
      address: "0xB52E582263c1d0189b3cc1402c1B7205b7F2E9Ba",
      id: 249,
      originalId: 124
    },
    {
      decimals: 18,
      symbol: "pufETH",
      name: "pufETH",
      chainId: 7e3,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/29325.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/128x128/29325.png"
      },
      chainFromId: 1,
      deprecated: false,
      address: "0x1e4bF3CaBD7707089138dD5a545B077413FA83Fc",
      id: 250,
      originalId: 6
    }
  ]
};

// src/crosschain/config/cache/testnet.json
var testnet_default = {
  omniPools: [
    {
      chainId: 97,
      address: "0xFC385a59b2728cA437057E3cDBA4a2611B75c406",
      oracle: "0xfdF3dBF16a7Dc8078FE4E9D0c1ac391dfb8B19aF",
      generalPurpose: true,
      coinGeckoId: "wrapped-ton",
      id: 0,
      tokens: [
        { index: 1, tokenId: 9 },
        { index: 2, tokenId: 7 },
        { index: 3, tokenId: 6 }
      ]
    }
  ],
  tokens: [
    {
      decimals: 9,
      symbol: "WTON(BSC)",
      name: "WTON(BSC)",
      chainId: 97,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png"
      },
      deprecated: false,
      address: "0xe015581A4e36eEbf170a3F4a686fa7606d511b13",
      id: 0
    },
    {
      decimals: 8,
      symbol: "mutSymBtc",
      name: "mutSymBtc",
      chainId: 11155111,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      deprecated: false,
      address: "0x41540e95B10383408cfE201974c88E6C3ef9323A",
      id: 1
    },
    {
      decimals: 8,
      symbol: "t4SymBtc",
      name: "t4SymBtc",
      chainId: 11155111,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      deprecated: false,
      address: "0x04cd23122a21f6c5F912FC7B9aBC508302899Dfb",
      id: 2
    },
    {
      decimals: 8,
      symbol: "mSymBtc",
      name: "mSymBtc",
      chainId: 11155111,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      deprecated: false,
      address: "0xeD86914A9478a066d82b2bE3E5B99A38BAaE23ce",
      id: 3
    },
    {
      decimals: 8,
      symbol: "WBTC",
      name: "Wrapped BTC",
      chainId: 43113,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      deprecated: false,
      address: "0x9374Ea7A11c5B185A6631effF22c015E71c67581",
      id: 4
    },
    {
      decimals: 8,
      symbol: "muBTC",
      name: "Bitcoin Mutiny",
      chainId: 2782866891,
      isNative: false,
      icons: {
        large: "https://faucet.mutinynet.com/favicon.svg",
        small: "https://faucet.mutinynet.com/favicon.svg"
      },
      deprecated: false,
      address: "0x41540e95B10383408cfE201974c88E6C3ef9323A",
      id: 5
    },
    {
      decimals: 8,
      symbol: "sMutSymBtc",
      name: "synthetic sBTC from Sepolia Mutinynet",
      chainId: 97,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      chainFromId: 11155111,
      deprecated: false,
      address: "0x742175079E67dAD92CA5a315f5C37CF26e207615",
      id: 6,
      originalId: 1
    },
    {
      decimals: 8,
      symbol: "st4SymBtc",
      name: "st4SymBtc from Sepolia",
      chainId: 97,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      chainFromId: 11155111,
      deprecated: false,
      address: "0xD8D16bab99BDA6c0aE108Def47a47048fa49F427",
      id: 7,
      originalId: 2
    },
    {
      decimals: 8,
      symbol: "sBTC",
      name: "sBTC",
      chainId: 97,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      chainFromId: 11155111,
      deprecated: false,
      address: "0xf945220F1A99a3B207277eBad23490DBd6F5433f",
      id: 8,
      originalId: 3
    },
    {
      decimals: 8,
      symbol: "sBTC",
      name: "Synthetic BTC from Fuji",
      chainId: 97,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      chainFromId: 43113,
      deprecated: false,
      address: "0xD2347db16c570495Af15a859800e86541D046c2e",
      id: 9,
      originalId: 4
    },
    {
      decimals: 8,
      symbol: "sBTC",
      name: "Synthetic BTC",
      chainId: 11155111,
      isNative: false,
      icons: {
        large: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png",
        small: "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"
      },
      chainFromId: 43113,
      deprecated: false,
      address: "0xD058A1425301a400C4e901E78006655CB07F325A",
      id: 10,
      originalId: 4
    }
  ]
};

// src/crosschain/config/cache/dev.json
var dev_default = {
  omniPools: [
    {
      chainId: 97,
      address: "0x789001A80a8EdBBEE07876b0dF58c3eAdEE89877",
      oracle: "0x2cD94CB0F4cBC4a51c3e9c4b88d03B982bE24608",
      generalPurpose: true,
      coinGeckoId: "usd-coin",
      id: 0,
      tokens: []
    }
  ],
  tokens: []
};

// src/crosschain/config/cache/cache.ts
var ConfigCache = class {
  constructor(configName) {
    if (configName === "mainnet") {
      this.data = mainnet_default;
    } else if (configName === "testnet") {
      this.data = testnet_default;
    } else if (configName === "dev") {
      this.data = dev_default;
    } else if (Object.prototype.hasOwnProperty.call(configName, "tokens")) {
      this.data = configName;
    } else {
      throw new SdkError("Unknown config name");
    }
  }
  tokens() {
    return this.data.tokens.map((attributes) => {
      return new Token2(attributes);
    });
  }
  getRepresentation(token, chainId) {
    if (token.isSynthetic) {
      const original = this.getOriginalToken(token);
      if (original?.chainId !== chainId) {
        return;
      }
      return original;
    }
    return this.getSynthTokens(token).find((i) => i.chainId === chainId);
  }
  getOmniPoolByConfig(omniPoolConfig) {
    return this.data.omniPools.find((i) => {
      return i.address.toLowerCase() === omniPoolConfig.address.toLowerCase() && i.chainId === omniPoolConfig.chainId;
    });
  }
  getOmniPoolById(id) {
    return this.data.omniPools.find((i) => i.id === id);
  }
  // It works correctly if the `token` in ONE pool ONLY
  // If there are more than one pool then FIRST pool will be selected
  getOmniPoolByToken(token) {
    let synths;
    if (token.isSynthetic) {
      synths = [token];
    } else {
      synths = this.getSynthTokens(token);
    }
    if (synths.length === 0) {
      synths = [token];
    }
    const ids = synths.map((i) => {
      return this.getTokenInfoByToken(i).id;
    });
    return this.data.omniPools.find((pool) => {
      return pool.tokens.find((i) => {
        return ids.includes(i.tokenId);
      });
    });
  }
  getOmniPoolTokenIndex(omniPoolConfig, token) {
    const omniPool = this.getOmniPoolByConfig(omniPoolConfig);
    if (!omniPool) {
      throw new SdkError(`getOmniPoolIndex: cannot find omniPoolByConfig ${omniPoolConfig}`);
    }
    const tokenInfo = this.getTokenInfoByToken(token);
    const found = omniPool.tokens.find((pool) => {
      return pool.tokenId === tokenInfo.id;
    });
    if (found === void 0) {
      throw new NoTransitTokenError(`There is no token ${tokenInfo.address} in omniPool ${omniPool.address}`);
    }
    return found.index;
  }
  getOmniPoolTokens(omniPoolConfig) {
    const pool = this.getOmniPoolByConfig(omniPoolConfig);
    if (!pool) {
      throw new SdkError("Cannot find omniPool");
    }
    return pool.tokens.map((i) => {
      const tokenInfo = this.getTokenInfoById(i.tokenId);
      return new Token2(tokenInfo);
    });
  }
  getTokenInfoById(id) {
    const tokenInfo = this.data.tokens.find((i) => i.id === id);
    if (!tokenInfo) {
      throw new SdkError(`Can't get tokenInfo for id ${id}`);
    }
    return tokenInfo;
  }
  // --- PRIVATE ---
  getTokenInfoByToken(token) {
    const found = this.data.tokens.find((i) => {
      return i.address.toLowerCase() === token.address.toLowerCase() && i.chainId === token.chainId && i.chainFromId === token.chainFromId;
    });
    if (!found) {
      throw new SdkError(`Can't get tokenInfo by token ${token.address} ${token.chainId}`);
    }
    return found;
  }
  getOriginalToken(token) {
    if (!token.isSynthetic) {
      return;
    }
    const tokenInfo = this.getTokenInfoByToken(token);
    if (tokenInfo.originalId === void 0) {
      return;
    }
    const original = this.getTokenInfoById(tokenInfo.originalId);
    return new Token2(original);
  }
  getSynthTokens(token) {
    if (token.isSynthetic) {
      return [];
    }
    const wrapped = wrappedToken(token);
    const tokenInfo = this.getTokenInfoByToken(wrapped);
    return this.data.tokens.filter((i) => {
      return i.originalId === tokenInfo.id;
    }).map((i) => {
      return new Token2(i);
    });
  }
};

// src/crosschain/waitForComplete/constants.ts
var POLLING_INTERVAL = 1e3 * 10;
var DEFAULT_EXCEED_DELAY2 = 1e3 * 60 * 20;
var TxNotFound = class extends Error {
  constructor(txId) {
    super(`Transaction ${txId} not found`);
    this.name = "TxNotFound";
  }
};

// src/crosschain/waitForComplete/utils.ts
var fetchData = async (url) => {
  const response = await fetch(url);
  if (!response.ok) {
    const text = await response.text();
    const json = JSON.parse(text);
    throw new Error(json.message ?? text);
  }
  const data = await response.json();
  return data;
};
async function longPolling({
  pollingInterval = POLLING_INTERVAL,
  exceedDelay = DEFAULT_EXCEED_DELAY2,
  pollingFunction,
  successCondition,
  error
}) {
  return new Promise((resolve, reject) => {
    let pastTime = 0;
    let result;
    const func = async () => {
      pastTime += pollingInterval;
      if (pastTime > exceedDelay) {
        clearInterval(interval);
        reject(error ?? new Error(`Long polling exceed time`));
        return;
      }
      try {
        result = await pollingFunction();
      } catch (error2) {
        console.error("Long Polling function error", error2);
      } finally {
        if (result && successCondition(result)) {
          resolve(result);
          clearInterval(interval);
        }
      }
    };
    func();
    const interval = setInterval(func, pollingInterval);
  });
}

// src/crosschain/waitForComplete/waitForTonDepositTxMined.ts
var import_core3 = require("@ton/core");
var import_utils8 = require("ethers/lib/utils");
var import_constants47 = require("@ethersproject/constants");
var BURN_COMPLETED_OPCODE = 1659197634;
function parseBurnCompletedBody(msgBody) {
  const bodySlice = msgBody.beginParse();
  const opcode = bodySlice.loadUint(32);
  if (opcode === BURN_COMPLETED_OPCODE) {
    const burnCompletedData1 = bodySlice.loadRef().beginParse();
    const burnCompletedData2 = bodySlice.loadRef().beginParse();
    const externalId = burnCompletedData1.loadBuffer(32);
    const crossChainId = burnCompletedData1.loadBuffer(32);
    const receiver = burnCompletedData1.loadAddress();
    const amount = burnCompletedData2.loadCoins();
    const fee = burnCompletedData2.loadCoins();
    const tokenAddr = burnCompletedData2.loadAddress();
    return {
      externalId,
      crossChainId,
      receiver,
      amount,
      fee,
      tokenAddr
    };
  } else {
    return null;
  }
}
function _getExternalIdTon({
  internalId,
  receiveSide,
  chainId
}) {
  return (0, import_utils8.solidityKeccak256)(["bytes32", "address", "uint256"], [internalId, receiveSide, chainId]);
}
var WaitForTonTxCompleteError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "WaitForTonTxCompleteError";
  }
};
async function waitForTonTxComplete(symbiosis, internalId, chainId) {
  const tonChainConfig = symbiosis.config.chains.find((chain) => chain.id === chainId);
  if (!tonChainConfig) {
    throw new Error("Ton chain config not found");
  }
  const tonPortal = tonChainConfig.tonPortal;
  if (!tonPortal) {
    throw new Error(`Ton portal not found for chain ${chainId}`);
  }
  const externalId = _getExternalIdTon({ internalId, receiveSide: import_constants47.AddressZero, chainId });
  const client = await symbiosis.getTonClient();
  const txRaw = await longPolling({
    pollingFunction: async () => {
      const lastBlock = await client.getLastBlock();
      const accountInfo = await client.getAccount(lastBlock.last.seqno, import_core3.Address.parse(tonPortal));
      if (!accountInfo.account.last) {
        return void 0;
      }
      const txsRaw = await client.getAccountTransactions(
        import_core3.Address.parse(tonPortal),
        BigInt(accountInfo.account.last.lt),
        Buffer.from(accountInfo.account.last.hash, "base64")
      );
      return txsRaw.find(({ tx }) => {
        return Array.from(tx.outMessages).find(([_, msg]) => {
          if (msg.info.type !== "external-out") {
            return false;
          }
          const burnCompletedEvent = parseBurnCompletedBody(msg.body);
          if (!burnCompletedEvent) {
            return false;
          }
          return burnCompletedEvent.externalId.equals(Buffer.from(externalId.slice(2), "hex"));
        });
      });
    },
    successCondition: (tx) => {
      return tx !== void 0;
    },
    error: new WaitForTonTxCompleteError("Ton transaction not found on TON chain")
  });
  return txRaw.tx.hash().toString("hex");
}

// src/crosschain/waitForComplete/tryToFindExtraStepsAndWait.ts
var import_swap = require("@chainflip/sdk/swap");
async function tryToFindExtraStepsAndWait(symbiosis, chainId, txHash) {
  const provider = symbiosis.getProvider(chainId);
  const receipt = await provider.getTransactionReceipt(txHash);
  if (!receipt) {
    throw new TxNotFound(txHash);
  }
  const isThorChainDeposit = await findThorChainDeposit(receipt);
  if (isThorChainDeposit) {
    const outHash = await waitForThorChainTx(txHash);
    return {
      extraStep: "thorChain",
      outHash
    };
  }
  const burnRequestBtc = await findBurnRequestBtc(receipt);
  if (burnRequestBtc) {
    const { burnSerial, rtoken } = burnRequestBtc;
    const btc = symbiosis.tokens().find((t) => t.address.toLowerCase() === rtoken.toLowerCase());
    if (!btc) {
      throw new Error("BTC token not found");
    }
    const btcConfig = symbiosis.getBtcConfig(btc);
    const outHash = await waitUnwrapBtcTxComplete(btcConfig, burnSerial);
    return {
      extraStep: "burnRequestBtc",
      outHash
    };
  }
  const burnRequestTon = await findBurnRequestTON(receipt);
  if (burnRequestTon) {
    const { internalId, chainId: chainId2 } = burnRequestTon;
    const outHash = await waitForTonTxComplete(symbiosis, internalId, +chainId2);
    return {
      extraStep: "burnRequestTon",
      outHash
    };
  }
  const chainFlipSwap = await findChainFlipSwap(receipt);
  if (chainFlipSwap) {
    const outHash = await waitForChainFlipSwap(receipt.transactionHash);
    return {
      extraStep: "chainFlip",
      outHash
    };
  }
  return {
    outHash: txHash
  };
}
async function findChainFlipSwap(receipt) {
  const swapTokenTopic0 = "0x834b524d9f8ccbd31b00b671c896697b96eb4398c0f56e9386a21f5df61e3ce3";
  const log = receipt.logs.find((log2) => {
    if (log2.topics.length === 0) {
      return false;
    }
    return log2.topics[0] === swapTokenTopic0;
  });
  return !!log;
}
async function waitForChainFlipSwap(txHash) {
  const chainFlipSdk = new import_swap.SwapSDK({
    network: "mainnet"
  });
  const response = await longPolling({
    pollingFunction: async () => {
      return chainFlipSdk.getStatusV2({ id: txHash });
    },
    successCondition: (response2) => {
      return response2.state === "COMPLETED" || response2.state === "SENT";
    },
    error: new TxNotFound(txHash),
    exceedDelay: 36e5,
    // 1 hour
    pollingInterval: 10 * 1e3
    // 10 seconds
  });
  if (response.state !== "COMPLETED" && response.state !== "SENT") {
    throw new TxNotFound(txHash);
  }
  if (!response.swapEgress?.txRef) {
    throw new TxNotFound(txHash);
  }
  return response.swapEgress.txRef;
}
async function findThorChainDeposit(receipt) {
  const thorChainDepositTopic0 = "0xef519b7eb82aaf6ac376a6df2d793843ebfd593de5f1a0601d3cc6ab49ebb395";
  const log = receipt.logs.find((log2) => {
    if (log2.topics.length === 0) {
      return false;
    }
    return log2.topics[0] === thorChainDepositTopic0;
  });
  return !!log;
}
async function waitForThorChainTx(txHash) {
  const txHashCleaned = txHash.startsWith("0x") ? txHash.slice(2) : txHash;
  const thorUrl = new URL(`https://thornode.ninerealms.com/thorchain/tx/${txHashCleaned}`);
  return longPolling({
    pollingFunction: async () => {
      const result = await fetchData(thorUrl);
      const { status, out_hashes } = result.observed_tx;
      if (status === "done" && out_hashes && out_hashes.length > 0) {
        return out_hashes.find((outHash) => {
          return outHash !== "0000000000000000000000000000000000000000000000000000000000000000";
        });
      }
      return;
    },
    successCondition: (btcHash) => !!btcHash,
    error: new TxNotFound(txHash),
    exceedDelay: 36e5,
    // 1 hour
    pollingInterval: 6e4
    // 1 minute
  });
}
async function findBurnRequestBtc(receipt) {
  const synthesisInterface = Synthesis__factory.createInterface();
  const topic0 = synthesisInterface.getEventTopic("BurnRequestBTC");
  const log = receipt.logs.find((log2) => {
    if (log2.topics.length === 0) {
      return false;
    }
    return log2.topics[0] === topic0;
  });
  if (!log) {
    return;
  }
  const data = synthesisInterface.parseLog(log);
  const { burnSerial, rtoken } = data.args;
  return { burnSerial, rtoken };
}
async function findBurnRequestTON(receipt) {
  const synthesisInterface = Synthesis__factory.createInterface();
  const burnRequestTonTopic = synthesisInterface.getEventTopic("BurnRequestTON");
  const log = receipt.logs.find((log2) => {
    if (log2.topics.length === 0) {
      return false;
    }
    return log2.topics[0] === burnRequestTonTopic;
  });
  if (!log) {
    return;
  }
  const data = synthesisInterface.parseLog(log);
  const { id, chainID } = data.args;
  return { internalId: id, chainId: chainID.toString() };
}
async function waitUnwrapBtcTxComplete(btcConfig, burnSerialBtc) {
  const { forwarderUrl } = btcConfig;
  const unwrapInfoUrl = new URL(`${forwarderUrl}/unwrap?serial=${burnSerialBtc.toString()}`);
  const result = await longPolling({
    pollingFunction: async () => {
      return fetchData(unwrapInfoUrl);
    },
    successCondition: (result2) => !!result2.outputIdx,
    error: new TxNotFound(burnSerialBtc.toString()),
    exceedDelay: 36e5,
    // 1 hour
    pollingInterval: 1e4
    // 10 seconds
  });
  return result.tx;
}

// src/crosschain/waitForComplete/getTxTonBridgeInfo.ts
var ORACLE_REQUEST_OPCODE = 2067945553;
var META_SYNTHESIZE_SELECTOR = "c29a91bc";
var SYNTHESIZE_SELECTOR = "a83e754b";
function getTxTonBridgeInfo(tx) {
  let internalId;
  let externalId;
  let externalChainId;
  for (const outMsg of tx.outMessages.values()) {
    if (outMsg?.info.type !== "external-out") {
      continue;
    }
    const parsedOracleRequest = parseOracleRequestBody(outMsg.body);
    internalId = parsedOracleRequest?.internalId;
    externalId = parsedOracleRequest?.externalId;
    externalChainId = parsedOracleRequest?.externalChainId;
    break;
  }
  if (!internalId || !externalId || !externalChainId) {
    throw new Error("Invalid oracle request body");
  }
  return {
    internalId,
    externalId,
    externalChainId,
    requestType: "SynthesizeRequest"
  };
}
function loadHexBytes(slice, bytesCount) {
  return slice.loadBuffer(bytesCount).toString("hex");
}
function parseOracleRequestBody(msgBody) {
  const bodySlice = msgBody.beginParse();
  const opcode = bodySlice.loadUint(32);
  if (opcode !== ORACLE_REQUEST_OPCODE) {
    return;
  }
  const refCalldata = bodySlice.loadRef().beginParse();
  bodySlice.loadInt(8);
  bodySlice.loadBuffer(32);
  bodySlice.loadBuffer(20);
  bodySlice.loadBuffer(20);
  const externalChainId = bodySlice.loadUint(256);
  const ref1 = refCalldata.loadRef().beginParse();
  const ref2 = refCalldata.loadRef().beginParse();
  const functionSelector = loadHexBytes(ref1, 4);
  let internalId, externalId;
  if (functionSelector === META_SYNTHESIZE_SELECTOR) {
    ref1.loadBuffer(64);
    internalId = loadHexBytes(ref1, 32);
    externalId = loadHexBytes(ref2, 32);
  } else if (functionSelector === SYNTHESIZE_SELECTOR) {
    ref1.loadBuffer(32);
    externalId = loadHexBytes(ref1, 32);
    internalId = loadHexBytes(ref1, 32);
  }
  if (!internalId || !externalId) {
    throw new Error("Invalid oracle request body");
  }
  return {
    internalId: "0x" + internalId,
    externalId: "0x" + externalId,
    externalChainId
  };
}

// src/crosschain/waitForComplete/waitForComplete.ts
async function waitForComplete({ symbiosis, chainId, txId, txTon }) {
  const txIdWithPrefix = txId.startsWith("0x") ? txId : `0x${txId}`;
  let aBridgeInfo;
  if (isTonChainId(chainId) && txTon) {
    aBridgeInfo = getTxTonBridgeInfo(txTon);
  } else {
    aBridgeInfo = await getTxBridgeInfo(symbiosis, chainId, txIdWithPrefix);
  }
  if (!aBridgeInfo) {
    const { outHash: outHash2, extraStep } = await tryToFindExtraStepsAndWait(symbiosis, chainId, txId);
    if (!extraStep) {
      throw new Error(`Transaction ${txId} is not a bridge request`);
    }
    return outHash2;
  }
  const bTxId = await waitOtherSideTx(symbiosis, aBridgeInfo);
  const bBridgeInfo = await getTxBridgeInfo(symbiosis, aBridgeInfo.externalChainId, bTxId);
  if (!bBridgeInfo) {
    const { outHash: outHash2 } = await tryToFindExtraStepsAndWait(symbiosis, aBridgeInfo.externalChainId, bTxId);
    return outHash2;
  }
  const cTxId = await waitOtherSideTx(symbiosis, bBridgeInfo);
  const { outHash } = await tryToFindExtraStepsAndWait(symbiosis, bBridgeInfo.externalChainId, cTxId);
  return outHash;
}
async function getTxBridgeInfo(symbiosis, chainId, txId) {
  const provider = symbiosis.getProvider(chainId);
  const receipt = await provider.getTransactionReceipt(txId);
  if (!receipt) {
    throw new TxNotFound(txId);
  }
  const portal = symbiosis.portal(chainId);
  const synthesis = symbiosis.synthesis(chainId);
  const revertBurnRequestTopic = portal.interface.getEventTopic("RevertBurnRequest");
  const revertSynthesizeRequestTopic = synthesis.interface.getEventTopic("RevertSynthesizeRequest");
  const metaRevertRequestTopic = portal.interface.getEventTopic("MetaRevertRequest");
  let revertLog = receipt.logs.find((log2) => {
    return !!log2.topics.find((topic) => {
      return topic === revertBurnRequestTopic || topic === revertSynthesizeRequestTopic;
    });
  });
  let isMetaRevertRequest = false;
  if (!revertLog) {
    revertLog = receipt.logs.find((log2) => {
      return !!log2.topics.find((topic) => {
        return topic === metaRevertRequestTopic;
      });
    });
    isMetaRevertRequest = !!revertLog;
  }
  if (revertLog) {
    const address2 = revertLog.address.toLowerCase();
    if (address2 !== portal.address.toLowerCase() && address2 !== synthesis.address.toLowerCase()) {
      throw new Error(`Transaction ${txId} is not a from synthesis or portal contract`);
    }
    const bridge2 = symbiosis.bridge(chainId);
    const oracleRequestTopic = bridge2.interface.getEventTopic("OracleRequest");
    const oracleRequestLog = receipt.logs.find((log2) => log2.topics.includes(oracleRequestTopic));
    if (!oracleRequestLog) {
      throw new Error(`Transaction ${txId} have a OracleRequest call not from bridge contract`);
    }
    const { chainId: oracleRequestChainId } = bridge2.interface.parseLog(oracleRequestLog).args;
    let contract2;
    let requestType2;
    if (revertLog.address.toLowerCase() === portal.address.toLowerCase()) {
      contract2 = portal;
      if (isMetaRevertRequest) {
        requestType2 = "RevertSynthesizeRequest";
      } else {
        requestType2 = "RevertBurnCompleted";
      }
    } else {
      contract2 = synthesis;
      requestType2 = "RevertSynthesizeCompleted";
    }
    const { id: internalId2, to: revertableAddress2 } = contract2.interface.parseLog(revertLog).args;
    const externalChainId2 = oracleRequestChainId.toNumber();
    const externalId2 = getExternalId({
      internalId: internalId2,
      contractAddress: contract2.address,
      revertableAddress: tronAddressToEvm(revertableAddress2),
      chainId
    });
    return { internalId: internalId2, externalId: externalId2, externalChainId: externalChainId2, requestType: requestType2 };
  }
  const synthesizeRequestTopic = portal.interface.getEventTopic("SynthesizeRequest");
  const burnRequestTopic = synthesis.interface.getEventTopic("BurnRequest");
  const log = receipt.logs.find((log2) => {
    return !!log2.topics.find((topic) => topic === synthesizeRequestTopic || topic === burnRequestTopic);
  });
  if (!log) {
    return null;
  }
  if (log.address.toLowerCase() !== portal.address.toLowerCase() && log.address.toLowerCase() !== synthesis.address.toLowerCase()) {
    throw new Error(`Transaction ${txId} is not a from synthesis or portal contract`);
  }
  let contract;
  let requestType;
  if (log.address.toLowerCase() === portal.address.toLowerCase()) {
    contract = portal;
    requestType = "SynthesizeRequest";
  } else {
    contract = synthesis;
    requestType = "BurnRequest";
  }
  const { id: internalId, chainID, revertableAddress } = contract.interface.parseLog(log).args;
  const externalChainId = chainID.toNumber();
  const contractAddress = requestType === "SynthesizeRequest" ? symbiosis.chainConfig(externalChainId).synthesis : symbiosis.chainConfig(externalChainId).portal;
  const externalId = getExternalId({
    internalId,
    contractAddress: tronAddressToEvm(contractAddress),
    revertableAddress: tronAddressToEvm(revertableAddress),
    chainId: externalChainId
  });
  return { internalId, externalId, externalChainId, requestType };
}
async function waitOtherSideTx(symbiosis, bridgeInfo) {
  const { requestType, externalChainId, externalId, internalId } = bridgeInfo;
  let filter;
  switch (requestType) {
    case "SynthesizeRequest": {
      const synthesis = symbiosis.synthesis(externalChainId);
      filter = synthesis.filters.SynthesizeCompleted(externalId);
      break;
    }
    case "BurnRequest": {
      const portal = symbiosis.portal(externalChainId);
      filter = portal.filters.BurnCompleted(externalId);
      break;
    }
    case "RevertSynthesizeRequest": {
      const synthesis = symbiosis.synthesis(externalChainId);
      filter = synthesis.filters.RevertSynthesizeRequest(internalId);
      break;
    }
    case "RevertSynthesizeCompleted": {
      const portal = symbiosis.portal(externalChainId);
      filter = portal.filters.RevertSynthesizeCompleted(externalId);
      break;
    }
    case "RevertBurnCompleted": {
      const synthesis = symbiosis.synthesis(externalChainId);
      filter = synthesis.filters.RevertBurnCompleted(externalId);
      break;
    }
  }
  const log = await getLogWithTimeout({ symbiosis, chainId: externalChainId, filter });
  return log.transactionHash;
}

// src/crosschain/waitForComplete/waitForBtcDepositAccepted.ts
var WaitWrapBtcTxToCompleteError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "WaitWrapBtcTxToCompleteError";
  }
};
async function waitForBtcDepositAccepted(btcConfig, depositAddress) {
  const { forwarderUrl } = btcConfig;
  const addressInfoUrl = new URL(`${forwarderUrl}/address?address=${depositAddress}`);
  return longPolling({
    pollingFunction: async () => {
      const addressResponse = await fetchData(addressInfoUrl);
      if (addressResponse.transactions.length === 0) {
        return;
      }
      const { commitTx } = addressResponse.transactions[0];
      return {
        commitTx,
        btcConfig
      };
    },
    successCondition: (txInfo) => !!txInfo,
    error: new WaitWrapBtcTxToCompleteError("getting TransactionBtcInfo timeout exceed")
  });
}

// src/crosschain/waitForComplete/waitForBtcCommitTxMined.ts
var WaitForCommitBtcTxError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "WaitForCommitBtcTxError";
  }
};
async function waitForBtcCommitTxMined({
  btcConfig,
  commitTx
}) {
  const { forwarderUrl } = btcConfig;
  const txInfoUrl = new URL(`${forwarderUrl}/tx`);
  txInfoUrl.searchParams.append("txid", commitTx);
  const txResponse = await longPolling({
    pollingFunction: async () => {
      return fetchData(txInfoUrl);
    },
    successCondition: (response) => {
      return (response?.block?.confirmations || 0) > 0;
    },
    error: new WaitForCommitBtcTxError("getting TxResponse timeout exceed")
  });
  if (!txResponse || !txResponse.block || !txResponse.txInfo.revealTx) {
    return;
  }
  return {
    blockHeight: txResponse.block.blockHeight,
    revealTx: txResponse.txInfo.revealTx
  };
}

// src/crosschain/waitForComplete/waitForBtcEvmTxIssued.ts
async function waitForBtcEvmTxIssued(symbiosis, revealTx, btcConfig) {
  const { symBtc } = btcConfig;
  const symBtcContract = SymBtc__factory.connect(symBtc.address, symbiosis.getProvider(symBtc.chainId));
  const synthesis = symbiosis.synthesis(symBtc.chainId);
  const externalId = await symBtcContract.getBTCExternalID(
    `0x${Buffer.from(revealTx, "hex").reverse().toString("hex")}`,
    0,
    synthesis.address
  );
  const filter = synthesis.filters.BTCSynthesizeCompleted(externalId);
  const timeout = 1e3 * 60 * 60 * 2;
  const log = await getLogWithTimeout({ symbiosis, chainId: symBtc.chainId, filter, exceedDelay: timeout });
  return log.transactionHash;
}

// src/crosschain/waitForComplete/waitFromTonTxMined.ts
var import_core4 = require("@ton/core");
var waitFromTonTxCompleteError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "WaitForTonTxCompleteError";
  }
};
var TRANSFER_NOTIFICATION_OPCODE = 1935855772;
async function waitFromTonTxMined({
  symbiosis,
  address: address2,
  contractAddress
}) {
  const client = await symbiosis.getTonClient();
  const now = Math.floor(Date.now() / 1e3);
  return await longPolling({
    pollingFunction: async () => {
      const lastBlock = await client.getLastBlock();
      const accountInfo = await client.getAccount(lastBlock.last.seqno, import_core4.Address.parse(contractAddress));
      if (!accountInfo.account.last) {
        return void 0;
      }
      const txsRaw = await client.getAccountTransactions(
        import_core4.Address.parse(contractAddress),
        BigInt(accountInfo.account.last.lt),
        Buffer.from(accountInfo.account.last.hash, "base64")
      );
      const filtered = txsRaw.filter((txRaw) => {
        if (txRaw.tx.now < now) {
          return false;
        }
        if (!txRaw.tx.inMessage?.body) {
          return false;
        }
        const bodyInMsg = txRaw.tx.inMessage.body;
        if (bodyInMsg) {
          const body = bodyInMsg.beginParse();
          const opcode = body.loadUint(32);
          if (opcode === TRANSFER_NOTIFICATION_OPCODE) {
            body.loadUint(64);
            body.loadCoins();
            const senderAddress2 = body.loadAddress();
            if (senderAddress2.equals(import_core4.Address.parse(address2))) {
              return true;
            }
          }
        }
        const messageInfo = txRaw.tx.inMessage?.info;
        if (!messageInfo || messageInfo.type !== "internal") {
          return false;
        }
        const senderAddress = messageInfo.src;
        if (!import_core4.Address.isAddress(senderAddress)) {
          return false;
        }
        return import_core4.Address.parse(address2).equals(senderAddress);
      });
      return filtered.length > 0 ? filtered[0].tx : void 0;
    },
    successCondition: (tx) => {
      return tx !== void 0;
    },
    error: new waitFromTonTxCompleteError("Ton transaction not found on TON chain")
  });
}

// src/crosschain/cache.ts
var Cache = class {
  constructor() {
    this.data = /* @__PURE__ */ new Map();
  }
  async get(key, func, ttl) {
    return this.fromCache(
      key,
      () => {
        return func();
      },
      ttl
    );
  }
  async fromCache(key, func, ttl) {
    const stringKey = key.join("-");
    const now = Math.floor(Date.now() / 1e3);
    const cached = this.data.get(stringKey);
    if (cached) {
      const { value, expiresAt } = cached;
      if (expiresAt === null || now < expiresAt) {
        return value;
      }
    }
    const newValue = await func();
    this.data.set(stringKey, {
      value: newValue,
      expiresAt: ttl ? now + ttl : null
    });
    return newValue;
  }
};

// src/crosschain/swapping/baseSwapping.ts
var import_constants53 = require("@ethersproject/constants");
var import_jsbi16 = __toESM(require("jsbi"));

// src/crosschain/feeCall/getPartnerFeeCall.ts
var import_ethers53 = require("ethers");
async function getPartnerFeeCallParams({
  symbiosis,
  partnerAddress,
  token
}) {
  const { chainId } = token;
  const partnerFeeCollectorAddress = symbiosis.chainConfig(chainId).partnerFeeCollector;
  if (!partnerFeeCollectorAddress) {
    return;
  }
  const partnerFeeCollector = PartnerFeeCollector__factory.connect(
    partnerFeeCollectorAddress,
    symbiosis.getProvider(chainId)
  );
  const { isActive, feeRate } = await symbiosis.cache.get(
    ["partnerFeeCollector", partnerFeeCollectorAddress, chainId.toString(), partnerAddress],
    () => partnerFeeCollector.callStatic.partners(partnerAddress),
    24 * 60 * 60
    // 24 hours
  );
  if (!isActive) {
    return;
  }
  const fixedFee = await symbiosis.cache.get(
    ["partnerFeeCollector", partnerFeeCollectorAddress, chainId.toString(), partnerAddress, token.address],
    () => partnerFeeCollector.callStatic.fixedFee(partnerAddress, token.address),
    24 * 60 * 60
    // 24 hours
  );
  return {
    partnerAddress,
    partnerFeeCollector,
    feeRate,
    fixedFee
  };
}
function getPartnerFeeCallItem({
  partnerFeeCallParams,
  amountIn,
  amountInMin
}) {
  const { partnerAddress, partnerFeeCollector, feeRate, fixedFee } = partnerFeeCallParams;
  const WAD = import_ethers53.BigNumber.from(10).pow(18);
  const amountInBn = import_ethers53.BigNumber.from(amountIn.raw.toString());
  const percentageFee = amountInBn.mul(feeRate).div(WAD);
  const totalFee = percentageFee.add(fixedFee);
  const fee = new TokenAmount(amountIn.token, totalFee.toString());
  const amountOut = new TokenAmount(amountIn.token, amountInBn.sub(totalFee).toString());
  let amountOutMin = amountOut;
  if (amountInMin) {
    const amountInMinBn = import_ethers53.BigNumber.from(amountInMin.raw.toString());
    const percentageFeeMin = amountInMinBn.mul(feeRate).div(WAD);
    const totalFeeMin = percentageFeeMin.add(fixedFee);
    amountOutMin = new TokenAmount(amountIn.token, amountInMinBn.sub(totalFeeMin).toString());
  }
  const data = partnerFeeCollector.interface.encodeFunctionData("collectFee", [
    amountIn.raw.toString(),
    amountIn.token.address,
    partnerAddress
  ]);
  return {
    priceImpact: new Percent("0", BIPS_BASE),
    amountIn,
    amountOut,
    amountOutMin,
    to: partnerFeeCollector.address,
    data,
    value: "0",
    offset: 36,
    fees: [
      {
        provider: "symbiosis",
        description: "Partner fee",
        value: fee
      }
    ],
    routes: []
  };
}
async function getPartnerFeeCall({
  symbiosis,
  amountIn,
  amountInMin,
  partnerAddress
}) {
  if (!partnerAddress) {
    return;
  }
  const { token } = amountIn;
  const partnerFeeCallParams = await getPartnerFeeCallParams({
    symbiosis,
    partnerAddress,
    token
  });
  if (!partnerFeeCallParams) {
    return;
  }
  return getPartnerFeeCallItem({
    partnerFeeCallParams,
    amountIn,
    amountInMin
  });
}

// src/crosschain/feeCall/getVolumeFeeCall.ts
var import_ethers54 = require("ethers");
function getVolumeFeeCall({
  feeCollector,
  amountIn,
  amountInMin
}) {
  const WAD = import_ethers54.BigNumber.from(10).pow(18);
  const amountInBn = import_ethers54.BigNumber.from(amountIn.raw.toString());
  const feeBn = amountInBn.mul(feeCollector.feeRate).div(WAD);
  const fee = new TokenAmount(amountIn.token, feeBn.toString());
  const amountOut = new TokenAmount(amountIn.token, amountInBn.sub(feeBn).toString());
  let amountOutMin = amountOut;
  if (amountInMin) {
    const amountInMinBn = import_ethers54.BigNumber.from(amountInMin.raw.toString());
    const feeMinBn = amountInMinBn.mul(feeCollector.feeRate).div(WAD);
    amountOutMin = new TokenAmount(amountInMin.token, amountInMinBn.sub(feeMinBn).toString());
  }
  const data = OctoPoolFeeCollector__factory.createInterface().encodeFunctionData("collectFee", [
    amountIn.raw.toString(),
    amountIn.token.address
  ]);
  return {
    priceImpact: new Percent("0", BIPS_BASE),
    amountIn,
    amountOut,
    amountOutMin,
    to: feeCollector.address,
    data,
    value: "0",
    offset: 36,
    fees: [
      {
        provider: "symbiosis",
        description: "Volume fee",
        value: fee
      }
    ],
    routes: []
  };
}

// src/crosschain/transit.ts
var OutNotInitializedError2 = class extends Error {
  constructor(msg) {
    super(`Out is not initialized: ${msg}`);
  }
};
var Transit = class _Transit {
  constructor({
    symbiosis,
    amountIn,
    amountInMin,
    tokenOut,
    slippage,
    deadline,
    omniPoolConfig,
    fee1,
    fee2,
    partnerAddress
  }) {
    this.symbiosis = symbiosis;
    this.amountIn = amountIn;
    this.amountInMin = amountInMin;
    this.tokenOut = tokenOut;
    this.slippage = slippage;
    this.deadline = deadline;
    this.omniPoolConfig = omniPoolConfig;
    this.fee1 = fee1;
    this.fee2 = fee2;
    this.partnerAddress = partnerAddress;
    this.direction = _Transit.getDirection(amountIn.token.chainId, tokenOut.chainId, omniPoolConfig.chainId);
    this.feeToken1 = this.getFeeToken1();
    this.feeToken2 = this.getFeeToken2();
    if (fee1 && !this.feeToken1.equals(fee1.token)) {
      throw new SdkError("Incorrect fee1 token set");
    }
    if (fee2 && this.feeToken2 && !this.feeToken2.equals(fee2.token)) {
      throw new SdkError("Incorrect fee2 token set");
    }
  }
  get amountOut() {
    this.assertOutInitialized("amountOut");
    return this.out.amountOut;
  }
  get amountOutMin() {
    this.assertOutInitialized("amountOutMin");
    return this.out.amountOutMin;
  }
  get trade() {
    this.assertOutInitialized("trade");
    return this.out.trade;
  }
  get volumeFeeCall() {
    this.assertOutInitialized("volumeFeeCall");
    return this.out.volumeFeeCall;
  }
  get partnerFeeCall() {
    this.assertOutInitialized("partnerFeeCall");
    return this.out.partnerFeeCall;
  }
  async init() {
    const { tradeAmountIn, tradeAmountInMin } = this.getTradeAmountsIn(this.amountIn, this.amountInMin);
    const tradeTokenOut = this.getTradeTokenOut();
    const to = this.symbiosis.multicallRouter(this.omniPoolConfig.chainId).address;
    const trade = await this.createOctoPoolTrade({
      tokenAmountIn: tradeAmountIn,
      tokenAmountInMin: tradeAmountInMin,
      tokenOut: tradeTokenOut,
      to
    });
    const { amountOut, amountOutMin, volumeFeeCall, partnerFeeCall } = await this.getAmountsOut(trade);
    this.out = {
      amountOut,
      amountOutMin,
      trade,
      volumeFeeCall,
      partnerFeeCall
    };
    return this;
  }
  isV2() {
    return this.direction === "v2";
  }
  calls() {
    this.assertOutInitialized("calls");
    const calldatas = [];
    const receiveSides = [];
    const paths = [];
    const offsets = [];
    calldatas.push(this.trade.callData);
    receiveSides.push(this.trade.routerAddress);
    paths.push(...[this.trade.tokenAmountIn.token.address, this.trade.amountOut.token.address]);
    offsets.push(this.trade.callDataOffset);
    if (this.volumeFeeCall) {
      calldatas.push(this.volumeFeeCall.data);
      receiveSides.push(this.volumeFeeCall.to);
      paths.push(this.volumeFeeCall.amountIn.token.address);
      offsets.push(this.volumeFeeCall.offset);
    }
    if (this.partnerFeeCall) {
      calldatas.push(this.partnerFeeCall.data);
      receiveSides.push(this.partnerFeeCall.to);
      paths.push(this.partnerFeeCall.amountIn.token.address);
      offsets.push(this.partnerFeeCall.offset);
    }
    return {
      calldatas,
      receiveSides,
      paths,
      offsets
    };
  }
  getBridgeAmountIn() {
    this.assertOutInitialized("getBridgeAmountIn");
    if (this.direction === "burn") {
      return this.trade.amountOut;
    }
    return this.amountIn;
  }
  async applyFees(fee1, fee2) {
    this.assertOutInitialized("applyFees");
    if (!fee1.token.equals(this.feeToken1)) {
      throw new SdkError("Incorrect fee1 token");
    }
    this.fee1 = fee1;
    if (this.isV2()) {
      if (!fee2) {
        throw new SdkError("fee2 should be passed");
      }
      if (!this.feeToken2) {
        throw new SdkError("feeToken2 should have been initialized");
      }
      if (!fee2.token.equals(this.feeToken2)) {
        throw new SdkError("Incorrect fee2 token");
      }
      this.fee2 = fee2;
    }
    const { tradeAmountIn: newAmountIn, tradeAmountInMin: newAmountInMin } = this.getTradeAmountsIn(
      this.amountIn,
      this.amountInMin
    );
    this.trade.applyAmountIn(newAmountIn, newAmountInMin);
    const { amountOut, amountOutMin, volumeFeeCall, partnerFeeCall } = await this.getAmountsOut(this.trade);
    this.out = {
      trade: this.trade,
      volumeFeeCall,
      partnerFeeCall,
      amountOut,
      amountOutMin
    };
  }
  async createOctoPoolTrade(params) {
    const trade = new OctoPoolTrade({
      ...params,
      slippage: this.slippage,
      deadline: this.deadline,
      symbiosis: this.symbiosis,
      omniPoolConfig: this.omniPoolConfig
    });
    await trade.init();
    return trade;
  }
  // PRIVATE
  getFeeToken1() {
    if (this.direction === "burn") {
      return this.tokenOut;
    }
    const tokenIn = this.amountIn.token;
    const sTokenChainId = this.isV2() ? this.omniPoolConfig.chainId : this.tokenOut.chainId;
    const sToken = this.symbiosis.getRepresentation(tokenIn, sTokenChainId);
    if (!sToken) {
      throw new NoRepresentationFoundError(
        `Representation of ${tokenIn.chainId}:${tokenIn.symbol} in chain ${sTokenChainId} not found`
      );
    }
    return sToken;
  }
  getFeeToken2() {
    if (!this.isV2()) {
      return;
    }
    return this.tokenOut;
  }
  async getAmountsOut(trade) {
    const { tokenAmountIn: tradeAmountIn, amountOut: tradeAmountOut, amountOutMin: tradeAmountOutMin } = trade;
    let volumeFeeCall = void 0;
    let amountOut = tradeAmountOut;
    let amountOutMin = tradeAmountOutMin;
    const involvedChainIds = [tradeAmountIn.token.chainId, tradeAmountOut.token.chainId];
    if (tradeAmountIn.token.chainFromId) {
      involvedChainIds.push(tradeAmountIn.token.chainFromId);
    }
    if (tradeAmountOut.token.chainFromId) {
      involvedChainIds.push(tradeAmountOut.token.chainFromId);
    }
    const volumeFeeCollector = this.symbiosis.getVolumeFeeCollector(tradeAmountIn.token.chainId, involvedChainIds);
    if (volumeFeeCollector && this.omniPoolConfig.coinGeckoId !== "usd-coin") {
      volumeFeeCall = getVolumeFeeCall({
        feeCollector: volumeFeeCollector,
        amountIn: amountOut,
        amountInMin: amountOutMin
      });
      amountOut = volumeFeeCall.amountOut;
      amountOutMin = volumeFeeCall.amountOutMin;
    }
    const partnerFeeCall = await getPartnerFeeCall({
      symbiosis: this.symbiosis,
      amountIn: amountOut,
      amountInMin: amountOutMin,
      partnerAddress: this.partnerAddress
    });
    if (partnerFeeCall) {
      amountOut = partnerFeeCall.amountOut;
      amountOutMin = partnerFeeCall.amountOutMin;
    }
    if (this.direction === "mint") {
      return {
        volumeFeeCall,
        partnerFeeCall,
        amountOut,
        amountOutMin
      };
    }
    amountOut = new TokenAmount(this.tokenOut, amountOut.raw);
    amountOutMin = new TokenAmount(this.tokenOut, amountOutMin.raw);
    let fee = this.fee1;
    if (this.isV2()) {
      fee = this.fee2;
    }
    if (fee) {
      if (amountOutMin.lessThan(fee) || amountOutMin.equalTo(fee)) {
        throw new AmountLessThanFeeError(
          `Amount ${amountOutMin.toSignificant()} ${amountOutMin.token.symbol} less than fee ${fee.toSignificant()} ${fee.token.symbol}`
        );
      }
      amountOut = amountOut.subtract(fee);
      amountOutMin = amountOutMin.subtract(fee);
    }
    return {
      volumeFeeCall,
      partnerFeeCall,
      amountOut,
      amountOutMin
    };
  }
  getTradeAmountsIn(amountIn, amountInMin) {
    if (this.direction === "burn") {
      return {
        tradeAmountIn: amountIn,
        tradeAmountInMin: amountInMin
      };
    }
    let tradeAmountIn = new TokenAmount(this.feeToken1, amountIn.raw);
    let tradeAmountInMin = new TokenAmount(this.feeToken1, amountInMin.raw);
    if (this.fee1) {
      if (tradeAmountInMin.lessThan(this.fee1) || tradeAmountInMin.equalTo(this.fee1)) {
        throw new AmountLessThanFeeError(
          `Amount ${tradeAmountInMin.toSignificant()} ${tradeAmountInMin.token.symbol} less than fee ${this.fee1.toSignificant()} ${this.fee1.token.symbol}`
        );
      }
      tradeAmountIn = tradeAmountIn.subtract(this.fee1);
      tradeAmountInMin = tradeAmountInMin.subtract(this.fee1);
    }
    return {
      tradeAmountIn,
      tradeAmountInMin
    };
  }
  getTradeTokenOut() {
    if (this.direction === "mint") {
      return this.tokenOut;
    }
    const sTokenChainId = this.isV2() ? this.omniPoolConfig.chainId : this.amountIn.token.chainId;
    const sToken = this.symbiosis.getRepresentation(this.tokenOut, sTokenChainId);
    if (!sToken) {
      throw new NoRepresentationFoundError(
        `Representation of ${this.tokenOut.symbol} in chain ${sTokenChainId} not found`
      );
    }
    return sToken;
  }
  static getDirection(chainIdIn, chainIdOut, hostChainId) {
    const withHostChain = chainIdIn === hostChainId || chainIdOut === hostChainId;
    if (!withHostChain) {
      return "v2";
    }
    const chainsExceptHostChain = chains.map((chain) => chain.id).filter((chainId) => chainId !== hostChainId);
    const chainsWithHostChain = [...chainsExceptHostChain, hostChainId];
    const indexIn = chainsWithHostChain.indexOf(chainIdIn);
    if (indexIn === -1) {
      throw new SdkError(`Chain ${chainIdIn} not found in chains priority`);
    }
    const indexOut = chainsWithHostChain.indexOf(chainIdOut);
    if (indexOut === -1) {
      throw new SdkError(`Chain ${chainIdOut} not found in chains priority`);
    }
    return indexIn > indexOut ? "burn" : "mint";
  }
  assertOutInitialized(msg) {
    if (!this.out) {
      throw new OutNotInitializedError2(msg);
    }
  }
};

// src/crosschain/utils.ts
function isUseOneInchOnly(tokenIn, tokenOut) {
  return [tokenIn.chainId, tokenOut.chainId].some((i) => i === 728126428 /* TRON_MAINNET */);
}

// src/crosschain/swapping/baseSwapping.ts
var BaseSwapping = class {
  constructor(symbiosis, omniPoolConfig) {
    this.omniPoolConfig = omniPoolConfig;
    this.symbiosis = symbiosis;
    this.profiler = new Profiler();
  }
  async doExactIn({
    tokenAmountIn,
    tokenOut,
    from,
    to,
    slippage,
    deadline,
    oneInchProtocols,
    transitTokenIn,
    transitTokenOut,
    revertableAddresses,
    tradeAContext,
    partnerAddress
  }) {
    const routes = [];
    const routeType = [];
    this.partnerAddress = partnerAddress;
    this.oneInchProtocols = oneInchProtocols;
    this.tokenAmountIn = tokenAmountIn;
    this.tokenOut = tokenOut;
    this.transitTokenIn = transitTokenIn || this.symbiosis.transitToken(this.tokenAmountIn.token.chainId, this.omniPoolConfig);
    this.transitTokenOut = transitTokenOut || this.symbiosis.transitToken(this.tokenOut.chainId, this.omniPoolConfig);
    this.from = tronAddressToEvm(from);
    this.to = tronAddressToEvm(to);
    this.slippage = this.buildDetailedSlippage(slippage);
    this.deadline = deadline;
    this.synthesisV2 = this.symbiosis.synthesis(this.omniPoolConfig.chainId);
    if (isTronToken(this.tokenAmountIn.token) || isTronToken(this.tokenOut)) {
      this.revertableAddresses = {
        AB: this.symbiosis.getRevertableAddress(this.tokenAmountIn.token.chainId),
        BC: this.symbiosis.getRevertableAddress(this.tokenOut.chainId)
      };
    } else if (this.tokenAmountIn.token.chainId === 2741 /* ABSTRACT_MAINNET */ || this.tokenOut.chainId === 2741 /* ABSTRACT_MAINNET */) {
      this.revertableAddresses = {
        AB: this.symbiosis.getRevertableAddress(this.tokenAmountIn.token.chainId),
        BC: this.symbiosis.getRevertableAddress(this.tokenOut.chainId)
      };
    } else if (isTonChainId(this.tokenAmountIn.token.chainId) || isTonChainId(this.tokenOut.chainId)) {
      this.revertableAddresses = {
        AB: this.symbiosis.getRevertableAddress(this.tokenAmountIn.token.chainId),
        BC: this.symbiosis.getRevertableAddress(this.tokenOut.chainId)
      };
    } else if (revertableAddresses) {
      const AB = revertableAddresses.find((ra) => ra.chainId === this.tokenAmountIn.token.chainId);
      if (!AB) {
        throw new SdkError(`Revertable address for chain ${this.tokenAmountIn.token.chainId} was not specified`);
      }
      const BC = revertableAddresses.find((ra) => ra.chainId === this.tokenOut.chainId);
      if (!BC) {
        throw new SdkError(`Revertable address for chain ${this.tokenOut.chainId} was not specified`);
      }
      this.revertableAddresses = { AB: AB.address, BC: BC.address };
    } else {
      this.revertableAddresses = {
        AB: this.symbiosis.getRevertableAddress(this.tokenAmountIn.token.chainId),
        BC: this.from
      };
    }
    if (!this.transitTokenIn.equals(tokenAmountIn.token)) {
      this.tradeA = this.buildTradeA(tradeAContext);
      const endTimerTradeA = this.symbiosis.createMetricTimer();
      await this.tradeA.init();
      endTimerTradeA?.({
        operation: "tradeA",
        kind: "crosschain-swap",
        tokenIn: this.tokenAmountIn.token,
        tokenOut: this.transitTokenIn
      });
      this.profiler.tick("A");
      routes.push({
        provider: this.tradeA.tradeType,
        tokens: [this.tradeA.tokenAmountIn.token, this.tradeA.amountOut.token]
      });
      if (this.tradeA.tradeType !== "wrap") {
        routeType.push("ANY");
      }
    }
    const transitAmountIn = this.tradeA ? this.tradeA.amountOut : this.tokenAmountIn;
    const transitAmountInMin = this.tradeA ? this.tradeA.amountOutMin : this.tokenAmountIn;
    const promises = [];
    promises.push(this.buildTransit(transitAmountIn, transitAmountInMin).init());
    routes.push({
      provider: "symbiosis",
      tokens: [this.transitTokenIn, this.transitTokenOut]
    });
    routeType.push("TRANSIT");
    promises.push(
      (async () => {
        if (this.transitTokenOut.equals(tokenOut)) {
          return;
        }
        const fakeTradeCAmountIn = createFakeAmount(transitAmountIn, this.transitTokenOut);
        const fakeTradeCAmountInMin = createFakeAmount(transitAmountInMin, this.transitTokenOut);
        return this.buildTradeC(fakeTradeCAmountIn, fakeTradeCAmountInMin).init();
      })()
    );
    const endTimerTransit = this.symbiosis.createMetricTimer();
    const [transit, tradeC] = await Promise.all(promises);
    endTimerTransit?.({
      kind: "crosschain-swap",
      operation: tradeC ? "transit + c" : "transit",
      tokenIn: this.transitTokenIn,
      tokenOut: this.transitTokenOut
    });
    this.profiler.tick(tradeC ? "TRANSIT + C" : "TRANSIT");
    this.transit = transit;
    await this.doPostTransitAction();
    this.profiler.tick("POST_TRANSIT_1");
    this.tradeC = tradeC;
    if (this.tradeC) {
      routes.push({
        provider: this.tradeC.tradeType,
        tokens: [this.tradeC.tokenAmountIn.token, this.tradeC.amountOut.token]
      });
      if (this.tradeC.tradeType !== "wrap") {
        routeType.push("ANY");
      }
    }
    this.amountInUsd = this.transit.getBridgeAmountIn();
    const endTimerAdvisor = this.symbiosis.createMetricTimer();
    const { fee1Raw, fee2Raw } = await this.getAdvisorFees();
    endTimerAdvisor?.({
      kind: "crosschain-swap",
      operation: "advisor"
    });
    this.profiler.tick("ADVISOR");
    const fee1 = fee1Raw.fee;
    const save1 = fee1Raw.save;
    const fee2 = fee2Raw?.fee;
    const save2 = fee2Raw?.save;
    await this.transit.applyFees(fee1, fee2);
    if (this.tradeC) {
      this.tradeC.applyAmountIn(this.transit.amountOut, this.transit.amountOutMin);
    }
    this.profiler.tick("PATCHING");
    await this.doPostTransitAction();
    this.profiler.tick("POST_TRANSIT_2");
    const tokenAmountOut = this.tradeC ? this.tradeC.amountOut : this.transit.amountOut;
    const tokenAmountOutMin = this.tradeC ? this.tradeC.amountOutMin : this.transit.amountOutMin;
    let payload;
    if (isEvmChainId(this.tokenAmountIn.token.chainId)) {
      const metaRouteParams = this.getMetaRouteParams(fee1, fee2);
      const transactionRequest = this.getEvmTransactionRequest(metaRouteParams);
      payload = {
        transactionType: "evm",
        transactionRequest
      };
    } else if (isTronChainId(this.tokenAmountIn.token.chainId)) {
      const metaRouteParams = this.getMetaRouteParams(fee1, fee2);
      const transactionRequest = this.getTronTransactionRequest(metaRouteParams);
      payload = {
        transactionType: "tron",
        transactionRequest
      };
    } else if (isTonChainId(this.tokenAmountIn.token.chainId)) {
      const transactionRequest = await this.getTonTransactionRequest(fee1, fee2);
      payload = {
        transactionType: "ton",
        transactionRequest
      };
    } else {
      throw new SdkError(`Unsupported chain type: ${this.tokenAmountIn.token.chainId}`);
    }
    this.profiler.tick("TRANSACTION_REQUEST");
    const fees = [
      {
        provider: "symbiosis",
        value: fee1,
        description: "Cross-chain fee",
        save: save1
      }
    ];
    if (fee2) {
      fees.push({
        provider: "symbiosis",
        value: fee2,
        description: "Cross-chain fee",
        save: save2
      });
    }
    if (this.transit.partnerFeeCall) {
      fees.push(...this.transit.partnerFeeCall.fees);
    }
    if (this.transit.volumeFeeCall) {
      fees.push(...this.transit.volumeFeeCall.fees);
    }
    return {
      ...payload,
      kind: "crosschain-swap",
      tokenAmountOut,
      tokenAmountOutMin,
      priceImpact: this.calculatePriceImpact(),
      approveTo: this.approveTo(),
      routes,
      fees,
      amountInUsd: this.amountInUsd,
      timeLog: this.profiler.toString(),
      routeType: routeType.join("-"),
      poolAddress: this.omniPoolConfig.address,
      tradeA: this.tradeA,
      tradeC: this.tradeC
    };
  }
  async getAdvisorFees() {
    const feePromises = [];
    let feeToken1 = this.transit.feeToken1;
    if (feeToken1.chainFromId) {
      const original = this.symbiosis.getRepresentation(feeToken1, feeToken1.chainFromId);
      if (original) {
        feeToken1 = original;
      }
    }
    const fee1Config = this.symbiosis.feesConfig?.find((i) => i.token.equals(feeToken1));
    if (fee1Config) {
      feePromises.push({
        fee: new TokenAmount(this.transit.feeToken1, fee1Config.value),
        save: new TokenAmount(this.transit.feeToken1, "0")
      });
    } else {
      feePromises.push(this.getFee(this.transit.feeToken1));
    }
    let feeToken2 = this.transit.feeToken2;
    if (feeToken2) {
      if (feeToken2.chainFromId) {
        const original = this.symbiosis.getRepresentation(feeToken2, feeToken2.chainFromId);
        if (original) {
          feeToken2 = original;
        }
      }
      const fee2Config = this.symbiosis.feesConfig?.find((i) => i.token.equals(feeToken2));
      if (fee2Config) {
        feePromises.push({
          fee: new TokenAmount(this.transit.feeToken2, fee2Config.value),
          save: new TokenAmount(this.transit.feeToken2, "0")
        });
      } else {
        feePromises.push(this.getFeeV2(this.transit.feeToken2));
      }
    } else {
      feePromises.push(void 0);
    }
    const [fee1Raw, fee2Raw] = await Promise.all(feePromises);
    return {
      fee1Raw,
      fee2Raw
    };
  }
  getRevertableAddress(side) {
    return this.revertableAddresses[side];
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  async doPostTransitAction() {
  }
  buildDetailedSlippage(totalSlippage) {
    const hasTradeA = !this.transitTokenIn.equals(wrappedToken(this.tokenAmountIn.token));
    const hasTradeC = !this.transitTokenOut.equals(wrappedToken(this.tokenOut));
    return splitSlippage(totalSlippage, hasTradeA, hasTradeC);
  }
  approveTo() {
    return this.symbiosis.chainConfig(this.tokenAmountIn.token.chainId).metaRouterGateway;
  }
  getValue() {
    return this.tokenAmountIn.token.isNative ? this.tokenAmountIn.raw.toString() : "0";
  }
  getMetaRouteParams(fee, feeV2) {
    const [relayRecipient, otherSideCalldata] = this.otherSideData(fee, feeV2);
    const amount = this.tradeA ? this.tradeA.tokenAmountIn : this.tokenAmountIn;
    return {
      amount: amount.raw.toString(),
      nativeIn: amount.token.isNative,
      approvedTokens: this.approvedTokens().map(tronAddressToEvm),
      firstDexRouter: tronAddressToEvm(this.firstDexRouter()),
      firstSwapCalldata: this.firstSwapCalldata(),
      secondDexRouter: tronAddressToEvm(this.secondDexRouter()),
      secondSwapCalldata: this.transit.direction === "burn" ? this.secondSwapCalldata() : [],
      relayRecipient,
      otherSideCalldata
    };
  }
  getEvmTransactionRequest(params) {
    const chainId = this.tokenAmountIn.token.chainId;
    const metaRouter = this.symbiosis.metaRouter(chainId);
    const data = metaRouter.interface.encodeFunctionData("metaRoute", [params]);
    return {
      chainId,
      to: metaRouter.address,
      data,
      value: this.getValue()
    };
  }
  getTronTransactionRequest(params) {
    const { chainId } = this.tokenAmountIn.token;
    const { metaRouter } = this.symbiosis.chainConfig(chainId);
    const tronWeb = this.symbiosis.tronWeb(chainId);
    return prepareTronTransaction({
      chainId,
      tronWeb,
      abi: TRON_METAROUTER_ABI,
      contractAddress: metaRouter,
      functionName: "metaRoute",
      params: [
        [
          params.firstSwapCalldata,
          params.secondSwapCalldata,
          params.approvedTokens,
          params.firstDexRouter,
          params.secondDexRouter,
          params.amount,
          params.nativeIn,
          params.relayRecipient,
          params.otherSideCalldata
        ]
      ],
      ownerAddress: this.from,
      value: this.getValue()
    });
  }
  async getTonTransactionRequest(fee, feeV2) {
    let secondSwapCallData = this.secondSwapCalldata();
    if (secondSwapCallData.length === 0) {
      secondSwapCallData = "";
    }
    return buildMetaSynthesize({
      symbiosis: this.symbiosis,
      fee,
      amountIn: this.transit.getBridgeAmountIn(),
      secondDexRouter: this.secondDexRouter(),
      secondSwapCallData,
      swapTokens: this.swapTokens().map(tronAddressToEvm),
      from: this.from,
      to: this.to,
      revertableAddress: this.getRevertableAddress("AB"),
      chainIdOut: this.omniPoolConfig.chainId,
      validUntil: this.deadline,
      finalReceiveSide: tronAddressToEvm(this.transit.isV2() ? this.finalReceiveSideV2() : import_constants53.AddressZero),
      finalCallData: this.transit.isV2() ? this.finalCalldataV2(feeV2) : "",
      finalOffset: this.transit.isV2() ? this.finalOffsetV2() : 0
    });
  }
  calculatePriceImpact() {
    const zero = new Percent(import_jsbi16.default.BigInt(0), BIPS_BASE);
    const pia = this.tradeA?.priceImpact || zero;
    const pib = this.transit.trade.priceImpact || zero;
    const pic = this.tradeC?.priceImpact || zero;
    let pi = pia.add(pib).add(pic);
    const max = new Percent(import_jsbi16.default.BigInt(1e4), BIPS_BASE);
    if (pi.greaterThan(max))
      pi = max;
    return new Percent(pi.numerator, pi.denominator);
  }
  buildTradeA(tradeAContext) {
    const tokenOut = this.transitTokenIn;
    if (WrapTrade.isSupported(this.tokenAmountIn.token, tokenOut)) {
      return new WrapTrade({
        tokenAmountIn: this.tokenAmountIn,
        tokenAmountInMin: this.tokenAmountIn,
        // correct because it is tradeA
        tokenOut,
        to: this.to
      });
    }
    const chainId = this.tokenAmountIn.token.chainId;
    let from = this.symbiosis.chainConfig(chainId).metaRouter;
    if (tradeAContext === "multicallRouter") {
      from = this.symbiosis.chainConfig(chainId).multicallRouter;
    }
    const to = from;
    return new AggregatorTrade({
      tokenAmountIn: this.tokenAmountIn,
      tokenAmountInMin: this.tokenAmountIn,
      // correct because it is tradeA
      tokenOut,
      from,
      to,
      slippage: this.slippage["A"],
      symbiosis: this.symbiosis,
      clientId: this.symbiosis.clientId,
      deadline: this.deadline,
      oneInchProtocols: this.oneInchProtocols,
      preferOneInchUsage: isUseOneInchOnly(this.tokenAmountIn.token, this.tokenOut)
    });
  }
  buildTransit(amountIn, amountInMin) {
    this.symbiosis.validateLimits(amountIn);
    return new Transit({
      symbiosis: this.symbiosis,
      amountIn,
      amountInMin,
      tokenOut: this.transitTokenOut,
      slippage: this.slippage["B"],
      deadline: this.deadline,
      omniPoolConfig: this.omniPoolConfig,
      partnerAddress: this.partnerAddress
    });
  }
  tradeCTo() {
    return this.to;
  }
  buildTradeC(amountIn, amountInMin) {
    if (WrapTrade.isSupported(amountIn.token, this.tokenOut)) {
      return new WrapTrade({
        tokenAmountIn: amountIn,
        tokenAmountInMin: amountInMin,
        tokenOut: this.tokenOut,
        to: this.to
      });
    }
    return new AggregatorTrade({
      tokenAmountIn: amountIn,
      tokenAmountInMin: amountInMin,
      tokenOut: this.tokenOut,
      from: this.symbiosis.chainConfig(this.tokenOut.chainId).metaRouter,
      to: this.tradeCTo(),
      slippage: this.slippage["C"],
      symbiosis: this.symbiosis,
      clientId: this.symbiosis.clientId,
      deadline: this.deadline,
      oneInchProtocols: this.oneInchProtocols,
      preferOneInchUsage: isUseOneInchOnly(this.tokenAmountIn.token, this.tokenOut)
    });
  }
  metaBurnSyntheticToken(fee1) {
    const synthesis = this.symbiosis.synthesis(this.tokenAmountIn.token.chainId);
    const amount = this.transit.getBridgeAmountIn();
    return [
      synthesis.address,
      synthesis.interface.encodeFunctionData("metaBurnSyntheticToken", [
        {
          stableBridgingFee: fee1.raw.toString(),
          amount: amount.raw.toString(),
          syntCaller: tronAddressToEvm(this.from),
          crossChainID: CROSS_CHAIN_ID,
          finalReceiveSide: tronAddressToEvm(this.finalReceiveSide()),
          sToken: tronAddressToEvm(amount.token.address),
          finalCallData: this.finalCalldata(),
          finalOffset: this.finalOffset(),
          chain2address: tronAddressToEvm(this.to),
          receiveSide: tronAddressToEvm(this.symbiosis.portal(this.tokenOut.chainId).address),
          oppositeBridge: tronAddressToEvm(this.symbiosis.bridge(this.tokenOut.chainId).address),
          revertableAddress: this.getRevertableAddress("BC"),
          chainID: this.tokenOut.chainId,
          clientID: this.symbiosis.clientId
        }
      ])
    ];
  }
  metaSynthesize(fee1, fee2) {
    const chainIdIn = this.tokenAmountIn.token.chainId;
    const chainIdOut = this.transit.isV2() ? this.omniPoolConfig.chainId : this.tokenOut.chainId;
    const tokenAmount = this.transit.getBridgeAmountIn();
    const portal = this.symbiosis.portal(chainIdIn);
    return [
      portal.address,
      portal.interface.encodeFunctionData("metaSynthesize", [
        {
          stableBridgingFee: fee1.raw.toString(),
          amount: tokenAmount.raw.toString(),
          rtoken: tronAddressToEvm(tokenAmount.token.address),
          chain2address: this.to,
          receiveSide: tronAddressToEvm(this.symbiosis.synthesis(chainIdOut).address),
          oppositeBridge: tronAddressToEvm(this.symbiosis.bridge(chainIdOut).address),
          syntCaller: tronAddressToEvm(this.from),
          chainID: chainIdOut,
          swapTokens: this.swapTokens().map(tronAddressToEvm),
          secondDexRouter: tronAddressToEvm(this.secondDexRouter()),
          secondSwapCalldata: this.secondSwapCalldata(),
          finalReceiveSide: tronAddressToEvm(this.transit.isV2() ? this.finalReceiveSideV2() : import_constants53.AddressZero),
          finalCalldata: this.transit.isV2() ? this.finalCalldataV2(fee2) : [],
          finalOffset: this.transit.isV2() ? this.finalOffsetV2() : 0,
          revertableAddress: this.getRevertableAddress("AB"),
          clientID: this.symbiosis.clientId
        }
      ])
    ];
  }
  otherSideData(fee1, fee2) {
    return this.transit.direction === "burn" ? this.metaBurnSyntheticToken(fee1) : this.metaSynthesize(fee1, fee2);
  }
  feeMintCallData() {
    const chainIdIn = this.tokenAmountIn.token.chainId;
    const chainIdOut = this.transit.isV2() ? this.omniPoolConfig.chainId : this.tokenOut.chainId;
    const portalAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdIn).portal);
    const synthesisAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdOut).synthesis);
    const internalId = getInternalId({
      contractAddress: portalAddress,
      requestCount: import_constants53.MaxUint256,
      chainId: chainIdIn
    });
    const externalId = getExternalId({
      internalId,
      contractAddress: synthesisAddress,
      revertableAddress: this.getRevertableAddress("AB"),
      chainId: chainIdOut
    });
    const amount = this.transit.getBridgeAmountIn();
    const synthesisInterface = Synthesis__factory.createInterface();
    const callData = synthesisInterface.encodeFunctionData("metaMintSyntheticToken", [
      {
        stableBridgingFee: "0",
        amount: amount.raw.toString(),
        crossChainID: CROSS_CHAIN_ID,
        externalID: externalId,
        tokenReal: tronAddressToEvm(amount.token.address),
        chainID: chainIdIn,
        to: tronAddressToEvm(this.to),
        swapTokens: this.swapTokens().map(tronAddressToEvm),
        secondDexRouter: tronAddressToEvm(this.secondDexRouter()),
        secondSwapCalldata: this.secondSwapCalldata(),
        finalReceiveSide: tronAddressToEvm(this.transit.isV2() ? this.finalReceiveSideV2() : import_constants53.AddressZero),
        finalCalldata: this.transit.isV2() ? this.finalCalldataV2() : [],
        finalOffset: this.transit.isV2() ? this.finalOffsetV2() : 0
      }
    ]);
    return [synthesisAddress, callData];
  }
  feeBurnCallData() {
    const chainIdIn = this.tokenAmountIn.token.chainId;
    const chainIdOut = this.tokenOut.chainId;
    const synthesisAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdIn).synthesis);
    const portalAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdOut).portal);
    const internalId = getInternalId({
      contractAddress: synthesisAddress,
      requestCount: import_constants53.MaxUint256,
      chainId: chainIdIn
    });
    const externalId = getExternalId({
      internalId,
      contractAddress: portalAddress,
      revertableAddress: this.getRevertableAddress("AB"),
      chainId: chainIdOut
    });
    const amount = this.transit.amountOut;
    const portalInterface = Portal__factory.createInterface();
    const calldata = portalInterface.encodeFunctionData("metaUnsynthesize", [
      "0",
      // _stableBridgingFee
      CROSS_CHAIN_ID,
      // crossChainID
      externalId,
      // _externalID,
      tronAddressToEvm(this.to),
      // _to
      amount.raw.toString(),
      // _amount
      tronAddressToEvm(amount.token.address),
      // _rToken
      tronAddressToEvm(this.finalReceiveSide()),
      // _finalReceiveSide
      this.finalCalldata(),
      // _finalCalldata
      this.finalOffset()
      // _finalOffset
    ]);
    return [portalAddress, calldata];
  }
  feeBurnCallDataV2() {
    const chainIdIn = this.omniPoolConfig.chainId;
    const chainIdOut = this.tokenOut.chainId;
    const synthesisAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdIn).synthesis);
    const portalAddress = tronAddressToEvm(this.symbiosis.chainConfig(chainIdOut).portal);
    const internalId = getInternalId({
      contractAddress: synthesisAddress,
      requestCount: import_constants53.MaxUint256,
      chainId: chainIdIn
    });
    const externalId = getExternalId({
      internalId,
      contractAddress: portalAddress,
      revertableAddress: this.getRevertableAddress("BC"),
      chainId: chainIdOut
    });
    const portalInterface = Portal__factory.createInterface();
    const calldata = portalInterface.encodeFunctionData("metaUnsynthesize", [
      "0",
      // _stableBridgingFee
      CROSS_CHAIN_ID,
      // crossChainID
      externalId,
      // _externalID,
      tronAddressToEvm(this.to),
      // _to
      this.transit.amountOut.raw.toString(),
      // _amount
      tronAddressToEvm(this.transitTokenOut.address),
      // _rToken
      tronAddressToEvm(this.finalReceiveSide()),
      // _finalReceiveSide
      this.finalCalldata(),
      // _finalCalldata
      this.finalOffset()
      // _finalOffset
    ]);
    return [portalAddress, calldata];
  }
  async getFee(feeToken) {
    const chainIdFrom = this.tokenAmountIn.token.chainId;
    const chainIdTo = this.transit.isV2() ? this.omniPoolConfig.chainId : this.tokenOut.chainId;
    const [receiveSide, calldata] = this.transit.direction === "burn" ? this.feeBurnCallData() : this.feeMintCallData();
    const { price: fee, save } = await this.symbiosis.getBridgeFee({
      receiveSide,
      calldata,
      chainIdFrom,
      chainIdTo
    });
    return {
      fee: new TokenAmount(feeToken, fee),
      save: new TokenAmount(feeToken, save)
    };
  }
  async getFeeV2(feeToken) {
    const [receiveSide, calldata] = this.feeBurnCallDataV2();
    const { price: fee, save } = await this.symbiosis.getBridgeFee({
      receiveSide,
      calldata,
      chainIdFrom: this.omniPoolConfig.chainId,
      chainIdTo: this.tokenOut.chainId
    });
    return {
      fee: new TokenAmount(feeToken, fee),
      save: new TokenAmount(feeToken, save)
    };
  }
  approvedTokens() {
    let firstToken = this.tradeA ? this.tradeA.tokenAmountIn.token.address : this.tokenAmountIn.token.address;
    if (!firstToken) {
      firstToken = import_constants53.AddressZero;
    }
    let tokens;
    if (this.transit.direction === "burn") {
      tokens = [firstToken, ...this.transit.trade.route.map((i) => i.address)];
    } else {
      tokens = [firstToken, this.tradeA ? this.tradeA.amountOut.token.address : this.tokenAmountIn.token.address];
    }
    return tokens;
  }
  firstDexRouter() {
    return this.tradeA?.routerAddress || import_constants53.AddressZero;
  }
  firstSwapCalldata() {
    return this.tradeA?.callData || [];
  }
  secondDexRouter() {
    const multicallRouter = this.symbiosis.multicallRouter(this.omniPoolConfig.chainId);
    return multicallRouter.address;
  }
  secondSwapCalldata() {
    const calls = this.transit.calls();
    if (!calls) {
      return [];
    }
    const { calldatas, receiveSides, paths, offsets } = calls;
    if (this.transit.direction === "mint" && this.tradeC) {
      calldatas.push(this.finalCalldata());
      receiveSides.push(this.finalReceiveSide());
      paths.push(wrappedToken(this.tradeC.amountOut.token).address);
      offsets.push(this.finalOffset());
    }
    const multicallRouter = this.symbiosis.multicallRouter(this.omniPoolConfig.chainId);
    return multicallRouter.interface.encodeFunctionData("multicall", [
      this.transit.amountIn.raw.toString(),
      calldatas,
      receiveSides,
      paths,
      offsets,
      this.symbiosis.metaRouter(this.omniPoolConfig.chainId).address
    ]);
  }
  finalReceiveSide() {
    return this.tradeC?.routerAddress || import_constants53.AddressZero;
  }
  finalCalldata() {
    return this.tradeC?.callData || [];
  }
  finalOffset() {
    return this.tradeC?.callDataOffset || 0;
  }
  finalReceiveSideV2() {
    return this.synthesisV2.address;
  }
  finalCalldataV2(fee2) {
    const amount = this.transit.trade.amountOut;
    return this.synthesisV2.interface.encodeFunctionData("metaBurnSyntheticToken", [
      {
        stableBridgingFee: fee2 ? fee2?.raw.toString() : "0",
        amount: amount.raw.toString(),
        syntCaller: tronAddressToEvm(this.symbiosis.metaRouter(this.omniPoolConfig.chainId).address),
        crossChainID: CROSS_CHAIN_ID,
        finalReceiveSide: tronAddressToEvm(this.finalReceiveSide()),
        sToken: tronAddressToEvm(amount.token.address),
        finalCallData: this.finalCalldata(),
        finalOffset: this.finalOffset(),
        chain2address: tronAddressToEvm(this.to),
        receiveSide: tronAddressToEvm(this.symbiosis.portal(this.tokenOut.chainId).address),
        oppositeBridge: tronAddressToEvm(this.symbiosis.bridge(this.tokenOut.chainId).address),
        revertableAddress: this.getRevertableAddress("BC"),
        chainID: this.tokenOut.chainId,
        clientID: this.symbiosis.clientId
      }
    ]);
  }
  finalOffsetV2() {
    return 100;
  }
  swapTokens() {
    if (this.transit.trade.route.length === 0) {
      return [];
    }
    const tokens = [
      this.transit.trade.route[0].address,
      this.transit.trade.route[this.transit.trade.route.length - 1].address
    ];
    if (this.transit.isV2()) {
      return tokens;
    }
    if (this.tradeC) {
      tokens.push(wrappedToken(this.tradeC.amountOut.token).address);
    } else {
      tokens.push(...this.extraSwapTokens());
    }
    return tokens;
  }
  extraSwapTokens() {
    return [];
  }
};

// src/crosschain/swapping/swapping.ts
var Swapping = class extends BaseSwapping {
  async exactIn(params) {
    return this.doExactIn(params);
  }
};

// src/crosschain/swapping/swappingToTon.ts
var import_core5 = require("@ton/core");
var import_constants56 = require("@ethersproject/constants");
var SwappingToTon = class extends BaseSwapping {
  async exactIn(params) {
    this.userAddress = params.to;
    return this.doExactIn({
      ...params,
      to: params.from
    });
  }
  // TODO: remove when advisor is ready
  async getFee(feeToken) {
    return tonAdvisorMock(feeToken);
  }
  // TODO: remove when advisor is ready
  async getFeeV2(feeToken) {
    return tonAdvisorMock(feeToken);
  }
  metaBurnSyntheticToken(fee) {
    const synthesis = this.symbiosis.synthesis(this.tokenAmountIn.token.chainId);
    const amount = this.transit.trade.amountOut;
    const { workChain, hash } = import_core5.Address.parse(this.userAddress);
    const tonAddress = {
      workchain: workChain,
      address_hash: `0x${hash.toString("hex")}`
    };
    return [
      synthesis.address,
      synthesis.interface.encodeFunctionData("burnSyntheticTokenTON", [
        fee.raw.toString(),
        amount.token.address,
        amount.raw.toString(),
        CROSS_CHAIN_ID,
        tonAddress,
        import_constants56.AddressZero,
        // any arbtitary data, this addresses passed from relayer
        import_constants56.AddressZero,
        // any arbtitary data, this addresses passed from relayer
        this.from,
        this.tokenOut.chainId,
        this.symbiosis.clientId
      ])
    ];
  }
  finalOffsetV2() {
    return 100;
  }
  finalCalldataV2(feeV2) {
    const amount = this.transit.trade.amountOut;
    const { workChain, hash } = import_core5.Address.parse(this.userAddress);
    const tonAddress = {
      workchain: workChain,
      address_hash: `0x${hash.toString("hex")}`
    };
    return this.synthesisV2.interface.encodeFunctionData("burnSyntheticTokenTON", [
      feeV2 ? feeV2?.raw.toString() : "0",
      // uint256 stableBridgingFee;
      amount.token.address,
      amount.raw.toString(),
      CROSS_CHAIN_ID,
      tonAddress,
      import_constants56.AddressZero,
      import_constants56.AddressZero,
      this.from,
      this.tokenOut.chainId,
      this.symbiosis.clientId
    ]);
  }
};

// src/crosschain/swapping/swappingMiddleware.ts
var SwappingMiddleware = class extends BaseSwapping {
  async exactIn(params) {
    const { middlewareCall } = params;
    if (!middlewareCall) {
      const { symbiosis, omniPoolConfig } = this;
      const swapping = new Swapping(symbiosis, omniPoolConfig);
      return swapping.doExactIn(params);
    }
    const { address: address2, data, offset } = middlewareCall;
    this.middlewareAddress = address2;
    this.middlewareData = data;
    this.middlewareOffset = offset;
    return this.doExactIn(params);
  }
  finalReceiveSide() {
    return this.middlewareAddress;
  }
  finalCalldata() {
    return this.middlewareData;
  }
  finalOffset() {
    return this.middlewareOffset;
  }
};

// src/crosschain/swapping/zappingBtc.ts
var import_bitcoinjs_lib2 = require("bitcoinjs-lib");
var import_secp256k1 = __toESM(require("@bitcoinerlab/secp256k1"));
(0, import_bitcoinjs_lib2.initEccLib)(import_secp256k1.default);
var ZappingBtc = class extends BaseSwapping {
  async doPostTransitAction() {
    const amount = this.tradeC ? this.tradeC.amountOut : this.transit.amountOut;
    const amountMin = this.tradeC ? this.tradeC.amountOutMin : this.transit.amountOutMin;
    const [minBtcFee, threshold] = await Promise.all([
      getToBtcFee(amount, this.synthesis, this.symbiosis.cache),
      getThreshold(amount, this.synthesis, this.symbiosis.cache)
    ]);
    this.minBtcFee = minBtcFee;
    this.threshold = threshold;
    this.partnerFeeCall = await getPartnerFeeCall({
      symbiosis: this.symbiosis,
      amountIn: amount,
      amountInMin: amountMin,
      partnerAddress: void 0
      // do not charge partnerFee twice
    });
    const volumeFeeCollector = this.symbiosis.getVolumeFeeCollector(amount.token.chainId, [3652501241 /* BTC_MAINNET */]);
    if (volumeFeeCollector) {
      this.volumeFeeCall = getVolumeFeeCall({
        feeCollector: volumeFeeCollector,
        amountIn: amount,
        amountInMin: amountMin
      });
    }
  }
  async exactIn({
    tokenAmountIn,
    syBtc,
    from,
    to,
    slippage,
    deadline,
    transitTokenIn,
    transitTokenOut,
    partnerAddress
  }) {
    if (!syBtc.chainFromId) {
      throw new SdkError("syBtc is not synthetic");
    }
    const btc = GAS_TOKEN[syBtc.chainFromId];
    this.bitcoinAddress = getPkScript(to, syBtc.chainFromId);
    this.syBtc = syBtc;
    const chainId = syBtc.chainId;
    this.multicallRouter = this.symbiosis.multicallRouter(chainId);
    this.synthesis = this.symbiosis.synthesis(chainId);
    this.evmTo = from;
    if (!isEvmChainId(tokenAmountIn.token.chainId)) {
      this.evmTo = this.symbiosis.config.refundAddress;
    }
    const result = await this.doExactIn({
      tokenAmountIn,
      tokenOut: syBtc,
      from,
      to: this.evmTo,
      slippage,
      deadline,
      transitTokenIn,
      transitTokenOut,
      partnerAddress
    });
    let amountOut = result.tokenAmountOut;
    let amountOutMin = result.tokenAmountOutMin;
    let partnerFee = new TokenAmount(syBtc, "0");
    if (this.partnerFeeCall) {
      amountOut = this.partnerFeeCall.amountOut;
      amountOutMin = this.partnerFeeCall.amountOutMin;
      if (this.partnerFeeCall.fees.length > 0) {
        partnerFee = this.partnerFeeCall.fees[0].value;
      }
    }
    let volumeFee = new TokenAmount(syBtc, "0");
    if (this.volumeFeeCall) {
      amountOut = this.volumeFeeCall.amountOut;
      amountOutMin = this.volumeFeeCall.amountOutMin;
      if (this.volumeFeeCall.fees.length > 0) {
        volumeFee = this.volumeFeeCall.fees[0].value;
      }
    }
    if (amountOut.lessThan(this.minBtcFee) || amountOutMin.lessThan(this.minBtcFee)) {
      throw new AmountLessThanFeeError(
        `Min amount: ${this.minBtcFee.toSignificant()} ${this.minBtcFee.token.symbol}`
      );
    }
    if (amountOut.lessThan(this.threshold) || amountOutMin.lessThan(this.threshold)) {
      throw new AmountTooLowError(
        `Amount is too low. Min amount: ${this.threshold.toSignificant()} ${this.threshold.token.symbol}`
      );
    }
    const tokenAmountOut = new TokenAmount(btc, amountOut.subtract(this.minBtcFee).raw);
    const tokenAmountOutMin = new TokenAmount(btc, amountOutMin.subtract(this.minBtcFee).raw);
    await this.symbiosis.checkDustLimit(tokenAmountOutMin);
    const fees = [
      ...result.fees,
      {
        provider: "symbiosis",
        description: "BTC fee",
        value: this.minBtcFee
      }
    ];
    if (partnerFee) {
      fees.push({
        provider: "symbiosis",
        description: "Partner fee",
        value: partnerFee
      });
    }
    if (volumeFee) {
      fees.push({
        provider: "symbiosis",
        description: "Volume fee",
        value: volumeFee
      });
    }
    return {
      ...result,
      tokenAmountOut,
      tokenAmountOutMin,
      fees,
      routes: [
        ...result.routes,
        {
          provider: "symbiosis",
          tokens: [syBtc, btc]
        }
      ]
    };
  }
  tradeCTo() {
    return this.multicallRouter.address;
  }
  finalReceiveSide() {
    return this.multicallRouter.address;
  }
  finalCalldata() {
    return this.buildMulticall();
  }
  finalOffset() {
    return 36;
  }
  buildMulticall() {
    const callDatas = [];
    const receiveSides = [];
    const path = [];
    const offsets = [];
    const amount = this.transit.amountOut;
    if (this.tradeC) {
      callDatas.push(this.tradeC.callData);
      receiveSides.push(this.tradeC.routerAddress);
      path.push(this.tradeC.tokenAmountIn.token.address);
      offsets.push(this.tradeC.callDataOffset);
    }
    if (this.partnerFeeCall) {
      callDatas.push(this.partnerFeeCall.data);
      receiveSides.push(this.partnerFeeCall.to);
      path.push(this.partnerFeeCall.amountIn.token.address);
      offsets.push(this.partnerFeeCall.offset);
    }
    if (this.volumeFeeCall) {
      callDatas.push(this.volumeFeeCall.data);
      receiveSides.push(this.volumeFeeCall.to);
      path.push(this.volumeFeeCall.amountIn.token.address);
      offsets.push(this.volumeFeeCall.offset);
    }
    const burnCalldata = this.synthesis.interface.encodeFunctionData("burnSyntheticTokenBTC", [
      this.minBtcFee.raw.toString(),
      // _stableBridgingFee must be >= minBtcFee
      "0",
      // _amount will be patched
      this.bitcoinAddress,
      // _to
      this.syBtc.address,
      // _stoken
      this.symbiosis.clientId
      // _clientID
    ]);
    callDatas.push(burnCalldata);
    receiveSides.push(this.synthesis.address);
    path.push(this.syBtc.address);
    offsets.push(68);
    return this.multicallRouter.interface.encodeFunctionData("multicall", [
      amount.raw.toString(),
      callDatas,
      receiveSides,
      path,
      offsets,
      this.evmTo
    ]);
  }
};

// src/crosschain/swapping/zappingThor.ts
var import_isomorphic_unfetch = __toESM(require("isomorphic-unfetch"));
var import_ethers55 = require("ethers");
var import_bitcoin_address_validation = require("bitcoin-address-validation");
var BTC = GAS_TOKEN[3652501241 /* BTC_MAINNET */];
var thorApiUrl = "https://thornode.ninerealms.com";
function toThorToken(token) {
  const chain = toThorChain(token.chainId);
  return `${chain}.${token.symbol}-${token.address.toUpperCase()}`;
}
function toThorChain(chainId) {
  let chain;
  if (chainId === 43114 /* AVAX_MAINNET */) {
    chain = "AVAX";
  } else if (chainId === 1 /* ETH_MAINNET */) {
    chain = "ETH";
  } else if (chainId === 56 /* BSC_MAINNET */) {
    chain = "BSC";
  } else {
    throw new ThorChainError(`Unknown chain: ${chainId}`);
  }
  return chain;
}
function toThorAmount(tokenAmount) {
  const tokenDecimals = import_ethers55.BigNumber.from(10).pow(tokenAmount.token.decimals);
  const thorDecimals = import_ethers55.BigNumber.from(10).pow(8);
  return import_ethers55.BigNumber.from(tokenAmount.raw.toString()).mul(thorDecimals).div(tokenDecimals);
}
var MIN_AMOUNT_IN = 100;
var ZappingThor = class _ZappingThor extends BaseSwapping {
  constructor() {
    super(...arguments);
    this.thorTokenOut = "BTC.BTC";
  }
  async doPostTransitAction() {
    const amountIn = parseFloat(this.transit.amountIn.toSignificant());
    if (amountIn < MIN_AMOUNT_IN) {
      throw new ThorChainError(`The min swap amount towards Bitcoin is $${MIN_AMOUNT_IN}`);
    }
    this.thorQuote = await this.getThorQuote(this.transit.amountOut);
  }
  async exactIn({
    tokenAmountIn,
    thorTokenIn,
    from,
    to,
    slippage,
    deadline,
    partnerAddress
  }) {
    const isAddressValid = (0, import_bitcoin_address_validation.validate)(to);
    if (!isAddressValid) {
      throw new ThorChainError("Bitcoin address is not valid");
    }
    const addressInfo = (0, import_bitcoin_address_validation.getAddressInfo)(to);
    if (addressInfo.type === import_bitcoin_address_validation.AddressType.p2tr) {
      throw new ThorChainError(`ThorChain doesn't support taproot addresses`);
    }
    this.bitcoinAddress = to;
    this.thorTokenIn = thorTokenIn;
    this.evmTo = from;
    if (!isEvmChainId(tokenAmountIn.token.chainId)) {
      this.evmTo = this.symbiosis.config.refundAddress;
    }
    await _ZappingThor.getThorPools(thorTokenIn);
    this.multicallRouter = this.symbiosis.multicallRouter(thorTokenIn.chainId);
    this.thorVault = await _ZappingThor.getThorVault(thorTokenIn);
    const transitTokenIn = this.symbiosis.transitToken(tokenAmountIn.token.chainId, this.omniPoolConfig);
    const transitTokenOut = this.symbiosis.transitToken(thorTokenIn.chainId, this.omniPoolConfig);
    if (transitTokenIn.equals(transitTokenOut)) {
      throw new ThorChainError("Same transit token");
    }
    const result = await this.doExactIn({
      tokenAmountIn,
      tokenOut: thorTokenIn,
      from,
      to: this.evmTo,
      slippage,
      deadline,
      transitTokenIn,
      transitTokenOut,
      partnerAddress
    });
    return {
      ...result,
      tokenAmountOut: this.thorQuote.amountOut,
      tokenAmountOutMin: this.thorQuote.amountOutMin,
      routes: [
        ...result.routes,
        {
          provider: "thorchain-bridge",
          tokens: [thorTokenIn, BTC]
        }
      ],
      fees: [
        ...result.fees,
        {
          provider: "thorchain-bridge",
          description: "THORChain fee",
          value: new TokenAmount(BTC, this.thorQuote.fees.total)
        }
      ]
    };
  }
  static async getThorPools(token) {
    const url = new URL("/thorchain/pools", thorApiUrl);
    const response = await (0, import_isomorphic_unfetch.default)(url.toString(), {
      headers: {
        "x-client-id": "symbiosis"
      }
    });
    const json = await response.json();
    const found = json.find((i) => {
      return i.asset === toThorToken(token);
    });
    if (!found) {
      throw new ThorChainError("Thor pool not found");
    }
    if (found.status !== "Available") {
      throw new ThorChainError("Thor pool is not available");
    }
    return found;
  }
  static async getThorVault(token) {
    const url = new URL("/thorchain/inbound_addresses", thorApiUrl);
    const response = await (0, import_isomorphic_unfetch.default)(url.toString(), {
      headers: {
        "x-client-id": "symbiosis"
      }
    });
    const json = await response.json();
    if (json.error) {
      throw new ThorChainError(json.error);
    }
    const found = json.find((i) => {
      return i.chain === toThorChain(token.chainId);
    });
    if (!found) {
      throw new ThorChainError("Thor vault not found");
    }
    return found.address;
  }
  async getThorQuote(amount) {
    const url = new URL("/thorchain/quote/swap", thorApiUrl);
    url.searchParams.set("from_asset", toThorToken(this.thorTokenIn));
    url.searchParams.set("to_asset", this.thorTokenOut);
    url.searchParams.set("refund_address", this.evmTo);
    url.searchParams.set("amount", toThorAmount(amount).toString());
    url.searchParams.set("destination", this.bitcoinAddress);
    url.searchParams.set("streaming_interval", "1");
    url.searchParams.set("streaming_quantity", "0");
    url.searchParams.set("affiliate", "sy");
    url.searchParams.set("affiliate_bps", "20");
    const response = await (0, import_isomorphic_unfetch.default)(url.toString(), {
      headers: {
        "x-client-id": "symbiosis"
      }
    });
    const json = await response.json();
    if (json.error) {
      throw new ThorChainError(json.error);
    }
    const { memo, expected_amount_out: expectedAmountOut, router, expiry, fees } = json;
    const defaultSlippage = 300;
    const expectedAmountOutWithSlippage = getMinAmount(defaultSlippage, expectedAmountOut);
    const patchedMemo = memo.replace("0/1/0", `${expectedAmountOutWithSlippage.toString()}/1/0`);
    return {
      memo: patchedMemo,
      amountOut: new TokenAmount(BTC, expectedAmountOut),
      amountOutMin: new TokenAmount(BTC, expectedAmountOutWithSlippage),
      router,
      expiry,
      fees
    };
  }
  tradeCTo() {
    return this.multicallRouter.address;
  }
  finalReceiveSide() {
    return this.multicallRouter.address;
  }
  finalCalldata() {
    return this.buildMulticall();
  }
  finalOffset() {
    return 36;
  }
  buildMulticall() {
    const callDatas = [];
    const receiveSides = [];
    const path = [];
    const offsets = [];
    const amount = this.transit.amountOut;
    if (this.tradeC) {
      callDatas.push(this.tradeC.callData);
      receiveSides.push(this.tradeC.routerAddress);
      path.push(this.tradeC.tokenAmountIn.token.address);
      offsets.push(this.tradeC.callDataOffset);
    }
    const expiry = Math.floor(Date.now() / 1e3) + 60 * 60;
    const burnCalldata = ThorRouter__factory.createInterface().encodeFunctionData("depositWithExpiry", [
      this.thorVault,
      this.thorTokenIn.address,
      "0",
      // will be patched
      this.thorQuote.memo,
      expiry
    ]);
    callDatas.push(burnCalldata);
    receiveSides.push(this.thorQuote.router);
    path.push(this.thorTokenIn.address);
    offsets.push(100);
    return this.multicallRouter.interface.encodeFunctionData("multicall", [
      amount.raw.toString(),
      callDatas,
      receiveSides,
      path,
      offsets,
      this.evmTo
    ]);
  }
};

// src/crosschain/symbiosis.ts
var import_units4 = require("@ethersproject/units");

// src/crosschain/swapExactIn/bridge.ts
var import_constants60 = require("@ethersproject/constants");
var import_core6 = require("@ton/core");
function isBridgeSupported(context) {
  const { tokenAmountIn, tokenOut, symbiosis } = context;
  const wrappedInToken = wrappedToken(tokenAmountIn.token);
  const wrappedOutToken = wrappedToken(tokenOut);
  if (wrappedInToken.chainId === wrappedOutToken.chainId) {
    return false;
  }
  if (!wrappedInToken.isSynthetic && !wrappedOutToken.isSynthetic) {
    return false;
  }
  try {
    const representation = symbiosis.getRepresentation(wrappedInToken, wrappedOutToken.chainId);
    return !!representation && representation.equals(wrappedOutToken);
  } catch {
    return false;
  }
}
async function bridge(context) {
  const { tokenAmountIn, tokenOut } = context;
  const direction = getDirection(context);
  const revertableAddress = getRevertableAddress(context);
  const fee = await getFee(context, direction);
  const amountOut = getAmountOut(context, fee);
  const payload = await getTransactionPayload(context, fee, revertableAddress, direction);
  let approveTo = "";
  if (payload.transactionType === "tron") {
    approveTo = payload.transactionRequest.contract_address;
  } else if (payload.transactionType === "evm") {
    approveTo = payload.transactionRequest.to;
  }
  return {
    ...payload,
    kind: "bridge",
    tokenAmountOut: amountOut,
    tokenAmountOutMin: amountOut,
    priceImpact: new Percent("0", BIPS_BASE),
    approveTo,
    fees: [
      {
        provider: "symbiosis",
        description: "Bridge fee",
        value: fee
      }
    ],
    routes: [
      {
        provider: "symbiosis",
        tokens: [tokenAmountIn.token, tokenOut]
      }
    ]
  };
}
function getDirection(context) {
  const { tokenAmountIn } = context;
  if (tokenAmountIn.token.isSynthetic) {
    return "burn";
  }
  return "mint";
}
function getRevertableAddress(context) {
  const { from, tokenAmountIn, tokenOut, symbiosis } = context;
  const chainIdIn = tokenAmountIn.token.chainId;
  const chainIdOut = tokenOut.chainId;
  let address2 = from;
  if (isTronChainId(chainIdIn) || isTronChainId(chainIdOut)) {
    address2 = symbiosis.getRevertableAddress(chainIdOut);
  } else if (isTonChainId(chainIdIn) || isTonChainId(chainIdOut)) {
    address2 = symbiosis.getRevertableAddress(chainIdOut);
  }
  return address2;
}
async function getFee(context, direction) {
  if (direction === "burn") {
    return getBurnFee(context);
  }
  return getMintFee(context);
}
async function getMintFee(context) {
  const { symbiosis, tokenAmountIn, tokenOut, to } = context;
  const chainIdIn = tokenAmountIn.token.chainId;
  const chainIdOut = tokenOut.chainId;
  const internalId = getInternalId({
    contractAddress: symbiosis.chainConfig(chainIdIn).portal,
    requestCount: import_constants60.MaxUint256,
    // we must use last possible request count because it is always free
    chainId: chainIdIn
  });
  const synthesisAddress = symbiosis.chainConfig(chainIdOut).synthesis;
  const externalId = getExternalId({
    internalId,
    contractAddress: synthesisAddress,
    revertableAddress: import_constants60.AddressZero,
    // doesn't matter which address is
    chainId: chainIdOut
  });
  const token = wrappedToken(tokenAmountIn.token);
  const synthesisInterface = Synthesis__factory.createInterface();
  const calldata = synthesisInterface.encodeFunctionData("mintSyntheticToken", [
    "1",
    // stableBridgingFee,
    externalId,
    // externalID,
    CROSS_CHAIN_ID,
    token.address,
    // tokenReal,
    chainIdIn,
    // chainId
    tokenAmountIn.raw.toString(),
    // amount,
    to
  ]);
  const { price: fee } = await symbiosis.getBridgeFee({
    receiveSide: synthesisAddress,
    calldata,
    chainIdFrom: tokenAmountIn.token.chainId,
    chainIdTo: tokenOut.chainId
  });
  return new TokenAmount(tokenOut, fee);
}
async function getBurnFee(context) {
  const { symbiosis, tokenAmountIn, tokenOut, to } = context;
  const chainIdIn = tokenAmountIn.token.chainId;
  const chainIdOut = tokenOut.chainId;
  if (isTonChainId(chainIdOut)) {
    return tonAdvisorMock(tokenOut).fee;
  }
  const internalId = getInternalId({
    contractAddress: symbiosis.chainConfig(chainIdIn).synthesis,
    requestCount: import_constants60.MaxUint256,
    // we must use last possible request count because it is always free
    chainId: chainIdIn
  });
  const portalAddress = symbiosis.chainConfig(chainIdOut).portal;
  const externalId = getExternalId({
    internalId,
    contractAddress: portalAddress,
    revertableAddress: import_constants60.AddressZero,
    // doesn't matter which address is
    chainId: chainIdOut
  });
  const portalInterface = Portal__factory.createInterface();
  const calldata = portalInterface.encodeFunctionData("unsynthesize", [
    "1",
    // Bridging fee
    externalId,
    CROSS_CHAIN_ID,
    tokenOut.address,
    // The address of the token to unsynthesize
    tokenAmountIn.raw.toString(),
    // Number of tokens to unsynthesize
    to
    // The address to receive tokens
  ]);
  const { price: fee } = await symbiosis.getBridgeFee({
    receiveSide: portalAddress,
    calldata,
    chainIdFrom: chainIdIn,
    chainIdTo: chainIdOut
  });
  return new TokenAmount(tokenOut, fee);
}
function getAmountOut(context, fee) {
  const { tokenAmountIn, tokenOut } = context;
  const amountOut = new TokenAmount(tokenOut, tokenAmountIn.raw);
  if (amountOut.lessThan(fee)) {
    throw new AmountLessThanFeeError(
      `Amount ${amountOut.toSignificant()} ${amountOut.token.symbol} less than fee ${fee.toSignificant()} ${fee.token.symbol}`
    );
  }
  return amountOut.subtract(fee);
}
async function getTransactionPayload(context, fee, revertableAddress, direction) {
  const { tokenAmountIn } = context;
  const chainIdIn = tokenAmountIn.token.chainId;
  if (isTronChainId(chainIdIn)) {
    const transactionRequest = getTronTransactionRequest(context, fee, revertableAddress, direction);
    return {
      transactionType: "tron",
      transactionRequest
    };
  }
  if (isTonChainId(chainIdIn)) {
    const transactionRequest = await getTonTransactionRequest(context, fee, revertableAddress, direction);
    return {
      transactionType: "ton",
      transactionRequest
    };
  }
  if (isEvmChainId(chainIdIn)) {
    const transactionRequest = getEvmTransactionRequest(context, fee, revertableAddress, direction);
    return {
      transactionType: "evm",
      transactionRequest
    };
  }
  throw new SdkError(`Transaction payload can't be built. Unknown chainId type`);
}
function getTronTransactionRequest(context, fee, revertableAddress, direction) {
  const { symbiosis, tokenAmountIn, tokenOut, to, from } = context;
  const chainIdIn = tokenAmountIn.token.chainId;
  const chainIdOut = tokenOut.chainId;
  if (direction === "burn") {
    throw new SdkError("Burn is not supported on Tron");
  }
  return prepareTronTransaction({
    chainId: chainIdIn,
    abi: TRON_PORTAL_ABI,
    ownerAddress: from,
    contractAddress: symbiosis.chainConfig(chainIdIn).portal,
    functionName: "synthesize",
    params: [
      fee.raw.toString(),
      tokenAmountIn.token.address,
      tokenAmountIn.raw.toString(),
      to,
      symbiosis.chainConfig(chainIdOut).synthesis,
      symbiosis.chainConfig(chainIdOut).bridge,
      revertableAddress,
      chainIdOut.toString(),
      symbiosis.clientId
    ],
    tronWeb: symbiosis.tronWeb(chainIdIn)
  });
}
async function getTonTransactionRequest(context, fee, revertableAddress, direction) {
  if (direction === "burn") {
    throw new SdkError("Burn is not supported on Tron");
  }
  const { symbiosis, tokenAmountIn, tokenOut, to, from, deadline } = context;
  return buildSynthesize({
    symbiosis,
    fee,
    amountIn: tokenAmountIn,
    chainIdOut: tokenOut.chainId,
    from,
    to,
    revertableAddress,
    validUntil: deadline
  });
}
function getEvmTransactionRequest(context, fee, revertableAddress, direction) {
  const { symbiosis, tokenAmountIn, tokenOut, to } = context;
  const chainIdIn = tokenAmountIn.token.chainId;
  const chainIdOut = tokenOut.chainId;
  if (direction === "burn") {
    const synthesis = symbiosis.synthesis(chainIdIn);
    if (isTonChainId(chainIdOut)) {
      const { workChain, hash } = import_core6.Address.parse(to);
      const tonAddress = {
        workchain: workChain,
        address_hash: `0x${hash.toString("hex")}`
      };
      const data2 = synthesis.interface.encodeFunctionData("burnSyntheticTokenTON", [
        fee.raw.toString(),
        tokenAmountIn.token.address,
        tokenAmountIn.raw.toString(),
        CROSS_CHAIN_ID,
        tonAddress,
        import_constants60.AddressZero,
        // any arbitrary data, this addresses passed from relayer
        import_constants60.AddressZero,
        // any arbitrary data, this addresses passed from relayer
        revertableAddress,
        chainIdOut,
        symbiosis.clientId
      ]);
      return {
        chainId: chainIdIn,
        to: synthesis.address,
        data: data2
      };
    }
    const data = synthesis.interface.encodeFunctionData("burnSyntheticToken", [
      fee.raw.toString(),
      tokenAmountIn.token.address,
      tokenAmountIn.raw.toString(),
      to,
      symbiosis.chainConfig(chainIdOut).portal,
      symbiosis.chainConfig(chainIdOut).bridge,
      revertableAddress,
      chainIdOut,
      symbiosis.clientId
    ]);
    return {
      chainId: chainIdIn,
      to: synthesis.address,
      data
    };
  }
  const portal = symbiosis.portal(chainIdIn);
  return {
    chainId: chainIdIn,
    to: portal.address,
    data: portal.interface.encodeFunctionData("synthesize", [
      fee.raw.toString(),
      tokenAmountIn.token.address,
      tokenAmountIn.raw.toString(),
      to,
      symbiosis.chainConfig(chainIdOut).synthesis,
      symbiosis.chainConfig(chainIdOut).bridge,
      revertableAddress,
      chainIdOut,
      symbiosis.clientId
    ])
  };
}

// src/crosschain/swapExactIn/utils.ts
async function theBest(promises, mode) {
  if (mode === "fastest") {
    return Promise.any(promises);
  }
  const results = await Promise.allSettled(promises);
  let result;
  const errors = [];
  for (const item of results) {
    if (item.status !== "fulfilled") {
      errors.push(item.reason);
      continue;
    }
    const { value } = item;
    if (result && result.tokenAmountOut.greaterThan(value.tokenAmountOut)) {
      continue;
    }
    result = value;
  }
  if (!result) {
    throw new AggregateError(errors, "Build route error");
  }
  return result;
}

// src/crosschain/swapExactIn/crosschainSwap/bestPoolSwapping.ts
async function bestPoolSwapping(params) {
  const { symbiosis, tokenAmountIn, tokenOut, selectMode, disableSrcChainRouting, disableDstChainRouting } = params;
  const routes = getRoutes({
    symbiosis,
    tokenIn: tokenAmountIn.token,
    tokenOut,
    disableSrcChainRouting,
    disableDstChainRouting
  });
  const promises = routes.map((route) => tryRoute(symbiosis, route, params));
  return theBest(promises, selectMode);
}
function tryRoute(symbiosis, route, params) {
  const { transitTokenIn, transitTokenOut, poolConfig } = route;
  return symbiosis.newSwapping(poolConfig).exactIn({
    ...params,
    transitTokenIn,
    transitTokenOut
  });
}
function getRoutes({
  symbiosis,
  tokenIn,
  tokenOut,
  disableSrcChainRouting,
  disableDstChainRouting
}) {
  const optimalRoute = getOptimalRoute({
    symbiosis,
    tokenIn,
    tokenOut,
    disableSrcChainRouting,
    disableDstChainRouting
  });
  if (optimalRoute) {
    return [optimalRoute];
  }
  const routes = [];
  const generalPurposePools = symbiosis.config.omniPools.filter((poolConfig) => poolConfig.generalPurpose);
  for (const poolConfig of generalPurposePools) {
    const transitCombinations = symbiosis.getTransitCombinations({
      poolConfig,
      tokenIn,
      tokenOut,
      disableSrcChainRouting,
      disableDstChainRouting
    });
    for (const { transitTokenIn, transitTokenOut } of transitCombinations) {
      routes.push({
        transitTokenIn,
        transitTokenOut,
        poolConfig,
        optimal: false
      });
    }
  }
  return routes;
}
function getOptimalRoute({
  symbiosis,
  tokenIn,
  tokenOut,
  disableSrcChainRouting,
  disableDstChainRouting
}) {
  const { omniPools } = symbiosis.config;
  let optimal;
  for (const poolConfig of omniPools) {
    const transitTokenIn = symbiosis.transitTokens(tokenIn.chainId, poolConfig).find((transitToken) => {
      return transitToken.equals(wrappedToken(tokenIn));
    });
    const transitTokenOut = symbiosis.transitTokens(tokenOut.chainId, poolConfig).find((transitToken) => {
      return transitToken.equals(wrappedToken(tokenOut));
    });
    if (transitTokenIn && transitTokenOut) {
      optimal = {
        transitTokenIn,
        transitTokenOut,
        poolConfig,
        optimal: true
      };
      break;
    }
  }
  if (optimal) {
    return optimal;
  }
  if (!disableSrcChainRouting) {
    for (const poolConfig of omniPools) {
      try {
        const transitTokenIn = symbiosis.transitToken(tokenIn.chainId, poolConfig);
        const transitTokenOut = symbiosis.transitTokens(tokenOut.chainId, poolConfig).find((transitToken) => {
          return transitToken.equals(wrappedToken(tokenOut));
        });
        if (transitTokenOut) {
          optimal = {
            transitTokenIn,
            transitTokenOut,
            poolConfig,
            optimal: true
          };
          break;
        }
      } catch {
      }
    }
    if (optimal) {
      return optimal;
    }
  }
  if (!disableDstChainRouting) {
    for (const poolConfig of omniPools) {
      try {
        const transitTokenIn = symbiosis.transitTokens(tokenIn.chainId, poolConfig).find((transitToken) => {
          return transitToken.equals(wrappedToken(tokenIn));
        });
        const transitTokenOut = symbiosis.transitToken(tokenOut.chainId, poolConfig);
        if (transitTokenIn) {
          optimal = {
            transitTokenIn,
            transitTokenOut,
            poolConfig,
            optimal: true
          };
          break;
        }
      } catch {
      }
    }
    if (optimal) {
      return optimal;
    }
  }
  const possibleRoutes = [];
  for (const poolConfig of omniPools) {
    try {
      const transitTokenIn = symbiosis.transitToken(tokenIn.chainId, poolConfig);
      if (disableSrcChainRouting && !transitTokenIn.equals(wrappedToken(tokenIn))) {
        continue;
      }
      const transitTokenOut = symbiosis.transitToken(tokenOut.chainId, poolConfig);
      if (disableDstChainRouting && !transitTokenIn.equals(wrappedToken(tokenOut))) {
        continue;
      }
      if (transitTokenIn && transitTokenOut) {
        possibleRoutes.push({
          transitTokenIn,
          transitTokenOut,
          poolConfig,
          optimal: true
        });
      }
    } catch {
    }
  }
  if (possibleRoutes.length === 1) {
    return possibleRoutes[0];
  }
  return void 0;
}

// src/crosschain/swapExactIn/crosschainSwap/crosschainSwap.ts
async function crosschainSwap(params) {
  return bestPoolSwapping(params);
}

// src/crosschain/swapExactIn/feeCollectorSwap.ts
var import_constants62 = require("@ethersproject/constants");
var import_ethers56 = require("ethers");

// src/crosschain/swapExactIn/preparePayload.ts
var import_tronweb3 = __toESM(require("tronweb"));
function preparePayload({
  chainId,
  from,
  to,
  callData,
  value = "0",
  functionSelector
}) {
  if (isTronChainId(chainId)) {
    if (!functionSelector) {
      throw new Error("This method is not supported for tron chain");
    }
    const rawParameter = callData.replace(/^(0x)/, "").slice(8);
    return {
      transactionType: "tron",
      transactionRequest: {
        function_selector: functionSelector,
        call_value: value,
        chain_id: chainId,
        contract_address: import_tronweb3.default.address.fromHex(to),
        owner_address: import_tronweb3.default.address.fromHex(from),
        raw_parameter: rawParameter,
        fee_limit: 15e7
        // Default fee limit - 150 TRX
      }
    };
  }
  return {
    transactionType: "evm",
    transactionRequest: {
      chainId,
      from,
      to,
      value,
      data: callData
    }
  };
}

// src/crosschain/swapExactIn/aggregatorsSwap.ts
async function aggregatorsSwap({
  symbiosis,
  deadline,
  to,
  from,
  slippage,
  tokenAmountIn,
  tokenOut,
  oneInchProtocols
}) {
  const aggregatorTrade = new AggregatorTrade({
    symbiosis,
    to,
    from,
    clientId: symbiosis.clientId,
    slippage,
    tokenAmountIn,
    tokenAmountInMin: tokenAmountIn,
    // correct as aggregatorsSwap is used for onchain swaps only
    tokenOut,
    deadline,
    oneInchProtocols
  });
  const endTimer = symbiosis.createMetricTimer();
  await aggregatorTrade.init();
  endTimer?.({
    kind: `onchain-swap`,
    operation: `${aggregatorTrade.tradeType}-onchain-swap`,
    tokenIn: tokenAmountIn.token,
    tokenOut
  });
  const { amountOut, amountOutMin, callData, priceImpact, route, routerAddress, tradeType, functionSelector } = aggregatorTrade;
  const value = tokenAmountIn.token.isNative ? tokenAmountIn.raw.toString() : "0";
  const payload = preparePayload({
    functionSelector,
    chainId: tokenAmountIn.token.chainId,
    from,
    to: routerAddress,
    value,
    callData
  });
  return {
    ...payload,
    kind: "onchain-swap",
    approveTo: routerAddress,
    tokenAmountOut: amountOut,
    tokenAmountOutMin: amountOutMin,
    priceImpact,
    fees: [],
    routes: [
      {
        provider: tradeType,
        tokens: route
      }
    ]
  };
}

// src/crosschain/swapExactIn/octoPoolSwap.ts
function isOctoPoolSwapSupported(context) {
  const { tokenAmountIn, tokenOut, symbiosis } = context;
  if (!tokenAmountIn.token.isSynthetic || !tokenOut.isSynthetic) {
    return false;
  }
  const tokenInPool = symbiosis.getOmniPoolByToken(tokenAmountIn.token);
  const tokenOutPool = symbiosis.getOmniPoolByToken(tokenOut);
  if (!tokenInPool || !tokenOutPool) {
    return false;
  }
  return tokenInPool.id === tokenOutPool.id;
}
async function octoPoolSwap({
  symbiosis,
  tokenAmountIn,
  tokenOut,
  to,
  slippage,
  deadline
}) {
  const tokenInPool = symbiosis.getOmniPoolByToken(tokenAmountIn.token);
  const tokenOutPool = symbiosis.getOmniPoolByToken(tokenOut);
  if (!tokenInPool || !tokenOutPool) {
    throw new Error("Incorrect tokens for octoPoolSwap");
  }
  const trade = new OctoPoolTrade({
    symbiosis,
    tokenAmountIn,
    tokenAmountInMin: tokenAmountIn,
    tokenOut,
    omniPoolConfig: tokenInPool,
    to,
    slippage,
    deadline
  });
  await trade.init();
  return {
    kind: "onchain-swap",
    tokenAmountOut: trade.amountOut,
    tokenAmountOutMin: trade.amountOutMin,
    approveTo: trade.routerAddress,
    priceImpact: trade.priceImpact,
    transactionType: "evm",
    transactionRequest: {
      to: trade.routerAddress,
      data: trade.callData,
      value: tokenAmountIn.token.isNative ? tokenAmountIn.raw.toString() : void 0
    },
    fees: [],
    routes: [
      {
        provider: "octopool",
        tokens: [tokenAmountIn.token, tokenOut]
      }
    ]
  };
}

// src/crosschain/swapExactIn/dedustSwap.ts
function isDedustSwapSupported(context) {
  const { tokenAmountIn, tokenOut } = context;
  return isTonChainId(tokenAmountIn.token.chainId) && isTonChainId(tokenOut.chainId);
}
async function dedustSwap(params) {
  const { tokenAmountIn, tokenOut, symbiosis } = params;
  const trade = new DedustTrade({
    ...params,
    tokenAmountInMin: tokenAmountIn
  });
  await trade.init().catch((e) => {
    symbiosis.trackAggregatorError({
      provider: "dedust",
      reason: e.message,
      chain_id: String(tokenOut.chain?.id)
    });
    throw e;
  });
  return {
    kind: "onchain-swap",
    tokenAmountOut: trade.amountOut,
    tokenAmountOutMin: trade.amountOutMin,
    priceImpact: trade.priceImpact,
    transactionType: "ton",
    approveTo: "0x0000000000000000000000000000000000000000",
    transactionRequest: {
      validUntil: trade.deadline,
      messages: [
        {
          address: trade.routerAddress,
          amount: trade.value?.toString() ?? "0",
          payload: trade.callData
        }
      ]
    },
    fees: trade.fees ?? [],
    routes: [
      {
        provider: "dedust",
        tokens: [tokenAmountIn.token, tokenOut]
      }
    ]
  };
}

// src/crosschain/swapExactIn/stonfiSwap.ts
function isStonfiSwapSupported(context) {
  const { tokenAmountIn, tokenOut } = context;
  return isTonChainId(tokenAmountIn.token.chainId) && isTonChainId(tokenOut.chainId);
}
async function stonfiSwap({
  symbiosis,
  tokenAmountIn,
  tokenOut,
  from,
  to,
  slippage,
  deadline
}) {
  const trade = new StonfiTrade({
    symbiosis,
    tokenAmountIn,
    tokenAmountInMin: tokenAmountIn,
    tokenOut,
    from,
    to,
    slippage,
    deadline
  });
  await trade.init().catch((e) => {
    symbiosis.trackAggregatorError({
      provider: "stonfi",
      reason: e.message,
      chain_id: String(tokenOut.chain?.id)
    });
    throw e;
  });
  return {
    kind: "onchain-swap",
    tokenAmountOut: trade.amountOut,
    tokenAmountOutMin: trade.amountOutMin,
    priceImpact: trade.priceImpact,
    transactionType: "ton",
    approveTo: "0x0000000000000000000000000000000000000000",
    transactionRequest: {
      validUntil: trade.deadline,
      messages: [
        {
          address: trade.routerAddress,
          amount: trade.value?.toString() ?? "0",
          payload: trade.callData
        }
      ]
    },
    fees: trade.fees ?? [],
    routes: [
      {
        provider: "stonfi",
        tokens: [tokenAmountIn.token, tokenOut]
      }
    ]
  };
}

// src/crosschain/swapExactIn/onChainSolanaSwap/onChainSolanaSwap.ts
function isOnChainSolanaSwapSupported(context) {
  const { tokenAmountIn, tokenOut } = context;
  return isSolanaChainId(tokenAmountIn.token.chainId) && isSolanaChainId(tokenOut.chainId);
}
function onChainSolanaSwap({
  symbiosis,
  tokenAmountIn,
  tokenOut,
  from,
  to,
  slippage
}) {
  const raydiumTradeInstance = new RaydiumTrade({
    symbiosis,
    tokenAmountIn,
    tokenAmountInMin: tokenAmountIn,
    tokenOut,
    from,
    to,
    slippage
  });
  const jupiterTradeInstance = new JupiterTrade({
    symbiosis,
    tokenAmountIn,
    tokenAmountInMin: tokenAmountIn,
    tokenOut,
    to,
    slippage
  });
  const tradeInstances = [raydiumTradeInstance, jupiterTradeInstance];
  return tradeInstances.map(async (instance) => {
    const trade = await instance.init().catch((e) => {
      symbiosis.trackAggregatorError({
        provider: instance.tradeType,
        reason: e.message,
        chain_id: String(tokenOut.chain?.id)
      });
      throw e;
    });
    const { instructions, fee } = await addSolanaFee(from, trade.instructions);
    return {
      kind: "onchain-swap",
      tokenAmountOut: trade.amountOut,
      tokenAmountOutMin: trade.amountOutMin,
      priceImpact: trade.priceImpact,
      transactionType: "solana",
      approveTo: "0x0000000000000000000000000000000000000000",
      transactionRequest: {
        instructions
      },
      fees: fee ? [
        {
          provider: "symbiosis",
          value: fee,
          description: "Symbiosis on-chain fee"
        }
      ] : [],
      routes: [
        {
          provider: trade.tradeType,
          tokens: [tokenAmountIn.token, tokenOut]
        }
      ]
    };
  });
}

// src/crosschain/swapExactIn/onchainSwap.ts
function isOnchainSwapSupported(params) {
  const { tokenAmountIn, tokenOut } = params;
  return tokenAmountIn.token.chainId === tokenOut.chainId;
}
async function onchainSwap(params) {
  const { selectMode } = params;
  const promises = [aggregatorsSwap(params)];
  if (isOctoPoolSwapSupported(params)) {
    promises.push(octoPoolSwap(params));
  }
  if (isOnChainSolanaSwapSupported(params)) {
    promises.push(...onChainSolanaSwap(params));
  }
  if (isStonfiSwapSupported(params)) {
    promises.push(stonfiSwap(params));
  }
  if (isDedustSwapSupported(params)) {
    promises.push(dedustSwap(params));
  }
  return theBest(promises, selectMode);
}

// src/crosschain/swapExactIn/feeCollectorSwap.ts
var ZERO_FEE_COLLECTOR_ADDRESSES = {
  [324 /* ZKSYNC_MAINNET */]: "0x35e3dc1f3383bD348EC651EdD73fE1d7a7dA5AAa",
  [56 /* BSC_MAINNET */]: "0x628613064b1902a1A422825cf11B687C6f17961E",
  [30 /* RSK_MAINNET */]: "0xa257f3fe4e4032291516dc355edf90664e9eb932"
};
var FEE_COLLECTOR_ADDRESSES = {
  [1 /* ETH_MAINNET */]: "0xff9b21c3bfa4bce9b20b55fed56d102ced48b0f6",
  [56 /* BSC_MAINNET */]: "0x0425841529882628880fBD228AC90606e0c2e09A",
  [43114 /* AVAX_MAINNET */]: "0xA257F3FE4E4032291516DC355eDF90664e9eB932",
  [137 /* MATIC_MAINNET */]: "0x9d74807B8fA79d49bb95CF988Af3c25Fb1437B4f",
  [5e3 /* MANTLE_MAINNET */]: "0x7B4E28E7273aA8CB64C56fF191ebF43b64f409F9",
  [59144 /* LINEA_MAINNET */]: "0x0f91052dc5B4baE53d0FeA5DAe561A117268f5d2",
  [1101 /* POLYGON_ZK */]: "0xB79A4F5828eb55c10D7abF4bFe9a9f5d11aA84e0",
  [8453 /* BASE_MAINNET */]: "0xF951789c6A356BfbC3033648AA10b5Dd3e9d88C0",
  [42161 /* ARBITRUM_MAINNET */]: "0x4FDA0599b78a49d289577a8DF2046459abC04d82",
  [42170 /* ARBITRUM_NOVA */]: "0x7B4E28E7273aA8CB64C56fF191ebF43b64f409F9",
  [10 /* OPTIMISM_MAINNET */]: "0x7775b274f0C3fA919B756b22A4d9674e55927ab8",
  [40 /* TELOS_MAINNET */]: "0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C",
  [324 /* ZKSYNC_MAINNET */]: "0x56C343E7cE75e53e58Ed2f3743C6f137c13D2013",
  [288 /* BOBA_MAINNET */]: "0xB79A4F5828eb55c10D7abF4bFe9a9f5d11aA84e0",
  [2222 /* KAVA_MAINNET */]: "0xca506793A420E901BbCa8066be5661E3C52c84c2",
  [728126428 /* TRON_MAINNET */]: "0x5112ac3d77551b9f670eb34ef75984246164e38d",
  [534352 /* SCROLL_MAINNET */]: "0xf02bBC9de6e443eFDf3FC41851529C2c3B9E5e0C",
  [169 /* MANTA_MAINNET */]: "0xf85FC807D05d3Ab2309364226970aAc57b4e1ea4",
  [1088 /* METIS_MAINNET */]: "0x81aB74A9f9d7457fF47dfD102e78A340cF72EC39",
  [5165 /* BAHAMUT_MAINNET */]: "0x70A16EB2B39A5573A8138b18582111bBA480fb8F",
  [34443 /* MODE_MAINNET */]: "0xd8db4fb1fEf63045A443202d506Bcf30ef404160",
  [30 /* RSK_MAINNET */]: "0x2b7aa8bdc40b6d3d19d0de7480c4db8d5b6495e2",
  [81457 /* BLAST_MAINNET */]: "0xf1C374D065719Ce1Fdc63E2c5C13146813c0A83b",
  [4200 /* MERLIN_MAINNET */]: "0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8",
  [810180 /* ZKLINK_MAINNET */]: "0x9C64162e1614E10f833aFc2a0BdF173324f36Dd5",
  [1116 /* CORE_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [167e3 /* TAIKO_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [1329 /* SEI_EVM_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [7e3 /* ZETACHAIN_MAINNET */]: "0x6148FD6C649866596C3d8a971fC313E5eCE84882",
  [25 /* CRONOS_MAINNET */]: "0x1a039cE63AE35a67Bf0E9F6DbFaE969639D59eC8",
  [252 /* FRAXTAL_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [1625 /* GRAVITY_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab",
  [223 /* BSQUARED_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [388 /* CRONOS_ZK_MAINNET */]: "0xBf63C7944B1635c79a0f0eE7e07b1702837AD1F9",
  [2818 /* MORPH_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [146 /* SONIC_MAINNET */]: "0x1cEaeda3D17936916D0F3E866Aa5Ef861F544840",
  [2741 /* ABSTRACT_MAINNET */]: "0x9C64162e1614E10f833aFc2a0BdF173324f36Dd5",
  [100 /* GNOSIS_MAINNET */]: "0xf1C374D065719Ce1Fdc63E2c5C13146813c0A83b",
  [80094 /* BERACHAIN_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [130 /* UNICHAIN_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [1868 /* SONEIUM_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [204 /* OPBNB_MAINNET */]: "0x1cEaeda3D17936916D0F3E866Aa5Ef861F544840",
  [999 /* HYPERLIQUID_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab",
  [747474 /* KATANA_MAINNET */]: "0xf1C374D065719Ce1Fdc63E2c5C13146813c0A83b",
  [33139 /* APECHAIN_MAINNET */]: "0x2b7Aa8bDc40B6d3d19d0dE7480c4db8d5B6495e2",
  [9745 /* PLASMA_MAINNET */]: "0x6AEb9b27590387b8Fd0560C52f6B968C59C10Fab"
};
function isFeeCollectorSwapSupported(params) {
  const inChainId = params.tokenAmountIn.token.chainId;
  const outChainId = params.tokenOut.chainId;
  return inChainId === outChainId && FEE_COLLECTOR_ADDRESSES[inChainId] !== void 0;
}
async function feeCollectorSwap(params) {
  const { symbiosis } = params;
  const inChainId = params.tokenAmountIn.token.chainId;
  const feeCollectorAddress = FEE_COLLECTOR_ADDRESSES[inChainId];
  if (!feeCollectorAddress) {
    throw new SdkError(`Fee collector not found for chain ${inChainId}`);
  }
  const provider = symbiosis.getProvider(inChainId);
  const contract = FeeCollector__factory.connect(feeCollectorAddress, provider);
  const [fee, approveAddress] = await Promise.all([contract.callStatic.fee(), contract.callStatic.onchainGateway()]);
  const feeToken = GAS_TOKEN[inChainId];
  const feeTokenAmount = new TokenAmount(feeToken, fee.toString());
  let inTokenAmount = params.tokenAmountIn;
  if (inTokenAmount.token.equals(feeToken)) {
    if (inTokenAmount.lessThan(feeTokenAmount) || inTokenAmount.equalTo(feeTokenAmount)) {
      throw new AmountLessThanFeeError(`Min amount: ${feeTokenAmount.toSignificant()}`);
    }
    inTokenAmount = inTokenAmount.subtract(feeTokenAmount);
  }
  const result = await onchainSwap({ ...params, tokenAmountIn: inTokenAmount, from: feeCollectorAddress });
  let value = "";
  let callData = "";
  let routerAddress = "";
  if (result.transactionType === "tron") {
    value = result.transactionRequest.call_value.toString();
    const method = import_ethers56.utils.id(result.transactionRequest.function_selector).slice(0, 10);
    callData = method + result.transactionRequest.raw_parameter;
    routerAddress = tronAddressToEvm(result.transactionRequest.contract_address);
  } else if (result.transactionType === "evm") {
    value = result.transactionRequest.value?.toString();
    callData = result.transactionRequest.data;
    routerAddress = result.transactionRequest.to;
  }
  if (inTokenAmount.token.isNative) {
    value = import_ethers56.BigNumber.from(value).add(fee).toString();
  } else {
    value = fee.toString();
  }
  callData = contract.interface.encodeFunctionData("onswap", [
    inTokenAmount.token.isNative ? import_constants62.AddressZero : inTokenAmount.token.address,
    inTokenAmount.raw.toString(),
    routerAddress,
    inTokenAmount.token.isNative ? import_constants62.AddressZero : result.approveTo,
    callData
  ]);
  const functionSelector = getFunctionSelector(contract.interface.getFunction("onswap"));
  const payload = preparePayload({
    functionSelector,
    chainId: inChainId,
    from: params.from,
    to: feeCollectorAddress,
    value,
    callData
  });
  return {
    ...result,
    ...payload,
    approveTo: approveAddress,
    fees: [
      {
        provider: "symbiosis",
        value: feeTokenAmount,
        description: "Symbiosis on-chain fee"
      },
      ...result.fees
    ]
  };
}

// src/crosschain/swapExactIn/unwrap.ts
var import_addresses5 = require("@ethersproject/constants/lib/addresses");
function isUnwrapSupported(params) {
  const { tokenAmountIn, tokenOut, from, to } = params;
  if (from.toLowerCase() !== to.toLowerCase()) {
    return false;
  }
  const chainIdIn = tokenAmountIn.token.chainId;
  const chainIdOut = tokenOut.chainId;
  const weth = WETH[chainIdIn];
  return chainIdIn === chainIdOut && tokenOut.isNative && weth && weth.equals(tokenAmountIn.token);
}
async function unwrap(params) {
  const { tokenAmountIn, tokenOut, from } = params;
  const wethInterface = Weth__factory.createInterface();
  const amountOut = new TokenAmount(tokenOut, tokenAmountIn.raw);
  const callData = wethInterface.encodeFunctionData("withdraw", [tokenAmountIn.raw.toString()]);
  const functionSelector = getFunctionSelector(wethInterface.getFunction("withdraw"));
  const payload = preparePayload({
    functionSelector,
    chainId: tokenAmountIn.token.chainId,
    from,
    to: tokenAmountIn.token.address,
    callData
  });
  let approveTo = import_addresses5.AddressZero;
  if (payload.transactionType === "tron") {
    approveTo = payload.transactionRequest.contract_address;
  } else if (payload.transactionType === "evm") {
    approveTo = payload.transactionRequest.to;
  }
  return {
    ...payload,
    kind: "unwrap",
    tokenAmountOut: amountOut,
    tokenAmountOutMin: amountOut,
    priceImpact: new Percent("0", BIPS_BASE),
    approveTo,
    fees: [],
    routes: [
      {
        provider: "wrap",
        tokens: [params.tokenAmountIn.token, params.tokenOut]
      }
    ]
  };
}

// src/crosschain/swapExactIn/wrap.ts
var import_addresses6 = require("@ethersproject/constants/lib/addresses");
function isWrapSupported(params) {
  const { tokenAmountIn, tokenOut, from, to } = params;
  if (from.toLowerCase() !== to.toLowerCase()) {
    return false;
  }
  const chainIdIn = tokenAmountIn.token.chainId;
  const chainIdOut = tokenOut.chainId;
  const weth = WETH[chainIdIn];
  return chainIdIn === chainIdOut && tokenAmountIn.token.isNative && weth && weth.equals(tokenOut);
}
async function wrap(params) {
  const { tokenAmountIn } = params;
  const { chainId } = tokenAmountIn.token;
  const weth = WETH[chainId];
  if (!weth) {
    throw new Error(`Wrap token not found for chain ${chainId}`);
  }
  const wethInterface = Weth__factory.createInterface();
  const amountOut = new TokenAmount(weth, tokenAmountIn.raw);
  const callData = wethInterface.encodeFunctionData("deposit");
  const functionSelector = getFunctionSelector(wethInterface.getFunction("deposit"));
  const payload = preparePayload({
    functionSelector,
    chainId,
    from: params.from,
    to: weth.address,
    value: tokenAmountIn.raw.toString(),
    callData
  });
  let approveTo = import_addresses6.AddressZero;
  if (payload.transactionType === "tron") {
    approveTo = payload.transactionRequest.contract_address;
  } else if (payload.transactionType === "evm") {
    approveTo = payload.transactionRequest.to;
  }
  return {
    ...payload,
    kind: "wrap",
    tokenAmountOut: amountOut,
    tokenAmountOutMin: amountOut,
    priceImpact: new Percent("0", BIPS_BASE),
    approveTo,
    fees: [],
    routes: [
      {
        provider: "wrap",
        tokens: [tokenAmountIn.token, weth]
      }
    ]
  };
}

// src/crosschain/swapExactIn/toTonSwap.ts
function symbiosisBridgeToTon(context) {
  const { symbiosis, tokenAmountIn, tokenOut, disableSrcChainRouting, disableDstChainRouting } = context;
  const promises = [];
  symbiosis.config.omniPools.forEach((poolConfig) => {
    const combinations = symbiosis.getTransitCombinations({
      poolConfig,
      tokenIn: tokenAmountIn.token,
      tokenOut,
      disableSrcChainRouting,
      disableDstChainRouting
    });
    const poolPromises = combinations.map(({ transitTokenIn, transitTokenOut }) => {
      const swappingToTon = new SwappingToTon(symbiosis, poolConfig);
      return swappingToTon.exactIn({ ...context, transitTokenIn, transitTokenOut });
    });
    promises.push(...poolPromises);
  });
  return promises;
}
async function toTonSwap(context) {
  const { selectMode } = context;
  const promises = [];
  promises.push(...symbiosisBridgeToTon(context));
  return theBest(promises, selectMode);
}

// src/crosschain/swapExactIn/swapChainFlip/zappingOnChainChainFlip.ts
var import_swap2 = require("@chainflip/sdk/swap");
var import_addresses7 = require("@ethersproject/constants/lib/addresses");
var import_ethers57 = require("ethers");

// src/crosschain/swapExactIn/swapChainFlip/utils.ts
var ChainFlipBrokerAccount = "cFJZvt5AiEGwUiFFNxhDuLRcgC1WBR6tE7gaQQfe8dqbzoYkx";
var ChainFlipBrokerFeeBps = 20;
var ARB_USDC = new Token2({
  address: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
  chainId: 42161 /* ARBITRUM_MAINNET */,
  decimals: 6,
  name: "USDC",
  symbol: "USDC",
  icons: {
    large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
    small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
  }
});
var ETH_USDC = new Token2({
  address: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
  chainId: 1 /* ETH_MAINNET */,
  decimals: 6,
  name: "USDC",
  symbol: "USDC",
  icons: {
    large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
    small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
  }
});
var CF_ARB_USDC = {
  chainId: 4 /* Arbitrum */,
  assetId: 3 /* USDC */,
  chain: "Arbitrum",
  asset: "USDC"
};
var CF_ETH_USDC = {
  chainId: 1 /* Ethereum */,
  assetId: 3 /* USDC */,
  chain: "Ethereum",
  asset: "USDC"
};
function checkMinAmount(amountIn) {
  let minThreshold = void 0;
  if (amountIn.token.equals(ARB_USDC)) {
    minThreshold = new TokenAmount(ARB_USDC, "15000000");
  } else if (amountIn.token.equals(ETH_USDC)) {
    minThreshold = new TokenAmount(ARB_USDC, "25000000");
  }
  if (minThreshold && amountIn.lessThan(minThreshold)) {
    throw new Error(`Amount should be greater than ${minThreshold.toSignificant()} ${minThreshold.token.symbol}`);
  }
}
function getChainFlipFee(quote) {
  const SOL = GAS_TOKEN[5426 /* SOLANA_MAINNET */];
  const BTC2 = GAS_TOKEN[3652501241 /* BTC_MAINNET */];
  let usdcFee = 0;
  let solFee = 0;
  let btcFee = 0;
  quote.includedFees.forEach(({ asset, amount }) => {
    if (asset === "USDC") {
      usdcFee += parseInt(amount);
    }
    if (asset === "SOL") {
      solFee += parseInt(amount);
    }
    if (asset === "BTC") {
      btcFee += parseInt(amount);
    }
  });
  return {
    usdcFeeToken: new TokenAmount(ARB_USDC, usdcFee.toString()),
    solFeeToken: new TokenAmount(SOL, solFee.toString()),
    btcFeeToken: new TokenAmount(BTC2, btcFee.toString())
  };
}

// src/crosschain/swapExactIn/swapChainFlip/zappingOnChainChainFlip.ts
async function ZappingOnChainChainFlip(params, config4) {
  const { symbiosis, to, from, tokenAmountIn } = params;
  const chainId = params.tokenAmountIn.token.chainId;
  let evmTo = from;
  if (!isEvmChainId(chainId)) {
    evmTo = symbiosis.config.refundAddress;
  }
  const feeCollectorAddress = FEE_COLLECTOR_ADDRESSES[chainId];
  if (!feeCollectorAddress) {
    throw new SdkError(`Fee collector not found for chain ${chainId}`);
  }
  const multicallRouterAddress = MULTICALL_ROUTER_V2[chainId];
  if (!multicallRouterAddress) {
    throw new SdkError(`MulticallRouterV2 not found for chain ${chainId}`);
  }
  const provider = symbiosis.getProvider(chainId);
  const multicallRouter = MulticallRouterV2__factory.connect(multicallRouterAddress, provider);
  const feeCollector = FeeCollector__factory.connect(feeCollectorAddress, provider);
  const [fee, approveAddress] = await symbiosis.cache.get(
    ["feeCollector.fee", "feeCollector.onchainGateway", chainId.toString()],
    () => {
      return Promise.all([feeCollector.callStatic.fee(), feeCollector.callStatic.onchainGateway()]);
    },
    60 * 60
    // 1 hour
  );
  let inTokenAmount = params.tokenAmountIn;
  if (inTokenAmount.token.isNative) {
    const feeTokenAmount = new TokenAmount(inTokenAmount.token, fee.toString());
    if (inTokenAmount.lessThan(feeTokenAmount) || inTokenAmount.equalTo(feeTokenAmount)) {
      throw new AmountLessThanFeeError(`Min amount: ${feeTokenAmount.toSignificant()}`);
    }
    inTokenAmount = inTokenAmount.subtract(feeTokenAmount);
  }
  const multicallItems = [];
  let value = fee.toString();
  let depositAmount = tokenAmountIn;
  let priceImpact = new Percent("0", BIPS_BASE);
  const fees = [];
  const routes = [];
  let swapCall = void 0;
  const swapCallRequired = !tokenAmountIn.token.equals(config4.tokenIn);
  if (swapCallRequired) {
    swapCall = await getSwapCall({
      ...params,
      tokenOut: config4.tokenIn,
      from: multicallRouterAddress,
      to: multicallRouterAddress
    });
    if (swapCall.amountIn.token.isNative) {
      value = import_ethers57.BigNumber.from(swapCall.value).add(fee).toString();
    }
    fees.push(...swapCall.fees);
    routes.push(...swapCall.routes);
    priceImpact = swapCall.priceImpact;
    depositAmount = swapCall.amountOut;
    multicallItems.push({
      data: swapCall.data,
      to: swapCall.to,
      path: swapCall.amountIn.token.isNative ? import_addresses7.AddressZero : swapCall.amountIn.token.address,
      offset: swapCall.offset,
      isNative: swapCall.amountIn.token.isNative
    });
  }
  const depositCall = await getDepositCall({
    amountIn: depositAmount,
    config: config4,
    receiverAddress: to,
    refundAddress: evmTo
  });
  fees.push(...depositCall.fees);
  routes.push(...depositCall.routes);
  multicallItems.push({
    data: depositCall.data,
    to: depositCall.to,
    path: depositCall.amountIn.token.address,
    offset: depositCall.offset,
    isNative: depositCall.amountIn.token.isNative
  });
  const multicallCalldata = multicallRouter.interface.encodeFunctionData("multicall", [
    inTokenAmount.raw.toString(),
    multicallItems.map((i) => i.data),
    multicallItems.map((i) => i.to),
    multicallItems.map((i) => i.path),
    multicallItems.map((i) => i.offset),
    multicallItems.map((i) => i.isNative),
    evmTo
  ]);
  const data = feeCollector.interface.encodeFunctionData("onswap", [
    inTokenAmount.token.isNative ? import_addresses7.AddressZero : inTokenAmount.token.address,
    inTokenAmount.raw.toString(),
    multicallRouter.address,
    multicallRouter.address,
    multicallCalldata
  ]);
  const tokenAmountOut = depositCall.amountOut;
  return {
    tokenAmountOut,
    tokenAmountOutMin: tokenAmountOut,
    priceImpact,
    amountInUsd: depositAmount,
    approveTo: approveAddress,
    routes,
    fees,
    kind: "crosschain-swap",
    transactionType: "evm",
    transactionRequest: {
      chainId,
      to: feeCollectorAddress,
      data,
      value
    }
  };
}
async function getSwapCall(params) {
  const result = await onchainSwap(params);
  let value;
  let data;
  let routerAddress;
  if (result.transactionType === "tron") {
    value = result.transactionRequest.call_value.toString();
    const method = import_ethers57.utils.id(result.transactionRequest.function_selector).slice(0, 10);
    data = method + result.transactionRequest.raw_parameter;
    routerAddress = tronAddressToEvm(result.transactionRequest.contract_address);
  } else if (result.transactionType === "evm") {
    value = result.transactionRequest.value?.toString();
    data = result.transactionRequest.data;
    routerAddress = result.transactionRequest.to;
  } else {
    value = "";
    data = "";
    routerAddress = "";
  }
  return {
    ...result,
    priceImpact: result.priceImpact || new Percent("0", BIPS_BASE),
    amountInUsd: result.amountInUsd || params.tokenAmountIn,
    // Call type params
    amountIn: params.tokenAmountIn,
    amountOut: result.tokenAmountOut,
    to: routerAddress,
    data,
    value,
    offset: 0
  };
}
async function getDepositCall({
  amountIn,
  config: config4,
  receiverAddress,
  refundAddress
}) {
  const { src, dest, tokenOut } = config4;
  const chainFlipSdk = new import_swap2.SwapSDK({
    network: "mainnet",
    enabledFeatures: { dca: true }
  });
  checkMinAmount(amountIn);
  let quote;
  try {
    const { quotes } = await chainFlipSdk.getQuoteV2({
      amount: amountIn.raw.toString(),
      srcChain: src.chain,
      srcAsset: src.asset,
      destChain: dest.chain,
      destAsset: dest.asset,
      isVaultSwap: true,
      brokerCommissionBps: ChainFlipBrokerFeeBps
    });
    quote = quotes.find((quote2) => quote2.type === "REGULAR");
  } catch (e) {
    throw new ChainFlipError("getQuoteV2 error", e);
  }
  if (!quote) {
    throw new ChainFlipError("There is no REGULAR quote found");
  }
  let vaultSwapData;
  try {
    vaultSwapData = await chainFlipSdk.encodeVaultSwapData({
      quote,
      destAddress: receiverAddress,
      fillOrKillParams: {
        slippageTolerancePercent: quote.recommendedSlippageTolerancePercent,
        refundAddress,
        retryDurationBlocks: 100
      },
      brokerAccount: ChainFlipBrokerAccount,
      brokerCommissionBps: ChainFlipBrokerFeeBps
    });
  } catch (e) {
    throw new ChainFlipError("encodeVaultSwapData error", e);
  }
  const { chain } = vaultSwapData;
  if (chain !== "Arbitrum" && chain !== "Ethereum") {
    throw new ChainFlipError(`Incorrect source chain: ${chain}`);
  }
  const { calldata, to } = vaultSwapData;
  const { egressAmount } = quote;
  const { usdcFeeToken, solFeeToken, btcFeeToken } = getChainFlipFee(quote);
  return {
    amountIn,
    amountOut: new TokenAmount(tokenOut, egressAmount),
    to,
    data: calldata,
    value: "0",
    offset: 164,
    fees: [
      {
        provider: "chainflip-bridge",
        description: "ChainFlip fee",
        value: usdcFeeToken
      },
      {
        provider: "chainflip-bridge",
        description: "ChainFlip fee",
        value: solFeeToken
      },
      {
        provider: "chainflip-bridge",
        description: "ChainFlip fee",
        value: btcFeeToken
      }
    ],
    routes: [
      {
        provider: "chainflip-bridge",
        tokens: [amountIn.token, tokenOut]
      }
    ]
  };
}

// src/crosschain/swapExactIn/swapChainFlip/zappingCrossChainChainFlip.ts
var import_swap3 = require("@chainflip/sdk/swap");
var ZappingCrossChainChainFlip = class extends BaseSwapping {
  constructor(context, omniPoolConfig) {
    const { symbiosis, to, partnerAddress } = context;
    super(symbiosis, omniPoolConfig);
    this.dstAddress = to;
    this.partnerAddress = partnerAddress;
    this.chainFlipSdk = new import_swap3.SwapSDK({
      network: "mainnet",
      enabledFeatures: { dca: true }
    });
  }
  async doPostTransitAction() {
    checkMinAmount(this.transit.amountOut);
    const { src, dest } = this.config;
    let quote;
    try {
      const { quotes } = await this.chainFlipSdk.getQuoteV2({
        amount: this.transit.amountOut.raw.toString(),
        srcChain: src.chain,
        srcAsset: src.asset,
        destChain: dest.chain,
        destAsset: dest.asset,
        isVaultSwap: true,
        brokerCommissionBps: ChainFlipBrokerFeeBps
      });
      quote = quotes.find((quote2) => quote2.type === "REGULAR");
    } catch (e) {
      throw new ChainFlipError("getQuoteV2", e);
    }
    if (!quote) {
      throw new ChainFlipError("There is no REGULAR quote found");
    }
    this.chainFlipQuote = quote;
    try {
      this.chainFlipVaultSwapResponse = await this.chainFlipSdk.encodeVaultSwapData({
        quote,
        destAddress: this.dstAddress,
        fillOrKillParams: {
          slippageTolerancePercent: this.chainFlipQuote.recommendedSlippageTolerancePercent,
          refundAddress: this.evmTo,
          retryDurationBlocks: 100
        },
        brokerAccount: ChainFlipBrokerAccount,
        brokerCommissionBps: ChainFlipBrokerFeeBps
      });
    } catch (e) {
      throw new ChainFlipError("encodeVaultSwapData", e);
    }
  }
  async exactIn({
    tokenAmountIn,
    config: config4,
    from,
    slippage,
    deadline
  }) {
    const chainFlipTokenIn = config4.tokenIn;
    this.config = config4;
    this.multicallRouter = this.symbiosis.multicallRouter(chainFlipTokenIn.chainId);
    const transitTokenIn = this.symbiosis.transitToken(tokenAmountIn.token.chainId, this.omniPoolConfig);
    const transitTokenOut = this.symbiosis.transitToken(chainFlipTokenIn.chainId, this.omniPoolConfig);
    if (transitTokenIn.equals(transitTokenOut)) {
      throw new ChainFlipError("Same transit token");
    }
    this.evmTo = from;
    if (!isEvmChainId(tokenAmountIn.token.chainId)) {
      this.evmTo = this.symbiosis.config.refundAddress;
    }
    const result = await this.doExactIn({
      tokenAmountIn,
      tokenOut: chainFlipTokenIn,
      from,
      to: this.evmTo,
      slippage,
      deadline,
      transitTokenIn,
      transitTokenOut,
      partnerAddress: this.partnerAddress
    });
    const { egressAmount } = this.chainFlipQuote;
    const { usdcFeeToken, solFeeToken, btcFeeToken } = getChainFlipFee(this.chainFlipQuote);
    const amountOut = new TokenAmount(config4.tokenOut, egressAmount);
    return {
      ...result,
      tokenAmountOut: amountOut,
      tokenAmountOutMin: amountOut,
      routes: [
        ...result.routes,
        {
          provider: "chainflip-bridge",
          tokens: [chainFlipTokenIn, amountOut.token]
        }
      ],
      fees: [
        ...result.fees,
        {
          provider: "chainflip-bridge",
          description: "ChainFlip fee",
          value: usdcFeeToken
        },
        {
          provider: "chainflip-bridge",
          description: "ChainFlip fee",
          value: solFeeToken
        },
        {
          provider: "chainflip-bridge",
          description: "ChainFlip fee",
          value: btcFeeToken
        }
      ]
    };
  }
  tradeCTo() {
    return this.multicallRouter.address;
  }
  finalReceiveSide() {
    return this.multicallRouter.address;
  }
  finalCalldata() {
    return this.buildMulticall();
  }
  finalOffset() {
    return 36;
  }
  buildMulticall() {
    const callDatas = [];
    const receiveSides = [];
    const path = [];
    const offsets = [];
    const amount = this.transit.amountOut;
    if (this.tradeC) {
      callDatas.push(this.tradeC.callData);
      receiveSides.push(this.tradeC.routerAddress);
      path.push(this.tradeC.tokenAmountIn.token.address);
      offsets.push(this.tradeC.callDataOffset);
    }
    const { chain } = this.chainFlipVaultSwapResponse;
    if (chain !== "Arbitrum" && chain !== "Ethereum") {
      throw new ChainFlipError(`Incorrect source chain: ${chain}`);
    }
    const { tokenIn } = this.config;
    const { calldata, to } = this.chainFlipVaultSwapResponse;
    callDatas.push(calldata);
    receiveSides.push(to);
    path.push(tokenIn.address);
    offsets.push(164);
    return this.multicallRouter.interface.encodeFunctionData("multicall", [
      amount.raw.toString(),
      callDatas,
      receiveSides,
      path,
      offsets,
      this.evmTo
    ]);
  }
};

// src/crosschain/swapExactIn/swapChainFlip/solanaChainFlipSwap.ts
var CF_SOL_SOL = {
  chainId: 5 /* Solana */,
  assetId: 9 /* SOL */,
  chain: "Solana",
  asset: "SOL"
};
var CF_SOL_USDC = {
  chainId: 5 /* Solana */,
  assetId: 10 /* solUSDC */,
  chain: "Solana",
  asset: "USDC"
};
var CONFIGS = [
  {
    tokenIn: ARB_USDC,
    tokenOut: GAS_TOKEN[5426 /* SOLANA_MAINNET */],
    src: CF_ARB_USDC,
    dest: CF_SOL_SOL
  },
  {
    tokenIn: ARB_USDC,
    tokenOut: SOL_USDC,
    src: CF_ARB_USDC,
    dest: CF_SOL_USDC
  },
  {
    tokenIn: ETH_USDC,
    tokenOut: GAS_TOKEN[5426 /* SOLANA_MAINNET */],
    src: CF_ETH_USDC,
    dest: CF_SOL_SOL
  },
  {
    tokenIn: ETH_USDC,
    tokenOut: SOL_USDC,
    src: CF_ETH_USDC,
    dest: CF_SOL_USDC
  }
];
var CHAIN_FLIP_SOL_TOKENS = CONFIGS.map((i) => i.tokenIn);
async function solanaChainFlipSwap(context) {
  const { tokenAmountIn, from, to, symbiosis, slippage, deadline, selectMode, tokenOut } = context;
  const poolConfig = symbiosis.config.omniPools[0];
  const CF_CONFIGS = CONFIGS.filter((config4) => config4.tokenOut.equals(tokenOut));
  if (!CF_CONFIGS.length) {
    throw new ChainFlipError("No config found for tokenOut");
  }
  const promises = [];
  if (CF_CONFIGS.some((config4) => config4.tokenIn.chainId === tokenAmountIn.token.chainId)) {
    const onChainPromises = CF_CONFIGS.map((config4) => ZappingOnChainChainFlip(context, config4));
    promises.push(...onChainPromises);
  }
  const crossChainPromises = CF_CONFIGS.map((config4) => {
    const zapping = new ZappingCrossChainChainFlip(context, poolConfig);
    return zapping.exactIn({
      tokenAmountIn,
      config: config4,
      from,
      to,
      slippage,
      deadline
    });
  });
  promises.push(...crossChainPromises);
  return theBest(promises, selectMode);
}

// src/crosschain/swapExactIn/swapChainFlip/btcChainFlipSwap.ts
var CF_BTC_BTC = {
  chainId: 3 /* Bitcoin */,
  assetId: 5 /* BTC */,
  chain: "Bitcoin",
  asset: "BTC"
};
var CONFIGS2 = [
  {
    tokenIn: ARB_USDC,
    tokenOut: GAS_TOKEN[3652501241 /* BTC_MAINNET */],
    src: CF_ARB_USDC,
    dest: CF_BTC_BTC
  },
  {
    tokenIn: ETH_USDC,
    tokenOut: GAS_TOKEN[3652501241 /* BTC_MAINNET */],
    src: CF_ETH_USDC,
    dest: CF_BTC_BTC
  }
];
var CHAIN_FLIP_BTC_TOKENS = CONFIGS2.map((i) => i.tokenIn);
async function btcChainFlipSwap(context) {
  const { tokenAmountIn, from, to, symbiosis, slippage, deadline, selectMode, tokenOut } = context;
  const poolConfig = symbiosis.config.omniPools[0];
  const CF_CONFIGS = CONFIGS2.filter((config4) => config4.tokenOut.equals(tokenOut));
  if (!CF_CONFIGS.length) {
    throw new ChainFlipError("No config found for tokenOut");
  }
  const promises = [];
  if (CF_CONFIGS.some((config4) => config4.tokenIn.chainId === tokenAmountIn.token.chainId)) {
    const onChainPromises = CF_CONFIGS.map((config4) => ZappingOnChainChainFlip(context, config4));
    promises.push(...onChainPromises);
  }
  const crossChainPromises = CF_CONFIGS.map((config4) => {
    const zapping = new ZappingCrossChainChainFlip(context, poolConfig);
    return zapping.exactIn({
      tokenAmountIn,
      config: config4,
      from,
      to,
      slippage,
      deadline
    });
  });
  promises.push(...crossChainPromises);
  return theBest(promises, selectMode);
}

// src/crosschain/swapExactIn/toBtc/zappingBtcOnChain.ts
var import_ethers58 = require("ethers");
var import_addresses8 = require("@ethersproject/constants/lib/addresses");
async function zappingBtcOnChain(params, syBtc) {
  const { symbiosis, tokenAmountIn, tokenOut, to, from, partnerAddress } = params;
  const bitcoinAddress = getPkScript(to, tokenOut.chainId);
  const chainId = tokenAmountIn.token.chainId;
  const feeCollectorAddress = ZERO_FEE_COLLECTOR_ADDRESSES[chainId];
  if (!feeCollectorAddress) {
    throw new SdkError(`Fee collector not found for chain ${chainId}`);
  }
  const multicallRouterAddress = MULTICALL_ROUTER_V2[chainId];
  if (!multicallRouterAddress) {
    throw new SdkError(`MulticallRouterV2 not found for chain ${chainId}`);
  }
  const provider = symbiosis.getProvider(chainId);
  const multicallRouter = MulticallRouterV2__factory.connect(multicallRouterAddress, provider);
  const feeCollector = FeeCollector__factory.connect(feeCollectorAddress, provider);
  const [fee, approveTo] = await symbiosis.cache.get(
    ["feeCollector.fee", "feeCollector.onchainGateway", chainId.toString()],
    () => {
      return Promise.all([feeCollector.callStatic.fee(), feeCollector.callStatic.onchainGateway()]);
    },
    60 * 60
    // 1 hour
  );
  let inTokenAmount = tokenAmountIn;
  if (inTokenAmount.token.isNative) {
    const feeTokenAmount = new TokenAmount(inTokenAmount.token, fee.toString());
    if (inTokenAmount.lessThan(feeTokenAmount) || inTokenAmount.equalTo(feeTokenAmount)) {
      throw new AmountLessThanFeeError(`Min amount: ${feeTokenAmount.toSignificant()}`);
    }
    inTokenAmount = inTokenAmount.subtract(feeTokenAmount);
  }
  const calls = [];
  let value = fee.toString();
  let amountIn = tokenAmountIn;
  let amountInMin = tokenAmountIn;
  let priceImpact = new Percent("0", BIPS_BASE);
  if (!tokenAmountIn.token.equals(syBtc)) {
    const swapCall = await getSwapCall2({
      ...params,
      tokenOut: syBtc,
      from: multicallRouterAddress,
      to: multicallRouterAddress
    });
    calls.push(swapCall);
    amountIn = swapCall.amountOut;
    amountInMin = swapCall.amountOutMin;
    priceImpact = swapCall.priceImpact;
    if (swapCall.amountIn.token.isNative) {
      value = import_ethers58.BigNumber.from(swapCall.value).add(fee).toString();
    }
  }
  const partnerFeeCall = await getPartnerFeeCall({
    symbiosis,
    amountIn,
    amountInMin,
    partnerAddress
  });
  if (partnerFeeCall) {
    calls.push(partnerFeeCall);
    amountIn = partnerFeeCall.amountOut;
    amountInMin = partnerFeeCall.amountOutMin;
  }
  const volumeFeeCollector = symbiosis.getVolumeFeeCollector(amountIn.token.chainId, [3652501241 /* BTC_MAINNET */]);
  if (volumeFeeCollector) {
    const volumeFeeCall = getVolumeFeeCall({
      feeCollector: volumeFeeCollector,
      amountIn,
      amountInMin
    });
    calls.push(volumeFeeCall);
    amountIn = volumeFeeCall.amountOut;
    amountInMin = volumeFeeCall.amountOutMin;
  }
  const burnCall = await getBurnCall({
    symbiosis,
    amountIn,
    amountInMin,
    tokenOut,
    bitcoinAddress
  });
  calls.push(burnCall);
  await symbiosis.checkDustLimit(burnCall.amountOutMin);
  const multicallCalldata = multicallRouter.interface.encodeFunctionData("multicall", [
    inTokenAmount.raw.toString(),
    [...calls.map((i) => i.data)],
    [...calls.map((i) => i.to)],
    [...calls.map((i) => i.amountIn.token.isNative ? import_addresses8.AddressZero : i.amountIn.token.address)],
    [...calls.map((i) => i.offset)],
    [...calls.map((i) => i.amountIn.token.isNative)],
    from
  ]);
  const data = feeCollector.interface.encodeFunctionData("onswap", [
    inTokenAmount.token.isNative ? import_addresses8.AddressZero : inTokenAmount.token.address,
    inTokenAmount.raw.toString(),
    multicallRouter.address,
    multicallRouter.address,
    // inTokenAmount.token.isNative ? AddressZero : result.approveTo,
    multicallCalldata
  ]);
  return {
    kind: "crosschain-swap",
    tokenAmountOut: burnCall.amountOut,
    tokenAmountOutMin: burnCall.amountOutMin,
    priceImpact,
    approveTo,
    routes: calls.map((i) => i.routes).flat(),
    fees: calls.map((i) => i.fees).flat(),
    transactionType: "evm",
    transactionRequest: {
      chainId,
      to: feeCollectorAddress,
      data,
      value
    }
  };
}
async function getSwapCall2(params) {
  const result = await onchainSwap(params);
  let value;
  let data;
  let routerAddress;
  if (result.transactionType === "tron") {
    value = result.transactionRequest.call_value.toString();
    const method = import_ethers58.utils.id(result.transactionRequest.function_selector).slice(0, 10);
    data = method + result.transactionRequest.raw_parameter;
    routerAddress = tronAddressToEvm(result.transactionRequest.contract_address);
  } else if (result.transactionType === "evm") {
    value = result.transactionRequest.value?.toString();
    data = result.transactionRequest.data;
    routerAddress = result.transactionRequest.to;
  } else {
    throw new SdkError("Swap call is possible on EVM or Tron chains");
  }
  const { routes, fees, tokenAmountOut: amountOut, tokenAmountOutMin: amountOutMin, priceImpact } = result;
  return {
    priceImpact,
    amountIn: params.tokenAmountIn,
    amountOut,
    amountOutMin,
    to: routerAddress,
    data,
    value,
    offset: 0,
    routes,
    fees
  };
}
async function getBurnCall({
  symbiosis,
  amountIn,
  amountInMin,
  tokenOut,
  bitcoinAddress
}) {
  const synthesis = symbiosis.synthesis(amountIn.token.chainId);
  const [fee, threshold] = await Promise.all([
    getToBtcFee(amountIn, synthesis, symbiosis.cache),
    getThreshold(amountIn, synthesis, symbiosis.cache)
  ]);
  if (amountIn.lessThan(fee)) {
    throw new AmountLessThanFeeError(`Min amount: ${fee.toSignificant()} ${fee.token.symbol}`);
  }
  if (amountIn.lessThan(threshold)) {
    throw new AmountTooLowError(`Min amount: ${threshold.toSignificant()} ${threshold.token.symbol}`);
  }
  const data = synthesis.interface.encodeFunctionData("burnSyntheticTokenBTC", [
    fee.raw.toString(),
    // _stableBridgingFee must be >= minBtcFee
    "0",
    // _amount will be patched
    bitcoinAddress,
    // _to
    amountIn.token.address,
    // _stoken
    symbiosis.clientId
    // _clientID
  ]);
  const amountOut = new TokenAmount(tokenOut, amountIn.subtract(fee).raw);
  const amountOutMin = new TokenAmount(tokenOut, amountInMin.subtract(fee).raw);
  return {
    priceImpact: new Percent("0", BIPS_BASE),
    amountIn,
    amountOut,
    amountOutMin,
    to: synthesis.address,
    data,
    value: "0",
    offset: 68,
    fees: [
      {
        provider: "symbiosis",
        description: "Burn fee",
        value: fee
      }
    ],
    routes: [
      {
        provider: "symbiosis",
        tokens: [amountIn.token, tokenOut]
      }
    ]
  };
}

// src/crosschain/swapExactIn/toBtc/burnSyntheticBtc.ts
async function burnSyntheticBtc(context) {
  const { tokenAmountIn, symbiosis, to, selectMode, disableSrcChainRouting, disableDstChainRouting } = context;
  const promises = [];
  symbiosis.config.btcConfigs.forEach(({ btc, symBtc }) => {
    const syBtc = symbiosis.getRepresentation(btc, symBtc.chainId);
    if (!syBtc) {
      return;
    }
    if (syBtc.deprecated) {
      return;
    }
    if (tokenAmountIn.token.chainId === syBtc.chainId) {
      promises.push(zappingBtcOnChain(context, syBtc));
      return;
    }
    symbiosis.config.omniPools.filter((i) => i.generalPurpose || i.coinGeckoId === "bitcoin").forEach((poolConfig) => {
      const combinations = symbiosis.getTransitCombinations({
        poolConfig,
        tokenIn: tokenAmountIn.token,
        tokenOut: syBtc,
        disableSrcChainRouting,
        disableDstChainRouting
      });
      combinations.forEach(({ transitTokenIn, transitTokenOut }) => {
        const zappingBtc = new ZappingBtc(symbiosis, poolConfig);
        const { from, slippage, deadline, partnerAddress } = context;
        const promise = zappingBtc.exactIn({
          tokenAmountIn,
          syBtc,
          from,
          to,
          slippage,
          deadline,
          transitTokenIn,
          transitTokenOut,
          partnerAddress
        });
        promises.push(promise);
      });
    });
  });
  return theBest(promises, selectMode);
}

// src/crosschain/swapExactIn/thorChainSwap.ts
var ETH_USDC2 = new Token2({
  address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
  chainId: 1 /* ETH_MAINNET */,
  decimals: 6,
  name: "USDC",
  symbol: "USDC",
  icons: {
    large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
    small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
  }
});
var AVAX_USDC = new Token2({
  address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
  chainId: 43114 /* AVAX_MAINNET */,
  decimals: 6,
  name: "USDC",
  symbol: "USDC",
  icons: {
    large: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png",
    small: "https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png"
  }
});
var THOR_TOKENS = [ETH_USDC2, AVAX_USDC];
async function thorChainSwap(context) {
  const { tokenAmountIn, from, to, symbiosis, slippage, deadline, selectMode, partnerAddress } = context;
  const poolConfig = symbiosis.config.omniPools[0];
  const promises = THOR_TOKENS.map((thorToken) => {
    const zappingThor = new ZappingThor(symbiosis, poolConfig);
    return zappingThor.exactIn({
      tokenAmountIn,
      thorTokenIn: thorToken,
      from,
      to,
      slippage,
      deadline,
      partnerAddress
    });
  });
  return theBest(promises, selectMode);
}

// src/crosschain/swapExactIn/toBtcSwap.ts
function isThorChainAvailable(chainId) {
  return chainId === 3652501241 /* BTC_MAINNET */;
}
function isNativeAvailable(chainId) {
  return isBtcChainId(chainId);
}
function isChainFlipAvailable(chainId) {
  return isBtcChainId(chainId);
}
function isToBtcSwapSupported(context) {
  const { tokenOut } = context;
  return isThorChainAvailable(tokenOut.chainId) || isNativeAvailable(tokenOut.chainId);
}
async function toBtcSwap(context) {
  const { tokenOut, selectMode } = context;
  const promises = [];
  if (isNativeAvailable(tokenOut.chainId)) {
    promises.push(burnSyntheticBtc(context));
  }
  if (isThorChainAvailable(tokenOut.chainId)) {
    promises.push(thorChainSwap(context));
  }
  if (isChainFlipAvailable(tokenOut.chainId)) {
    promises.push(btcChainFlipSwap(context));
  }
  return theBest(promises, selectMode);
}

// src/crosschain/swapExactIn/fromBtcSwap.ts
var import_addresses9 = require("@ethersproject/constants/lib/addresses");
var import_ethers59 = require("ethers");
var import_utils28 = require("ethers/lib/utils");
var import_bitcoin_address_validation2 = require("bitcoin-address-validation");
var import_crypto = require("crypto");
function isFromBtcSwapSupported(context) {
  const { tokenAmountIn, symbiosis } = context;
  if (!isBtcChainId(tokenAmountIn.token.chainId)) {
    return false;
  }
  symbiosis.validateLimits(tokenAmountIn);
  return true;
}
async function fromBtcSwap(context) {
  const { tokenAmountIn, tokenOut, selectMode, symbiosis } = context;
  if (!isBtcChainId(tokenAmountIn.token.chainId)) {
    throw new SdkError(`tokenAmountIn is not BTC token`);
  }
  const promises = [];
  const allConfigs = symbiosis.config.btcConfigs.filter((i) => i.symBtc.chainId !== 324 /* ZKSYNC_MAINNET */);
  const chainOutConfigs = allConfigs.filter((i) => i.symBtc.chainId === tokenOut.chainId);
  const configs = chainOutConfigs.length > 0 ? chainOutConfigs : allConfigs;
  configs.forEach((btcConfig) => {
    promises.push(fromBtcSwapInternal(context, btcConfig));
  });
  return theBest(promises, selectMode);
}
async function fromBtcSwapInternal(context, btcConfig) {
  const { tokenAmountIn, tokenOut, symbiosis, to, refundAddress, generateBtcDepositAddress } = context;
  const { btc, symBtc, forwarderUrl } = btcConfig;
  const syBtcSynth = symbiosis.getRepresentation(btc, symBtc.chainId);
  if (!syBtcSynth) {
    throw new SdkError(`syBTC as synth wasn't found`);
  }
  const syBtc = symbiosis.tokens().find((token) => token.equals(syBtcSynth) && !token.isSynthetic);
  if (!syBtc) {
    throw new SdkError(`syBTC as original wasn't found`);
  }
  if (!isEvmChainId(tokenOut.chainId) && !isTronChainId(tokenOut.chainId)) {
    throw new SdkError(`Only EVM chains are allowed to swap from BTC`);
  }
  if (!(0, import_utils28.isAddress)(to)) {
    throw new SdkError(`Incorrect destination address was provided`);
  }
  if (refundAddress && !(0, import_bitcoin_address_validation2.validate)(refundAddress)) {
    throw new SdkError(`Incorrect refund address was provided`);
  }
  const btcAmountRaw = tokenAmountIn.raw.toString();
  let syBtcAmount = new TokenAmount(syBtc, btcAmountRaw);
  const fees = [];
  const btcPortalFeeRaw = await getBtcPortalFee(forwarderUrl, symbiosis.cache);
  const btcPortalFee = new TokenAmount(syBtc, btcPortalFeeRaw);
  if (syBtcAmount.lessThan(btcPortalFee)) {
    throw new AmountLessThanFeeError(
      `Amount ${syBtcAmount.toSignificant()} ${syBtcAmount.token.symbol} less than btcPortalFee ${btcPortalFee.toSignificant()} ${btcPortalFee.token.symbol}`
    );
  }
  syBtcAmount = syBtcAmount.subtract(btcPortalFee);
  fees.push({
    provider: "symbiosis",
    description: "BTC Portal fee",
    value: new TokenAmount(btc, btcPortalFee.raw)
  });
  const mintFeeRaw = "1000";
  const mintFee = new TokenAmount(syBtc, mintFeeRaw.toString());
  if (syBtcAmount.lessThan(mintFee)) {
    throw new AmountLessThanFeeError(
      `Amount ${syBtcAmount.toSignificant()} ${syBtcAmount.token.symbol} less than mintFee ${mintFee.toSignificant()} ${mintFee.token.symbol}`
    );
  }
  syBtcAmount = syBtcAmount.subtract(mintFee);
  fees.push({
    provider: "symbiosis",
    description: "Mint fee",
    value: mintFee
  });
  const { tail: initialTail } = await buildTail(context, btcConfig, syBtcAmount);
  const btcForwarderFeeRaw = await estimateWrap({
    forwarderUrl,
    portalFee: btcPortalFeeRaw,
    stableBridgingFee: mintFeeRaw,
    tail: initialTail,
    to,
    amount: btcAmountRaw,
    refundAddress,
    clientId: symbiosis.clientId
  });
  const btcForwarderFeeMax = new TokenAmount(
    syBtc,
    btcForwarderFeeRaw.mul(200).div(100).toString()
    // +100% of fee
  );
  if (syBtcAmount.lessThan(btcForwarderFeeMax)) {
    throw new AmountLessThanFeeError(
      `Amount ${syBtcAmount.toSignificant()} less than btcForwarderFeeMax ${btcForwarderFeeMax.toSignificant()}`
    );
  }
  syBtcAmount = syBtcAmount.subtract(btcForwarderFeeMax);
  fees.push({
    provider: "symbiosis",
    description: "BTC Forwarder fee",
    value: new TokenAmount(btc, btcForwarderFeeMax.raw)
  });
  const {
    tail,
    fees: swapFees,
    amountOut,
    amountOutMin,
    priceImpact,
    routes
  } = await buildTail(context, btcConfig, syBtcAmount);
  fees.push(...swapFees);
  let validUntil = "";
  let revealAddress = "";
  if (generateBtcDepositAddress) {
    const wrapResponse = await wrap2({
      forwarderUrl,
      portalFee: btcPortalFeeRaw,
      stableBridgingFee: mintFeeRaw,
      tail,
      to,
      feeLimit: btcForwarderFeeMax.raw.toString(),
      amount: btcAmountRaw,
      refundAddress,
      clientId: symbiosis.clientId
    });
    validUntil = wrapResponse.validUntil;
    revealAddress = wrapResponse.revealAddress;
  }
  return {
    kind: "from-btc-swap",
    transactionType: "btc",
    transactionRequest: {
      depositAddress: revealAddress,
      validUntil,
      tokenAmountOut: amountOut
    },
    tokenAmountOut: amountOut,
    tokenAmountOutMin: amountOutMin,
    priceImpact,
    approveTo: import_addresses9.AddressZero,
    amountInUsd: amountOut,
    routes: [
      {
        provider: "symbiosis",
        tokens: [btc, syBtc]
      },
      ...routes
    ],
    fees
  };
}
async function buildTail(context, btcConfig, syBtcAmount) {
  const { symbiosis, partnerAddress, to, tokenOut } = context;
  const { symBtc } = btcConfig;
  const chainId = syBtcAmount.token.chainId;
  const calls = [];
  const fees = [];
  const routes = [];
  const partnerFeeCall = await getPartnerFeeCall({
    symbiosis,
    amountIn: syBtcAmount,
    partnerAddress
  });
  if (partnerFeeCall) {
    syBtcAmount = partnerFeeCall.amountOut;
    calls.push(partnerFeeCall);
    fees.push(...partnerFeeCall.fees);
  }
  const feeCollector = symbiosis.getVolumeFeeCollector(syBtcAmount.token.chainId, [3652501241 /* BTC_MAINNET */]);
  if (feeCollector) {
    const volumeFeeCall = getVolumeFeeCall({
      feeCollector,
      amountIn: syBtcAmount
    });
    syBtcAmount = volumeFeeCall.amountOut;
    calls.push(volumeFeeCall);
    fees.push(...volumeFeeCall.fees);
  }
  const isOnChain = tokenOut.chainId === chainId;
  const buildSwapFunc = isOnChain ? buildOnChainSwap : buildCrossChainSwap;
  const swapCalls = await buildSwapFunc(context, syBtcAmount, btcConfig);
  let amountOut = syBtcAmount;
  let amountOutMin = syBtcAmount;
  let priceImpact = new Percent("0", BIPS_BASE);
  if (swapCalls.length > 0) {
    calls.push(...swapCalls);
    fees.push(...swapCalls.map((i) => i.fees).flat());
    routes.push(...swapCalls.map((i) => i.routes).flat());
    amountOut = swapCalls[swapCalls.length - 1].amountOut;
    amountOutMin = swapCalls[swapCalls.length - 1].amountOutMin;
    priceImpact = swapCalls[swapCalls.length - 1].priceImpact;
  }
  const multicallRouter = symbiosis.multicallRouter(chainId);
  const multicallCalldata = multicallRouter.interface.encodeFunctionData("multicall", [
    "0",
    // will be patched
    [...calls.map((i) => i.data)],
    [...calls.map((i) => i.to)],
    [...calls.map((i) => i.amountIn.token.isNative ? import_addresses9.AddressZero : i.amountIn.token.address)],
    [...calls.map((i) => i.offset)],
    to
  ]);
  const symBtcContract = SymBtc__factory.connect(symBtc.address, symbiosis.getProvider(chainId));
  const tail = await symBtcContract.callStatic.packBTCTransactionTail({
    receiveSide: multicallRouter.address,
    receiveSideCalldata: multicallCalldata,
    receiveSideOffset: 36
  });
  return { tail, fees, routes, priceImpact, amountOut, amountOutMin };
}
async function buildOnChainSwap(context, syBtcAmount, btcConfig) {
  const { to, tokenAmountIn, tokenOut, symbiosis } = context;
  if (syBtcAmount.token.equals(tokenOut)) {
    return [];
  }
  const aggregatorTrade = new AggregatorTrade({
    ...context,
    tokenAmountIn: syBtcAmount,
    tokenAmountInMin: syBtcAmount,
    from: to,
    // there is not from address, set user's address
    clientId: symbiosis.clientId,
    preferOneInchUsage: isUseOneInchOnly(tokenAmountIn.token, tokenOut)
  });
  await aggregatorTrade.init();
  const dep = context.symbiosis.depository(syBtcAmount.token.chainId);
  if (dep) {
    const transferCall = ERC20__factory.createInterface().encodeFunctionData("transfer", [
      to,
      aggregatorTrade.amountOutMin.toBigInt()
    ]);
    const call = await buildDepositCall({
      context,
      dep,
      syBtcAmount,
      tokenAmountOutMin: aggregatorTrade.amountOutMin,
      btcConfig,
      target: aggregatorTrade.amountOutMin.token.address,
      targetCalldata: transferCall,
      targetOffset: 68n
    });
    call.fees = aggregatorTrade.fees || [];
    call.priceImpact = aggregatorTrade.priceImpact;
    return [call];
  } else {
    return [
      {
        to: aggregatorTrade.routerAddress,
        data: aggregatorTrade.callData,
        offset: aggregatorTrade.callDataOffset,
        fees: aggregatorTrade.fees || [],
        amountOut: aggregatorTrade.amountOut,
        amountOutMin: aggregatorTrade.amountOutMin,
        amountIn: syBtcAmount,
        routes: [
          {
            provider: aggregatorTrade.tradeType,
            tokens: [syBtcAmount.token, aggregatorTrade.tokenOut]
          }
        ],
        value: "0",
        priceImpact: aggregatorTrade.priceImpact
      }
    ];
  }
}
async function buildCrossChainSwap(context, syBtcAmount, btcConfig) {
  const { to } = context;
  const swapExactInResult = await bestPoolSwapping({
    ...context,
    tokenAmountIn: syBtcAmount,
    from: to,
    // to be able to revert a tx
    tradeAContext: "multicallRouter",
    partnerAddress: void 0
    // don't need to call partner fee twice
  });
  const data = swapExactInResult.transactionRequest.data;
  const result = MetaRouter__factory.createInterface().decodeFunctionData("metaRoute", data);
  const tx = result._metarouteTransaction;
  const dep = context.symbiosis.depository(syBtcAmount.token.chainId);
  if (dep) {
    if (swapExactInResult.tradeA) {
      const call = await buildDepositCall({
        context,
        dep,
        syBtcAmount,
        tokenAmountOutMin: swapExactInResult.tradeA.amountOutMin,
        btcConfig,
        target: tx.relayRecipient,
        targetCalldata: tx.otherSideCalldata,
        targetOffset: 100n
        // metaSynthesize struct size
      });
      call.fees = swapExactInResult.fees || [];
      call.priceImpact = swapExactInResult.priceImpact;
      return [call];
    } else {
      return [
        {
          to: tx.relayRecipient,
          data: tx.otherSideCalldata,
          offset: 100,
          // metaSynthesize struct
          fees: swapExactInResult.fees,
          routes: swapExactInResult.routes,
          value: "0",
          amountIn: syBtcAmount,
          amountOut: swapExactInResult.tokenAmountOut,
          amountOutMin: swapExactInResult.tokenAmountOutMin,
          priceImpact: swapExactInResult.priceImpact
        }
      ];
    }
  } else {
    const calls = [];
    let amountIn = syBtcAmount;
    if (swapExactInResult.tradeA) {
      calls.push({
        to: tx.firstDexRouter,
        data: tx.firstSwapCalldata,
        offset: swapExactInResult.tradeA.callDataOffset,
        fees: [],
        routes: [],
        value: "0",
        amountIn,
        amountOut: swapExactInResult.tradeA.amountOut,
        amountOutMin: swapExactInResult.tradeA.amountOutMin,
        priceImpact: new Percent("0", BIPS_BASE)
      });
      amountIn = swapExactInResult.tradeA.amountOut;
    }
    calls.push({
      to: tx.relayRecipient,
      data: tx.otherSideCalldata,
      offset: 100,
      // metaSynthesize struct
      fees: swapExactInResult.fees,
      routes: swapExactInResult.routes,
      value: "0",
      amountIn,
      amountOut: swapExactInResult.tokenAmountOut,
      amountOutMin: swapExactInResult.tokenAmountOutMin,
      priceImpact: swapExactInResult.priceImpact
    });
    return calls;
  }
}
async function buildDepositCall({
  context,
  dep,
  syBtcAmount,
  tokenAmountOutMin,
  btcConfig,
  target,
  targetCalldata,
  targetOffset
}) {
  const { to, refundAddress } = context;
  const fromToken = syBtcAmount.token;
  const toToken = tokenAmountOutMin.token;
  const swapCondition = await dep.swapUnlocker.encodeCondition({
    outToken: toToken.address,
    // destination token
    outMinAmount: tokenAmountOutMin.toBigInt(),
    target,
    // target to send destination token after validation
    targetCalldata,
    // calldata to call on target. If it's empty then tokens are simply transferred
    targetOffset
    // offset to patch-in amountTo in targetCalldata
  });
  const withdrawCondition = await dep.withdrawUnlocker.encodeCondition({
    recipient: to
    // owner can withdraw fromToken directly
  });
  const unlockers = [
    {
      unlocker: dep.swapUnlocker.address,
      condition: swapCondition
    },
    {
      unlocker: dep.withdrawUnlocker.address,
      condition: withdrawCondition
    }
  ];
  if (refundAddress !== void 0 && refundAddress !== "" && dep.btcRefundUnlocker !== void 0) {
    const refundScript = getPkScript(refundAddress, btcConfig.btc.chainId);
    const btcRefundCondition = await dep.btcRefundUnlocker.encodeCondition({
      refundAddress: refundScript
    });
    unlockers.push({
      unlocker: dep.btcRefundUnlocker.address,
      condition: btcRefundCondition
    });
  }
  const condition = await dep.branchedUnlocker.encodeCondition({
    unlockers
  });
  const nonce = BigInt(`0x${(0, import_crypto.randomBytes)(32).toString("hex")}`);
  const deposit = {
    token: fromToken.address,
    // source token
    amount: syBtcAmount.toBigInt(),
    // amount of fromToken
    nonce
    // To be able to create identical deposits
  };
  const unlocker = {
    unlocker: dep.branchedUnlocker.address,
    condition
  };
  const lockTx = await dep.depository.populateTransaction.lock(deposit, unlocker);
  return {
    to: dep.depository.address,
    data: lockTx.data,
    offset: 4 + 32 + 32,
    // Offset to `amount` field in DepositoryTypes.Deposit
    routes: [
      {
        provider: "depository",
        tokens: [syBtcAmount.token, tokenAmountOutMin.token]
      }
    ],
    value: "0",
    amountIn: syBtcAmount,
    amountOut: tokenAmountOutMin,
    amountOutMin: tokenAmountOutMin,
    fees: [],
    priceImpact: new Fraction(0n)
  };
}
async function estimateWrap({
  forwarderUrl,
  portalFee,
  stableBridgingFee,
  tail,
  to,
  amount,
  refundAddress,
  clientId
}) {
  const estimateWrapApiUrl = new URL(`${forwarderUrl}/estimate-wrap`);
  const myHeaders = new Headers({
    accept: "application/json",
    "Content-Type": "application/json"
  });
  const body = {
    amount: Number(amount),
    info: {
      portalFee: Number(portalFee),
      op: 0,
      // 0 - wrap operation
      stableBridgingFee: Number(stableBridgingFee),
      tail: encodeTail(tail),
      to
    },
    clientId
  };
  if (refundAddress) {
    body.refundAddress = refundAddress;
  }
  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: JSON.stringify(body)
  };
  const response = await fetch(`${estimateWrapApiUrl}`, requestOptions);
  if (!response.ok) {
    const text = await response.text();
    const json = JSON.parse(text);
    throw new SdkError(json.message ?? text);
  }
  const { revealTxFee } = await response.json();
  return import_ethers59.BigNumber.from(revealTxFee);
}
async function wrap2({
  forwarderUrl,
  portalFee,
  stableBridgingFee,
  tail,
  to,
  feeLimit,
  amount,
  refundAddress,
  clientId
}) {
  const body = {
    info: {
      portalFee: Number(portalFee),
      op: 0,
      // 0 - is wrap operation
      stableBridgingFee: Number(stableBridgingFee),
      tail: encodeTail(tail),
      to
    },
    clientId,
    feeLimit: Number(feeLimit),
    amount: Number(amount)
  };
  if (refundAddress) {
    body.refundAddress = refundAddress;
  }
  const wrapApiUrl = new URL(`${forwarderUrl}/wrap`);
  const myHeaders = new Headers({
    accept: "application/json",
    "Content-Type": "application/json"
  });
  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: JSON.stringify(body)
  };
  const response = await fetch(`${wrapApiUrl}`, requestOptions);
  if (!response.ok) {
    const text = await response.text();
    const json = JSON.parse(text);
    throw new SdkError(json.message ?? text);
  }
  const data = await response.json();
  const { revealAddress, validUntil, legacyAddress } = data;
  return {
    revealAddress,
    validUntil,
    legacyAddress
  };
}
function encodeTail(tail) {
  return Buffer.from(tail.slice(2), "hex").toString("base64");
}

// src/crosschain/swapExactIn/toSolanaSwap.ts
function isChainFlipAvailable2(chainId) {
  return isSolanaChainId(chainId);
}
function isToSolanaSwapSupported(context) {
  const { tokenOut } = context;
  return isChainFlipAvailable2(tokenOut.chainId);
}
async function toSolanaSwap(context) {
  const { tokenOut, selectMode } = context;
  const promises = [];
  if (isChainFlipAvailable2(tokenOut.chainId)) {
    promises.push(solanaChainFlipSwap(context));
  }
  return theBest(promises, selectMode);
}

// src/crosschain/swapExactIn/swapExactIn.ts
async function swapExactIn(params) {
  const { tokenAmountIn, tokenOut } = params;
  if (isTronChainId(tokenAmountIn.token.chainId)) {
    params.from = tronAddressToEvm(params.from);
  }
  if (isTronChainId(tokenOut.chainId)) {
    params.to = tronAddressToEvm(params.to);
  }
  if (tokenAmountIn.token.equals(tokenOut)) {
    throw new Error("Cannot swap same tokens");
  }
  if (isWrapSupported(params)) {
    return wrap(params);
  }
  if (isUnwrapSupported(params)) {
    return unwrap(params);
  }
  if (isOnchainSwapSupported(params)) {
    if (isFeeCollectorSwapSupported(params)) {
      return feeCollectorSwap(params);
    }
    return onchainSwap(params);
  }
  if (isFromBtcSwapSupported(params)) {
    return fromBtcSwap(params);
  }
  if (isToBtcSwapSupported(params)) {
    return toBtcSwap(params);
  }
  if (isToSolanaSwapSupported(params)) {
    return toSolanaSwap(params);
  }
  if (isBridgeSupported(params)) {
    return bridge(params);
  }
  if (isTonChainId(tokenOut.chainId)) {
    return toTonSwap(params);
  }
  return crosschainSwap(params);
}

// src/crosschain/symbiosis.ts
var import_ton3 = require("@ton/ton");
var import_ton_access = require("@orbs-network/ton-access");
var defaultFetch = (url, init) => {
  return (0, import_isomorphic_unfetch2.default)(url, init);
};
var VOLUME_FEE_COLLECTORS = [
  // BNB chain
  {
    chainId: 56 /* BSC_MAINNET */,
    address: "0x3743c756b64ECd0770f1d4f47696A73d2A46dcbe",
    feeRate: "2000000000000000",
    // 0.2%
    eligibleChains: [3652501241 /* BTC_MAINNET */]
  }
];
var Symbiosis = class {
  setMetrics({
    symbiosisSdkDuration,
    priceImpactSwap
  }) {
    this.sdkDurationMetric = symbiosisSdkDuration;
    this.priceImpactSwapMetric = priceImpactSwap;
  }
  setErrorCounter(counter) {
    this.counter = counter;
  }
  setSignature(signature) {
    this.signature = signature;
  }
  setFeesConfig(feesConfig) {
    this.feesConfig = feesConfig;
  }
  setClientId(clientId) {
    this.clientId = import_ethers60.utils.formatBytes32String(clientId);
  }
  getBtcConfig(btc) {
    const config4 = this.config.btcConfigs.find((i) => i.btc.equals(btc));
    if (!config4) {
      throw new SdkError("BTC config not found");
    }
    return config4;
  }
  async getDiscountTiers() {
    const response = await this.fetch(`${this.config.advisor.url}/v1/swap/discount/tiers`);
    if (!response.ok) {
      const text = await response.text();
      const json = JSON.parse(text);
      throw new SdkError(json.message ?? text);
    }
    return await response.json();
  }
  async getDiscountChains() {
    const response = await this.fetch(`${this.config.advisor.url}/v1/swap/discount/chains`);
    if (!response.ok) {
      const text = await response.text();
      const json = JSON.parse(text);
      throw new SdkError(json.message ?? text);
    }
    return await response.json();
  }
  async getDiscount(signature) {
    const response = await this.fetch(`${this.config.advisor.url}/v1/swap/discount`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        signature
      })
    });
    if (!response.ok) {
      const text = await response.text();
      const json2 = JSON.parse(text);
      throw new SdkError(json2.message ?? text);
    }
    const json = await response.json();
    return json["percent"];
  }
  async checkDustLimit(amount) {
    const btcConfig = this.config.btcConfigs.filter((i) => i.symBtc.chainId !== amount.token.chainId)[0];
    if (!btcConfig) {
      throw new SdkError(`BTC config for chain ${amount.token.chainId} not found`);
    }
    const dustLimit = await getUnwrapDustLimit(btcConfig.forwarderUrl, this.cache);
    if (import_ethers60.BigNumber.from(amount.raw.toString()).lt(dustLimit)) {
      throw new AmountLessThanFeeError(`amountOut must be greater than dust limit: ${dustLimit} satoshi`);
    }
  }
  constructor(configName, clientId, overrideConfig) {
    this.configName = configName;
    if (overrideConfig?.config) {
      this.config = overrideConfig.config;
    } else {
      if (configName === "mainnet") {
        this.config = structuredClone(config);
      } else if (configName === "testnet") {
        this.config = structuredClone(config2);
      } else if (configName === "dev") {
        this.config = structuredClone(config3);
      } else {
        throw new SdkError("Unknown config name");
      }
      if (overrideConfig?.chains) {
        const { chains: chains2 } = overrideConfig;
        this.config.chains = this.config.chains.map((chainConfig) => {
          const found = chains2.find((i) => i.id === chainConfig.id);
          if (found) {
            chainConfig.rpc = found.rpc;
            chainConfig.headers = found.headers;
          }
          return chainConfig;
        });
      }
      if (overrideConfig?.limits) {
        this.config.limits = overrideConfig.limits;
      }
      if (overrideConfig?.advisor) {
        this.config.advisor = overrideConfig.advisor;
      }
      if (overrideConfig?.btcConfigs) {
        this.config.btcConfigs = overrideConfig.btcConfigs;
      }
    }
    this.oneInchConfig = {
      apiUrl: "https://api.1inch.dev/swap/v5.2/",
      apiKeys: []
      // <PUT_YOUR_API_KEY_HERE>
    };
    if (overrideConfig?.oneInchConfig) {
      this.oneInchConfig = overrideConfig.oneInchConfig;
    }
    this.openOceanConfig = {
      apiUrl: "https://open-api.openocean.finance/v4",
      apiKeys: []
      // <PUT_YOUR_API_KEY_HERE>
    };
    if (overrideConfig?.openOceanConfig) {
      this.openOceanConfig = overrideConfig.openOceanConfig;
    }
    this.volumeFeeCollectors = VOLUME_FEE_COLLECTORS;
    if (overrideConfig?.volumeFeeCollectors) {
      this.volumeFeeCollectors = overrideConfig.volumeFeeCollectors;
    }
    this.fetch = overrideConfig?.fetch ?? defaultFetch;
    this.cache = overrideConfig?.cache || new Cache();
    this.configCache = new ConfigCache(overrideConfig?.configCache || configName);
    this.clientId = import_ethers60.utils.formatBytes32String(clientId);
    this.providers = new Map(
      this.config.chains.map((chain) => {
        const rpc = isTronChainId(chain.id) ? `${chain.rpc}/jsonrpc` : chain.rpc;
        const connection = { url: rpc };
        if (chain?.headers) {
          connection.headers = chain.headers;
        }
        return [chain.id, new import_providers.StaticJsonRpcProvider(connection, chain.id)];
      })
    );
  }
  createMetricTimer() {
    if (!this.sdkDurationMetric) {
      return;
    }
    const endTimer = this.sdkDurationMetric.startTimer();
    return ({ tokenIn, tokenOut, operation, kind }) => endTimer({
      operation,
      kind,
      chain_id_from: tokenIn?.chainId ?? "",
      chain_id_to: tokenOut?.chainId ?? ""
    });
  }
  trackAggregatorError({ provider, reason, chain_id }) {
    if (!this.counter) {
      return;
    }
    const partner_id = import_ethers60.utils.parseBytes32String(this.clientId);
    const cleanReason = aggregatorErrorToText(reason);
    this.counter.inc({ provider, reason: cleanReason, chain_id, partner_id });
  }
  trackPriceImpactSwap({ name_from, name_to, token_amount, price_impact }) {
    if (!this.priceImpactSwapMetric) {
      return;
    }
    const amountBucket = [
      1e-3,
      0.01,
      0.1,
      0.5,
      1,
      5,
      10,
      50,
      100,
      1e3,
      3e3,
      5e3,
      1e4,
      2e4,
      5e4,
      1e5,
      2e5,
      5e5,
      1e6
    ];
    const findNearestAmountIndex = (amount) => {
      if (amount <= amountBucket[0]) {
        return 0;
      }
      if (amount >= amountBucket[amountBucket.length - 1]) {
        return amountBucket.length - 1;
      }
      let nearestIndex = 0;
      let minDifference = Math.abs(amount - amountBucket[0]);
      for (let i = 1; i < amountBucket.length; i++) {
        const difference = Math.abs(amount - amountBucket[i]);
        if (difference < minDifference) {
          minDifference = difference;
          nearestIndex = i;
        }
      }
      return nearestIndex;
    };
    if (price_impact >= 0.5) {
      const amountIndex = findNearestAmountIndex(token_amount);
      const amount_usd_bucket = amountBucket[amountIndex];
      this.priceImpactSwapMetric.observe({ name_from, name_to, amount_usd: amount_usd_bucket }, price_impact);
    }
  }
  getVolumeFeeCollector(chainId, involvedChainIds) {
    const feeCollectors = this.volumeFeeCollectors.filter((i) => i.chainId === chainId);
    if (feeCollectors.length === 0) {
      return;
    }
    const zeroFeeCollector = feeCollectors.filter((i) => i.feeRate === "0").find((i) => {
      return involvedChainIds.every((j) => i.eligibleChains.includes(j));
    });
    if (zeroFeeCollector) {
      return;
    }
    const chainEligibleFeeCollector = feeCollectors.filter((i) => i.feeRate !== "0").find((i) => {
      return i.eligibleChains.filter((j) => involvedChainIds.includes(j)).length > 0;
    });
    if (chainEligibleFeeCollector) {
      return chainEligibleFeeCollector;
    }
    return feeCollectors.find((i) => i.default);
  }
  async getTonClient() {
    return this.cache.get(
      ["tonClient"],
      async () => {
        let endpoint = this.config.chains.find((chain) => isTonChainId(chain.id))?.rpc;
        if (!endpoint || endpoint.length === 0) {
          endpoint = await (0, import_ton_access.getHttpV4Endpoint)({
            network: this.configName === "mainnet" ? "mainnet" : "testnet"
          });
        }
        return new import_ton3.TonClient4({
          endpoint
        });
      },
      600
      // 10 minutes
    );
  }
  chains() {
    const ids = this.config.chains.map((i) => i.id);
    return chains.filter((chain) => ids.includes(chain.id));
  }
  swapExactIn(params) {
    return swapExactIn({ symbiosis: this, ...params });
  }
  newSwapping(omniPoolConfig) {
    return new SwappingMiddleware(this, omniPoolConfig);
  }
  newRevertPending(request) {
    return new RevertPending(this, request);
  }
  newZapping(omniPoolConfig) {
    return new Zapping(this, omniPoolConfig);
  }
  getProvider(chainId, rpc) {
    if (rpc) {
      const url = isTronChainId(chainId) ? `${rpc}/jsonrpc` : rpc;
      return new import_providers.StaticJsonRpcProvider(url, chainId);
    }
    const provider = this.providers.get(chainId);
    if (!provider) {
      throw new SdkError(`No provider for given chainId: ${chainId}`);
    }
    return provider;
  }
  tonBridge(chainId, address2, signer) {
    const signerOrProvider = signer || this.getProvider(chainId);
    return TonBridge__factory.connect(address2, signerOrProvider);
  }
  portal(chainId, signer) {
    const address2 = this.chainConfig(chainId).portal;
    const signerOrProvider = signer || this.getProvider(chainId);
    return Portal__factory.connect(address2, signerOrProvider);
  }
  synthesis(chainId, signer) {
    const address2 = this.chainConfig(chainId).synthesis;
    const signerOrProvider = signer || this.getProvider(chainId);
    return Synthesis__factory.connect(address2, signerOrProvider);
  }
  bridge(chainId, signer) {
    const address2 = this.chainConfig(chainId).bridge;
    const signerOrProvider = signer || this.getProvider(chainId);
    return Bridge__factory.connect(address2, signerOrProvider);
  }
  fabric(chainId, signer) {
    const address2 = this.chainConfig(chainId).fabric;
    const signerOrProvider = signer || this.getProvider(chainId);
    return Fabric__factory.connect(address2, signerOrProvider);
  }
  multicallRouter(chainId, signer) {
    const address2 = this.chainConfig(chainId).multicallRouter;
    const signerOrProvider = signer || this.getProvider(chainId);
    return MulticallRouter__factory.connect(address2, signerOrProvider);
  }
  metaRouter(chainId, signer) {
    const address2 = this.chainConfig(chainId).metaRouter;
    const signerOrProvider = signer || this.getProvider(chainId);
    return MetaRouter__factory.connect(address2, signerOrProvider);
  }
  depository(chainId, signer) {
    const depository = this.chainConfig(chainId).depository;
    if (!depository) {
      return null;
    }
    const signerOrProvider = signer || this.getProvider(chainId);
    return {
      depository: Depository__factory.connect(depository.depository, signerOrProvider),
      swapUnlocker: SwapUnlocker__factory.connect(depository.swapUnlocker, signerOrProvider),
      withdrawUnlocker: WithdrawUnlocker__factory.connect(depository.withdrawUnlocker, signerOrProvider),
      btcRefundUnlocker: depository.btcRefundUnlocker ? BtcRefundUnlocker__factory.connect(depository.btcRefundUnlocker, signerOrProvider) : void 0,
      branchedUnlocker: BranchedUnlocker__factory.connect(depository.branchedUnlocker, signerOrProvider)
    };
  }
  omniPool(config4, signer) {
    const { address: address2, chainId } = config4;
    const signerOrProvider = signer || this.getProvider(chainId);
    return OmniPool__factory.connect(address2, signerOrProvider);
  }
  omniPoolOracle(config4, signer) {
    const { oracle, chainId } = config4;
    const signerOrProvider = signer || this.getProvider(chainId);
    return OmniPoolOracle__factory.connect(oracle, signerOrProvider);
  }
  getRepresentation(token, chainId) {
    return this.configCache.getRepresentation(token, chainId);
  }
  getOmniPoolTokenIndex(omniPoolConfig, token) {
    return this.configCache.getOmniPoolTokenIndex(omniPoolConfig, token);
  }
  async getBridgeFee({
    calldata,
    receiveSide,
    chainIdFrom,
    chainIdTo
  }) {
    const params = {
      chain_id_from: chainIdFrom,
      chain_id_to: chainIdTo,
      receive_side: receiveSide,
      call_data: calldata,
      client_id: import_ethers60.utils.parseBytes32String(this.clientId),
      signature: this.signature
    };
    const response = await this.fetch(`${this.config.advisor.url}/v1/swap/price`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(params)
    });
    if (!response.ok) {
      const text = await response.text();
      const json = JSON.parse(text);
      throw new AdvisorError(json.message ?? text);
    }
    const { price, save } = await response.json();
    return {
      price: import_jsbi17.default.BigInt(price),
      save: import_jsbi17.default.BigInt(save)
    };
  }
  filterBlockOffset(chainId) {
    return this.chainConfig(chainId).filterBlockOffset;
  }
  async getFromBlockWithOffset(chainId) {
    const provider = this.getProvider(chainId);
    const blockNumber = await provider.getBlockNumber();
    const offset = this.filterBlockOffset(chainId);
    return Math.max(0, blockNumber - offset);
  }
  dexFee(chainId) {
    return this.chainConfig(chainId).dexFee;
  }
  chainConfig(chainId) {
    const config4 = this.config.chains.find((item) => {
      return item.id === chainId;
    });
    if (!config4) {
      throw new SdkError(`Could not config by given chainId: ${chainId}`);
    }
    return config4;
  }
  // === stables ===
  tokens() {
    return this.configCache.tokens();
  }
  findToken(address2, chainId, chainFromId) {
    return this.tokens().find((token) => {
      const condition = token.address.toLowerCase() === address2.toLowerCase() && token.chainId === chainId;
      if (chainFromId === void 0)
        return condition;
      return condition && token.chainFromId === chainFromId;
    });
  }
  transitTokens(chainId, omniPoolConfig) {
    const pool = this.configCache.getOmniPoolByConfig(omniPoolConfig);
    if (!pool) {
      throw new SdkError(`Cannot find omniPool for chainId ${omniPoolConfig.chainId}`);
    }
    const tokens = this.configCache.tokens().filter((token) => {
      return token.chainId === chainId && !token.deprecated && !token.isSynthetic;
    });
    return tokens.filter((token) => {
      const tokenPool = this.getOmniPoolByToken(token);
      return pool.id === tokenPool?.id;
    });
  }
  transitToken(chainId, omniPoolConfig) {
    const pool = this.configCache.getOmniPoolByConfig(omniPoolConfig);
    if (!pool) {
      throw new SdkError(`Cannot find omniPool ${pool}`);
    }
    const tokens = this.configCache.tokens().filter((token) => {
      return token.chainId === chainId && !token.deprecated && !token.isSynthetic;
    });
    if (tokens.length === 0) {
      throw new SdkError(`Cannot find token for chain ${chainId}`);
    }
    if (chainId === pool.chainId) {
      return tokens[0];
    }
    const transitToken = tokens.find((token) => {
      return this.getOmniPoolByToken(token)?.id === pool.id;
    });
    if (!transitToken) {
      throw new NoTransitTokenError(`Cannot find transitToken for chain ${chainId}. Pool: ${pool.id}`);
    }
    return transitToken;
  }
  getTransitCombinations({
    poolConfig,
    tokenIn,
    tokenOut,
    disableSrcChainRouting,
    disableDstChainRouting
  }) {
    const transitTokensIn = this.transitTokens(tokenIn.chainId, poolConfig);
    const transitTokensOut = this.transitTokens(tokenOut.chainId, poolConfig);
    const combinations = [];
    transitTokensIn.forEach((transitTokenIn) => {
      transitTokensOut.forEach((transitTokenOut) => {
        if (transitTokenIn.equals(transitTokenOut)) {
          return;
        }
        if (disableSrcChainRouting) {
          if (!transitTokenIn.equals(wrappedToken(tokenIn))) {
            return;
          }
        }
        if (disableDstChainRouting) {
          if (!transitTokenOut.equals(wrappedToken(tokenOut))) {
            return;
          }
        }
        combinations.push({ transitTokenIn, transitTokenOut });
      });
    });
    return combinations;
  }
  getOmniPoolByConfig(config4) {
    return this.configCache.getOmniPoolByConfig(config4);
  }
  getOmniPoolByToken(token) {
    return this.configCache.getOmniPoolByToken(token);
  }
  getOmniPoolTokens(omniPoolConfig) {
    return this.configCache.getOmniPoolTokens(omniPoolConfig);
  }
  getTokenInfoById(tokenId) {
    return this.configCache.getTokenInfoById(tokenId);
  }
  tronWeb(chainId) {
    if (!isTronChainId(chainId)) {
      throw new SdkError(`Chain ${chainId} is not Tron chain`);
    }
    const config4 = this.chainConfig(chainId);
    if (!config4) {
      throw new SdkError(`Could not find Tron config for chain ${chainId}`);
    }
    return new import_tronweb4.default({ fullHost: config4.rpc, eventNode: config4.rpc, solidityNode: config4.rpc });
  }
  async waitForComplete({
    chainId,
    txId,
    txTon
  }) {
    return waitForComplete({ symbiosis: this, chainId, txId, txTon });
  }
  async waitForBtcDepositAccepted(depositAddress) {
    return Promise.any(
      this.config.btcConfigs.map((btcConfig) => {
        return waitForBtcDepositAccepted(btcConfig, depositAddress);
      })
    );
  }
  async waitForBtcCommitTxMined(btcConfig, commitTx) {
    return waitForBtcCommitTxMined({ btcConfig, commitTx });
  }
  async waitForBtcEvmTxIssued(btcConfig, revealTx) {
    return waitForBtcEvmTxIssued(this, revealTx, btcConfig);
  }
  async waitFromTonTxMined(address2, contractAddress) {
    return waitFromTonTxMined({ symbiosis: this, address: address2, contractAddress });
  }
  async findTransitTokenSent(chainId, transactionHash) {
    const metarouter = this.metaRouter(chainId);
    const providerTo = this.getProvider(chainId);
    const receipt = await providerTo.getTransactionReceipt(transactionHash);
    if (!receipt) {
      return void 0;
    }
    const eventId = import_ethers60.utils.id("TransitTokenSent(address,uint256,address)");
    const log = receipt.logs.find((log2) => {
      if (log2.topics.length === 0) {
        return false;
      }
      return log2.topics[0] === eventId;
    });
    if (!log) {
      return void 0;
    }
    const parsedLog = metarouter.interface.parseLog(log);
    const token = this.tokens().find((token2) => {
      return token2.chainId === chainId && token2.address.toLowerCase() === parsedLog.args.token.toLowerCase();
    });
    if (!token) {
      return void 0;
    }
    return new TokenAmount(token, parsedLog.args.amount.toString());
  }
  async tronWaitForMined(chainId, txId) {
    let info;
    const tronWeb = this.tronWeb(chainId);
    const TRIES = 10;
    for (let i = 0; i < TRIES; i++) {
      const response = await getTransactionInfoById(tronWeb, txId);
      if (response) {
        info = response;
        break;
      }
      await delay(1e3);
    }
    if (!info) {
      throw new SdkError("Transaction not found");
    }
    return info;
  }
  getRevertableAddress(chainId) {
    const address2 = this.config.revertableAddress[chainId];
    if (address2) {
      return address2;
    }
    return this.config.revertableAddress.default;
  }
  validateLimits(amount) {
    const { token } = amount;
    const limit = this.config.limits.find((limit2) => {
      return limit2.address.toLowerCase() === token.address.toLowerCase() && limit2.chainId === token.chainId;
    });
    if (!limit) {
      return;
    }
    const maxAmountRaw = (0, import_units4.parseUnits)(limit.max, token.decimals).toString();
    if (maxAmountRaw !== "0") {
      const maxLimitTokenAmount = new TokenAmount(token, maxAmountRaw);
      if (amount.greaterThan(maxLimitTokenAmount)) {
        throw new AmountTooHighError(
          `Max: ${maxLimitTokenAmount.toSignificant()} ${maxLimitTokenAmount.token.symbol}`
        );
      }
    }
    const minAmountRaw = (0, import_units4.parseUnits)(limit.min, token.decimals).toString();
    if (minAmountRaw !== "0") {
      const minLimitTokenAmount = new TokenAmount(token, minAmountRaw);
      if (amount.lessThan(minLimitTokenAmount)) {
        throw new AmountTooLowError(
          `Min: ${minLimitTokenAmount.toSignificant()} ${minLimitTokenAmount.token.symbol}`
        );
      }
    }
  }
};

// src/crosschain/revertRequest.ts
var import_units5 = require("@ethersproject/units");
var import_ethers61 = require("ethers");
var PendingRequestState = /* @__PURE__ */ ((PendingRequestState2) => {
  PendingRequestState2[PendingRequestState2["Default"] = 0] = "Default";
  PendingRequestState2[PendingRequestState2["Sent"] = 1] = "Sent";
  PendingRequestState2[PendingRequestState2["Reverted"] = 2] = "Reverted";
  return PendingRequestState2;
})(PendingRequestState || {});
var findSourceChainData = async (symbiosis, chainIdFrom, chainIdTo, txHash, revertableAddress, omniPoolConfig, synthesizeRequestFinder) => {
  const synthesis = symbiosis.synthesis(omniPoolConfig.chainId);
  const filter = synthesis.filters.SynthesizeCompleted();
  const tx = await synthesis.provider.getTransactionReceipt(txHash);
  const foundSynthesizeCompleted = tx.logs.find((log) => {
    if (log.topics.length === 0) {
      return false;
    }
    return log.topics[0] === filter.topics?.[0];
  });
  if (!foundSynthesizeCompleted)
    return void 0;
  const externalId = foundSynthesizeCompleted.topics?.[1];
  const chains2 = symbiosis.chains().filter((chain) => isEvmChainId(chain.id) || isTronChainId(chain.id)).filter((chain) => {
    return chain.id !== chainIdFrom && chain.id !== chainIdTo;
  });
  const promises = chains2.map((chain) => {
    return findSynthesizeRequestOnChain(symbiosis, chain.id, revertableAddress, externalId, omniPoolConfig);
  });
  const results = await Promise.allSettled(promises);
  let sourceChainId = void 0;
  let fromAddress = void 0;
  const errors = [];
  for (let i = 0; i < results.length; i++) {
    const item = results[i];
    const chainId = chains2[i].id;
    if (item.status !== "fulfilled") {
      errors.push(new SdkError(`Error occurred on chain ${chainId} while loading findSynthesizeRequestOnChain`));
      continue;
    }
    if (item.value) {
      sourceChainId = chainId;
      fromAddress = item.value.args.from;
      break;
    }
  }
  if (errors.length > 0 && !synthesizeRequestFinder) {
    throw new AggregateError(errors, "findSourceChainData error");
  }
  if (!fromAddress && synthesizeRequestFinder) {
    const data = await synthesizeRequestFinder(externalId);
    sourceChainId = data?.sourceChainId;
    fromAddress = data?.fromAddress;
  }
  if (!fromAddress || !sourceChainId) {
    return;
  }
  return {
    sourceChainId,
    fromAddress
  };
};
var findSynthesizeRequestOnChain = async (symbiosis, chainId, revertableAddress, originExternalId, omniPoolConfig) => {
  const portal = symbiosis.portal(chainId);
  const eventFragment = portal.interface.getEvent("SynthesizeRequest");
  const topics = portal.interface.encodeFilterTopics(eventFragment, [
    void 0,
    void 0,
    // from
    omniPoolConfig.chainId,
    // chains IDs
    revertableAddress
    // revertableAddress
  ]);
  const blockOffset = symbiosis.filterBlockOffset(chainId);
  const toBlock = await portal.provider.getBlockNumber();
  const fromBlock = toBlock - blockOffset;
  const events = await portal.queryFilter({ topics }, fromBlock, toBlock);
  const synthesis = symbiosis.synthesis(omniPoolConfig.chainId);
  return events.find((e) => {
    const { id } = e.args;
    const externalId = getExternalId({
      internalId: id,
      contractAddress: synthesis.address,
      revertableAddress,
      chainId: omniPoolConfig.chainId
    });
    return originExternalId === externalId;
  });
};
var isSynthesizeV2 = async (symbiosis, chainId, txHash) => {
  const id = import_ethers61.utils.id(
    "metaBurnSyntheticToken((uint256,uint256,bytes32,address,address,address,bytes,uint256,address,address,address,address,uint256,bytes32))"
  );
  const hash = id.slice(2, 10);
  const tx = await symbiosis.getProvider(chainId).getTransaction(txHash);
  return tx.data.includes(hash);
};
var RevertRequest = class {
  constructor(symbiosis, chainId, transactionHash) {
    this.symbiosis = symbiosis;
    this.chainId = chainId;
    this.transactionHash = transactionHash;
  }
  async init({ validateState = false, synthesizeRequestFinder }) {
    const provider = this.symbiosis.getProvider(this.chainId);
    const receipt = await provider.getTransactionReceipt(this.transactionHash);
    if (!receipt) {
      throw new SdkError(`Tx ${this.transactionHash} does not exist on chain ${this.chainId}`);
    }
    let type = "synthesize";
    let log = this.findSynthesizeRequest(receipt);
    if (!log) {
      type = "burn";
      log = this.findBurnRequest(receipt);
    }
    if (!log) {
      throw new SdkError("Tx does not contain mint/burn event and cannot be reverted");
    }
    const { id, amount, token: tokenAddress, from: fromOrigin, to, chainID, revertableAddress } = log.args;
    const chainIdTo = chainID.toNumber();
    let chainIdFrom = this.chainId;
    let from = fromOrigin;
    const token = this.symbiosis.findToken(tokenAddress, this.chainId);
    if (!token) {
      throw new SdkError(`Cannot find token ${tokenAddress} at chain ${this.chainId}`);
    }
    const omniPoolConfig = this.symbiosis.getOmniPoolByToken(token);
    if (!omniPoolConfig) {
      throw new SdkError(`Cannot find omni pool config by token ${tokenAddress}`);
    }
    let fromTokenAmount = new TokenAmount(token, amount);
    const originalFromTokenAmount = fromTokenAmount;
    if (type === "synthesize") {
      const isV2 = await isSynthesizeV2(this.symbiosis, this.chainId, receipt.transactionHash);
      if (isV2) {
        type = "synthesize-v2";
      }
    }
    if (type === "burn") {
      const metaRouterAddress = this.symbiosis.metaRouter(omniPoolConfig.chainId).address;
      if (from.toLowerCase() === metaRouterAddress.toLowerCase()) {
        type = "burn-v2";
        const data = await findSourceChainData(
          this.symbiosis,
          this.chainId,
          chainIdTo,
          receipt.transactionHash,
          revertableAddress,
          omniPoolConfig,
          synthesizeRequestFinder
        );
        if (data) {
          const { sourceChainId, fromAddress } = data;
          from = fromAddress;
          const sourceChainToken = this.symbiosis.transitToken(sourceChainId, omniPoolConfig);
          chainIdFrom = sourceChainToken.chainId;
          fromTokenAmount = new TokenAmount(
            sourceChainToken,
            (0, import_units5.parseUnits)(
              fromTokenAmount.toExact(sourceChainToken.decimals),
              sourceChainToken.decimals
            ).toString()
          );
        } else {
          const transitToken = this.symbiosis.transitToken(chainIdTo, omniPoolConfig);
          type = "burn-v2-revert";
          fromTokenAmount = new TokenAmount(transitToken, fromTokenAmount.raw);
        }
      }
    }
    let contractAddress;
    if (["synthesize", "synthesize-v2"].includes(type)) {
      contractAddress = this.symbiosis.synthesis(chainIdTo).address;
    } else {
      contractAddress = this.symbiosis.portal(chainIdTo).address;
    }
    const externalId = getExternalId({
      internalId: id,
      contractAddress,
      revertableAddress,
      chainId: chainIdTo
    });
    let state = 0 /* Default */;
    if (validateState) {
      if (["synthesize", "synthesize-v2"].includes(type)) {
        state = await this.symbiosis.synthesis(chainIdTo).synthesizeStates(externalId);
      } else {
        state = await this.symbiosis.portal(chainIdTo).unsynthesizeStates(externalId);
      }
      if (state === 1) {
        throw new SdkError(`Tx is success and cannot be reverted.`);
      }
    }
    let revertChainId = chainIdTo;
    if (type === "synthesize-v2") {
      revertChainId = this.chainId;
    }
    return {
      internalId: id,
      externalId,
      transactionHash: this.transactionHash,
      state,
      type,
      from,
      to,
      revertableAddress,
      chainIdFrom,
      chainIdTo,
      fromTokenAmount,
      revertChainId,
      originalFromTokenAmount
    };
  }
  findSynthesizeRequest(receipt) {
    const contract = Portal__factory.createInterface();
    const event = contract.events["SynthesizeRequest(bytes32,address,uint256,address,address,uint256,address)"];
    const log = receipt.logs.find((log2) => {
      if (log2.topics.length === 0) {
        return false;
      }
      const topic = contract.getEventTopic(event);
      return log2.topics[0].toLowerCase() === topic.toLowerCase();
    });
    if (!log) {
      return null;
    }
    return contract.parseLog(log);
  }
  findBurnRequest(receipt) {
    const contract = Synthesis__factory.createInterface();
    const burnRequest = contract.events["BurnRequest(bytes32,address,uint256,address,address,uint256,address)"];
    const topic = contract.getEventTopic(burnRequest);
    const log = receipt.logs.find((log2) => {
      if (log2.topics.length === 0) {
        return false;
      }
      return log2.topics[0].toLowerCase() === topic.toLowerCase();
    });
    if (!log)
      return null;
    return contract.parseLog(log);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AdvisorError,
  AmountLessThanFeeError,
  AmountTooHighError,
  AmountTooLowError,
  BASES_TO_CHECK_TRADES_AGAINST,
  BIPS_BASE,
  BTC_NETWORKS,
  BaseSwapping,
  Bridge,
  CHAIN_FLIP_BTC_TOKENS,
  CHAIN_FLIP_SOL_TOKENS,
  COINGECKO_GAS_TOKEN_IDS,
  COINGECKO_PLATFORMS,
  CROSS_CHAIN_ID,
  CUSTOM_BASES,
  Cache,
  Chain,
  ChainFlipError,
  ChainId,
  DEFAULT_EXCEED_DELAY,
  DEX_TOKENS_TO_CHECK_TRADES_AGAINST,
  DedustTradeError,
  EventIds,
  FACTORY_ADDRESS,
  FEE_COLLECTOR_ADDRESSES,
  Field,
  Fraction,
  GAS_TOKEN,
  GetLogTimeoutExceededError,
  INIT_CODE_HASH,
  InsufficientInputAmountError,
  InsufficientReservesError,
  IzumiTrade,
  IzumiTradeError,
  JSBI,
  JupiterTradeError,
  LimitError,
  MINIMUM_LIQUIDITY,
  MIN_META_SYNTH_JETTONS,
  MIN_META_SYNTH_TONS,
  MIN_SYNTH_JETTONS,
  MIN_SYNTH_TONS,
  MULTICALL_ADDRESSES,
  MULTICALL_ROUTER_V2,
  NOTIFICATION_PAYMENT,
  NoMulticallAddressError,
  NoRepresentationFoundError,
  NoTransitTokenError,
  ONE_BIPS,
  OmniLiquidity,
  OneInchTradeError,
  Opcodes,
  OpenOceanTradeError,
  PAIR_ADDRESS_CACHE,
  Pair,
  PendingRequestState,
  Percent,
  Price,
  Profiler,
  RaydiumTradeError,
  RevertPending,
  RevertRequest,
  Rounding,
  Route,
  Router,
  RoutingError,
  SOL_USDC,
  SdkError,
  StonFiTradeError,
  Swapping,
  SwappingMiddleware,
  SwappingToTon,
  Symbiosis,
  THOR_TOKENS,
  TON_REFERRAL_ADDRESS,
  TON_STONFI_PROXY_ADDRESS,
  TON_TOKEN_DECIMALS,
  TRON_PORTAL_ABI,
  TRON_TRC20_ABI,
  ThorChainError,
  Token,
  TokenAmount,
  Trade,
  TradeError,
  TradeType,
  UniV2TradeError,
  UniV3TradeError,
  WETH,
  WETH_ONLY,
  WrapTradeError,
  ZERO,
  ZERO_FEE_COLLECTOR_ADDRESSES,
  Zapping,
  ZappingBtc,
  ZappingThor,
  addSolanaFee,
  aggregatorErrorToText,
  basisPointsToPercent,
  buildMetaSynthesize,
  buildSynthesize,
  calculateGasMargin,
  calculatePriceImpact,
  callDataToCell,
  chains,
  computeSlippageAdjustedAmounts,
  computeTradePriceBreakdown,
  dev,
  findSourceChainData,
  fromBtcSwap,
  getAddress,
  getAllPairCombinations,
  getBtcPortalFee,
  getChainById,
  getExternalId,
  getInternalId,
  getLogWithTimeout,
  getMinAmount,
  getMulticall,
  getPkScript,
  getPkScriptForChain,
  getSolanaConnection,
  getThreshold,
  getToBtcFee,
  getTokenAmountUsd,
  getTokenPriceUsd,
  getUnwrapDustLimit,
  getZkCreate2Address,
  inputOutputComparator,
  isBtcChainId,
  isEvmChainId,
  isFromBtcSwapSupported,
  isSolanaChainId,
  isSynthesizeV2,
  isTonChainId,
  isTronChain,
  isTronChainId,
  isTronToken,
  isWTon,
  mainnet,
  prepareTronTransaction,
  splitSlippage,
  swapExactIn,
  testnet,
  tokenEquals,
  tonAdvisorMock,
  tradeComparator,
  tronAddressToEvm,
  waitForBtcCommitTxMined,
  waitForBtcDepositAccepted,
  waitForBtcEvmTxIssued,
  waitForComplete,
  waitFromTonTxMined,
  wrappedAmount,
  wrappedToken
});
//# sourceMappingURL=index.cjs.js.map