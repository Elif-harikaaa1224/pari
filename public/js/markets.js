// Markets page functionality
let markets = [];
let selectedMarket = null;
let selectedToken = null;
let config = null;

async function initMarkets() {
    const isConnected = await wallet.isConnected();
    
    if (isConnected) {
        config = await loadConfig();
        
        // Display wallet
        const address = await wallet.getAddress();
        document.getElementById('walletDisplay').textContent = 
            `${address.slice(0, 6)}...${address.slice(-4)}`;

        // Load balance and check proxy
        await updateBalance();
        await checkAndDisplayProxy();
    } else {
        // Show connect wallet button
        document.getElementById('walletDisplay').innerHTML = 
            '<button onclick="connectWallet()" class="btn btn-secondary">–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫</button>';
        document.getElementById('bettingBalance').textContent = '-';
    }

    // Load markets regardless of wallet connection
    await loadMarkets();

    // Setup modal
    setupModal();
}

async function checkAndDisplayProxy() {
    try {
        const userAddress = wallet.address;
        const savedProxy = localStorage.getItem(`polymarket_proxy_${userAddress}`);
        
        if (savedProxy && ethers.utils.isAddress(savedProxy)) {
            console.log('üìå Your Polymarket Proxy Wallet:', savedProxy);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ proxy –∞–¥—Ä–µ—Å
            const proxyInfo = document.createElement('div');
            proxyInfo.style.cssText = 'margin: 10px 0; padding: 10px; background: #f0f0f0; border-radius: 5px; font-size: 12px;';
            proxyInfo.innerHTML = `
                <strong>üîë Polymarket Proxy:</strong> 
                <code>${savedProxy.slice(0, 10)}...${savedProxy.slice(-8)}</code>
                <button onclick="manageProxyAddress()" style="margin-left: 10px; padding: 2px 8px;">‚öôÔ∏è</button>
            `;
            
            const container = document.querySelector('.markets-container') || document.body;
            container.insertBefore(proxyInfo, container.firstChild);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å proxy
            const proxyWarning = document.createElement('div');
            proxyWarning.style.cssText = 'margin: 10px 0; padding: 10px; background: #fff3cd; border: 1px solid #ffc107; border-radius: 5px;';
            proxyWarning.innerHTML = `
                ‚ö†Ô∏è <strong>Proxy Wallet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</strong><br>
                –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º Polymarket Proxy Wallet.<br>
                <button onclick="manageProxyAddress()" class="btn btn-primary" style="margin-top: 5px;">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Proxy</button>
            `;
            
            const container = document.querySelector('.markets-container') || document.body;
            container.insertBefore(proxyWarning, container.firstChild);
        }
    } catch (error) {
        console.error('Error checking proxy:', error);
    }
}

async function connectWallet() {
    try {
        await wallet.connect();
        window.location.reload();
    } catch (error) {
        console.error('Error connecting wallet:', error);
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ' + error.message);
    }
}

async function updateBalance() {
    try {
        const userAddress = wallet.address;
        const savedProxy = localStorage.getItem(`polymarket_proxy_${userAddress}`);
        
        if (savedProxy && ethers.utils.isAddress(savedProxy)) {
            await wallet.switchToPolygon();
            const balance = await wallet.getUSDCBalance(savedProxy);
            document.getElementById('bettingBalance').textContent = 
                parseFloat(balance).toFixed(2);
            console.log(`üí∞ USDC balance on proxy (${savedProxy}):`, balance);
        } else {
            document.getElementById('bettingBalance').textContent = '0.00';
            console.log('‚ö†Ô∏è No proxy address configured');
        }
    } catch (error) {
        console.error('Error loading balance:', error);
        document.getElementById('bettingBalance').textContent = '0.00';
    }
}

async function loadMarkets() {
    try {
        const response = await fetch('/api/markets');
        const data = await response.json();
        
        if (data.success) {
            markets = data.data;
            console.log('Markets loaded:', markets.length);
            console.log('First market structure:', markets[0]);
            displayMarkets(markets);
        } else {
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä–∫–µ—Ç—ã');
        }
    } catch (error) {
        console.error('Error loading markets:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–∫–µ—Ç–æ–≤');
    } finally {
        document.getElementById('marketsLoading').style.display = 'none';
    }
}

function displayMarkets(marketsList) {
    const container = document.getElementById('marketsList');
    container.innerHTML = '';

    if (!marketsList || marketsList.length === 0) {
        container.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–æ–≤</p>';
        return;
    }

    marketsList.forEach(market => {
        const card = createMarketCard(market);
        container.appendChild(card);
    });
}

function createMarketCard(market) {
    const card = document.createElement('div');
    card.className = 'market-card';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ö–æ–¥–∞–º–∏
    if (market.isMultiOutcome && market.outcomes && market.outcomes.length > 1) {
        return createMultiOutcomeCard(market);
    } else {
        return createBinaryMarketCard(market);
    }
}

function createMultiOutcomeCard(event) {
    const card = document.createElement('div');
    card.className = 'market-card multi-outcome';

    const question = event.question || event.title || '–°–æ–±—ã—Ç–∏–µ';
    
    // –û–±—ä–µ–º –∏ –¥–∞—Ç–∞
    const volume = event.volume ? `${(event.volume / 1000).toFixed(0)}K` : 
                   event.volume24hr ? `${(event.volume24hr / 1000).toFixed(0)}K` : '-';
    const endDate = event.endDate || event.endDateIso ? 
        new Date(event.endDate || event.endDateIso).toLocaleDateString('ru-RU') : '-';
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ Polymarket
    const eventSlug = event.slug;
    const polymarketUrl = eventSlug ? `https://polymarket.com/event/${eventSlug}` : '#';
    const imageSrc = event.image || '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –∏—Å—Ö–æ–¥–∞
    const topOutcomes = event.outcomes.slice(0, 2);
    
    const outcomesHtml = topOutcomes.map(outcome => {
        const percentage = (outcome.price * 100).toFixed(0);
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/–≤–∞—Ä–∏–∞–Ω—Ç–∞ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        let outcomeText = outcome.question;
        
        // –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏—è
        if (event.question) {
            outcomeText = outcomeText.replace(event.question, '');
        }
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
        outcomeText = outcomeText
            .replace(/^Will\s+/i, '')
            .replace(/^Does\s+/i, '')
            .replace(/^Is\s+/i, '')
            .replace(/\s+win.*$/i, '')
            .replace(/\?$/g, '')
            .trim();
        
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        if (!outcomeText) {
            outcomeText = outcome.question;
        }
        
        return `
            <div class="outcome-compact">
                <span class="outcome-name">${outcomeText}</span>
                <span class="outcome-percent">${percentage}%</span>
            </div>
        `;
    }).join('');

    card.innerHTML = `
        <div class="card-top">
            <div class="card-image-wrap">
                <img src="${imageSrc}" class="card-image" alt="" onerror="this.style.display='none'" />
            </div>
            <div class="card-head">
                <h4 class="card-title">${question}</h4>
                <div class="card-meta">
                    <span class="meta-item">üìä ${volume}</span>
                    <span class="meta-item">üìÖ ${endDate}</span>
                </div>
            </div>
        </div>
        <div class="market-outcomes-compact">
            ${outcomesHtml}
        </div>
        ${event.outcomes.length > 2 ? `<div class="view-all-btn">View all ${event.outcomes.length} outcomes</div>` : ''}
    `;

    // Add click handler to open modal with all outcomes
    card.addEventListener('click', (e) => {
        // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª, –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å—Å—ã–ª–∫—É
        if (e.target.tagName === 'A') return;
        openOutcomesModal(event);
    });

    return card;
}

function createBinaryMarketCard(market) {
    const card = document.createElement('div');
    card.className = 'market-card';

    const question = market.question || market.title || '–°–æ–±—ã—Ç–∏–µ';
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
    let yesPrice = '-';
    let noPrice = '-';
    let yesTokenId = '';
    let noTokenId = '';
    
    // Polymarket API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tokens –º–∞—Å—Å–∏–≤
    if (market.tokens && market.tokens.length >= 2) {
        // –ü–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω –æ–±—ã—á–Ω–æ YES
        const yesToken = market.tokens[0];
        const noToken = market.tokens[1];
        
        yesTokenId = yesToken.token_id || yesToken.id || '';
        noTokenId = noToken.token_id || noToken.id || '';
        
        // –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ price –∏–ª–∏ outcome
        yesPrice = yesToken.price || yesToken.outcome || 0.5;
        noPrice = noToken.price || noToken.outcome || 0.5;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        yesPrice = (parseFloat(yesPrice) * 100).toFixed(1);
        noPrice = (parseFloat(noPrice) * 100).toFixed(1);
    } else if (market.outcomes && market.outcomes.length >= 2) {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        yesPrice = (parseFloat(market.outcomes[0].price || 0.5) * 100).toFixed(1);
        noPrice = (parseFloat(market.outcomes[1].price || 0.5) * 100).toFixed(1);
        yesTokenId = market.outcomes[0].token_id || '';
        noTokenId = market.outcomes[1].token_id || '';
    }
    
    // –û–±—ä–µ–º –∏ –¥–∞—Ç–∞
    const volume = market.volume ? `${(market.volume / 1000).toFixed(0)}K` : 
                   market.volume24hr ? `${(market.volume24hr / 1000).toFixed(0)}K` : '-';
    const endDate = market.end_date_iso || market.endDate || market.endDateIso ? 
        new Date(market.end_date_iso || market.endDate || market.endDateIso).toLocaleDateString('ru-RU') : '-';
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ Polymarket - –∏—Å–ø–æ–ª—å–∑—É–µ–º slug (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ id
    const marketIdentifier = market.slug || market.id;
    const polymarketUrl = marketIdentifier ? `https://polymarket.com/event/${marketIdentifier}` : '#';
    const imageSrc = market.image || market.icon || (market.events && market.events[0] && market.events[0].image) || '';

    card.innerHTML = `
        <div class="card-top">
            <div class="card-image-wrap">
                <img src="${imageSrc}" class="card-image" alt="" onerror="this.style.display='none'" />
            </div>
            <div class="card-head">
                <h4 class="card-title">${question}</h4>
                <div class="card-meta">
                    <span class="meta-item">üìä ${volume}</span>
                    <span class="meta-item">üìÖ ${endDate}</span>
                    ${marketIdentifier ? `<a href="${polymarketUrl}" target="_blank" class="meta-link">üîó Polymarket</a>` : ''}
                </div>
            </div>
        </div>
        <div class="market-outcomes">
            <button class="outcome-btn yes-btn" data-market-id="${market.conditionId || market.condition_id || market.id}" data-outcome="YES" data-token="${yesTokenId}" data-price="${yesPrice}">
                <span class="outcome-label">YES</span>
                <span class="outcome-price">${yesPrice}%</span>
            </button>
            <button class="outcome-btn no-btn" data-market-id="${market.conditionId || market.condition_id || market.id}" data-outcome="NO" data-token="${noTokenId}" data-price="${noPrice}">
                <span class="outcome-label">NO</span>
                <span class="outcome-price">${noPrice}%</span>
            </button>
        </div>
    `;

    // Add click handlers to outcome buttons
    const outcomeButtons = card.querySelectorAll('.outcome-btn');
    outcomeButtons.forEach(btn => {
        btn.addEventListener('click', () => openBettingModal(market, btn));
    });

    return card;
}

async function openBettingModal(market, button) {
    // Check if wallet is connected
    if (!wallet.address) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ proxy –∞–¥—Ä–µ—Å–∞
    const userAddress = wallet.address;
    const savedProxy = localStorage.getItem(`polymarket_proxy_${userAddress}`);
    
    if (!savedProxy || !ethers.utils.isAddress(savedProxy)) {
        const shouldSetup = confirm(
            '‚ö†Ô∏è Proxy Wallet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n' +
            '–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –Ω—É–∂–µ–Ω Polymarket Proxy Wallet.\n\n' +
            '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–π—á–∞—Å?'
        );
        if (shouldSetup) {
            await manageProxyAddress();
        }
        return;
    }
    
    selectedMarket = market;
    selectedToken = {
        id: button.dataset.token,
        outcome: button.dataset.outcome,
        price: parseFloat(button.dataset.price) / 100
    };

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (1 / –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    const odds = selectedToken.price > 0 ? (1 / selectedToken.price).toFixed(2) : '-';
    
    document.getElementById('betMarketTitle').textContent = market.question;
    document.getElementById('betOutcome').textContent = selectedToken.outcome;
    document.getElementById('betOdds').textContent = odds;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º proxy address
    document.getElementById('userProxyAddress').textContent = savedProxy;
    
    document.getElementById('bettingModal').style.display = 'block';
    document.getElementById('betAmountBNB').value = '';
    document.getElementById('betPayout').textContent = '-';
    document.getElementById('betAmountUSDC').textContent = '0';
    document.getElementById('betStatus').innerHTML = '';
}

function setupModal() {
    const modal = document.getElementById('bettingModal');
    const bridgeModal = document.getElementById('bridgeModal');
    
    // Close betting modal when clicking X
    const closeBtns = document.querySelectorAll('.close');
    closeBtns.forEach(btn => {
        btn.onclick = () => {
            modal.style.display = 'none';
            bridgeModal.style.display = 'none';
        };
    });
    
    // Close modals when clicking outside
    window.onclick = (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
        if (event.target === bridgeModal) {
            bridgeModal.style.display = 'none';
        }
        // Close outcomes modal
        const outcomesModal = document.getElementById('outcomesModal');
        if (event.target === outcomesModal) {
            outcomesModal.style.display = 'none';
        }
    };

    // Calculate payout on BNB amount change
    const betAmountInput = document.getElementById('betAmountBNB');
    if (betAmountInput) {
        betAmountInput.addEventListener('input', calculatePayout);
    }
    
    // Place bet button
    document.getElementById('placeBetBtn').addEventListener('click', placeBet);
}

function openOutcomesModal(event) {
    const modal = document.getElementById('outcomesModal');
    if (!modal) {
        createOutcomesModal();
        return openOutcomesModal(event);
    }
    
    const modalTitle = document.getElementById('outcomesModalTitle');
    const outcomesList = document.getElementById('outcomesModalList');
    
    modalTitle.textContent = event.question;
    
    // Render all outcomes
    outcomesList.innerHTML = event.outcomes.map((outcome, idx) => {
        const percentage = (outcome.price * 100).toFixed(1);
        let outcomeText = outcome.question;
        
        if (event.question) {
            outcomeText = outcomeText.replace(event.question, '');
        }
        
        outcomeText = outcomeText
            .replace(/^Will\s+/i, '')
            .replace(/^Does\s+/i, '')
            .replace(/^Is\s+/i, '')
            .replace(/\s+win.*$/i, '')
            .replace(/\?$/g, '')
            .trim();
        
        if (!outcomeText) {
            outcomeText = outcome.question;
        }
        
        return `
            <div class="outcome-item" data-outcome-idx="${idx}">
                <span class="outcome-item-name">${outcomeText}</span>
                <div class="outcome-item-right">
                    <span class="outcome-item-percent">${percentage}%</span>
                    <button class="outcome-bet-btn">Bet</button>
                </div>
            </div>
        `;
    }).join('');
    
    // Add click handlers to bet buttons
    outcomesList.querySelectorAll('.outcome-bet-btn').forEach((btn, idx) => {
        btn.addEventListener('click', (e) => {
            e.stopPropagation();
            const outcome = event.outcomes[idx];
            modal.style.display = 'none';
            
            // –°–æ–∑–¥–∞—ë–º –ø—Å–µ–≤–¥–æ-–∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ dataset –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –¥–ª—è openBettingModal
            const fakeButton = {
                dataset: {
                    token: outcome.tokenId,
                    outcome: 'YES', // –í—Å–µ–≥–¥–∞ YES –¥–ª—è –º–Ω–æ–≥–æ–≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã—Ö
                    price: (outcome.price * 100).toFixed(1) // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                }
            };
            
            openBettingModal({
                ...event,
                question: outcome.question,
                conditionId: outcome.conditionId,
                tokens: [
                    { token_id: outcome.tokenId, outcome: 'Yes', price: outcome.price.toString() },
                    { token_id: outcome.noTokenId, outcome: 'No', price: (1 - outcome.price).toString() }
                ]
            }, fakeButton);
        });
    });
    
    modal.style.display = 'block';
}

function createOutcomesModal() {
    const modal = document.createElement('div');
    modal.id = 'outcomesModal';
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content outcomes-modal-content">
            <span class="close" onclick="document.getElementById('outcomesModal').style.display='none'">&times;</span>
            <h3 id="outcomesModalTitle">All Outcomes</h3>
            <div id="outcomesModalList" class="outcomes-list"></div>
        </div>
    `;
    document.body.appendChild(modal);
}

function calculatePayout() {
    const amountBNB = parseFloat(document.getElementById('betAmountBNB').value);
    
    if (!amountBNB || amountBNB <= 0 || !selectedToken || !selectedToken.price) {
        document.getElementById('betPayout').textContent = '-';
        document.getElementById('betAmountUSDC').textContent = '0';
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É BNB –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞
    const bnbPrice = bnbPriceTracker.getPrice();
    const usdcAmount = amountBNB * bnbPrice;
    document.getElementById('betAmountUSDC').textContent = usdcAmount.toFixed(2);

    // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à = —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = 1 / –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    const payout = usdcAmount / selectedToken.price;
    document.getElementById('betPayout').textContent = payout.toFixed(2);
}

async function placeBet() {
    const amountBNB = parseFloat(document.getElementById('betAmountBNB').value);
    
    if (!amountBNB || amountBNB <= 0) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ BNB');
        return;
    }

    try {
        // 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        if (!wallet.address) {
            alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
            return;
        }

        console.log('=== Starting bet placement ===');
        console.log('Connected wallet address:', wallet.address);
        console.log('Bet amount (BNB):', amountBNB);

        // 1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Polygon –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å proxy wallet
        await wallet.switchToPolygon();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º signer –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å–µ—Ç–∏
        wallet.signer = wallet.provider.getSigner();

        // 2. –ü–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å proxy wallet
        const userAddress = await wallet.getAddress();
        console.log('User address from wallet.getAddress():', userAddress);
        console.log('User address type:', typeof userAddress);
        
        const proxyAddress = await proxyWalletManager.getOrCreateProxyWallet(userAddress, wallet.signer);
        
        console.log('User address:', userAddress);
        console.log('Proxy address:', proxyAddress);

        // 3. –ü–æ–∫–∞–∑–∞—Ç—å bridge modal
        await showBridgeProcess(amountBNB, proxyAddress);

    } catch (error) {
        console.error('Bet placement error:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

async function showBridgeProcess(amountBNB, proxyAddress) {
    // Open bridge modal
    document.getElementById('bettingModal').style.display = 'none';
    document.getElementById('bridgeModal').style.display = 'block';

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É BNB
    const bnbPrice = bnbPriceTracker.getPrice();
    const usdcAmount = amountBNB * bnbPrice;

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const updateElement = (id, value) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        } else {
            console.warn(`Element with id "${id}" not found`);
        }
    };

    updateElement('bridgeBNBAmount', `${amountBNB} BNB`);
    updateElement('bridgeUSDCAmount', `‚âà${usdcAmount.toFixed(2)} USDC`);
    updateElement('bridgeToAddress', `${proxyAddress.slice(0, 10)}...${proxyAddress.slice(-8)}`);

    const status = document.getElementById('bridgeStatus');
    if (!status) {
        console.error('Bridge status element not found!');
        return;
    }

    try {
        // Step 1: Switch to BSC and swap BNB‚ÜíUSDT
        updateStep(1, 'active');
        status.innerHTML = '<div class="loading">‚è≥ –û–±–º–µ–Ω BNB ‚Üí USDT –Ω–∞ PancakeSwap...</div>';
        
        await wallet.switchToBSC();
        const usdtAmount = await swapBNBToUSDT(amountBNB);
        
        updateStep(1, 'completed', '‚úÖ');
        
        // Step 2: Send through Stargate
        updateStep(2, 'active');
        status.innerHTML = '<div class="loading">‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Stargate –Ω–∞ Polygon...</div>';
        
        const bridgeTxHash = await sendThroughStargate(usdtAmount, proxyAddress);
        
        updateStep(2, 'completed', '‚úÖ');
        
        // Step 3: Wait for USDC on Polygon
        updateStep(3, 'active');
        status.innerHTML = '<div class="loading">‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è USDC –Ω–∞ Polygon...</div>';
        
        await wallet.switchToPolygon();
        await waitForUSDC(proxyAddress, usdcAmount);
        
        updateStep(3, 'completed', '‚úÖ');
        
        // Step 4: Approve USDC for CTF Exchange
        updateStep(4, 'active');
        status.innerHTML = '<div class="loading">‚è≥ Approve USDC –¥–ª—è —Å—Ç–∞–≤–æ–∫...</div>';
        
        await approveUSDCForBetting(proxyAddress, usdcAmount);
        
        updateStep(4, 'completed', '‚úÖ');
        
        // Step 5: Place bet order
        updateStep(5, 'active');
        status.innerHTML = '<div class="loading">‚è≥ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ Polymarket...</div>';
        
        const orderResult = await placePolymarketOrder(usdcAmount, proxyAddress);
        
        updateStep(5, 'completed', '‚úÖ');
        
        // Success!
        status.innerHTML = `
            <div class="success">
                ‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ Polymarket!<br>
                <strong>Order ID:</strong> ${orderResult.orderID}<br>
                <strong>–°—É–º–º–∞:</strong> ${usdcAmount.toFixed(2)} USDC<br>
                <strong>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à:</strong> ${orderResult.outcomeTokens.toFixed(4)} tokens<br>
                <br>
                <a href="https://polymarket.com" target="_blank" class="btn btn-secondary">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ Polymarket</a>
            </div>
        `;

    } catch (error) {
        console.error('Bridge process error:', error);
        status.innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${error.message}</div>`;
        
        // Mark current step as error
        const activeStep = document.querySelector('.step.active');
        if (activeStep) {
            activeStep.classList.remove('active');
            activeStep.classList.add('error');
            activeStep.querySelector('.step-status').textContent = '‚ùå';
        }
    }
}

function updateStep(stepNumber, state, icon = '') {
    const step = document.getElementById(`step${stepNumber}`);
    const status = document.getElementById(`step${stepNumber}Status`);
    
    // Remove all states
    step.classList.remove('active', 'completed', 'error');
    
    // Add new state
    if (state) {
        step.classList.add(state);
    }
    
    // Update icon
    if (icon) {
        status.textContent = icon;
    }
}

async function swapBNBToUSDT(amountBNB) {
    // Implement PancakeSwap swap logic from bridge.js
    const pancakeRouter = '0x10ED43C718714eb63d5aA57B78B54704E256024E';
    const wbnb = '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c';
    const usdt = '0x55d398326f99059fF775485246999027B3197955';

    const routerABI = [
        'function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts)'
    ];

    const router = new ethers.Contract(pancakeRouter, routerABI, wallet.signer);
    
    const path = [wbnb, usdt];
    const deadline = Math.floor(Date.now() / 1000) + 600;
    const amountOutMin = 0; // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–µ–Ω slippage calculation
    
    const tx = await router.swapExactETHForTokens(
        amountOutMin,
        path,
        await wallet.signer.getAddress(),
        deadline,
        { value: ethers.utils.parseEther(amountBNB.toString()) }
    );
    
    const receipt = await tx.wait();
    console.log('Swap completed:', receipt.transactionHash);
    
    // Return USDT amount (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É BNB)
    const bnbPrice = bnbPriceTracker.getPrice();
    return amountBNB * bnbPrice;
}

async function sendThroughStargate(usdtAmount, toAddress) {
    // Stargate bridge logic
    const stargateRouter = '0x4a364f8c717cAAD9A442737Eb7b8A55cc6cf18D8';
    
    // Simplified version - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π Stargate API
    console.log(`Bridging ${usdtAmount} USDT to ${toAddress} on Polygon...`);
    
    // Simulate bridge transaction
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    return 'bridge_tx_hash';
}

async function waitForUSDC(proxyAddress, expectedAmount) {
    console.log(`Waiting for ${expectedAmount} USDC on ${proxyAddress}...`);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    // –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    console.log('USDC received!');
}

async function approveUSDCForBetting(proxyAddress, amount) {
    const usdcAddress = '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174';
    const ctfExchange = '0x4bFb41d5B3570DeFd03C39a9A4D8dE6Bd8B8982E';
    
    const usdcContract = new ethers.Contract(
        usdcAddress,
        ['function approve(address spender, uint256 amount) returns (bool)'],
        wallet.signer
    );
    
    const amountWei = ethers.utils.parseUnits(amount.toString(), 6);
    
    const tx = await usdcContract.approve(ctfExchange, amountWei);
    await tx.wait();
    
    console.log('USDC approved for CTF Exchange');
}

async function placePolymarketOrder(usdcAmount, makerAddress) {
    const result = await polymarketOrderSigner.placeOrder({
        tokenId: selectedToken.id,
        makerAddress: makerAddress,
        usdcAmount: usdcAmount,
        side: 'BUY',
        signer: wallet.signer
    });
    
    return result;
}

function showError(message) {
    const container = document.getElementById('marketsList');
    container.innerHTML = `<div class="error">${message}</div>`;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ proxy –∞–¥—Ä–µ—Å–æ–º
async function manageProxyAddress() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
        if (!wallet.address) {
            const shouldConnect = confirm('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫. –ü–æ–¥–∫–ª—é—á–∏—Ç—å?');
            if (shouldConnect) {
                await connectWallet();
            }
            return;
        }

        const currentProxy = localStorage.getItem(`polymarket_proxy_${wallet.address}`);
        
        const message = currentProxy 
            ? `–¢–µ–∫—É—â–∏–π Proxy –∞–¥—Ä–µ—Å:\n${currentProxy}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`
            : '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Polymarket Proxy Wallet –∞–¥—Ä–µ—Å:\n\n(–ù–∞–π—Ç–∏ –Ω–∞ polymarket.com –≤ –ø—Ä–æ—Ñ–∏–ª–µ)';
        
        const newProxy = prompt(message, currentProxy || '');
        
        if (newProxy === null) return; // –û—Ç–º–µ–Ω–∞
        
        if (newProxy === '') {
            // –£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
            localStorage.removeItem(`polymarket_proxy_${wallet.address}`);
            alert('Proxy –∞–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–≤–∫–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —Å–Ω–æ–≤–∞.');
            return;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        if (!ethers.utils.isAddress(newProxy)) {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞!');
            return;
        }
        
        const checksummedProxy = ethers.utils.getAddress(newProxy);
        localStorage.setItem(`polymarket_proxy_${wallet.address}`, checksummedProxy);
        
        alert(`‚úì Proxy –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n${checksummedProxy}`);
        
        // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –º–æ–¥–∞–ª –æ—Ç–∫—Ä—ã—Ç
        const proxyDisplay = document.getElementById('userProxyAddress');
        if (proxyDisplay) {
            proxyDisplay.textContent = checksummedProxy;
        }
    } catch (error) {
        console.error('Error managing proxy:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}