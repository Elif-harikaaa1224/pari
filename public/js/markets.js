// Markets page functionality
let markets = [];
let selectedMarket = null;
let selectedToken = null;
let config = null;

// Auto-resume pending order after page reload (Rabby wallet switches networks)
window.addEventListener('load', async () => {
    console.log('üîÑ Page loaded, checking for pending order...');
    
    // Wait for wallet to initialize
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const pendingOrder = localStorage.getItem('pendingOrder');
    console.log('üì¶ Pending order:', pendingOrder ? 'FOUND' : 'NOT FOUND');
    
    if (pendingOrder) {
        try {
            const order = JSON.parse(pendingOrder);
            console.log('üìù Order data:', order);
            
            // Check if order is still valid (not older than 10 minutes)
            const age = Date.now() - order.timestamp;
            console.log(`‚è∞ Order age: ${Math.floor(age / 1000)} seconds`);
            
            if (age > 10 * 60 * 1000) {
                console.log('‚ö†Ô∏è Pending order expired, clearing...');
                localStorage.removeItem('pendingOrder');
                return;
            }
            
            // Check current network
            if (window.ethereum) {
                const chainId = await window.ethereum.request({ method: 'eth_chainId' });
                const currentChainId = parseInt(chainId, 16);
                
                console.log('üîÑ Auto-resume: Current chainId:', currentChainId);
                
                if (currentChainId === 137) {
                    // Already on Polygon - auto-complete order
                    console.log('‚úÖ On Polygon - auto-completing order...');
                    
                    // Small delay for UI to stabilize
                    setTimeout(() => {
                        autoCompleteOrder(order);
                    }, 500);
                } else {
                    // Still on BSC - show reminder
                    console.log('‚è≥ Still on BSC (chainId:', currentChainId, ') - waiting for manual switch to Polygon');
                    showPolygonSwitchReminder(order);
                }
            } else {
                console.log('‚ùå window.ethereum not found');
            }
        } catch (error) {
            console.error('‚ùå Error processing pending order:', error);
        }
    } else {
        console.log('‚ÑπÔ∏è No pending order to resume');
    }
});

// Listen for network changes to auto-complete order when user switches to Polygon
if (window.ethereum) {
    console.log('üëÇ Registering chainChanged listener...');
    
    window.ethereum.on('chainChanged', async (chainIdHex) => {
        const chainId = parseInt(chainIdHex, 16);
        console.log('üîÑ Network changed to:', chainId);
        
        const pendingOrder = localStorage.getItem('pendingOrder');
        console.log('üì¶ Pending order in localStorage:', pendingOrder ? 'EXISTS' : 'NOT FOUND');
        
        if (pendingOrder && chainId === 137) {
            console.log('‚úÖ Switched to Polygon - auto-completing order...');
            
            try {
                const order = JSON.parse(pendingOrder);
                console.log('üìù Order data:', order);
                
                // Small delay for network to stabilize
                setTimeout(() => {
                    console.log('üöÄ Calling autoCompleteOrder...');
                    autoCompleteOrder(order);
                }, 1000);
            } catch (error) {
                console.error('‚ùå Error auto-completing order:', error);
            }
        } else if (pendingOrder) {
            console.log(`‚è≥ Waiting for Polygon network. Current: ${chainId}`);
        }
    });
    
    console.log('‚úÖ chainChanged listener registered');
}

async function initMarkets() {
    const isConnected = await wallet.isConnected();
    
    if (isConnected) {
        config = await loadConfig();
        
        // Display wallet
        const address = await wallet.getAddress();
        document.getElementById('walletDisplay').textContent = 
            `${address.slice(0, 6)}...${address.slice(-4)}`;

        // Load balance and check proxy
        await updateBalance();
        await checkAndDisplayProxy();
    } else {
        // Show connect wallet button
        document.getElementById('walletDisplay').innerHTML = 
            '<button onclick="connectWallet()" class="btn btn-secondary">–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫</button>';
        document.getElementById('bettingBalance').textContent = '-';
    }

    // Load markets regardless of wallet connection
    await loadMarkets();

    // Setup modal
    setupModal();
}

async function checkAndDisplayProxy() {
    try {
        const userAddress = wallet.address;
        const savedProxy = localStorage.getItem(`polymarket_proxy_${userAddress}`);
        
        if (savedProxy && ethers.utils.isAddress(savedProxy)) {
            console.log('üìå Your Polymarket Proxy Wallet:', savedProxy);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ proxy –∞–¥—Ä–µ—Å
            const proxyInfo = document.createElement('div');
            proxyInfo.style.cssText = 'margin: 10px 0; padding: 10px; background: #f0f0f0; border-radius: 5px; font-size: 12px;';
            proxyInfo.innerHTML = `
                <strong>üîë Polymarket Proxy:</strong> 
                <code>${savedProxy.slice(0, 10)}...${savedProxy.slice(-8)}</code>
                <button onclick="manageProxyAddress()" style="margin-left: 10px; padding: 2px 8px;">‚öôÔ∏è</button>
            `;
            
            const container = document.querySelector('.markets-container') || document.body;
            container.insertBefore(proxyInfo, container.firstChild);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å proxy
            const proxyWarning = document.createElement('div');
            proxyWarning.style.cssText = 'margin: 10px 0; padding: 10px; background: #fff3cd; border: 1px solid #ffc107; border-radius: 5px;';
            proxyWarning.innerHTML = `
                ‚ö†Ô∏è <strong>Proxy Wallet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</strong><br>
                –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º Polymarket Proxy Wallet.<br>
                <button onclick="manageProxyAddress()" class="btn btn-primary" style="margin-top: 5px;">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Proxy</button>
            `;
            
            const container = document.querySelector('.markets-container') || document.body;
            container.insertBefore(proxyWarning, container.firstChild);
        }
    } catch (error) {
        console.error('Error checking proxy:', error);
    }
}

async function connectWallet() {
    try {
        await wallet.connect();
        window.location.reload();
    } catch (error) {
        console.error('Error connecting wallet:', error);
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ' + error.message);
    }
}

async function updateBalance() {
    try {
        const userAddress = wallet.address;
        const savedProxy = localStorage.getItem(`polymarket_proxy_${userAddress}`);
        
        if (savedProxy && ethers.utils.isAddress(savedProxy)) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏
            const polygonRPC = 'https://polygon-rpc.com';
            const polygonProvider = new ethers.providers.JsonRpcProvider(polygonRPC);
            const usdcContract = new ethers.Contract(
                '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174', // USDC on Polygon
                ['function balanceOf(address) view returns (uint256)'],
                polygonProvider
            );
            
            const balance = await usdcContract.balanceOf(savedProxy);
            const balanceFormatted = ethers.utils.formatUnits(balance, 6); // USDC has 6 decimals
            
            document.getElementById('bettingBalance').textContent = 
                parseFloat(balanceFormatted).toFixed(2);
            console.log(`üí∞ USDC balance on proxy (${savedProxy}):`, balanceFormatted);
        } else {
            document.getElementById('bettingBalance').textContent = '0.00';
            console.log('‚ö†Ô∏è No proxy address configured');
        }
    } catch (error) {
        console.error('Error loading balance:', error);
        document.getElementById('bettingBalance').textContent = '0.00';
    }
}

async function loadMarkets() {
    try {
        const response = await fetch('/api/markets');
        const data = await response.json();
        
        if (data.success) {
            markets = data.data;
            console.log('Markets loaded:', markets.length);
            console.log('First market structure:', markets[0]);
            displayMarkets(markets);
        } else {
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä–∫–µ—Ç—ã');
        }
    } catch (error) {
        console.error('Error loading markets:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–∫–µ—Ç–æ–≤');
    } finally {
        document.getElementById('marketsLoading').style.display = 'none';
    }
}

function displayMarkets(marketsList) {
    const container = document.getElementById('marketsList');
    container.innerHTML = '';

    if (!marketsList || marketsList.length === 0) {
        container.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–æ–≤</p>';
        return;
    }

    marketsList.forEach(market => {
        const card = createMarketCard(market);
        container.appendChild(card);
    });
}

function createMarketCard(market) {
    const card = document.createElement('div');
    card.className = 'market-card';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ö–æ–¥–∞–º–∏
    if (market.isMultiOutcome && market.outcomes && market.outcomes.length > 1) {
        return createMultiOutcomeCard(market);
    } else {
        return createBinaryMarketCard(market);
    }
}

function createMultiOutcomeCard(event) {
    const card = document.createElement('div');
    card.className = 'market-card multi-outcome';

    const question = event.question || event.title || '–°–æ–±—ã—Ç–∏–µ';
    
    // –û–±—ä–µ–º –∏ –¥–∞—Ç–∞
    const volume = event.volume ? `${(event.volume / 1000).toFixed(0)}K` : 
                   event.volume24hr ? `${(event.volume24hr / 1000).toFixed(0)}K` : '-';
    const endDate = event.endDate || event.endDateIso ? 
        new Date(event.endDate || event.endDateIso).toLocaleDateString('ru-RU') : '-';
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ Polymarket
    const eventSlug = event.slug;
    const polymarketUrl = eventSlug ? `https://polymarket.com/event/${eventSlug}` : '#';
    const imageSrc = event.image || '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –∏—Å—Ö–æ–¥–∞
    const topOutcomes = event.outcomes.slice(0, 2);
    
    const outcomesHtml = topOutcomes.map(outcome => {
        const percentage = (outcome.price * 100).toFixed(0);
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã/–≤–∞—Ä–∏–∞–Ω—Ç–∞ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        let outcomeText = outcome.question;
        
        // –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏—è
        if (event.question) {
            outcomeText = outcomeText.replace(event.question, '');
        }
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
        outcomeText = outcomeText
            .replace(/^Will\s+/i, '')
            .replace(/^Does\s+/i, '')
            .replace(/^Is\s+/i, '')
            .replace(/\s+win.*$/i, '')
            .replace(/\?$/g, '')
            .trim();
        
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        if (!outcomeText) {
            outcomeText = outcome.question;
        }
        
        return `
            <div class="outcome-compact">
                <span class="outcome-name">${outcomeText}</span>
                <span class="outcome-percent">${percentage}%</span>
            </div>
        `;
    }).join('');

    card.innerHTML = `
        <div class="card-top">
            <div class="card-image-wrap">
                <img src="${imageSrc}" class="card-image" alt="" onerror="this.style.display='none'" />
            </div>
            <div class="card-head">
                <h4 class="card-title">${question}</h4>
                <div class="card-meta">
                    <span class="meta-item">üìä ${volume}</span>
                    <span class="meta-item">üìÖ ${endDate}</span>
                </div>
            </div>
        </div>
        <div class="market-outcomes-compact">
            ${outcomesHtml}
        </div>
        ${event.outcomes.length > 2 ? `<div class="view-all-btn">View all ${event.outcomes.length} outcomes</div>` : ''}
    `;

    // Add click handler to open modal with all outcomes
    card.addEventListener('click', (e) => {
        // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª, –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å—Å—ã–ª–∫—É
        if (e.target.tagName === 'A') return;
        openOutcomesModal(event);
    });

    return card;
}

function createBinaryMarketCard(market) {
    const card = document.createElement('div');
    card.className = 'market-card';

    const question = market.question || market.title || '–°–æ–±—ã—Ç–∏–µ';
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
    let yesPrice = '-';
    let noPrice = '-';
    let yesTokenId = '';
    let noTokenId = '';
    
    // Polymarket API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tokens –º–∞—Å—Å–∏–≤
    if (market.tokens && market.tokens.length >= 2) {
        // –ü–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω –æ–±—ã—á–Ω–æ YES
        const yesToken = market.tokens[0];
        const noToken = market.tokens[1];
        
        yesTokenId = yesToken.token_id || yesToken.id || '';
        noTokenId = noToken.token_id || noToken.id || '';
        
        // –¶–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ price –∏–ª–∏ outcome
        yesPrice = yesToken.price || yesToken.outcome || 0.5;
        noPrice = noToken.price || noToken.outcome || 0.5;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        yesPrice = (parseFloat(yesPrice) * 100).toFixed(1);
        noPrice = (parseFloat(noPrice) * 100).toFixed(1);
    } else if (market.outcomes && market.outcomes.length >= 2) {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        yesPrice = (parseFloat(market.outcomes[0].price || 0.5) * 100).toFixed(1);
        noPrice = (parseFloat(market.outcomes[1].price || 0.5) * 100).toFixed(1);
        yesTokenId = market.outcomes[0].token_id || '';
        noTokenId = market.outcomes[1].token_id || '';
    }
    
    // –û–±—ä–µ–º –∏ –¥–∞—Ç–∞
    const volume = market.volume ? `${(market.volume / 1000).toFixed(0)}K` : 
                   market.volume24hr ? `${(market.volume24hr / 1000).toFixed(0)}K` : '-';
    const endDate = market.end_date_iso || market.endDate || market.endDateIso ? 
        new Date(market.end_date_iso || market.endDate || market.endDateIso).toLocaleDateString('ru-RU') : '-';
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ Polymarket - –∏—Å–ø–æ–ª—å–∑—É–µ–º slug (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ id
    const marketIdentifier = market.slug || market.id;
    const polymarketUrl = marketIdentifier ? `https://polymarket.com/event/${marketIdentifier}` : '#';
    const imageSrc = market.image || market.icon || (market.events && market.events[0] && market.events[0].image) || '';

    card.innerHTML = `
        <div class="card-top">
            <div class="card-image-wrap">
                <img src="${imageSrc}" class="card-image" alt="" onerror="this.style.display='none'" />
            </div>
            <div class="card-head">
                <h4 class="card-title">${question}</h4>
                <div class="card-meta">
                    <span class="meta-item">üìä ${volume}</span>
                    <span class="meta-item">üìÖ ${endDate}</span>
                    ${marketIdentifier ? `<a href="${polymarketUrl}" target="_blank" class="meta-link">üîó Polymarket</a>` : ''}
                </div>
            </div>
        </div>
        <div class="market-outcomes">
            <button class="outcome-btn yes-btn" data-market-id="${market.conditionId || market.condition_id || market.id}" data-outcome="YES" data-token="${yesTokenId}" data-price="${yesPrice}">
                <span class="outcome-label">YES</span>
                <span class="outcome-price">${yesPrice}%</span>
            </button>
            <button class="outcome-btn no-btn" data-market-id="${market.conditionId || market.condition_id || market.id}" data-outcome="NO" data-token="${noTokenId}" data-price="${noPrice}">
                <span class="outcome-label">NO</span>
                <span class="outcome-price">${noPrice}%</span>
            </button>
        </div>
    `;

    // Add click handlers to outcome buttons
    const outcomeButtons = card.querySelectorAll('.outcome-btn');
    outcomeButtons.forEach(btn => {
        btn.addEventListener('click', () => openBettingModal(market, btn));
    });

    return card;
}

async function openBettingModal(market, button) {
    // Check if wallet is connected
    if (!wallet.address) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ proxy –∞–¥—Ä–µ—Å–∞
    const userAddress = wallet.address;
    const savedProxy = localStorage.getItem(`polymarket_proxy_${userAddress}`);
    
    if (!savedProxy || !ethers.utils.isAddress(savedProxy)) {
        const shouldSetup = confirm(
            '‚ö†Ô∏è Proxy Wallet –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n' +
            '–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –Ω—É–∂–µ–Ω Polymarket Proxy Wallet.\n\n' +
            '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–π—á–∞—Å?'
        );
        if (shouldSetup) {
            await manageProxyAddress();
        }
        return;
    }
    
    selectedMarket = market;
    selectedToken = {
        id: button.dataset.token,
        outcome: button.dataset.outcome,
        price: parseFloat(button.dataset.price) / 100
    };

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (1 / –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    const odds = selectedToken.price > 0 ? (1 / selectedToken.price).toFixed(2) : '-';
    
    document.getElementById('betMarketTitle').textContent = market.question;
    document.getElementById('betOutcome').textContent = selectedToken.outcome;
    document.getElementById('betOdds').textContent = odds;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º proxy address
    document.getElementById('userProxyAddress').textContent = savedProxy;
    
    document.getElementById('bettingModal').style.display = 'block';
    document.getElementById('betAmountBNB').value = '';
    document.getElementById('betPayout').textContent = '-';
    document.getElementById('betAmountUSDC').textContent = '0';
    document.getElementById('betStatus').innerHTML = '';
}

function setupModal() {
    const modal = document.getElementById('bettingModal');
    const bridgeModal = document.getElementById('bridgeModal');
    
    // Close betting modal when clicking X
    const closeBtns = document.querySelectorAll('.close');
    closeBtns.forEach(btn => {
        btn.onclick = () => {
            modal.style.display = 'none';
            bridgeModal.style.display = 'none';
        };
    });
    
    // Close modals when clicking outside
    window.onclick = (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
        if (event.target === bridgeModal) {
            bridgeModal.style.display = 'none';
        }
        // Close outcomes modal
        const outcomesModal = document.getElementById('outcomesModal');
        if (event.target === outcomesModal) {
            outcomesModal.style.display = 'none';
        }
    };

    // Calculate payout on BNB amount change
    const betAmountInput = document.getElementById('betAmountBNB');
    if (betAmountInput) {
        betAmountInput.addEventListener('input', calculatePayout);
    }
    
    // Place bet button
    const placeBetBtn = document.getElementById('placeBetBtn');
    if (placeBetBtn) {
        placeBetBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('üéØ Place bet button clicked!');
            placeBet(e);
            return false;
        });
        console.log('‚úì Place bet button handler attached');
    } else {
        console.error('‚ùå placeBetBtn not found!');
    }
}

function openOutcomesModal(event) {
    const modal = document.getElementById('outcomesModal');
    if (!modal) {
        createOutcomesModal();
        return openOutcomesModal(event);
    }
    
    const modalTitle = document.getElementById('outcomesModalTitle');
    const outcomesList = document.getElementById('outcomesModalList');
    
    modalTitle.textContent = event.question;
    
    // Render all outcomes
    outcomesList.innerHTML = event.outcomes.map((outcome, idx) => {
        const percentage = (outcome.price * 100).toFixed(1);
        let outcomeText = outcome.question;
        
        if (event.question) {
            outcomeText = outcomeText.replace(event.question, '');
        }
        
        outcomeText = outcomeText
            .replace(/^Will\s+/i, '')
            .replace(/^Does\s+/i, '')
            .replace(/^Is\s+/i, '')
            .replace(/\s+win.*$/i, '')
            .replace(/\?$/g, '')
            .trim();
        
        if (!outcomeText) {
            outcomeText = outcome.question;
        }
        
        return `
            <div class="outcome-item" data-outcome-idx="${idx}">
                <span class="outcome-item-name">${outcomeText}</span>
                <div class="outcome-item-right">
                    <span class="outcome-item-percent">${percentage}%</span>
                    <button class="outcome-bet-btn">Bet</button>
                </div>
            </div>
        `;
    }).join('');
    
    // Add click handlers to bet buttons
    outcomesList.querySelectorAll('.outcome-bet-btn').forEach((btn, idx) => {
        btn.addEventListener('click', (e) => {
            e.stopPropagation();
            const outcome = event.outcomes[idx];
            modal.style.display = 'none';
            
            // –°–æ–∑–¥–∞—ë–º –ø—Å–µ–≤–¥–æ-–∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ dataset –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –¥–ª—è openBettingModal
            const fakeButton = {
                dataset: {
                    token: outcome.tokenId,
                    outcome: 'YES', // –í—Å–µ–≥–¥–∞ YES –¥–ª—è –º–Ω–æ–≥–æ–≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã—Ö
                    price: (outcome.price * 100).toFixed(1) // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                }
            };
            
            openBettingModal({
                ...event,
                question: outcome.question,
                conditionId: outcome.conditionId,
                tokens: [
                    { token_id: outcome.tokenId, outcome: 'Yes', price: outcome.price.toString() },
                    { token_id: outcome.noTokenId, outcome: 'No', price: (1 - outcome.price).toString() }
                ]
            }, fakeButton);
        });
    });
    
    modal.style.display = 'block';
}

function createOutcomesModal() {
    const modal = document.createElement('div');
    modal.id = 'outcomesModal';
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content outcomes-modal-content">
            <span class="close" onclick="document.getElementById('outcomesModal').style.display='none'">&times;</span>
            <h3 id="outcomesModalTitle">All Outcomes</h3>
            <div id="outcomesModalList" class="outcomes-list"></div>
        </div>
    `;
    document.body.appendChild(modal);
}

function calculatePayout() {
    const amountBNB = parseFloat(document.getElementById('betAmountBNB').value);
    
    if (!amountBNB || amountBNB <= 0 || !selectedToken || !selectedToken.price) {
        document.getElementById('betPayout').textContent = '-';
        document.getElementById('betAmountUSDC').textContent = '0';
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É BNB –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞
    const bnbPrice = bnbPriceTracker.getPrice();
    const usdcAmount = amountBNB * bnbPrice;
    document.getElementById('betAmountUSDC').textContent = usdcAmount.toFixed(2);

    // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à = —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = 1 / –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    const payout = usdcAmount / selectedToken.price;
    document.getElementById('betPayout').textContent = payout.toFixed(2);
}

async function placeBet(event) {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (event) {
        event.preventDefault();
        event.stopPropagation();
    }
    
    const amountBNB = parseFloat(document.getElementById('betAmountBNB').value);
    
    if (!amountBNB || amountBNB <= 0) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ BNB');
        return false;
    }

    try {
        // 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        if (!wallet.address) {
            alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
            return false;
        }

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ proxy –∞–¥—Ä–µ—Å–∞
        const userAddress = wallet.address;
        const savedProxy = localStorage.getItem(`polymarket_proxy_${userAddress}`);
        
        if (!savedProxy || !ethers.utils.isAddress(savedProxy)) {
            alert('‚ö†Ô∏è Proxy –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ù–∞–∂–º–∏—Ç–µ "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Proxy"');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Symbiosis
        if (typeof symbiosisBridge === 'undefined') {
            alert('‚ùå Symbiosis Bridge –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            console.error('symbiosisBridge is undefined!');
            return;
        }

        console.log('=== Starting bet placement ===');
        console.log('Connected wallet address:', wallet.address);
        console.log('Proxy address:', savedProxy);
        console.log('Bet amount (BNB):', amountBNB);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å BSC
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const network = await provider.getNetwork();
        console.log('Current network:', network.chainId, network.name);
        
        if (network.chainId !== 56) {
            alert(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Ç—å!\n\n–¢–µ–∫—É—â–∞—è —Å–µ—Ç—å: ${network.name || network.chainId}\n–ù—É–∂–Ω–∞: BNB Smart Chain (BSC)\n\n–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Å–µ—Ç—å –≤ –∫–æ—à–µ–ª—å–∫–µ –Ω–∞ BSC –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
            return false;
        }
        
        // 2. –ü–æ–∫–∞–∑–∞—Ç—å bridge modal –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
        console.log('Opening bridge process modal...');
        await showBridgeProcess(amountBNB, savedProxy);

    } catch (error) {
        console.error('Bet placement error:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
    
    return false; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ª—é–±–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
}

async function showBridgeProcess(amountBNB, proxyAddress) {
    console.log('=== showBridgeProcess called ===');
    console.log('Amount BNB:', amountBNB);
    console.log('Proxy address:', proxyAddress);
    console.log('symbiosisBridge exists:', typeof symbiosisBridge !== 'undefined');
    
    // Open bridge modal
    console.log('Closing betting modal...');
    document.getElementById('bettingModal').style.display = 'none';
    console.log('Opening bridge modal...');
    document.getElementById('bridgeModal').style.display = 'block';
    console.log('Modals switched');

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É BNB
    const bnbPrice = bnbPriceTracker.getPrice();
    const usdcAmount = amountBNB * bnbPrice;
    console.log('BNB price:', bnbPrice, 'USDC amount:', usdcAmount);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const updateElement = (id, value) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        } else {
            console.warn(`Element with id "${id}" not found`);
        }
    };

    updateElement('bridgeBNBAmount', `${amountBNB} BNB`);
    updateElement('bridgeUSDCAmount', `‚âà${usdcAmount.toFixed(2)} USDC`);
    updateElement('bridgeToAddress', `${proxyAddress.slice(0, 10)}...${proxyAddress.slice(-8)}`);

    const status = document.getElementById('bridgeStatus');
    if (!status) {
        console.error('Bridge status element not found!');
        return;
    }

    try {
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const onStatusUpdate = (message) => {
            status.innerHTML = `<div class="loading">${message}</div>`;
        };

        // Step 1: –ü–æ–ª—É—á–∏—Ç—å quote
        updateStep(1, 'active');
        onStatusUpdate('‚è≥ –†–∞—Å—á–µ—Ç –ª—É—á—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...');
        
        const estimatedOutput = await symbiosisBridge.getQuote(amountBNB);
        console.log('Estimated USDC output:', estimatedOutput);
        
        updateElement('bridgeUSDCAmount', `‚âà${estimatedOutput} USDC`);
        updateStep(1, 'completed', '‚úÖ');
        
        // Step 2-3: –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π bridge –ø—Ä–æ—Ü–µ—Å—Å (PancakeSwap + Stargate)
        updateStep(2, 'active');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π provider (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —É–∂–µ –Ω–∞ BSC)
        const currentProvider = new ethers.providers.Web3Provider(window.ethereum);
        
        const result = await symbiosisBridge.bridgeAndBet(
            amountBNB,
            proxyAddress,
            currentProvider,
            onStatusUpdate
        );
        
        updateStep(2, 'completed', '‚úÖ');
        updateStep(3, 'completed', '‚úÖ');
        
        // Step 4: –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è USDC –Ω–∞ Polygon (–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ bridge)
        updateStep(4, 'active');
        onStatusUpdate('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è USDC –Ω–∞ Polygon (5-15 –º–∏–Ω)...');
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π provider –¥–ª—è Polygon (–±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏ –≤ –∫–æ—à–µ–ª—å–∫–µ)
        const polygonRPC = 'https://polygon-rpc.com';
        const polygonProvider = new ethers.providers.JsonRpcProvider(polygonRPC);
        const usdcContract = new ethers.Contract(
            '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174', // USDC on Polygon
            ['function balanceOf(address) view returns (uint256)'],
            polygonProvider
        );
        
        // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 30000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        let usdcBalance = '0';
        for (let i = 0; i < 20; i++) {
            try {
                const balance = await usdcContract.balanceOf(proxyAddress);
                usdcBalance = ethers.utils.formatUnits(balance, 6); // USDC has 6 decimals
                console.log(`Balance check ${i + 1}/20:`, usdcBalance);
                
                if (parseFloat(usdcBalance) >= parseFloat(estimatedOutput) * 0.9) {
                    break; // –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω!
                }
            } catch (e) {
                console.error('Balance check error:', e);
            }
            
            onStatusUpdate(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ USDC... –ü—Ä–æ–≤–µ—Ä–∫–∞ ${i + 1}/20 (${Math.floor((i + 1) * 30)}—Å)`);
            await new Promise(resolve => setTimeout(resolve, 30000)); // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        }
        
        updateStep(4, 'completed', '‚úÖ');
        
        // Step 5: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ - MANUAL
        updateStep(5, 'active');
        
        console.log('=== Step 5: Manual bet placement ===');
        console.log('Selected market:', selectedMarket);
        console.log('Selected token:', selectedToken);
        console.log('USDC balance:', usdcBalance);
        console.log('Proxy address:', proxyAddress);
        console.log('Original BNB amount:', amountBNB);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É USDC –¥–ª—è —Å—Ç–∞–≤–∫–∏ (BNB amount * BNB price * 0.98 slippage)
        const estimatedUSDC = parseFloat(estimatedOutput) || parseFloat(usdcBalance);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        const pendingOrder = {
            marketSlug: selectedMarket.slug,
            marketQuestion: selectedMarket.question,
            tokenId: selectedToken.id,
            outcome: selectedToken.outcome,
            price: selectedToken.price,
            usdcAmount: estimatedUSDC.toFixed(2), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é —Å—É–º–º—É, –∞ –Ω–µ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å
            proxyAddress: proxyAddress,
            timestamp: Date.now()
        };
        
        localStorage.setItem('pendingOrder', JSON.stringify(pendingOrder));
        console.log('‚úì Saved pending order to localStorage');
        
        updateStep(5, 'completed', '‚úÖ');
        
        // Show manual button to place bet
        status.innerHTML = `
            <div class="success">
                ‚úÖ <strong>Bridge —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</strong><br><br>
                <strong>USDC –ø–æ–ª—É—á–µ–Ω:</strong> ${usdcBalance}<br>
                <strong>–°—É–º–º–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏:</strong> ${estimatedUSDC.toFixed(2)} USDC<br>
                <strong>–ê–¥—Ä–µ—Å:</strong> ${proxyAddress}<br><br>
                <strong>Bridge TX:</strong> <a href="https://bscscan.com/tx/${result.txHash}" target="_blank">${result.txHash.slice(0, 10)}...</a><br><br>
                
                <div style="background: #e7f3ff; padding: 15px; border-radius: 8px; margin-top: 15px; border: 2px solid #2196F3;">
                    <strong>üìù –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:</strong><br><br>
                    1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ<br>
                    2. –ü–æ–¥–ø–∏—à–∏—Ç–µ –æ—Ä–¥–µ—Ä –≤ –∫–æ—à–µ–ª—å–∫–µ<br>
                    3. –ì–æ—Ç–æ–≤–æ!<br><br>
                    <button onclick="completePendingOrder()" class="btn btn-primary" style="width: 100%; padding: 15px; font-size: 18px; font-weight: bold;">
                        üéØ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ Polymarket
                    </button>
                </div>
                <br>
                <a href="https://layerzeroscan.com/tx/${result.txHash}" target="_blank" class="btn btn-secondary">üîç LayerZero</a>
                <a href="https://polygonscan.com/address/${proxyAddress}" target="_blank" class="btn btn-secondary">üìä Polygon</a>
            </div>
        `;
        
        // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
        setTimeout(updateBalance, 2000);

    } catch (error) {
        console.error('Bridge process error:', error);
        status.innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${error.message}<br><br>–î–µ—Ç–∞–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ (F12)</div>`;
        
        // Mark current step as error
        const activeStep = document.querySelector('.step.active');
        if (activeStep) {
            activeStep.classList.remove('active');
            activeStep.classList.add('error');
            const statusSpan = activeStep.querySelector('.step-status');
            if (statusSpan) statusSpan.textContent = '‚ùå';
        }
    }
}

// Complete pending order from localStorage
async function completePendingOrder() {
    try {
        const pendingOrderData = localStorage.getItem('pendingOrder');
        if (!pendingOrderData) {
            alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞');
            return;
        }
        
        const order = JSON.parse(pendingOrderData);
        console.log('Completing pending order:', order);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selectedToken –∏ selectedMarket
        selectedToken = {
            id: order.tokenId,
            outcome: order.outcome,
            price: order.price
        };
        
        selectedMarket = {
            slug: order.marketSlug,
            question: order.marketQuestion
        };
        
        // –°–æ–∑–¥–∞–µ–º –ù–û–í–û–ï –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
        let modal = document.getElementById('orderPlacementModal');
        if (!modal) {
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            modal = document.createElement('div');
            modal.id = 'orderPlacementModal';
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <span class="close" onclick="closeOrderModal()">&times;</span>
                    <h2>–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏</h2>
                    <div class="order-status"></div>
                </div>
            `;
            document.body.appendChild(modal);
        }
        
        modal.style.display = 'block';
        const statusDiv = modal.querySelector('.order-status');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ Polygon
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const network = await provider.getNetwork();
        
        if (network.chainId !== 137) {
            statusDiv.innerHTML = `
                <div class="info" style="background: #fff3cd; border: 2px solid #ffc107;">
                    ‚ö†Ô∏è <strong>–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Å–µ—Ç—å –Ω–∞ Polygon</strong><br><br>
                    –¢–µ–∫—É—â–∞—è —Å–µ—Ç—å: ${network.name || network.chainId}<br>
                    –ù—É–∂–Ω–∞ —Å–µ—Ç—å: <strong>Polygon (137)</strong><br><br>
                    1. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Å–µ—Ç—å –≤ –∫–æ—à–µ–ª—å–∫–µ –Ω–∞ Polygon<br>
                    2. –ù–∞–∂–º–∏—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞<br><br>
                    <button onclick="completePendingOrder()" class="btn btn-primary" style="padding: 10px 20px;">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º provider –∏ signer –¥–ª—è Polygon
        wallet.provider = provider;
        wallet.signer = provider.getSigner();
        
        statusDiv.innerHTML = `
            <div class="info">
                ‚úÖ –°–µ—Ç—å: Polygon<br><br>
                ‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—å –æ—Ä–¥–µ—Ä–∞...<br><br>
                <strong>–°–æ–±—ã—Ç–∏–µ:</strong> ${order.marketQuestion}<br>
                <strong>–ò—Å—Ö–æ–¥:</strong> ${order.outcome}<br>
                <strong>–°—É–º–º–∞:</strong> ${order.usdcAmount} USDC<br><br>
                <small>–ü–æ–¥–ø–∏—à–∏—Ç–µ –≤ –∫–æ—à–µ–ª—å–∫–µ...</small>
            </div>
        `;
        
        // –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É (—É–∂–µ –Ω–∞ Polygon)
        const orderResult = await placePolymarketOrder(
            parseFloat(order.usdcAmount),
            order.proxyAddress,
            wallet.address
        );
        
        console.log('‚úì Order placed:', orderResult);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage
        localStorage.removeItem('pendingOrder');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        statusDiv.innerHTML = `
            <div class="success">
                ‚úÖ <strong>–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞!</strong><br><br>
                <strong>–°–æ–±—ã—Ç–∏–µ:</strong> ${order.marketQuestion}<br>
                <strong>–ò—Å—Ö–æ–¥:</strong> ${order.outcome}<br>
                <strong>–°—É–º–º–∞:</strong> ${order.usdcAmount} USDC<br><br>
                ${orderResult.orderID ? `<strong>Order ID:</strong> ${orderResult.orderID}<br><br>` : ''}
                <a href="https://polymarket.com/event/${order.marketSlug}" target="_blank" class="btn btn-primary">üìä View on Polymarket</a>
            </div>
        `;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await updateBalance();
        
    } catch (error) {
        console.error('Error completing order:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

function closeOrderModal() {
    const modal = document.getElementById('orderPlacementModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function updateStep(stepNumber, state, icon = '') {
    const step = document.getElementById(`step${stepNumber}`);
    const status = document.getElementById(`step${stepNumber}Status`);
    
    // Remove all states
    step.classList.remove('active', 'completed', 'error');
    
    // Add new state
    if (state) {
        step.classList.add(state);
    }
    
    // Update icon
    if (icon) {
        status.textContent = icon;
    }
}

async function swapBNBToUSDT(amountBNB) {
    // Implement PancakeSwap swap logic from bridge.js
    const pancakeRouter = '0x10ED43C718714eb63d5aA57B78B54704E256024E';
    const wbnb = '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c';
    const usdt = '0x55d398326f99059fF775485246999027B3197955';

    const routerABI = [
        'function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts)'
    ];

    const router = new ethers.Contract(pancakeRouter, routerABI, wallet.signer);
    
    const path = [wbnb, usdt];
    const deadline = Math.floor(Date.now() / 1000) + 600;
    const amountOutMin = 0; // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–µ–Ω slippage calculation
    
    const tx = await router.swapExactETHForTokens(
        amountOutMin,
        path,
        await wallet.signer.getAddress(),
        deadline,
        { value: ethers.utils.parseEther(amountBNB.toString()) }
    );
    
    const receipt = await tx.wait();
    console.log('Swap completed:', receipt.transactionHash);
    
    // Return USDT amount (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É BNB)
    const bnbPrice = bnbPriceTracker.getPrice();
    return amountBNB * bnbPrice;
}

async function sendThroughStargate(usdtAmount, toAddress) {
    // Stargate bridge logic
    const stargateRouter = '0x4a364f8c717cAAD9A442737Eb7b8A55cc6cf18D8';
    
    // Simplified version - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π Stargate API
    console.log(`Bridging ${usdtAmount} USDT to ${toAddress} on Polygon...`);
    
    // Simulate bridge transaction
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    return 'bridge_tx_hash';
}

async function waitForUSDC(proxyAddress, expectedAmount) {
    console.log(`Waiting for ${expectedAmount} USDC on ${proxyAddress}...`);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    // –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    console.log('USDC received!');
}

async function approveUSDCForBetting(proxyAddress, amount) {
    const usdcAddress = '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174';
    const ctfExchange = '0x4bFb41d5B3570DeFd03C39a9A4D8dE6Bd8B8982E';
    
    const usdcContract = new ethers.Contract(
        usdcAddress,
        ['function approve(address spender, uint256 amount) returns (bool)'],
        wallet.signer
    );
    
    const amountWei = ethers.utils.parseUnits(amount.toString(), 6);
    
    const tx = await usdcContract.approve(ctfExchange, amountWei);
    await tx.wait();
    
    console.log('USDC approved for CTF Exchange');
}

async function placePolymarketOrder(usdcAmount, makerAddress, ownerAddress) {
    console.log('=== Placing Polymarket Order ===');
    console.log('Selected market:', selectedMarket);
    console.log('Selected token:', selectedToken);
    console.log('Token ID:', selectedToken.id);
    console.log('Maker address (proxy):', makerAddress);
    console.log('Owner address (wallet):', ownerAddress);
    console.log('USDC amount:', usdcAmount);
    
    const result = await polymarketOrderSigner.placeOrder({
        tokenId: selectedToken.id,
        makerAddress: makerAddress,
        ownerAddress: ownerAddress,
        usdcAmount: usdcAmount,
        side: 'BUY',
        signer: wallet.signer
    });
    
    console.log('Order placement result:', result);
    return result;
}

// Auto-complete order when user is already on Polygon
async function autoCompleteOrder(order) {
    try {
        console.log('ü§ñ Auto-completing order:', order);
        
        // Check if we're on Polygon
        const chainId = await window.ethereum.request({ method: 'eth_chainId' });
        const currentChainId = parseInt(chainId, 16);
        
        if (currentChainId !== 137) {
            console.log('‚ùå Not on Polygon, cannot auto-complete');
            showPolygonSwitchReminder(order);
            return;
        }
        
        // Show auto-completion modal
        let modal = document.getElementById('orderPlacementModal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'orderPlacementModal';
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <span class="close" onclick="closeOrderModal()">&times;</span>
                    <h2>ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏</h2>
                    <div class="order-status"></div>
                </div>
            `;
            document.body.appendChild(modal);
        }
        
        modal.style.display = 'block';
        const statusDiv = modal.querySelector('.order-status');
        
        statusDiv.innerHTML = `
            <div class="info">
                ‚úÖ –°–µ—Ç—å: Polygon<br><br>
                ‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏...<br><br>
                <strong>–°–æ–±—ã—Ç–∏–µ:</strong> ${order.marketQuestion}<br>
                <strong>–ò—Å—Ö–æ–¥:</strong> ${order.outcome}<br>
                <strong>–°—É–º–º–∞:</strong> ${order.usdcAmount} USDC<br><br>
                <small>–ü–æ–¥–ø–∏—à–∏—Ç–µ –≤ –∫–æ—à–µ–ª—å–∫–µ...</small>
            </div>
        `;
        
        // Restore market context
        selectedToken = {
            id: order.tokenId,
            outcome: order.outcome,
            price: order.price
        };
        
        selectedMarket = {
            slug: order.marketSlug,
            question: order.marketQuestion
        };
        
        // Re-initialize wallet on Polygon network
        wallet.provider = new ethers.providers.Web3Provider(window.ethereum);
        wallet.signer = wallet.provider.getSigner();
        wallet.address = await wallet.signer.getAddress();
        
        console.log('üëõ Wallet address:', wallet.address);
        
        // Check saved proxy address for this user
        const savedProxy = localStorage.getItem(`polymarket_proxy_${wallet.address}`);
        
        if (savedProxy && ethers.utils.isAddress(savedProxy)) {
            wallet.proxyAddress = savedProxy;
            console.log('üîë Using saved proxy address:', wallet.proxyAddress);
        } else {
            // If no saved proxy, try to calculate
            await wallet.calculateProxyAddress();
            console.log('üîë Calculated proxy address:', wallet.proxyAddress);
        }
        
        // Verify it matches the order's proxy address
        if (wallet.proxyAddress.toLowerCase() !== order.proxyAddress.toLowerCase()) {
            throw new Error(`Proxy address mismatch!\nExpected: ${order.proxyAddress}\nGot: ${wallet.proxyAddress}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π Proxy –∞–¥—Ä–µ—Å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`);
        }
        
        console.log('‚úÖ Proxy address verified');
        
        // Place order with API credentials
        const orderResult = await placePolymarketOrder(
            parseFloat(order.usdcAmount),
            wallet.proxyAddress,  // maker (proxy)
            wallet.address        // owner (wallet)
        );
        
        console.log('‚úÖ Order placed:', orderResult);
        
        // Clear pending order
        localStorage.removeItem('pendingOrder');
        
        statusDiv.innerHTML = `
            <div class="success">
                ‚úÖ <strong>–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞!</strong><br><br>
                <strong>Order ID:</strong> ${orderResult.orderID}<br><br>
                <a href="https://polymarket.com/event/${order.marketSlug}" target="_blank" class="btn btn-primary">
                    üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Polymarket
                </a>
                <br><br>
                <button onclick="closeOrderModal(); window.location.reload();" class="btn btn-secondary">
                    –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        `;
        
    } catch (error) {
        console.error('‚ùå Auto-complete failed:', error);
        
        const modal = document.getElementById('orderPlacementModal');
        if (modal) {
            const statusDiv = modal.querySelector('.order-status');
            statusDiv.innerHTML = `
                <div class="error">
                    ‚ùå <strong>–û—à–∏–±–∫–∞:</strong><br>
                    ${error.message}<br><br>
                    <button onclick="closeOrderModal()" class="btn btn-secondary">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            `;
        }
    }
}

// Show reminder to switch to Polygon
function showPolygonSwitchReminder(order) {
    let modal = document.getElementById('orderPlacementModal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'orderPlacementModal';
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content">
                <span class="close" onclick="closeOrderModal()">&times;</span>
                <h2>‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏</h2>
                <div class="order-status"></div>
            </div>
        `;
        document.body.appendChild(modal);
    }
    
    modal.style.display = 'block';
    const statusDiv = modal.querySelector('.order-status');
    
    statusDiv.innerHTML = `
        <div class="info" style="background: #fff3cd; border: 2px solid #ffc107; padding: 20px;">
            ‚ö†Ô∏è <strong>–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Å–µ—Ç—å –Ω–∞ Polygon</strong><br><br>
            
            <div style="background: white; padding: 15px; border-radius: 5px; margin: 15px 0;">
                <strong>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–≤–∫–µ:</strong><br>
                <strong>–°–æ–±—ã—Ç–∏–µ:</strong> ${order.marketQuestion}<br>
                <strong>–ò—Å—Ö–æ–¥:</strong> ${order.outcome}<br>
                <strong>–°—É–º–º–∞:</strong> ${order.usdcAmount} USDC<br>
            </div>
            
            <strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Rabby Wallet:</strong><br><br>
            
            <ol style="text-align: left; margin-left: 20px;">
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ Rabby</li>
                <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å (—Å–≤–µ—Ä—Ö—É)</li>
                <li>–í—ã–±–µ—Ä–∏—Ç–µ <strong>Polygon</strong></li>
                <li>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è</li>
                <li>–°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</li>
            </ol>
            
            <br>
            <div style="background: #e7f3ff; padding: 10px; border-radius: 5px;">
                üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!<br>
                –°—Ç–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –Ω–∞ Polygon.
            </div>
        </div>
    `;
}

function showError(message) {
    const container = document.getElementById('marketsList');
    container.innerHTML = `<div class="error">${message}</div>`;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ proxy –∞–¥—Ä–µ—Å–æ–º
async function manageProxyAddress() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
        if (!wallet.address) {
            const shouldConnect = confirm('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫. –ü–æ–¥–∫–ª—é—á–∏—Ç—å?');
            if (shouldConnect) {
                await connectWallet();
            }
            return;
        }

        const currentProxy = localStorage.getItem(`polymarket_proxy_${wallet.address}`);
        
        const message = currentProxy 
            ? `–¢–µ–∫—É—â–∏–π Proxy –∞–¥—Ä–µ—Å:\n${currentProxy}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`
            : '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Polymarket Proxy Wallet –∞–¥—Ä–µ—Å:\n\n(–ù–∞–π—Ç–∏ –Ω–∞ polymarket.com –≤ –ø—Ä–æ—Ñ–∏–ª–µ)';
        
        const newProxy = prompt(message, currentProxy || '');
        
        if (newProxy === null) return; // –û—Ç–º–µ–Ω–∞
        
        if (newProxy === '') {
            // –£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
            localStorage.removeItem(`polymarket_proxy_${wallet.address}`);
            alert('Proxy –∞–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–≤–∫–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —Å–Ω–æ–≤–∞.');
            return;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        if (!ethers.utils.isAddress(newProxy)) {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞!');
            return;
        }
        
        const checksummedProxy = ethers.utils.getAddress(newProxy);
        localStorage.setItem(`polymarket_proxy_${wallet.address}`, checksummedProxy);
        
        alert(`‚úì Proxy –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n${checksummedProxy}`);
        
        // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –º–æ–¥–∞–ª –æ—Ç–∫—Ä—ã—Ç
        const proxyDisplay = document.getElementById('userProxyAddress');
        if (proxyDisplay) {
            proxyDisplay.textContent = checksummedProxy;
        }
    } catch (error) {
        console.error('Error managing proxy:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
}