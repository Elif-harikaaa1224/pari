// ===================================
// –ö–û–î –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–¢–†–ê
// ===================================

// ============================================================================
// 1. –î–û–ë–ê–í–ò–¢–¨ –í server.js (–ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ app.use(express.static('public'));)
// ============================================================================

// Proxy endpoint –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –≤ Polymarket
app.post('/api/place-order', async (req, res) => {
    try {
        const order = req.body;
        console.log('üì§ Placing order in Polymarket:');
        console.log('  Token ID:', order.tokenId);
        console.log('  Maker:', order.maker);
        console.log('  Side:', order.side);
        console.log('  Amount:', order.makerAmount);
        
        const response = await axios.post(
            'https://clob.polymarket.com/order',
            order,
            {
                headers: {
                    'Content-Type': 'application/json'
                },
                timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥
            }
        );
        
        console.log('‚úÖ Order placed successfully!');
        console.log('  Order ID:', response.data.orderId);
        console.log('  Status:', response.data.status);
        
        res.json(response.data);
        
    } catch (error) {
        console.error('‚ùå Error placing order:');
        
        if (error.response) {
            // –û—à–∏–±–∫–∞ –æ—Ç Polymarket API
            console.error('  Status:', error.response.status);
            console.error('  Data:', error.response.data);
            res.status(error.response.status).json({
                error: error.response.data.error || error.response.data.message || 'Polymarket API error',
                details: error.response.data
            });
        } else if (error.request) {
            // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
            console.error('  No response from Polymarket');
            res.status(503).json({
                error: 'No response from Polymarket API. Try again later.'
            });
        } else {
            // –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
            console.error('  Error:', error.message);
            res.status(500).json({
                error: error.message
            });
        }
    }
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user-orders/:address', async (req, res) => {
    try {
        const address = req.params.address;
        const response = await axios.get(
            `https://clob.polymarket.com/orders?maker=${address}`,
            {
                headers: {
                    'Content-Type': 'application/json'
                }
            }
        );
        
        res.json(response.data);
    } catch (error) {
        console.error('Error fetching user orders:', error.message);
        res.status(500).json({ error: error.message });
    }
});

// ============================================================================
// 2. –ó–ê–ú–ï–ù–ò–¢–¨ –í public/js/polymarket-order.js 
//    (–Ω–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é postOrder –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º)
// ============================================================================

async postOrder(signedOrder) {
    try {
        console.log('üì§ Sending order to Polymarket...');
        console.log('Order data:', {
            tokenId: signedOrder.tokenId,
            maker: signedOrder.maker,
            side: signedOrder.side,
            price: signedOrder.price
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à backend —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å CORS
        const response = await fetch('/api/place-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(signedOrder)
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('‚ùå Server error:', errorData);
            throw new Error(errorData.error || `HTTP ${response.status}: Failed to place order`);
        }

        const result = await response.json();
        console.log('‚úÖ Order placed successfully!');
        console.log('Result:', result);
        
        return result;

    } catch (error) {
        console.error('‚ùå Error posting order:', error);
        
        // –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if (error.message.includes('Failed to fetch')) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.');
        }
        
        throw error;
    }
}

// ============================================================================
// 3. –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –£–õ–£–ß–®–ï–ù–ò–ï showBridgeProcess –≤ public/js/markets.js
//    (–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ await showBridgeProcess(amountBNB, proxyAddress);)
// ============================================================================

// –í —Ñ—É–Ω–∫—Ü–∏–∏ placeBet() –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏:
// await showBridgeProcess(amountBNB, proxyAddress);

// –î–æ–±–∞–≤–∏—Ç—å:

// –ó–∞–∫—Ä—ã—Ç—å bridge modal
document.getElementById('bridgeModal').style.display = 'none';

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
alert(`‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ polymarket.com –≤ —Ä–∞–∑–¥–µ–ª–µ "My Bets"`);

// –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
await updateBalance();

// –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ç–æ–≤
await loadMarkets();

// ============================================================================
// 4. –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–£–¢–¨: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ë–ï–ó bridge
//    (–µ—Å–ª–∏ bridge –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é)
// ============================================================================

// –í public/js/markets.js –∑–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é placeBet –Ω–∞:

async function placeBet() {
    const amountBNB = parseFloat(document.getElementById('betAmountBNB').value);
    
    if (!amountBNB || amountBNB <= 0) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ BNB');
        return;
    }

    try {
        // 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        if (!wallet.address) {
            alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
            return;
        }

        console.log('=== Starting bet placement ===');
        console.log('Connected wallet address:', wallet.address);
        console.log('Bet amount (BNB):', amountBNB);

        // 1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Polygon
        await wallet.switchToPolygon();
        wallet.signer = wallet.provider.getSigner();

        // 2. –ü–æ–ª—É—á–∏—Ç—å proxy wallet
        const userAddress = await wallet.getAddress();
        const proxyAddress = await proxyWalletManager.getOrCreateProxyWallet(userAddress, wallet.signer);
        
        console.log('User address:', userAddress);
        console.log('Proxy address:', proxyAddress);

        // 3. –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –°—Ä–∞–∑—É —Ä–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É
        // (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å USDC –Ω–∞ proxy –∞–¥—Ä–µ—Å–µ)
        
        const bnbPrice = bnbPriceTracker.getPrice();
        const usdcAmount = amountBNB * bnbPrice;
        
        const confirmation = confirm(
            `–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫—É?\n\n` +
            `–°–æ–±—ã—Ç–∏–µ: ${selectedMarket.question}\n` +
            `–ò—Å—Ö–æ–¥: ${selectedToken.outcome}\n` +
            `–°—É–º–º–∞: ${usdcAmount.toFixed(2)} USDC\n` +
            `–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${(1/selectedToken.price).toFixed(2)}\n` +
            `–í—ã–∏–≥—Ä—ã—à: ${(usdcAmount/selectedToken.price).toFixed(2)} USDC\n\n` +
            `‚ö†Ô∏è –í–ê–ñ–ù–û: –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å USDC –Ω–∞ Polygon –∞–¥—Ä–µ—Å–µ:\n${proxyAddress}`
        );
        
        if (!confirmation) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        alert('‚è≥ –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Å—Ç–∞–≤–∫–∏...');

        // –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é
        const result = await placePolymarketOrder(usdcAmount, proxyAddress);
        
        console.log('Bet placed:', result);
        
        // –£—Å–ø–µ—Ö!
        alert(
            `‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞!\n\n` +
            `Order ID: ${result.orderId}\n` +
            `–°—Ç–∞—Ç—É—Å: ${result.status}\n\n` +
            `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ polymarket.com`
        );
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª
        document.getElementById('bettingModal').style.display = 'none';
        
        // –û–±–Ω–æ–≤–∏—Ç—å UI
        await updateBalance();

    } catch (error) {
        console.error('Bet placement error:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏:\n\n' + error.message);
    }
}

// ============================================================================
// 5. –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ polymarket-order.js
//    (–í –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ placeOrder)
// ============================================================================

async placeOrder(params) {
    console.log('=== PLACE ORDER DEBUG ===');
    console.log('1. Input params:', params);
    
    const { tokenId, makerAddress, usdcAmount, side, signer } = params;
    
    console.log('2. Token ID:', tokenId);
    console.log('3. Maker address:', makerAddress);
    console.log('4. USDC amount:', usdcAmount);
    console.log('5. Side:', side);
    console.log('6. Signer:', signer ? 'OK' : 'MISSING!');
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
}

// ============================================================================
// 6. –ü–†–û–í–ï–†–ö–ê: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
//    (–û—Ç–∫—Ä—ã—Ç—å F12 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ markets –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å)
// ============================================================================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: Proxy –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω?
console.log('Proxy address:', localStorage.getItem(`polymarket_proxy_${wallet.address}`));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –¶–µ–Ω–∞ BNB —Ä–∞–±–æ—Ç–∞–µ—Ç?
console.log('BNB price:', bnbPriceTracker.getPrice());

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –í—ã–±—Ä–∞–Ω –º–∞—Ä–∫–µ—Ç?
console.log('Selected market:', selectedMarket);
console.log('Selected token:', selectedToken);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω?
console.log('Wallet address:', wallet.address);
console.log('Wallet signer:', wallet.signer);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ë–∞–ª–∞–Ω—Å USDC
wallet.getUSDCBalance(localStorage.getItem(`polymarket_proxy_${wallet.address}`))
    .then(balance => console.log('USDC balance:', balance));

// ============================================================================
// 7. FAQ: –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
// ============================================================================

/*
–ü–†–û–ë–õ–ï–ú–ê: "Proxy address not found"
–†–ï–®–ï–ù–ò–ï: –ù–∞–∂–∞—Ç—å "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Proxy" –∏ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é

–ü–†–û–ë–õ–ï–ú–ê: "Insufficient USDC balance"
–†–ï–®–ï–ù–ò–ï: –ü–æ–ø–æ–ª–Ω–∏—Ç—å USDC –Ω–∞ proxy –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ bridge –∏–ª–∏ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥

–ü–†–û–ë–õ–ï–ú–ê: "Invalid signature"
–†–ï–®–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ (–≤–ª–∞–¥–µ–ª–µ—Ü proxy)

–ü–†–û–ë–õ–ï–ú–ê: "Network mismatch"
–†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Polygon (–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

–ü–†–û–ë–õ–ï–ú–ê: "CORS error"
–†–ï–®–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–¥–µ—Ç —á–µ—Ä–µ–∑ `/api/place-order` –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é

–ü–†–û–ë–õ–ï–ú–ê: "Order rejected by Polymarket"
–†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ:
  1. Proxy –∞–¥—Ä–µ—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
  2. USDC –µ—Å—Ç—å –Ω–∞ proxy –∞–¥—Ä–µ—Å–µ
  3. –ü–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º
  4. –°—É–º–º–∞ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ($1-2)
*/
